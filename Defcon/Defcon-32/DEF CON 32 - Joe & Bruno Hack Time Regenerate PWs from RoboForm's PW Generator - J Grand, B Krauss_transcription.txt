{
  "webpage_url": "https://www.youtube.com/watch?v=N2eKCAzM2kw",
  "title": "DEF CON 32 - Joe & Bruno Hack Time: Regenerate PWs from RoboForm's PW Generator - J Grand, B Krauss",
  "description": "Imagine if you could go back in time to precompute all passwords that could have been generated by an off-the-shelf password generator? With RoboForm versions prior to June 2015, you can!\n\nIn Joe and Bruno's Guide to Hacking Time, Joe and Bruno share their story, process, and experiences of reverse engineering RoboForm, finding a weakness in the randomness of the password generation routine, and creating a wrapper to generate all possible passwords that could have been generated within a specific time frame. Their work, using Cheat Engine, Ghidra, x64dbg, and custom code, was done specifically to help someone recover over $3 million of Bitcoin locked in a software wallet, but the attack could be exploited against any account or system protected by a password generated by RoboForm before their 7.9.14 release when this problem was fixed.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2596,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 6.96s | This text was transcribed using whisper model: large-v2

 Welcome. Thank you for coming. So it turns out, these are our presentation screens or whatever.
7.84s - 12.16s |  This is a pretty graphically heavy talk. So if you want to actually see what we're talking about,
12.16s - 16.64s |  you might want to move up. If you don't want to get too close to us, that's okay. This is being
16.64s - 22.48s |  recorded. It's being live streamed also. Hello, internet. But a lot of we're showing some code
22.48s - 26.72s |  and we're showing some stuff on there and it's basically going to be impossible. I don't even
26.72s - 31.20s |  know what we're going to see on here. So anyway, thank you for coming. Yeah. Move up. Move up.
31.20s - 36.40s |  Come on. I feel like I'm a rock star. It's like, come on. Move up. Come on. Close the pit.
38.16s - 43.20s |  Yeah. Cool. Oh, is this... Okay. This is actually water. So Defcon's not going to poison me.
44.32s - 49.68s |  Are we doing this now? Like while... Is this recording? Yeah. This better be.
51.68s - 55.44s |  Is this recording? Yeah. Okay. Can we do it anyway?
56.32s - 60.48s |  Okay. Not allowed to drink on camera or something. Okay. Here, you do your thing.
62.24s - 69.44s |  I haven't done it. Okay. So you don't want to explain the whole like... So Defcon has a history
69.44s - 76.16s |  of new people doing speakers and doing a shot when they do that. So this is a new speaker. So we're
76.16s - 84.24s |  going to do a shot. Yes. Shots. We can, we can turn that down too. Yeah. So this is water by the
84.24s - 89.12s |  way. So you don't have to be pressured into actually drinking whatever that is. So cheers.
89.12s - 93.20s |  Oh, I mean, it's all water. Right. So this is Bruno's first talk at Defcon, which is awesome.
93.20s - 97.68s |  And I think it's, I don't know, my 21st talk, but I've never gotten to do this. So very cool.
97.68s - 110.48s |  Cheers. Refreshing. All right. Now we can start. Yeah. So thank you for coming to the talk. My name
110.48s - 120.48s |  is Joe Grand and I am a hardware hacker and I like hacking on things and yeah, I love coming
120.48s - 129.68s |  to Defcon. So that's me. Yeah. And I'm Bruno. I'm from Germany. Was the first time to went to Defcon
129.68s - 136.40s |  two years ago and now I'm first time on the stage as you have seen and yeah, really excited about it.
137.36s - 142.56s |  Yeah. So this, this presentation is about a project that we did together to reverse engineer
142.56s - 147.36s |  the Robo form password generator. And we'll get into all of the details, but the presentation is,
147.36s - 152.32s |  is about hacking time. And this is not a sensational talk. We don't have a name for
152.32s - 160.08s |  our discovery but it really kind of shows the problems that we fail. I guess the, the advantages
160.08s - 164.88s |  that we face if we're hackers but kind of the problems of systems and security flaws and how
164.88s - 170.72s |  they are going to kind of persist even if things have been fixed. Uh, so we're not the first to
170.72s - 175.76s |  hack time, even though we would like to think that we are. Um, so we have some examples. I don't even
175.76s - 178.96s |  remember what, which one is this? Oh yeah. The time machine. Has anyone read this? I know
178.96s - 183.28s |  death veggie has probably read the time machine, but HG Wells. Yes. Okay. Has anybody else read
183.28s - 188.40s |  this? Yeah. It was sort of like the first mention, right. Of like traveling back in time to change
188.40s - 193.68s |  something else. Uh, of course there are so many things of, of people hacking time. I chose a
193.68s - 200.16s |  couple. I probably missed some. Um, anybody guess what, is that even playing? I can't, I can't see
200.16s - 205.68s |  from here. Oh, it's playing now. Anybody guess what it is before the words come up? Did, did you
205.68s - 211.76s |  cheat? Is it already? Oh no, it's already up there. Okay. Doctor who? Yeah. So, um, time lords of
211.76s - 217.60s |  course. Put this one in for, for Leap Bunny of the hardware hacking village. So back to the future
217.60s - 222.24s |  of course, right? Hacking time. And my personal favorite, which is why I'm wearing the t-shirt,
222.24s - 228.16s |  is Hacker Man. Has anybody seen Kung Fury? Woo. Yeah. Like 10 people. Yeah. Awesome. Oh,
228.16s - 234.08s |  there's Jesse back there. Um, yes. Kung Fury. Hacker Man is the star of the show. So hacking
234.08s - 240.32s |  time to go back and do all sorts of stuff that, uh, needed to be properly completed. Um, what have
240.32s - 247.42s |  I missed? Am I like gr- are we grossly misrepresenting hacking time? Is there any other,
247.42s - 256.38s |  what was it? The what? The tenant? The tenant. Okay. Star Trek? Star Wars? I don't know.
256.38s - 261.10s |  Nobody's, no Star Wars? Star Trek is, yeah. So, okay. So there's a lot of hacking time, right?
261.10s - 267.34s |  We're not the first. Um, this thing that we found is kind of related to random number generators,
267.34s - 271.18s |  pseudo random number generators. We're also not the first people to discover a poorly seeded
271.18s - 276.38s |  pseudo random number generator. Um, we've known about this as a security problem for a long time.
277.34s - 281.90s |  But it still persists over and over again. And we'll explain if you're, if you're not familiar
281.90s - 285.90s |  with different types of random number generators, we'll explain that and then sort of go into the
285.90s - 293.34s |  details of why this is a problem in this particular situation. Yeah. So the, um, generating random
293.34s - 300.86s |  numbers is a complex problem for, um, programmers and to really, uh, generate true random numbers,
300.86s - 307.74s |  you will need some type of, um, entropy source. So for example, uh, from the environment,
307.74s - 314.22s |  there's people using lever lamps, for example, or some diodes, which are creating noise to then
314.22s - 320.30s |  really create this random stream of data. And on the opposite of that, there's, um,
320.30s - 328.22s |  these pseudo random number generators and, um, even, and they work with a seat. So with
328.22s - 336.38s |  the seat in place, uh, you will always generate the same sequence of random bytes, um, with the
336.38s - 345.90s |  same seat. And this is exactly, um, where we can attack. If we know the same seat, um, at some
345.90s - 351.74s |  point, uh, as it was used in the past, then we can also generate the same randomness today.
352.70s - 359.74s |  Yeah. And I guess this is own, you know, this is a known kind of issue with security and
359.74s - 365.98s |  cryptography and generating random numbers being hard. Uh, it's hasn't really been solved, uh,
365.98s - 369.42s |  besides using some of those entropy sources that are better, but that's not really a practical
369.42s - 374.62s |  thing. So this is even like a CWE, you know, a commonly known vulnerability. If you're designing
374.62s - 379.10s |  systems that have some sort of secure element, you would probably want to study some of this
379.18s - 383.02s |  stuff, right? So it's sort of, I feel like everybody in the security community probably
383.02s - 390.46s |  knows these things, but maybe, maybe not. Um, but if you're selling a piece of software that is sold
390.46s - 395.10s |  as a secure thing, you would probably want to know these things. Um, so here is like with CWE,
395.10s - 399.58s |  this is one of many about pseudo random number generators, um, being these deterministic
399.58s - 403.18s |  generators, right? Like what Bruno said, if you know what's coming in, you know, all the numbers
403.18s - 408.62s |  coming out, which maybe isn't always a problem depending on how it's implemented. So here I can't
408.62s - 411.66s |  even see it on here. So yeah, it's just sort of highlighting the main things about pseudo random
411.66s - 419.02s |  number generators being deterministic. Uh, we recommend maybe like don't use time as a seed
419.02s - 423.42s |  because time is a known value. And if you're able to know what time is, even if you don't know
423.42s - 428.62s |  exactly the time of how the random number generator is being seeded, you know, a range of the numbers
428.62s - 431.82s |  that are going to come out of the random number generator. And that's what we can take advantage
431.82s - 440.66s |  of as we're hacking on things. So even though, um, many programmers know it's a really bad thing to
440.66s - 448.34s |  do, it still happens. And here are some examples like, um, where it happens. One is the Netscape
448.34s - 455.22s |  Navigator, which is, uh, which thing I think I used the time and then the process ID plus the
455.86s - 463.78s |  process ID of the parent process. So, um, really reducing the entropy so you can easily guess, um,
464.10s - 472.02s |  the seed. Same with the, with a router from D-Link. Um, this one actually used just the time
472.02s - 481.46s |  and then generated the VW, uh, VWPS, uh, pin via these, uh, via time, which basically would allow
481.46s - 489.06s |  you if you listen to the network and wait for some VWPS, uh, to exactly know what pin it will be.
489.38s - 498.02s |  Then there's, uh, QTPath. I think it's the default, uh, Unix password manager. And this one was
498.02s - 504.82s |  actually really bad because it not even used the time, but the milliseconds. So it, in the end,
504.82s - 513.06s |  it came down to 1000 possible seeds, which were then used to generate these passwords. Um, another
513.06s - 519.14s |  example, the Kaspersky password manager also using the time. Telnod Compass X, there's actually
519.14s - 526.18s |  a German company which is doing alert systems and they had the management software to, um,
527.14s - 534.34s |  write to this FID chips, which you can then unlock doors and everything. And to generate the AES key,
534.34s - 540.98s |  they also just use time. So you could go through the door and then brute force the, um, the key
540.98s - 549.54s |  just in a couple of seconds. And Milksat, um, I think this one was, um, also, uh,
550.90s - 556.66s |  there was a fallback for some operating systems, which also use time. And then this one was used
556.66s - 564.34s |  to generate private keys for Bitcoin, Bitcoin privacy keys. And then, uh, yeah, they got
564.34s - 571.62s |  generated and I think swiped the wallets like two years ago or one year ago. So, uh, yeah,
571.62s - 578.34s |  really, really bad. And yeah, then there's, uh, Roboform where we talk about today.
578.34s - 583.14s |  Yeah. And this is just a sampling, but you can see the years go back to 1995 and it's not just
583.14s - 588.74s |  software, it's not hardware, it's web stuff. And that's, what's really interesting about this. So
588.74s - 594.98s |  this particular project where we're picking on Roboform and, um, I mentioned I'm traditionally
594.98s - 598.90s |  a hardware hacker. I normally hack on, you know, embedded systems and electronics and that's sort
598.90s - 603.70s |  of what I love to do. But I also in that same time have dabbled in reverse engineering software,
603.70s - 608.58s |  usually firmware related to hardware, but it was fun to do a project like this where we're looking
608.58s - 614.34s |  purely at hardware and seeing these implementation problems. Roboform is a password generator, um,
614.34s - 621.06s |  and password manager. It's claimed, they claim to be the first. So maybe around 2002, uh, not
621.06s - 626.50s |  only to generate random passwords, random passwords, but also to store them, you know, so you can go
626.50s - 629.46s |  back to them. And there's a lot of different password generators that are out there now.
629.46s - 633.54s |  Uh, I'm just quoting directly from their website, um, because I didn't want to say anything that
633.54s - 638.34s |  was incorrect and get in trouble. So used by millions of people worldwide, individual users
638.34s - 644.90s |  and small businesses to government agencies and leading fortune 500 companies, uh, made by a
644.90s - 649.70s |  company called cyber systems, I think in, uh, Virginia or Washington DC. So yeah, one type of
649.70s - 654.66s |  password generator. And the reason that we started looking at this is Bruno and I had been working on
654.66s - 659.14s |  some projects of recovering cryptocurrency for people in, in various ways, hardware and software
659.14s - 665.62s |  stuff. And, um, somebody had contacted us and said, Hey, I have a lot of Bitcoin, uh, locked
665.62s - 670.98s |  and I had used the Robo form password generator to generate my passwords that I then encrypted.
670.98s - 677.54s |  Um, or did they encrypt the private key with? Yes. They, they had a true crypt container and
677.54s - 681.86s |  there they saved the password for the wallet that they had used with Robo form, right? So
681.86s - 686.10s |  they generated the Robo form password, saved it in a text file, encrypted it with true crypt.
686.10s - 691.62s |  That partition got corrupted. So he lost his password to the wallet. So that's sort of how
691.62s - 698.18s |  we got into this. And, um, at first when he emailed, it was like, what are we going to brute
698.18s - 703.62s |  force a 20 character? He thought it was 20 characters, special characters, numbers, letters,
703.62s - 708.26s |  like computationally infeasible to brute force, right? We're just not going to do that. Um, so I
708.26s - 712.58s |  remember turning them down and then Bruno was like, well, wait a second. Like it was a year later. I
712.58s - 717.06s |  think he contacted us again. And Bruno was like, well, I had worked on this other project. Maybe
717.06s - 722.26s |  we should take a look at it. Do you want to tell that? Yeah. So it was a password generator,
722.26s - 727.14s |  not very popular. It was called wireless key generator. And like the name suggested, it was
727.14s - 733.70s |  to create a password for your wifi. And we had a customer before who used exactly that one and
733.70s - 738.98s |  also encrypted his wallet with it. So we had to look back then and it just looked so crappy that
738.98s - 745.86s |  I thought, okay, this can't be secure. And it turned out it wasn't. So it was, I think using
745.86s - 752.66s |  visual basics six. And this was like the worst randomness I ever saw in a coding language,
752.66s - 758.58s |  because it was not even like that. You need to guess the seed, but it was the way they implemented
758.58s - 765.06s |  it. You have just an array of 2 million values that are pre-computed random. And then the seed
765.06s - 773.06s |  only defines like the start position of that, um, of that list. So it will just after 2 million,
773.62s - 780.50s |  generations, no matter what seed you will always have the generated all possible values. So this
780.50s - 785.86s |  one was a really, really bad. Yeah. And this, and this, even though like we got into this because
785.86s - 791.14s |  of cryptocurrency, like this is by no means a cryptocurrency singular problem. Anybody that
791.14s - 795.78s |  has used this version of Roboform and prior versions of Roboform are susceptible to this
795.78s - 799.46s |  type of attack. Actually, that's a question. How many of you have even heard of Roboform?
799.86s - 805.38s |  Okay. Like maybe a quarter. How many of you actually use Roboform?
807.14s - 814.82s |  1, 2, 3, 4, 5. That's pretty good. Okay. Um, did you use it in 2015 or earlier?
815.86s - 821.78s |  Now we're like really got one. Okay. Have you changed your passwords? Okay. Yeah. Cool. I
821.78s - 826.42s |  guess maybe you will after the talk, but yeah, cool. Okay. Um, right. So it really is, it's
826.42s - 830.98s |  something where you could pre-compute, you know, every possible password that had been generated.
830.98s - 836.74s |  And that's what we're going to show you. So we started getting into this project and, um, Bruno
836.74s - 841.78s |  started digging through the changelog where, where this is a closed source piece of software.
843.14s - 847.62s |  So all we have really is the changelog, anything that the vendor decides to make public changelog
847.62s - 855.17s |  and, and the binaries. Um, but Bruno had noticed this change here. Yeah. So we looked at the time
855.17s - 863.09s |  and then said, okay, it needs to be version, I think 7.9 or something. And then, um, we saw after
863.09s - 870.13s |  that version, um, there was an entry which said increase randomness of generated passwords, which
870.13s - 875.17s |  is pretty weird. That's pretty weird for a password generator to say, wouldn't you imagine all of them
875.17s - 879.65s |  would be, but that was the clue. So we basically knew from the person we were dealing with Michael,
879.73s - 887.97s |  uh, when his last access to the wallet was, which was like 2013, I think. So we kind of looked and
887.97s - 891.81s |  seen like, okay, what did anything change? And that's when we saw this increase randomness of
891.81s - 897.09s |  generated password. We go, wait, are all of the prior versions doing something that is not random
897.09s - 901.65s |  or less random or weaker. And it just happened that the version that we were looking at fell
901.65s - 906.53s |  into that. So this applies to everything up to this version. Uh, and then we'll talk about sort
906.53s - 914.21s |  of what has happened since this version, which we don't actually know is the TLDR of that. Um,
914.21s - 919.33s |  okay. So let's get into the process of, of what we did. Um, Bruno lives in Germany. I live in
919.33s - 926.05s |  Portland, Oregon. Uh, and we did a lot of remote work, which was super fun. And for those who know
926.05s - 930.53s |  me, like I don't normally work with a lot of people at one time. I like to sort of hole up and
930.53s - 935.25s |  just hack on stuff alone. So it's like finding people to work with is really cool. Um, and it
935.25s - 940.29s |  was a lot of fun, like these late night zoom sessions, sharing screens, like hacking on stuff.
940.29s - 945.49s |  We did end up doing some stuff together in person at a conference. Um, it was like, I don't know,
945.49s - 950.05s |  24 or 30 hours straight or something. And then I got on the airplane and fell asleep the entire
950.05s - 956.45s |  time. So it was really like a fun example of like true hacking together. It was really cool. So the
956.45s - 960.69s |  process, we basically started with some memory analysis and we'll explain each of these steps.
960.93s - 966.29s |  Memory analysis first, static analysis, uh, dynamic analysis. And then we built some custom
966.29s - 969.97s |  wrapper to handle all of that. So if you're from the software world, you're probably like, oh,
969.97s - 974.85s |  this is like a totally normal thing to do. But from a hardware world, it's like it, it, it was
974.85s - 978.93s |  interesting to be able to do it in like a full process, kind of go through everything instead
978.93s - 983.01s |  of just dabbling with like, you know, one, one tool or the other. So that's, you know, we kind
983.01s - 989.65s |  of go through this process and then, um, hopefully we profit. Okay. So let's go into the demo of
989.73s - 994.37s |  things. Um, we were going to do live demos, but Defcon really was like, you should just record
994.37s - 999.73s |  your demos and we know the demo gods, blah, blah, blah. But I like to live on the edge. Um, but I
999.73s - 1003.25s |  finally gave in and said, okay, we're just recording these. So these are videos. Um,
1003.97s - 1008.21s |  and you can play along at home, you know, afterwards and, and see that we're not lying
1008.21s - 1011.73s |  or anything. So Bruno's going to talk about cheat engine and we'll go into all the other steps.
1012.29s - 1019.33s |  Yeah. So first we use cheat engine and it's, uh, originally made for games. I personally use it as
1019.33s - 1024.61s |  a kid for, um, cheating, my favorite single player game. So I didn't have to grind hundreds
1024.61s - 1032.93s |  of hours to get my gear and you can actually also use it for hacking. So, um, hope the video's
1032.93s - 1039.20s |  playing now. Is it playing? We can't see that it's playing. So yes. Okay. Dean is going to be
1039.20s - 1045.12s |  our video, our video thumbs upper for every video. Is that okay? Perfect. Okay. Dean says, okay. So
1045.12s - 1051.28s |  what we did here is very simple. So with cheat engine, you can scan, edit, um, even you can free
1051.28s - 1057.12s |  some parts of the memory so it can't be modified by the program anymore. And here we just searched
1057.12s - 1065.52s |  for the generated password and we found it. And which means that, um, other password generators,
1065.52s - 1072.24s |  for example, try to decrypt it in some way that you can't extract it from the memory or, um,
1072.24s - 1077.68s |  try to hide it or remove it after a certain amount of time. Um, because there's a risk involved if
1077.68s - 1084.32s |  you have plain text passwords in the memory, but, um, Roboform doesn't. And that's already good.
1084.32s - 1091.76s |  And you can actually see that it's, um, found twice. That's one time for the, um, GUI. So what
1091.76s - 1098.88s |  is displayed and one time is, um, in the memory of the internal logic. Um, we found it. Yeah. And
1098.88s - 1102.88s |  right when we saw that, we're like, oh wait, it's in the clear. Perfect. And then I think we were
1102.88s - 1106.48s |  even, there was a couple of different, there was like a DLL and an executable and we're trying to
1106.48s - 1110.88s |  figure out which piece of the code was plopping that into memory. But knowing that was there,
1110.88s - 1115.92s |  we're like, all right, now it's in memory. Let's try to find out what routine is actually putting
1115.92s - 1119.60s |  it in the memory and then kind of working backwards so we could then figure out where
1119.60s - 1125.44s |  the actual password generator routine was happening within this entire blob of stuff.
1125.44s - 1129.44s |  Because Roboform, again, does not just generate passwords. There's all this other stuff that we
1129.44s - 1134.48s |  had to kind of dig through to find the right thing. So we use Ghidra. Thank you NSA. I'll
1134.48s - 1139.36s |  continue to thank the NSA for that. One of the few things I'll thank them for, or maybe the only
1139.36s - 1146.56s |  thing actually. Um, so this is, uh, kind of, it's going to show, let's see, I can't see it again,
1146.56s - 1150.16s |  but this is like, this should be a time lapse. Okay. Dean says, yeah. So there's, you know,
1150.16s - 1154.16s |  we're not going to show the whole process, but we basically started with this giant binary
1154.16s - 1158.96s |  and we dug down little by little starting to, to label things of what we thought it was of,
1158.96s - 1163.60s |  oh, that looks like this. And we would change parameters and look again. And like, uh, oh,
1163.60s - 1166.96s |  sorry, with Ghidra, we didn't, we were just looking at the, at the static, static side.
1166.96s - 1171.68s |  So things weren't changing. Um, but we basically narrowed it down to a point and Bruno found this
1171.68s - 1177.12s |  first of like, that called a system time, right? It was like, get time. I think it's time 64.
1177.12s - 1182.00s |  And, um, that was like, wait, this piece of code is calling time and then it's doing some stuff.
1182.00s - 1186.08s |  And then it's calling SRAM. So seeding the, the pseudorandom number generator,
1186.08s - 1189.84s |  that was a pretty big giveaway. And there was a couple other places where there was
1190.64s - 1194.72s |  the pseudorandom number generator being seeded, but there was no other call to time.
1194.72s - 1200.48s |  And we basically figured out that this section was the section that we were actually interested
1200.48s - 1204.88s |  in of this whole piece of code, like these couple lines where it's calling the system time,
1204.88s - 1208.40s |  manipulating it, which basically what it was doing, because you can press the,
1208.40s - 1213.36s |  every time you press the generate password button, it hits this code. If you press the
1213.36s - 1218.80s |  button more than one time a second, if there was no manipulation of that time, the time wouldn't
1218.80s - 1223.60s |  increase because this call system time is just returning time in Unix time since 1970, January
1223.60s - 1229.68s |  1st, 1970, uh, in seconds. So if you hit the button multiple times, they basically added some
1229.68s - 1233.20s |  additional manipulation in there. So you can press the button multiple times within a second and not
1233.20s - 1239.12s |  get the same password. Um, and they basically are just adding a fixed constant or they subtracting
1239.84s - 1244.64s |  adding or subtract, or they're subtracting a subtraction. Yeah. Yeah. They were subtracting.
1244.64s - 1247.68s |  No, they were, it was something that messed us up and we'll actually talk about that,
1247.68s - 1251.68s |  but they were doing a manipulation and it basically is just jumping either ahead or
1251.68s - 1257.04s |  backwards in time. So you can still generate the password. If you know, all of the time,
1257.04s - 1261.28s |  it was just so they couldn't, you know, duplicate the same time in that same button press. So a
1261.28s - 1266.96s |  pretty weak type of manipulation, then it calls SRAM and then it goes into the actual password
1266.96s - 1270.96s |  generation routine. I guess what we could have done and what we were originally thinking is like,
1270.96s - 1276.32s |  Oh, we can just pull out that password generating block, put it into our own code and then just sort
1276.32s - 1280.72s |  of build the wrapper around it. Um, but it was so complicated when we started digging into the
1280.72s - 1285.28s |  function that gets called after that was just ridiculous and we didn't really want to go through
1285.28s - 1290.56s |  that process. So we eventually thought like, okay, if we could confirm this, we'll just build some,
1290.56s - 1294.72s |  a wrapper that will go and touch those values and then just let the rest of the code that's in
1294.72s - 1302.24s |  the DLL do its thing. So once we could identify the, the static portion of code where we knew
1302.24s - 1307.52s |  that that pseudorandom number generator was being seeded with time, then we went to X64 debug and
1307.52s - 1313.28s |  we were actually using X32 debug. Uh, and this was our dynamic analysis to be able to debug the
1313.28s - 1318.00s |  system as it's running in real time and see what was happening with the registers and with other
1318.00s - 1323.28s |  low level CPU stuff. So then we could see if we could manipulate it. And this is going to be
1323.28s - 1331.68s |  interesting because again, I can't see stuff here. So we're going to start it and I'm pretty sure
1331.68s - 1336.32s |  what I'm showing first is, uh, there's a bunch of break points that we set so we can actually,
1336.32s - 1340.08s |  you know, run the code and then it's going to hit the break point at certain times when
1340.08s - 1345.60s |  certain pieces of code are run. We basically set the break point that we care about at that same
1345.60s - 1353.65s |  spot that I just showed. So when system time is being called and then I'm probably running the,
1353.65s - 1358.77s |  running the, the, the debugger. Eventually the password generator is going to start, the GUI's
1358.77s - 1363.09s |  going to start. And even when you first start the GUI, there's already one password that's in
1363.09s - 1367.81s |  there. So it actually already runs the password generator once. Uh, so that, that manipulation
1367.81s - 1373.49s |  has already happened once, which for us threw us off again a little bit. And I think it's
1373.49s - 1376.93s |  eventually going to stop, but I'm generating passwords and if you look, which you probably
1376.93s - 1384.69s |  can't see, the EAX register is directly correlated to the system time plus like whatever
1384.69s - 1391.25s |  manipulation maybe there was from the, from the call before. And has it stopped yet? Is it just
1391.25s - 1399.01s |  sitting still? Still going. Okay. So, um, I'm going to generate a couple passwords and then at
1399.01s - 1403.41s |  one point I'm going to write down, there was one value that I don't have on this slide, it's on
1403.41s - 1410.21s |  the next slide, I think it's like 66 CF 6550 in hex for EAX corresponds to one particular
1410.21s - 1415.73s |  password. And that's the one that we're going to end up redoing once we let the system generate
1415.73s - 1422.13s |  some more. Has it stopped? Okay. So this is what we care about. Out of all of that, the two
1422.13s - 1426.93s |  arrows, there's one arrow pointing to EAX and then there's one arrow pointing to the password
1426.93s - 1432.37s |  that's been generated. So those two things are completely intertwined. Anytime we enter the EAX
1432.37s - 1436.77s |  value of that particular time, manipulated time value, it's going to generate that particular
1436.77s - 1444.81s |  password. So let's continue on with that part of the demo and now I'm going to generate another
1444.81s - 1449.75s |  password just to show again that EAX continues to increment because time is incrementing. And
1449.75s - 1454.59s |  then once we get it sort of cleared the EAX value with a new one, then we'll go back and replace
1454.59s - 1459.49s |  it with one we know to show that we can, you know, regenerate passwords that have already been
1459.49s - 1464.45s |  generated from the past. I'm just going to watch your reactions so I'll know when it actually
1464.45s - 1469.45s |  happens. When it does go, ooh, or something, the tension. Ooh, right? So, so now we have
1485.94s - 1491.10s |  regenerated a password. In theory with a properly, you know, computationally crypt,
1491.10s - 1496.28s |  cryptographically secure system, that shouldn't happen. But this proved to us with the debugger
1496.30s - 1500.64s |  of like, nice, now we can basically feed in whatever EAX value we want for time and the
1500.64s - 1504.84s |  manipulation doesn't really matter because that just changes kind of the date range a little bit.
1504.84s - 1509.24s |  But we could pre-compute everything if we were able to tap right into that part, hook into that
1509.24s - 1515.62s |  part of the DLL, add our wrapper code around it to get to that part. And this was, this was
1515.62s - 1519.32s |  pretty cool. Oh, and this is the hacking time, right? So now do you get it, right? We're hacking
1519.32s - 1524.70s |  time to change that. So that was, yeah. Um, okay, so then the wrapper code, this was something
1524.72s - 1528.18s |  just to put it all together, give us a way that we could pre-compute all the passwords that we
1528.18s - 1533.62s |  wanted to for the date range that mattered for us. And we did it in, I think just, what was it?
1533.62s - 1538.36s |  Visual, I don't even remember us. It was in Visual Studio, yeah, Visual Studio. And we did it in
1538.36s - 1543.90s |  C, which I know is like taboo now, can't use C, but I use C. And I use assembly language. And it
1543.90s - 1548.40s |  actually was, it was cool because we had to tap into some of the, we had to do some assembly
1548.40s - 1553.94s |  language to, to move some things around to get it properly executing in the DLL. Um, and C and
1553.94s - 1557.98s |  assembly language really for sort of hardware hackers, that's like, that's what you want to see.
1557.98s - 1563.78s |  Um, because that's the type of level that we work with. So here's the wrapper code. Um, I have a
1563.78s - 1567.82s |  couple slides sort of scrolling through the code. This is all open source by the way. It's on my
1567.82s - 1573.36s |  website. There's a link in the slides and these slides will be up on the DEF CON server after the
1573.36s - 1580.10s |  session, whenever DEF CON puts them up. Uh, they're also on my website, which is grandideastudio.com.
1580.10s - 1585.26s |  I put them on my, that's like my formal website. But everything is there, so you could, um,
1585.26s - 1589.30s |  already work with it. And somebody already has, which we'll talk about. So, yeah, this code
1589.30s - 1594.24s |  basically is, um, let's see. The video's kinda showing different sections, but this first
1594.24s - 1599.90s |  section we're just setting the time values that we want, the time range that matters. And then it
1599.90s - 1603.14s |  should be scrolling down a little bit, but kinda showing some functions as we're, as we're
1603.14s - 1607.84s |  getting ready. We're basically, we need to have code that's gonna hook into the DLL, so it has to
1607.90s - 1614.54s |  search through the DLL. This is not an exported function. Is that the right terminology? It's not
1614.54s - 1617.84s |  a function that you're normally supposed to access from the outside world, right? I see
1617.84s - 1621.98s |  nodding. Okay, so it's something where we know the code is there, but it's not given to the, you
1621.98s - 1625.72s |  know, to the other executable to normally be able to, to work with. So we had to search for a
1625.72s - 1630.52s |  known signature string that we found just by looking in the debugger, uh, to say, okay, let's
1630.52s - 1635.32s |  just look for these kind of opcodes and, uh, and hope that's the right section in the DLL. So
1635.34s - 1642.82s |  we're kinda searching through for that. And let's see, what else? We're gonna look for the,
1642.82s - 1646.80s |  yeah, so these are all the functions and set system time. I think here's the real code. So
1646.80s - 1651.06s |  yeah. This code here, we're, you know, we're calling system time and we're basically setting
1651.06s - 1661.56s |  our computer at whatever system time we want. And then, oh, there's also, there's some other
1661.56s - 1664.56s |  constants I'll get into. There's like a bunch of weird stuff that we had to end up doing to
1664.56s - 1668.44s |  make it work. It seems, it seemed easy in theory of like, oh, let's just hook into this DLL and
1668.46s - 1676.21s |  like call the code. But things have to be prepared before that to actually make it work. So
1676.21s - 1681.65s |  where we are in here, is it still scrolling or can you, still scrolling and now it stopped?
1681.65s - 1687.23s |  Okay. So yeah, this is the, the part that should be searching through the DLL, finding that
1687.23s - 1691.47s |  portion, finding the address of the DLL with the, that, those opcodes that we want. And
1691.47s - 1697.91s |  that's the exact same stuff that we saw, um, in x64 debug and in Ghidra. Uh, the upper memory
1697.93s - 1700.73s |  is going to change though, right? Because we don't know where the DLL is going to be loaded in
1700.73s - 1704.67s |  memory. So we kind of know, but being able to search through it, uh, automatically seem to make
1704.67s - 1708.35s |  sense. Then there's a whole bunch of different parameters. I don't know if you noticed on that
1708.35s - 1711.95s |  robo form screen, but there's one for, do you want to use uppercase, lowercase? Do you want to
1711.95s - 1716.25s |  use letters? Do you want to use numbers? Do you want special characters? Those are all
1716.25s - 1721.13s |  individual settings that get fed into that password generator routine after the pseudorandom
1721.13s - 1725.43s |  number is generated. So we had to figure out how those parameters were configured before we
1725.45s - 1729.25s |  could actually call the, the function that was generating the password. Uh, and that took a
1729.25s - 1733.59s |  lot of trial and error and a lot of debugging and um, as it should be, right? If it was too
1733.59s - 1738.37s |  easy, it wouldn't be that much fun. Um, but it was really interesting to kind of see that a lot
1738.37s - 1742.13s |  of those values had to be placed in certain memory locations and specific things. And that's
1742.13s - 1746.67s |  what that array at the beginning was of like, we just happened to see that, oh, this setting
1746.67s - 1749.31s |  was in this one and then we have a couple of bytes that we don't care about and then we add
1749.33s - 1754.33s |  another one. And then we get to the cool stuff, which we're basically looping and we're
1756.93s - 1761.27s |  calling system time, setting all the values the right way. And then we get into the assembly
1761.27s - 1764.37s |  language, which is my favorite part. And I don't really know, I think it's maybe this part
1764.37s - 1768.35s |  that shows the rest of it, but we're moving the parameters into the right spot. We're moving
1768.35s - 1772.31s |  everything into the right spot. And normally what was happening is we were getting crashes
1772.31s - 1777.09s |  for days, right? Or over and over again. And then finally it's like, we're going to try another
1777.13s - 1779.63s |  thing, try another thing. And then it finally worked and we generated a password. We're like,
1779.63s - 1784.61s |  holy crap. Um, then we built the loop around it. So we're just doing this over and over again,
1784.61s - 1788.35s |  setting the time, calling the DLL, you know, getting the password out. Cause the password
1788.35s - 1793.35s |  gets set into some register that, you know, that's where it was that we saw in cheat engine.
1793.35s - 1797.41s |  Then we push that into a variable in C and then we print that out. And uh, turns out it wasn't
1797.41s - 1802.93s |  the most efficient way to do it, but it definitely like was enough to generate the passwords.
1802.97s - 1807.21s |  So we had all of our passwords. Is this, is this actually showing the password generator?
1807.21s - 1811.31s |  Oh, it is. Okay. Right. So we actually got it working. Um, this is generating all of the
1811.31s - 1817.29s |  passwords starting from whatever 2013 date range we wanted, uh, at about a hundred passwords
1817.29s - 1821.35s |  per second, which for us was fine because we only had, it was like a couple of months worth.
1821.35s - 1826.13s |  So it wasn't a huge amount and it took on my machine, I think it took like 20 hours or
1826.13s - 1827.83s |  something, but yours was like super long.
1827.97s - 1833.97s |  Yeah. I think you had the M2 SSD. So Windows really limits the amount of time.
1833.97s - 1839.01s |  Yeah. There was like disc access, right? Like, yeah. So I needed like three or four days.
1839.01s - 1842.75s |  Yeah. To do the list. Right. And that got really frustrating when it's like, we tried
1842.75s - 1846.85s |  different password lists that we were generating, plopped them into the password cracker, you
1846.85s - 1852.73s |  know, tried, tried to unlock this, this Bitcoin wallet. And, um, we kept failing and we're
1852.73s - 1856.93s |  like, Oh my God, is this like, is this our coding problem? Are the parameters wrong?
1856.93s - 1862.07s |  Are the dates wrong? Uh, we kept calling this guy, Michael. And, um, yeah, and he was
1862.07s - 1867.71s |  getting like pretty annoyed. I was talking to him and he was like, in the end he was
1867.71s - 1871.71s |  like, Oh no, not again, this guy. Yeah. He's like, Oh, they're bugging us again. And like
1871.71s - 1874.95s |  he, and then at one point he was like, I'm going to see if I can remember it through
1874.95s - 1880.39s |  hypnosis. Uh, and we're like, Oh boy, now we're in trouble. Um, but it turned out, so
1880.39s - 1885.09s |  he had sent us a list of passwords that he had used for other things and all of them
1885.09s - 1892.53s |  except one were 20 characters with specials or without, I think, I think so. He told us
1892.53s - 1897.45s |  he used specials original password, but there were some which didn't use specials. Right.
1897.45s - 1900.49s |  So he was so sure it had special characters, but it turns out there was a couple that didn't.
1900.49s - 1904.85s |  So we're like, let's just regenerate without special characters because that changes the
1904.85s - 1911.65s |  entire password that comes out. So we finally did that. And Bruno sends me a message like
1911.65s - 1916.49s |  maybe, uh, like 20 minutes after we started running that list. Yeah. It's very exciting.
1917.33s - 1922.25s |  And I also didn't thought it would happen because he was so sure. He said like, nah,
1922.25s - 1928.17s |  it, it, it was special characters like 99% and then, um, we got it. And then we got it.
1928.21s - 1931.13s |  Yeah. So here we, we had to block out all this. Thank you.
1937.51s - 1941.95s |  We had to block out all of the, the transaction history because I know that some of you, if
1941.95s - 1945.71s |  not all of you would go and try to track it down and now like, you know, see what this
1945.71s - 1951.27s |  guy's doing and spy on the blockchain and whatever else hackers do these days. Um, but
1951.27s - 1956.27s |  we can see the password was actually generated, uh, May 15th at 2013. And that was actually
1956.27s - 1960.51s |  a little earlier than, than we thought also based on the transaction history.
1960.51s - 1964.63s |  But it could also be that he pressed the button twice, right?
1964.75s - 1968.59s |  Yeah. Right. He could have pressed the button enough to like change where the, where that
1968.59s - 1969.63s |  manipulation was happening.
1969.67s - 1974.59s |  Because the, like how they did it, they, I think increased then the time by a fixed
1974.59s - 1977.51s |  amount, which was like around eight or nine days.
1977.71s - 1981.43s |  Yes. And it, right. So it was subtracting a negative number and that's what threw us
1981.43s - 1986.35s |  off. We thought it was adding, uh, or we thought it was just subtracting the number, but
1986.35s - 1991.11s |  it was subtracting a negative number, which is adding. So we were going the wrong way
1991.11s - 1994.59s |  in time to try to create our list, but ultimately it ended up working, but it was pretty
1994.59s - 1997.51s |  dark for a while. There was a couple of days when it was like, we just went through all
1997.51s - 2000.95s |  this reverse engineering work. We can generate all these passwords. And it was like, is
2000.95s - 2004.71s |  all of this work going to go wasted? Uh, I mean, I guess it wouldn't be wasted anyway
2004.71s - 2008.07s |  because other people could use it. But like from our perspective, it would have been a
2008.07s - 2017.71s |  bummer. Um, as part of this process, uh, sometimes I make YouTube videos and this was a
2017.71s - 2021.19s |  project where we were like, this would be super fun to film this process and make a
2021.19s - 2025.99s |  fun video out of it to kind of show, you know, the story and the drama. Um, so how many
2025.99s - 2031.43s |  of you have seen our video on this? Oh wow. That's like, that's impressive. That's like
2031.43s - 2036.11s |  a quarter maybe. That's good. Um, everyone else, hopefully you watch it. And, uh, these
2036.11s - 2042.31s |  are just some behind the scenes of what it takes to film videos like without just using
2042.31s - 2047.55s |  your, you know, iPhone. Um, but this particular project, the, the customer who had this
2047.55s - 2054.15s |  wallet is from Germany, but he was in Barcelona on vacation and Bruno's in Germany. So
2054.15s - 2060.15s |  we started kind of our, our process in the video in Germany. We did interviews, um, and
2060.15s - 2067.79s |  then flew, Oh, here's our film crew by the way. And then we flew over to Barcelona and
2068.19s - 2072.35s |  Michael, the, this guy thought that we were just going to ask him more questions and
2072.35s - 2076.91s |  interview him again. Like he didn't know that by that point we had done it. Um, so he
2076.91s - 2080.99s |  was like, Oh God, now they're just going to ask more things. Um, so it was actually
2080.99s - 2084.15s |  pretty funny. We're not going to reveal like the full thing cause that's why you should
2084.15s - 2087.83s |  watch the video. It's way more exciting when you watch it there instead of on a tiny
2087.83s - 2092.79s |  screen here. Um, but we basically set up this whole environment like, um, you know,
2092.79s - 2098.15s |  publishers clearing house style kind of reveal, uh, which was totally ridiculous and
2098.15s - 2102.31s |  yeah, very, very fun. Um, and that's part of it is like being able to share this
2102.31s - 2106.91s |  information and, and, you know, share some technological stuff is super fun and being
2106.91s - 2111.79s |  able to make videos and like get creative with things that we're doing otherwise equally
2111.79s - 2115.47s |  as fun. So this stuff is really cool. And also you can see how, you know, safety third,
2115.83s - 2119.51s |  um, for those who actually can see the picture, there's two guys holding a gigantic
2119.51s - 2124.95s |  ladder as one guy's like fiddling with some lamps and electrical stuff. Uh, I probably
2124.95s - 2136.86s |  shouldn't have documented that, but definitely not safe. So yeah. Um, once we found
2136.86s - 2140.82s |  this issue and we solved our problem, we're like, awesome. Okay. Michael's taken care
2140.82s - 2146.58s |  of. We recovered his Bitcoin. Yay. But part of the process of hacking in my opinion is
2146.58s - 2150.70s |  sharing that information with other people so they can learn from it and use it. And
2150.70s - 2155.02s |  that's equally as important as that's equally as important as the success of the
2155.02s - 2159.34s |  project, right? If you just hoard all your information and not share it with anybody
2159.34s - 2163.70s |  else, what's the point of hacking? I, I think that's, that's something I feel very
2163.70s - 2168.30s |  strongly about and something that, that has been sort of ingrained in me since my
2168.30s - 2172.90s |  younger days of being a hacker. So we solved this problem and we're like, all right, how
2172.90s - 2177.38s |  are we going to disclose this? You know, there's responsible disclosure, um, which I
2177.38s - 2182.78s |  don't really like that term because it implies that not doing that is irresponsible. Um,
2182.86s - 2188.58s |  and there's all sorts of things like when I was at the loft back in a long time ago, uh,
2188.70s - 2193.90s |  we would kind of tell the vendor like, Hey, we're going to release this in a week or
2193.90s - 2195.86s |  whatever and really force them to fix things.
2195.86s - 2198.94s |  And now there's a little more kind of ethical dilemma about like how much time do you
2198.94s - 2204.54s |  give a vendor? Do you tell the vendor? We looked up and, and went to the Robo form
2204.54s - 2208.78s |  website, looked around online, looked at different bug bounty platforms and couldn't
2208.78s - 2212.66s |  find any indication that this company had worked with hackers before or worked with
2212.66s - 2216.90s |  good faith researchers. So we got really worried because in this day and age you sort
2216.90s - 2222.58s |  of expect software companies will have a security at whatever contact or something,
2222.58s - 2229.02s |  right? Like it was scary to not see that. So we couldn't find it. We start discussing
2229.02s - 2232.82s |  like what's the, what's the reality of the situation? Are we going to get sued? We
2232.82s - 2236.58s |  know from DEF CON history there was even a talk actually, I think was it supposed to
2236.58s - 2241.78s |  be today that received a cease and desist letter and now they're working with lawyers
2241.78s - 2245.14s |  and maybe they're going to be able to give the talk on Sunday. Like it's a real risk
2245.14s - 2248.94s |  for, for researchers. And nobody wants to get sued, especially when it's a company that
2248.94s - 2252.98s |  has lots of lawyers and we're like individual people that don't want to deal with that.
2252.98s - 2257.82s |  Um, but if it came down to it, we would. Uh, and I remember also talking to my wife about
2257.82s - 2261.02s |  this of like, should we release this information? Like I really want to talk about it at DEF
2261.02s - 2265.70s |  CON and do something with Bruno like on stage. And she's like, you like, hell of course,
2265.70s - 2269.42s |  like you're a hacker, like you need to go against these companies and do it. And if
2269.42s - 2280.23s |  you get sued, at least you'll have given the talk first, which I agree with. So that,
2280.23s - 2285.75s |  that's my little rant. So, um, we reached out to, to Kim Zetter who is a fantastic journalist
2285.75s - 2289.75s |  with cybersecurity. Um, and it has really been pushing, you know, the good of what hackers
2289.75s - 2294.45s |  can do. And also I was written some books about some like wild state sponsored adversary
2294.45s - 2298.63s |  type of stuff. Um, and she wants to write about the story. So we're like, great. She
2298.63s - 2303.23s |  can reach out to the company and kind of get a sense of how litigious they are, like what's
2303.23s - 2307.21s |  going on. So she wrote the story, reached out to them to get some comment about our
2307.21s - 2311.07s |  work and they basically were like, oh, we fixed the problem, not a big deal. And then
2311.07s - 2318.99s |  she wrote back and was like, well, how did you fix the problem? Nothing. Crickets. Um,
2318.99s - 2322.83s |  and I thought that was a really also another kind of indicative thing, right? Of like,
2322.83s - 2326.63s |  okay, if they're not responding, like it should be very clear if you may, if you fix a security
2326.63s - 2330.59s |  problem, first of all, you should notify all your customers if you make a significant change
2330.59s - 2335.03s |  like that. Um, which didn't happen, but you would also want to be very proud of your changes
2335.03s - 2340.27s |  and say, this is what we did to fix it. So you can trust our software that you're running.
2340.27s - 2344.27s |  None of that. This is, it almost feels like I'm in the nineties again, talking about this
2344.27s - 2350.91s |  stuff. Um, so she didn't get any, any meaningful comment. Article came out, no, no comment.
2350.91s - 2354.75s |  You know, a lot of journalists reached out, nothing. Um, maybe this is, maybe this is
2354.75s - 2359.59s |  more typical than I think, but I was really surprised of not getting any sort of feedback.
2359.91s - 2363.91s |  Uh, and then we decided, okay, article came out, same time, let's release the video and
2363.91s - 2369.43s |  then let's do our Defcon talk. And I think it's, you know, it's, it's a concern. I guess
2369.43s - 2373.59s |  I also want to ask how many of you have been in the same situation of like finding some
2373.59s - 2378.79s |  vulnerability and being worried about talking to the vendor and getting sued. That's a lot
2378.79s - 2386.03s |  of people. That's probably 25, 30 people just in this room. Um, multiply that by the number
2386.11s - 2390.35s |  of people at Defcon, multiply that by the number of people outside who are also hacking.
2390.35s - 2395.55s |  Like, is this a significant enough problem? And vendors know that. Um, but it is, it is
2395.55s - 2401.31s |  a real thing. So anyway, yeah, we released all of the information and uh, and I think
2401.31s - 2406.79s |  that's the important way to go. And, and hopefully, hopefully I, I don't, uh, make my next video
2406.79s - 2412.47s |  from jail or something like that. Um, so some future work, right? So we don't know how they
2412.47s - 2416.61s |  fixed the problem. Maybe future versions, you know, they say they increased the randomness
2416.61s - 2421.25s |  of generated passwords. Maybe they did. We searched through the code. We couldn't find
2421.25s - 2426.39s |  any direct calls to system time. It could have been obfuscated. We don't know. Maybe
2426.39s - 2430.19s |  that's future work. Maybe, maybe not for us. Maybe for one of you who go, ooh, let's go
2430.19s - 2436.23s |  dig into this, right? And see what they fixed. Um, already since we released our code, uh,
2436.27s - 2442.57s |  my friend, our friend Dean Pierce from Portland, woohoo, 503, um, has already taken our code
2442.57s - 2448.47s |  and optimized it to be over 600 times faster. Almost probably a thousand times faster depending
2448.47s - 2453.85s |  on the machine where we were generating a hundred passwords a second. Dean was generating
2453.85s - 2458.85s |  68,000 passwords a second. Uh, per core. So he made it multi-core and he removed the need to
2459.45s - 2466.29s |  directly set system time which requires administrator access by getting rid of that whole
2466.29s - 2471.93s |  call to system time and just putting a value into that register. So you don't have to call
2471.93s - 2475.89s |  system time, you just plop whatever Unix time you want into there. And then what else did you
2475.89s - 2480.13s |  do? You did one other thing, um, oh you don't need to, uh, to call the DLL each time. Which
2480.13s - 2484.01s |  in our code we're calling the DLL because it's like resetting some things that we're not
2484.01s - 2489.31s |  exactly sure about which takes a lot of time. You're just reseeding the random number
2489.31s - 2499.55s |  generator directly. Oh, okay, so it's knopping out part of the, so you're patching a
2499.55s - 2503.39s |  different part of the DLL, knopping out some parts that's reseeding something so you don't
2503.39s - 2507.99s |  have to keep calling the, the DLL which is a huge time savings. Um, and then he made a
2507.99s - 2512.51s |  command line. Our code you had to like change the parameters, recompile it, run it. His is
2512.51s - 2516.41s |  now command line, you put in your start time, your end time, your parameters and you let it
2516.43s - 2520.87s |  run. And now you can create your rainbow, you know, rainbow tables of all of your
2520.87s - 2526.31s |  passwords with the RoboForm password generator, uh, that have been computed prior to
2526.31s - 2532.65s |  apparently their fix in, uh, in 2015 for 7.9.14. And maybe, maybe other stuff. Who knows
2532.65s - 2539.61s |  what's gonna come out of this? Uh, and a couple resources, again this, these slides will
2539.61s - 2543.67s |  be available. These are clickable links, um, but all the code is available. All of Dean's
2543.67s - 2548.05s |  code is also available, um, on GitHub and also linked to from the website. And then the
2548.07s - 2554.21s |  original Wired article and then the video, uh, that is, um, is on YouTube. So that's our
2554.21s - 2557.95s |  story about hacking RoboForm. Any last words?
2557.95s - 2562.95s |  I mean, this should also really put in the perspective that, uh, I showed you the
2564.99s - 2569.99s |  examples of the, um, poor seeded random number get generators and there was like you
2571.73s - 2576.73s |  standard Unix password, uh, manager and Kaspersky. So it is probably, it is probably
2578.21s - 2582.31s |  many things we haven't checked yet just because we thought, okay, this must be secure.
2582.31s - 2583.41s |  So.
2583.41s - 2587.51s |  Yes. Widespread, right? This is not the only thing. It's still happening. Go out there
2587.51s - 2592.51s |  and, and find random number generators and you too can also hack time. So thank you for
2593.13s - 2593.49s |  coming.