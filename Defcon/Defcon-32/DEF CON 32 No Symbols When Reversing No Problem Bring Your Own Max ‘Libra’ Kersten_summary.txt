**Introduction to Reversing Without Symbols**

- **Challenge of Unknown Functions**: Opening unknown files without matching function signatures can make analysis slow and tedious.
- **Importance in Malware Analysis**: Missing symbols create blind spots, especially critical for blue team perspectives.

**Overview of Methodology**

- **Goal**: Share a method to efficiently handle files with unknown functions.
- **Example**: Golang-based qBit family is used; applicable to any binary type.
- **Tools**: Focus on Ghidra and its scripts, FunctionID, and BSim databases.

**Understanding Symbols**

- **Definition of Symbols**: Function names in binaries that should be recognizable and unambiguous.
- **Types of Code in Binaries**: Differentiates between runtime, libraries, and user code.

**Runtime and Libraries**

- **Golang Example**: Runtime is statically compiled within binaries leading to code overlap.
- **Library Significance**: Libraries might indicate specific versions or malware tracking.

**User Code**

- **Significance**: Unique user code is crucial for malware researchers to identify shared code across binaries.

**Recovering Symbols**

- **Methods**: Use metadata, FunctionID, and BSim features.
- **Ghidra Features**: Function ID for hashing functions and BSim for behavioral similarity.
- **Script Automation**: Automate the process using scripts for function ID databases.

**Case Study: Qubit Stealer**

- **Function ID Analysis**: Identify and rename functions post-default analysis in Ghidra.
- **BSim Application**: Allows using BSim databases without original Ghidra project access.

**Function ID and BSim Script Details**

- **Function ID Script Usage**: Automates ingestion and creates unique function ID databases.
- **BSim Functionality**: Utilizes decompiler and p-code for identifying code overlaps.
- **Automation Benefits**: Reduces manual effort, speeds up analysis, and improves accuracy.

**Creating and Sharing Databases**

- **Process**: Compile binaries and create signatures for sharing.
- **Signature Generation**: Includes Golang, Boost, and other libraries.

**Analysis Results**

- **Qubit Stealer Analysis**: Default analysis finds 2016 functions; function ID and BSim recover significant portions.
- **Improvement Methods**: Identify metadata, create signatures, and apply logic for better analysis.

**Conclusion and Additional Resources**

- **GitHub Resources**: Scripts and databases available post-talk.
- **Future Work**: Suggestions for improving signature accuracy and automation processes.

**Q&A Summary**

- **BSim and Compilers**: Discusses BSim's effectiveness across different compilers and optimization levels.
- **Optimization Challenges**: Compiling libraries in various options for accurate signatures.