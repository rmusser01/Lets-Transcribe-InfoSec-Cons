**Kubernetes Attack Simulation**

- **Kubernetes Adoption in Organizations**:
  - Organizations are transitioning to **Kubernetes** for application hosting.
  - **SOC's mission** changes from monitoring servers/networks to container orchestration platforms.
  - Need for **detective capabilities** in Kubernetes environments.

- **Challenges for Offensive Security Practitioners**:
  - Developing strategies for **continuous Kubernetes threat emulation**.
  - Adversaries adapt to rapidly changing infrastructure technologies.
  - Importance of **prevention and detection** in managing risks.

- **Proactive Security Approach**:
  - **Purple teams** collaboration for Kubernetes cluster security.
  - Comprehensive guide for Kubernetes security informed by research and **attack simulations**.
  - Key advice for planning and executing **attack detection exercises**.

**Introduction to Kubernetes**

- **Kubernetes Basics**:
  - Consists of worker machines called **nodes** running containerized applications.
  - Managed by the **control plane**.
  - Requires a **container runtime** and the **kubelet** to communicate with the control plane.

- **Kubernetes Components**:
  - **API server**: Heart of the cluster, facilitates communication.
  - **Pods**: Basic building block in Kubernetes, can contain multiple containers.
  - **Resources**: Include secrets, services, and are grouped into namespaces.

- **Security and Authorization**:
  - **RBAC** (Role-Based Access Control) defines permissions.
  - **Service accounts** authenticate using tokens like **JWTs**.

**Threat Modeling and Attack Surfaces**

- **Threat Modeling**:
  - Essential for understanding risks and tailoring security exercises.
  - Questions to address: **assets to protect**, potential attack origins, and reasons for targeting Kubernetes.

- **Attack Surfaces**:
  - **Container level**: Compromised web services or backdoored images.
  - **Node level**: Potential access to other resources and higher privileges.
  - **External threats**: Leaked credentials, malicious users.

- **Objectives of Attacks**:
  - **Workloads**: Unauthorized access to data and sensitive information.
  - **Compute resources**: Targeted for financial gains via cryptocurrency mining.
  - **Cloud infrastructure**: Seeking access to underlying infrastructure.

**Approaches to Attack Simulation**

- **Purple Team Methodology**:
  - Collaboration between offense and defense to understand **TTPs**.
  - Opt for collaborative engagement to help blue teams understand attacker behaviors.

- **Simulation Frameworks**:
  - **ART (Atomic Red Team)**: Limited support for Kubernetes control plane attacks.
  - **Stratus Red Team**: Built for cloud, supports Kubernetes test cases.
  - **Pirates**: Can run within the cluster but lacks customization.

- **Leonidas Tool**:
  - Extended to support Kubernetes, open source.
  - Focus on extensibility and easy test case writing.
  - Enables running within the cluster and managing resources.

**Security Monitoring and Logs**

- **Importance of Logs**:
  - Essential for **security monitoring** and detecting attacks.
  - **Cluster-level logging**: No standard architecture, user-implemented.

- **Log Sources**:
  - **Application logs**: Ephemeral, collected via kubectl logs.
  - **Kubernetes components**: API server, kubelet, etc.
  - **Cloud provider logs**: Crucial for overall ecosystem security.

- **Audit Logs**:
  - **MVP of Kubernetes attack detection**.
  - Records interactions with the control plane.
  - Not enabled by default, requires configuration.

**Detection Engineering**

- **Alert Queries**:
  - Capture suspicious activities using **verbs and resources**.
  - Define behaviors in **Sigma rules** for management and distribution.

- **Available Solutions**:
  - Tools like **Falco** or **Tetragon** monitor containers for suspicious activities.
  - **eBPF** enables EDR style analysis of syscalls.

**Conclusion and Key Takeaways**

- Building Kubernetes detective capability is a journey.
- Understanding threats and applying collaborative attack simulation methods is crucial.
- **Leonidas for Kubernetes** released as a framework with test cases and Sigma rules.
- Emphasize **upskilling defenders** and building robust security capabilities.