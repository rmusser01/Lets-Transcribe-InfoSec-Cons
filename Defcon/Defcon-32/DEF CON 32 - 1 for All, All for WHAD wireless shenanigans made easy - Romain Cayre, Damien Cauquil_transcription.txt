{
  "webpage_url": "https://www.youtube.com/watch?v=4xjRgr4dbzU",
  "title": "DEF CON 32 - 1 for All, All for WHAD: wireless shenanigans made easy - Romain Cayre, Damien Cauquil",
  "description": "A lot of security research have recently focused on various wireless communication protocols, targeting smartphones, wireless mice and keyboards and even cars. In order to demonstrate these attacks, researchers developed dedicated tools that for most of them include some specialized firmware of their own but also rely on various unique custom host/device communication protocols. These tools work great but are strongly tied to some specific hardware that at some point will not be available anymore, or require hackers to buy more hardware to carry on to have fun with. Why not making these tools compatible with more hardware ? And why researchers always have to create their own host/device protocol when it comes to using a dedicated hardware ? Why not having one flexible protocol and related tools to rule them all ?\n\nWe will present in this talk WHAD, a framework that provides an extensible host/device communication protocol, dedicated protocol stacks and way more for hackers who love having fun with wireless protocols. WHAD makes interoperability possible between tools by allowing different hardware devices to be used if they provide the required capabilities, giving the opportunity to create advanced tools without having to care about the hardware and its firmware in most of the cases!",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2680,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.05s - 6.99s | This text was transcribed using whisper model: large-v2

 the way from France. One for all and all for WHD wireless shenanigans made easy. Please
6.99s - 14.08s |  welcome to the stage Damian and Roman.
14.08s - 22.15s |  Hello DEF CON. Ok so this is uh last talk for today on this track and we are going to
22.15s - 29.09s |  present you uh something we've been working on uh since more than two years now and this
29.09s - 40.07s |  is what? Oh. As usual. Ok so uh let me introduce ourselves. I'm Damian, Damian Coquille from
40.07s - 44.87s |  Squawk- Squawkstab. I'm the maintainer of a tool called B-T-E-L-E-J-A-C-K or B-T-E-L-E-J-A-C-K
44.87s - 51.11s |  call it what you want. Uh this is a BLE Swiss Army- Swiss Army tool and uh I love reversing
51.11s - 56.75s |  stuff as well on embedded systems. And this is Roman, the maintainer of Mirage, another
56.75s - 62.75s |  BLE Swiss Army tool but not only BLE does ZigBee and some other protocol as well. And uh he
62.75s - 67.23s |  loves cross pro- cross protocol attacks and we are going to talk a bit uh about this later in
67.23s - 72.23s |  the talk. So what is what and why we had to create this uh framework? So basically wireless
76.27s - 81.33s |  tools are a mess. A lot of researchers did a lot of research on wireless protocols and they
81.33s - 86.35s |  create a lot of tools. Different tools with different protocols and different devices and
86.35s - 91.65s |  different firmwares. Uh each firmware communicates with a host or a computer with a- a
91.65s - 97.19s |  specific protocol designed by uh each person. And basically everyone reverses the wheel
97.19s - 102.19s |  because why not? And if you are into, yep, if you are into wireless protocol hacking, you may
105.33s - 110.71s |  have to use a lot of different tools. So for BLE the classic tools B-T-E-L-E-J-A-C-K,
111.03s - 118.15s |  Mirage, uh Gattacurl, SniffID, uh are the best way to to capture information and test some
118.15s - 123.15s |  devices. And in the end you end up with a lot of devices. So if you want to be able to tackle
125.59s - 132.09s |  with all these protocols, you need to buy at least all of these. And the problem is um that it
132.09s - 138.03s |  takes a lot of space. It costs a lot uh as well. And most of this hardware uh can be
138.05s - 144.05s |  discontinued at any time. So if you want to to hack some wireless protocol, there is this tiny
144.05s - 149.73s |  hardware you didn't buy 2 years ago. And it's the only hardware that is supported for hacking
149.73s - 155.17s |  this specific protocol. So that's uh that's a shame. And basically this is just a waste of
155.17s - 159.97s |  time. And because uh you need to create a different uh each researcher create different
159.97s - 166.31s |  firmware and uh um each researcher or each person hacking, trying to hack a wireless
166.33s - 171.63s |  protocol, uh is going to face the same issues other people have already had before and uh with the
171.63s - 177.51s |  same solution as well. And uh all of this in fact creates fragmentation. And uh this is uh this is
177.51s - 188.07s |  not good for us uh this kind of fragmentation. So we uh talked a lot together and uh we try to find
191.35s - 197.35s |  a solution to solve this fragmentation issue. So uh it leads us to uh come with a solution to
199.03s - 207.03s |  three main ideas. So uh the first one uh would be to design uh communication protocol for the
208.83s - 215.33s |  communication between the host and uh the hardware that would be extensible. And either it is that
215.33s - 220.91s |  would support multiple wireless protocols, multiple physical layers uh at the same time. And of
220.93s - 228.93s |  course uh that could be open source and easy to extend. Uh the second uh big idea uh would be to
230.67s - 238.67s |  create a set of libraries, a framework, and basically a wall ecosystem uh that will allow uh some
239.51s - 247.51s |  reuse of uh various ready to use features for different hardware, different platforms. And that
247.55s - 255.55s |  be available both for the host and the firmware. And uh the third main uh idea we came with is uh that
258.47s - 266.47s |  for uh these two works uh it must uh from the beginning encourage the interoperability and the
266.47s - 274.47s |  collaboration between researchers. So uh it motivated us to build everything as open source software
274.55s - 282.55s |  to uh easily document both the use of the tools but also uh its design. So uh here comes the main uh
288.09s - 296.09s |  part uh of WAD for this project which is the WAD protocol. So we have several guidelines that have
296.67s - 302.67s |  motivated uh its development. So first uh it's a standardized protocol so we properly define the
304.71s - 312.71s |  it. Everything uh is uh documented and explained. It's uh generic so it covers uh a set of wireless
313.59s - 321.59s |  capabilities that are uh already uh in the ecosystem. It's modular so you can support multiple uh
322.25s - 329.53s |  wireless protocols. Uh and uh if you want to add more and put your own, it's a protocol which is
329.57s - 337.57s |  evolutive. So the protocol has been designed to be easily extended and improved over time. And finally
337.57s - 346.55s |  uh we also tried to make it as user friendly as possible. So uh we developed a set of C, C++, and
346.55s - 354.55s |  Python parsing libraries uh allowing to facilitate uh its integration into uh your firmware uh and so on.
355.35s - 366.35s |  So another uh key uh idea behind WAD is uh to offload most of the complexity from the firmware side to
366.35s - 374.37s |  the uh outside. So of course on the firmware side we have some CPU uh some memory limitations. And so
374.37s - 384.37s |  the idea was uh to keep only uh what is uh needed. So some atomic uh wireless primitives uh as basic as
384.43s - 391.43s |  possible. Uh and of course the operations that are time critical and that could not be offloaded to the
391.43s - 397.91s |  host. So for example the channel opening, this kind of stuff. So we keep uh a minimal logic in the
397.91s - 404.89s |  firmware and all the attack, the protocol stacks, the packet detectors and so on are implemented on the
404.89s - 415.89s |  host. So finally uh WAD has been designed uh not only uh for hackers even if we are in a hacker
415.89s - 423.89s |  conference. But uh also for uh everyone. So if you are a security researcher uh you can use it. If you are
423.89s - 431.91s |  just a wireless uh enthusiast and you want to control uh your IoT devices. Uh or if you are just uh a
432.03s - 442.20s |  curious user and you want to understand how uh your favorite wireless toy uh works.
442.20s - 448.84s |  Alright so uh what is WAD in fact? Uh Romain introduced the main concepts behind this uh this
448.84s - 454.82s |  framework. But in fact uh technically uh first the name. Because you know when you start a project you
454.82s - 461.06s |  get you got to find a name. And it's always a pain in the ass to find something yeah meaningful. Uh so
461.10s - 466.44s |  WAD stands originally for Wireless Hacking Devices because it was uh supposed to support a lot of
466.44s - 473.32s |  wireless uh uh so a lot of devices to hack into wireless protocols. And after having used this
473.32s - 480.72s |  project uh during more than a year uh yeah wireless hacking for them is also a great name because it's
480.72s - 487.42s |  uh makes things easier. And we are going to show that in multiple demos. Uh like Romain said it's
487.42s - 492.14s |  more than a protocol uh because designing a protocol a communication protocol between a host and a
492.14s - 498.50s |  device that's a thing. And this is something uh we we already did uh two of us uh for our respective
498.50s - 505.64s |  tools. But in fact providing uh uh an ecosystem with uh the protocol all libraries in Python and in C
505.64s - 511.92s |  and C++ that you can embed in your firmware and use to communicate with the host without having uh you
511.92s - 519.30s |  know uh without worrying about how the data is encoded and so on. This is uh this is a lifesaver. Uh
519.30s - 526.34s |  you when you develop a firmware compatible with this uh ecosystem you the only thing you need to worry
526.34s - 533.64s |  about is the specific code that runs and that handles all the radio frequency stuff. And uh also we
533.64s - 540.42s |  provide a lot of tools uh command line interface tools and uh maybe some are more evolved and provide
540.42s - 546.50s |  more features. But if you want to create all your own applications based on a web on this ecosystem you
546.50s - 553.64s |  can do as do it as well. And you can just use the Python client library and use it uh yeah. It's very
553.64s - 559.94s |  simple to to develop something. From the protocol perspective it's based on protocol buffers. So yeah
559.94s - 567.52s |  no surprise here. And um the protocol has been thought uh in a way that the uh host can query the
567.52s - 574.90s |  device uh about what uh the devices or capabilities are. And so basically the each device compatible
574.90s - 581.44s |  device can announce itself to the uh what ecosystem and especially to the host. Telling okay I I
581.44s - 587.58s |  support this protocol uh I can do this with this protocol packet injection or just sniffing scanning
587.58s - 596.16s |  anything. And the host adapts uh the the tools based on the uh capabilities announced by the device. And
596.16s - 601.64s |  this is a discovery protocol that has been included in WAD. And this one is mandatory for any device. Uh you
601.64s - 610.48s |  can have uh uh some hardware on the ZigBee protocol and the BLE or or even just modulation modulation
610.48s - 616.68s |  and demodulation as well. Uh but in fact you can have some you can have multiple protocols supported by a
616.68s - 625.12s |  single device with using this uh this system. Um we created a lot of firmware uh a lot of firmware. We
625.12s - 631.46s |  actually we support uh if you have a look at the top uh top half of the screen. We support basically
631.46s - 639.90s |  and natively four devices. Um some of them are based on Nordic Semiconductor NRF52 uh system and
639.90s - 649.72s |  chips. Uh so basically the there is the ESP32WROOM from Espressif. The Nucleo WL55 which is uh uh
649.72s - 658.36s |  LoRa and the Sigfox uh transceiver from STMicro uh that's supported. And uh also yeah I told you about the NRF52.
658.36s - 665.66s |  But the most interesting part is that we uh managed to create some uh adaptation layer between WAD and the old
665.66s - 673.48s |  tools such as the uh Yardstick one or the Herbatools. And in fact we we we can use all these old devices if you
673.48s - 680.44s |  can say with WAD. And this is totally transparent for you. So it's uh just it appears like a classic WAD tool or WAD
680.44s - 689.67s |  device and you can use it to do whatever you want. The WAD protocol supports a lot of uh modulations uh file
689.67s - 697.35s |  layers and other protocols. So basically this is the FSK, GFSK, MSK modulation on the physical layer. Uh so you can
697.35s - 703.69s |  do demodulate and modulate signals using your specific device. And uh obviously the BLE protocol ZigBee and so on
703.69s - 712.55s |  are also supported. Uh based on some previous research we made, Romain and I, we also added into WAD the result of
712.55s - 721.03s |  this research. So Romain published in uh 2021 uh the Wasabi uh attack. So basically this is an attack on uh or not an
721.03s - 731.27s |  attack. This is uh just a uh a way to divert the uh radio transceiver from an NRF52 uh system and chip to to make it
731.29s - 741.99s |  able to sniff and uh inject ZigBee packets. And uh last year we presented also uh some uh research at WOOD uh um which is
741.99s - 751.27s |  basically how to turn an ESP32 into a uh a device uh that can sniff and inject raw PDUs in Bluetooth no NRG uh
751.27s - 758.17s |  communication. So yeah this uh this is also supported in the firmware and uh in the WAD protocol. Not not WAD protocol but WAD
758.17s - 766.45s |  ecosystem. Uh if you want to add new protocols to this uh like Romain said it's uh extensible. So you can uh just modify the
766.45s - 774.83s |  protocol and add what you need to to implement it. All the uh uh all the translation between these messages and so on is
774.83s - 780.03s |  performed by the framework. And uh the protocol is version as well. So it is backward compatible. If you have a device with
780.03s - 788.01s |  version 1, protocol version 1, it will be supported uh as well as a protocol device with a protocol version 2 and so on. And
788.01s - 798.31s |  uh obviously we hope that uh many hackers may want to contribute to to WAD and add new protocols we didn't think about because we
798.31s - 809.93s |  maybe don't know this protocol or so on. Um we also designed our own flexible stack model. So speaking of wireless protocol,
810.33s - 819.97s |  we provide a specific flexible stack model sorry uh that is easy to modify. So basically take a BLE stack. You can just swap a
819.97s - 827.81s |  specific layer and replace it with your one with your own. You can develop your own stack layer and replace it in a in the stack. So
827.81s - 835.99s |  basically you can implement some very specific behavior if you want to test some uh unexpected uh behavior. This is a way to to do. Uh
835.99s - 843.19s |  there is a complete stack snapshot that is implemented from scratch uh in the in this model. So for it, every protocol supported,
843.19s - 851.63s |  every protocol stack we got in WAD, you can do at any time a snapshot of the old stack. Uh save this snapshot on the on your disk and
851.63s - 859.21s |  reload this snapshot later if you want to test uh something on this uh this framework. And also this uh all uh flexible stack
859.21s - 868.91s |  model uh makes uh writing unique tests very easy because you can just isolate a layer. Send inputs and check what outputs uh came and
868.91s - 879.75s |  if it's uh what you are expected from this layer. And um in WAD actually we provide uh multiple protocol stack. Uh BLE for version 4,
879.97s - 889.45s |  version 5 is on its way. Uh Logitech Unifying, uh NShock Burst from Nordic, Zigbee, RF um RFOC and lower one. So all these stacks have
889.45s - 897.13s |  been uh implemented from scratch and are flexible in a way that you can make the stack behave the way it's not really expected by the
897.13s - 905.63s |  specifications. So this uh allows uh security research uh if you want to try uh unexpected ways to to go through the stack. And uh if you
905.81s - 913.59s |  just want to use the protocol as well you can just use them and it works as expected. So this is uh this is why Romain said it was made for uh
913.59s - 923.97s |  secure cyber security specialists, researchers and also uh just uh enthusiast, wireless protocol enthusiast or just user. Um and uh uh we also
923.97s - 933.51s |  love KISS uh not the uh rug band uh obviously but the keep it simple stupid uh principle. And WAD provides a set of simple common tools and um
933.51s - 942.87s |  a mean to combine them uh to combine all these tools into uh in order to create more complex tools. Uh and we also provide some
942.87s - 950.01s |  full feature tools for those who want to just to experiment with uh a protocol. And um yeah if you are a newcomer in wireless protocol
950.01s - 959.27s |  expectation or or just if you want to play with some protocol you we got you covered. Uh just to give you an idea of what's going on with WAD
959.27s - 968.33s |  and this uh KISS principle. Um I don't know if it's really readable in the screen but uh basically we are using uh a first program called WBD
968.33s - 977.67s |  Connect to initiate a BLE connection onto a device. Then there is a pipe with the WShark which is a uh wrapper for Wireshark. And then another
977.67s - 987.65s |  pipe with WBD central profile and basically what this command does is just tells WAD to first initiate a connection to a device. Then to ask uh the
988.13s - 997.27s |  the device it's a BLE services and characteristics or just basically an enumeration performed by the uh WBD central. And every packet sent between
997.27s - 1008.41s |  the connection and the uh central which is a GATT client is monitored by Wireshark in real time. And you can compose all the tools this way. You
1008.41s - 1019.75s |  create a processing packet chain uh yeah that's it. Maybe I get it wrong. But um you create a chain of packet processing and you can do whatever you
1019.75s - 1029.43s |  want. We are going to show you some other tool we developed and it allows very some yeah some a lot of flexibility you know in the what can be
1029.43s - 1038.67s |  done with this uh this uh the things. And obviously we also created in the framework a lot of uh um wrappers for creating a command line
1038.67s - 1047.91s |  application. So if you need to create some command line tools or do your own tools you got everything you need to um wrap the connection to the
1047.91s - 1061.95s |  hardware and so on. Yep. The clicker. Yeah. So uh I'm going to start with the first demo. This is uh we got uh 13 demos to show you what WAD is
1061.95s - 1074.43s |  capable of. Uh so the first one is the BLE exploring demo. So basically we are I'm going to show you the WBD central tool. So this is basically uh a
1074.49s - 1083.77s |  GATT client and uh and what I'm going to do here is to scan devices, connect to the device, a specific device, innovate services, BLE services and
1083.77s - 1102.11s |  characteristics and write and write some data from this. So I guess nope. Okay so the setup is just should be this one. So basically we launch a scan
1102.11s - 1112.91s |  using WBD central. We are using uh an HCI adapter for BLE. We can get all the information, all the advertising records sent by the um the device.
1112.91s - 1121.65s |  Once you found your your device or target device you can connect to it through the connect command. So this is an interactive shell provided by WBD central.
1121.65s - 1131.43s |  Then the connection is made and we uh launch a profile command to start enumerating services and characteristics. We can find uh we have found a device
1131.43s - 1140.09s |  name characteristic uh and a manufacturer name characteristics in two different services and we are going to read the content of this characteristics using
1140.09s - 1149.81s |  the read command and we get everything and uh we can also write into characteristics and subscribe for notification. The basics a GATT client can do.
1149.81s - 1175.39s |  Oh this is for the next demo. So basically this is just an example of a full feature tool uh in WAD and this is a very basic one.
1175.39s - 1193.39s |  So uh second uh full feature tool we developed uh is a tool named uh ZigBee and device uh that will allow to interact with uh ZigBee networks uh and uh emulate basically ZigBee and device.
1193.39s - 1204.89s |  So thanks to this tool you will be able to detect uh the surrounding ZigBee networks uh to join a specific network uh perform all the cryptographic operation this kind of stuff
1204.89s - 1216.97s |  and get the network key uh associated with the network enumerate the devices on the network and interact uh with the various ZigBee devices.
1216.97s - 1228.67s |  So uh here you have a small demo showing a small ZigBee network um on the camera and you have an example of the use of this tool.
1228.67s - 1244.49s |  So first we perform a scan operation to discover the surrounding networks. So it takes some time but uh finally uh we can see that we have one uh ZigBee network.
1244.49s - 1263.11s |  So let's join uh this network and perform the association procedure so we are able to see the network key and now we are associated and we can uh interact and discover the nodes in the networks and the endpoints for every nodes.
1263.11s - 1312.78s |  So then uh we have a list of clusters that allows us to uh interact with uh the nodes and we can use the cluster command to toggle uh a light bulb for example uh toggle it off and so on.
1312.78s - 1342.76s |  So sorry uh we are also uh another tool named the Wadsniff which is a generic tool so it's a multi-protocol sniffing tool uh so Wadsniff uh works with all uh the protocols that are supported uh by WAD so ZigBee, BLE, RFC you can even uh directly sniff uh PHY uh so uh physical layer um configured as you want.
1342.84s - 1365.94s |  Uh it provides different uh output formats so you can directly display the SCAPI packets uh with the different fields uh correctly dissected uh or directly a next dump uh version of the packet uh and it allows to uh monitor the traffic and do value stuff like exporting data to a PCAP uh monitoring uh with Wireshark.
1366.54s - 1387.62s |  So here you have uh some uh basic uh use cases of uh Wadsniff so here we are going uh to uh display uh some BLE advertisements so here you can see the SCAPI uh representation.
1388.62s - 1395.62s |  Then we can switch the format to Xdump and so here we have the Xdump version of our packets.
1396.62s - 1412.90s |  We can uh also uh collect these uh packets using uh directly the physical uh layer of Bluetooth energy so we provide the modulation, Gaussian frequency shift gain, then the deviation.
1415.25s - 1433.25s |  Uh we provide the frequency uh and uh finally the size uh of the packets and here we get a raw dump uh straight out the demodulator output so uh it can be useful for specific analysis.
1433.25s - 1458.38s |  And uh finally we can also uh for with this Wadsniff tool uh directly export the traffic to a PCAP for further analysis so here all the traffic is simultaneously displayed on the screen and exported to a PCAP.
1476.79s - 1484.79s |  So an interesting uh feature of WAD is that you can combine uh several tools uh with pipes.
1485.79s - 1498.79s |  So Wadsniff can be trained with uh several tools so for example you can use WADfilter that may allow to apply some filtering uh on the received packets.
1498.79s - 1518.79s |  Uh you can transform uh the packets on the fly uh if it matches a specific filter or uh you can also use some tools like WADextract uh that may allow to extract uh a specific uh field uh from the packets.
1519.79s - 1522.79s |  So let's go uh for an example of that.
1522.79s - 1539.79s |  So here it's uh the same example with Wadsniff and uh we are going to pipe uh Wadsniff with uh WADfilter and in WADfilter we are going to provide a filter to keep only a specific kind of other types of packets.
1539.79s - 1549.79s |  And finally if we want uh to extract a specific field we can use uh WADextract.
1550.79s - 1560.79s |  We provide the field we want to extract so here is the BG address and we also export a part of the metadata so the RSSI.
1561.79s - 1568.79s |  And of course you can then grab this output and provide it uh to classical Unix tool.
1569.79s - 1581.79s |  So uh Wadsniff uh has a lot of uh usage and it may even allow to perform uh some complex uh attacks.
1582.79s - 1591.79s |  So typically uh in this demo we are going to attack an RF4C communication between a remote uh controller and a set-top box.
1591.79s - 1598.79s |  So uh typically RF4C is a lightweight variant uh of ZigBee for remote controller.
1599.79s - 1605.79s |  So here you have a set-top uh with the remote controller on one side and Wadsniff on the other side.
1606.79s - 1618.79s |  So here we are performing a pairing with the remote controller and uh Wadsniff has been configured to automatically perform a brute force uh attack.
1619.79s - 1632.79s |  And so in the input you can notice that the key uh has been uh automatically uh derived and extracted from the communication.
1633.79s - 1640.79s |  And the packet which is uh normally encrypted can be decrypted uh on the fly.
1640.79s - 1648.79s |  So it allows to sniff the various buttons that are pressed on the remote control.
1649.79s - 1665.55s |  And it uh can also sniff the audio stream which can be transmitted uh using the mic of the remote controller.
1666.55s - 1683.96s |  And uh we can even export uh the voice command to a bad WAV file but yeah it's working.
1689.82s - 1693.82s |  So uh next demonstration is about uh using Wireshark to sniff uh some traffic.
1694.82s - 1700.82s |  So basically uh we showed this uh a bit earlier but uh we are going to go a bit deeper in this demo.
1701.82s - 1703.82s |  So uh you can monitor everything with WShark.
1704.82s - 1717.82s |  So this example is about BLE but it could be ZigBee or even your if you are trying to demodulate packets through the file layer you can get it in Wireshark in real time and you can monitor everything you are working on.
1718.82s - 1725.82s |  If you use WFilter to modify your packet on the fly you can see the result in real time with the WShark.
1726.82s - 1728.82s |  So uh the demo is the following.
1729.82s - 1731.82s |  I'm going to be very quick about this one.
1732.82s - 1743.82s |  Yeah so basically we are again connecting to a device and so on and performing uh um uh services and characteristics in emulation.
1744.82s - 1752.82s |  And everything uh can be monitored uh in Wireshark while the terminal shows you the results of this uh of this operation.
1752.82s - 1756.82s |  So this is basically uh what WShark can do.
1757.82s - 1763.82s |  And the most interesting thing is that uh we talked about uh Gatacore and BTLEJuice at the beginning of the talk.
1764.82s - 1772.82s |  So basically these tools are based on not on some Node.js uh library uh which are not no more maintained at the moment.
1773.82s - 1780.82s |  So if you want to perform a man-in-the-middle attack on BLE with WAD this is very simple.
1780.82s - 1788.82s |  Because you can combine tools you can create for instance if you want to you know set up a man-in-the-middle attack on a device uh like Gatacore.
1789.82s - 1798.82s |  You uh just create a command line starting with WBAD-spawn that will spawn a device with uh corresponding parameters that will mimic the target device.
1799.82s - 1806.82s |  And then you can pipe all the packets that will go uh from the this uh fake device or spoof device into Wireshark.
1807.82s - 1814.82s |  You can so you can monitor in real time what's going on and then uh once the smartphone for instance is uh is connected onto the spoof device.
1815.82s - 1819.82s |  Uh then you are going to initiate a connection into the target device.
1820.82s - 1829.82s |  And every packet sent by the smartphone uh or the target or the target device will be uh just forwarded as uh uh as it goes.
1830.82s - 1831.82s |  And you can monitor everything in WShark.
1832.82s - 1834.82s |  So this is uh the next demo I'm going to show you.
1834.82s - 1848.82s |  Uh here so we are setting up uh Gatacore like man-in-the-middle attack using uh WAD using simple tools again WBAD-spawn this is very small tool like WBAD-connect.
1849.82s - 1858.82s |  And uh we first the system is going to spawn a spoof device that just advertise itself like the target device.
1859.82s - 1862.82s |  And the smartphone uh here is going to detect this device.
1862.82s - 1871.82s |  When we initiate the connect when we push the connect button on the on the smartphone then the connection to the our spoof device is uh initiated.
1872.82s - 1874.82s |  We can see on Wireshark what's going on with the BLE PDUs.
1875.82s - 1884.82s |  And if you really try to read the characteristics for instance then all the PDUs are directly forwarded to the target device and back and forth and we can monitor everything.
1885.82s - 1886.82s |  With Wireshark you can see what's going on.
1886.82s - 1887.82s |  You can save it as a pick up.
1888.82s - 1898.82s |  And what we do here with Wireshark you can do it with any other generic tool we develop such as WFilter or WX not WX type WFilter.
1899.82s - 1904.82s |  And you can if you want make some changes into the packets using some specific filters.
1905.82s - 1912.82s |  If you want to modify the answer uh the um response uh from a read operation on the characteristics you can do it on the fly.
1912.82s - 1917.82s |  And you can also monitor what's going on because you can pipe WFilter with WShark as well.
1918.82s - 1923.82s |  So this this is powerful even if this demo is not uh really powerful but yeah.
1924.82s - 1925.82s |  Anyway.
1926.82s - 1931.82s |  And if you want to emulate a BLE peripheral you can you can use uh the full feature of WBLE peripheral.
1932.82s - 1933.82s |  Uh so basically it goes like this.
1934.82s - 1941.82s |  This is a command line tool you can use to just uh spawn a BLE device and populate the device with whatever you want.
1942.82s - 1946.82s |  So basically you can change the name of the device and say that I'm going to create a device called Defcon32.
1947.82s - 1950.82s |  Uh add a service and a characteristic to the device.
1951.82s - 1955.82s |  Um I'm going to write the value of this characteristic as well.
1956.82s - 1957.82s |  It should be Defcon32 I guess.
1957.82s - 1962.82s |  And then uh I'm going to start the device on the uh right hand side of the screen.
1963.82s - 1965.82s |  You got the uh screen of the smartphone.
1966.82s - 1970.82s |  So let's start this uh spoof device or emulated device to be more precise.
1971.82s - 1973.82s |  Uh yeah come on.
1974.82s - 1980.82s |  Okay so it will pop on uh the um smartphone and we can connect to it.
1981.82s - 1985.82s |  Um it will start the discovery process of services and characteristics.
1985.82s - 1988.82s |  There is a single service with a single characteristic.
1989.82s - 1991.82s |  And we can read the content.
1992.82s - 1997.82s |  Each time we read from the smartphone the content of this characteristic this is caught by the BLE PRF uh tool.
1998.82s - 2004.82s |  And uh if uh the smartphone subscribe to notification then it got notified by the uh the system and so on.
2005.82s - 2011.82s |  So this is a good way to play with uh uh applications and BLE applications to mimic some device.
2011.82s - 2017.82s |  If you want to see what happens when you are modifying some uh some properties of this uh of this device.
2018.82s - 2029.82s |  Uh in practical situation this is not what we are going to use because it's uh you know just a uh interesting way we want to play with uh a device.
2030.82s - 2032.82s |  But uh a more interesting use is the following.
2033.82s - 2038.82s |  Uh if you want to implement a very specific device with specific services and characteristic with a specific behavior for the characteristics.
2039.82s - 2040.82s |  Here a small example.
2041.82s - 2044.82s |  We are going to create a battery device exposing your battery service with a battery level.
2045.82s - 2050.82s |  Except that each time we are going to read the battery level we will decrease the level by 10%.
2051.82s - 2055.82s |  And goes like this when you emulate this uh peripheral.
2056.82s - 2061.82s |  So basically uh we start the Python script that uh instruments everything.
2062.82s - 2063.82s |  The device appears on the screen.
2063.82s - 2064.82s |  So there is a battery device.
2065.82s - 2070.82s |  When the discovery goes with the services and characteristic we get one service with one battery level characteristics.
2071.82s - 2078.82s |  And each time I read the characteristic value getting the percentage of uh battery level percentage then it is decreased.
2079.82s - 2081.82s |  So this is just 10 lines of Python to do this.
2082.82s - 2091.06s |  And uh we did the same with other protocols because we are talking a lot about BLE.
2092.06s - 2094.06s |  Uh we got a LoRaWAN gateway implemented in WAD.
2094.06s - 2103.06s |  So if you want to create a LoRaWAN network and get some device uh to associate with this uh with this um fake network.
2104.06s - 2105.06s |  You can do it and it works pretty well.
2106.06s - 2108.06s |  Uh I guess the demo will be a nightmare on the screens.
2109.06s - 2110.06s |  So I will skip it.
2111.06s - 2116.06s |  Um but the media server of DEF CON has this demo.
2117.06s - 2118.06s |  So if you want to have a look at it.
2119.06s - 2120.06s |  Uh please do.
2121.06s - 2122.06s |  But uh I am going to still skip this one.
2122.06s - 2124.06s |  Uh and let Romain explain the rest.
2125.06s - 2126.06s |  Yeah.
2127.06s - 2138.06s |  So uh another uh example of what you can do uh with uh WAD is uh the emulation of various uh devices.
2139.06s - 2143.06s |  And for example uh you can take a proprietary protocol like Logitech Unifying.
2144.06s - 2146.06s |  And you have a protocol stack which is implemented.
2146.06s - 2156.06s |  And various tools that will allow to uh perform uh keyboard emulation, mouse emulation uh for Logitech Unifying devices.
2157.06s - 2164.06s |  So typically here we are going to use it to perform a scan operation of surrounding Unifying devices.
2165.06s - 2169.06s |  Uh spoof uh the address of uh mouse.
2170.06s - 2180.06s |  And then we are going to emulate the keyboard with this address to reproduce a vulnerability uh from mouse jack to inject an encrypted keystrokes to the computer.
2181.06s - 2191.20s |  So here we start by uh using a small command line tool to perform a scan operation.
2192.20s - 2195.20s |  It allows us to get the address of a mouse.
2195.20s - 2203.20s |  And we provide it uh in uh as argument of a Python script that will perform the injection.
2204.20s - 2210.20s |  And as you can see uh we have a keystroke injection uh performed and fully emulated by WAD.
2211.20s - 2214.73s |  Yeah.
2214.73s - 2215.73s |  So you can see hello Defcon.
2216.73s - 2217.73s |  Sorry.
2220.73s - 2228.77s |  So uh we can uh emulate uh Logitech Unifying keyboard.
2228.77s - 2232.77s |  We can also emulate a Logitech Unifying uh dongle.
2233.77s - 2241.77s |  Uh and uh on the other side on BLE we are able to emulate a peripheral.
2242.77s - 2253.77s |  So here comes uh very useless idea which is to uh create a bridge uh which is cross protocol between uh Logitech Unifying uh keyboard for example.
2254.77s - 2260.77s |  And a smartphone uh that will be connected to an emulated uh BLE keyboard.
2261.77s - 2263.77s |  So uh we have a small script.
2264.77s - 2266.77s |  You can see the screen uh of the smartphone.
2267.77s - 2274.77s |  And uh you can see uh a video with the keyboard uh at the bottom.
2275.77s - 2278.77s |  So first we connect uh we emulate the BLE keyboard.
2279.77s - 2284.77s |  We connect and pair the smartphone uh with this uh emulated BLE keyboard.
2285.77s - 2294.38s |  And once the pairing uh is uh successful.
2295.38s - 2309.38s |  Now we can just press some key on the Logitech Unifying keyboard and it will be forwarded uh through the uh BLE emulated keyboard to the smartphone.
2310.38s - 2311.38s |  So yeah.
2312.38s - 2314.38s |  Completely useless but funny.
2314.38s - 2333.85s |  And finally our last demo uh is uh uh based on the idea that it's uh cool that what allow to uh access various hardware uh perform uh different operations.
2334.85s - 2339.85s |  Uh but it would be even cooler if you could access it over internet.
2339.85s - 2347.85s |  So uh we wrote a what server that will allow you to expose a what device uh over TCP.
2348.85s - 2359.85s |  And so uh with any tool, any script, you will be able to connect uh to this what uh TCP server uh like if it was a local device.
2360.85s - 2366.85s |  And uh for example it can be useful to build relay attacks and that kind of stuff.
2366.85s - 2375.85s |  So uh in this next demo, so we are in two different uh cities in France.
2376.85s - 2383.85s |  And I'm exposing uh my uh Bluetooth dongle uh using what server.
2384.85s - 2392.85s |  Damien will use uh BLE central to connect to uh this uh remote devices.
2392.85s - 2396.85s |  And he's able to connect to the light bulb next to me.
2397.85s - 2400.85s |  Perform a profile uh discovery.
2401.85s - 2416.92s |  And uh now he will be able to uh turn the light bulb on, turn the light bulb off, and modify uh the color.
2417.92s - 2423.92s |  So typically uh it's interesting uh for building relay attacks.
2424.92s - 2428.92s |  It can be interesting in uh various experiment uh setups.
2429.92s - 2430.92s |  So Sky is the limit here.
2431.92s - 2437.92s |  Yeah uh and the interesting part here is yeah again we show it with BLE but it can be done with any protocol as well.
2437.92s - 2445.92s |  You can uh accept the Logitech unifying because you have some keep-alives that are messed up with the network.
2446.92s - 2450.92s |  But in fact you can once you are connected to a device you can just discover everything.
2451.92s - 2456.92s |  And yeah just like uh it's the same if you connect the device on your computer.
2457.92s - 2460.92s |  So basically it opens a wide range of possibility.
2461.92s - 2473.92s |  So uh we are developing this project uh since uh a few years now.
2474.92s - 2483.92s |  And uh it has been used uh internally uh so in Damien's company uh and uh in my research lab.
2483.92s - 2495.92s |  So for example uh one uh intern uh at Quark's lab uh Batiboye uh developed uh BLE GAT fuzzer uh using uh WAD.
2496.92s - 2504.92s |  That leads to a CV uh linked to the expressive controller uh expressive uh BLE stack sorry.
2504.92s - 2514.92s |  Uh and uh we also uh used it in a research project uh to evaluate the screaming channel attacks.
2515.92s - 2522.92s |  So we told us to uh instrument uh the BLE protocol uh with uh custom uh link layer traffic.
2523.92s - 2530.92s |  Uh it's also a project which is uh already uh easily used in uh some other LCTF.
2530.92s - 2535.92s |  So for example uh this year uh edition of other I.O.
2536.92s - 2540.92s |  Uh all the BLE challenges were fully emulated uh with WAD.
2541.92s - 2547.92s |  And WAD has also been used in a lower one challenge to emulate a lower one gateway.
2548.92s - 2557.92s |  So to conclude this talk uh we uh are releasing today uh publicly uh this project.
2557.92s - 2560.92s |  So uh it's available uh on pip.
2561.92s - 2564.92s |  The documentation is available uh on read.docs.
2565.92s - 2571.92s |  So we are going to improve uh the documentation and the project over time.
2572.92s - 2574.92s |  Uh feel free to contribute to it.
2575.92s - 2583.92s |  We have also uh the firmware files that are available uh on GitHub in uh some sub repositories.
2583.92s - 2589.92s |  And globally all the code uh is available uh on GitHub under MIT license.
2590.92s - 2598.92s |  So uh of course uh we are we also uh are making a call for contributors.
2599.92s - 2606.92s |  So uh feel free to uh create compatible firmwares for uh your preferred hardware.
2607.92s - 2611.92s |  To report any bugs, any issues you would encounter uh on GitHub.
2611.92s - 2617.92s |  And if you want to help uh us by writing some documentation,
2618.92s - 2621.92s |  by adding support for other protocols or other devices,
2622.92s - 2624.92s |  uh we would be uh happy to have contributors.
2625.92s - 2629.92s |  And if you like it uh spread the word and tell your friends.
2630.92s - 2632.92s |  So uh two last words.
2633.92s - 2637.92s |  So this is uh a work we initiated two years ago.
2637.92s - 2641.92s |  Uh and uh here it was a very high level uh presentation.
2642.92s - 2646.92s |  Uh so we only scratched the surface of what WAD is capable uh of.
2647.92s - 2651.92s |  And uh we also want to uh warmly thank uh the many researchers
2652.92s - 2655.92s |  that have uh better access uh to this project.
2656.92s - 2661.92s |  And that uh helped us and provided some feedback uh on it.
2662.92s - 2664.92s |  So I won't name them all but uh they know.
2665.92s - 2666.92s |  Thank you very much.
2667.92s - 2670.92s |  Uh and uh sorry for the small technical issues.
2671.92s - 2673.92s |  We are ready if you have any question.