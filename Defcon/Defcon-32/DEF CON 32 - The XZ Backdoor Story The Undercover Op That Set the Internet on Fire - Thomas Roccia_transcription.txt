{
  "webpage_url": "https://www.youtube.com/watch?v=hwuIb-Vv2Ew",
  "title": "DEF CON 32 - The XZ Backdoor Story: The Undercover Op That Set the Internet on Fire -  Thomas Roccia",
  "description": "On Fri, 29 Mar 2024, at exactly 08:51:26, OSS security received a message from Andres Freund, a software engineer at Microsoft, stating he had discovered a backdoor in upstream xz/liblzma that could compromise SSH servers. The open-source project XZ, specifically the liblzma library, has been compromised by a mysterious maintainer named Jia Tan, putting the entire internet at risk. Fortunately, this discovery helped us avoid the worst.\n\nBut what happened? How long has this rogue maintainer been part of the project? Who is Jia Tan? Was he involved in other projects? How does the backdoor work? And what should we learn from this?\n\nThese are questions we will attempt to answer. First, we will discuss the discovery, which is so riddled with coincidences and chance that it's hard not to think about all the ones we've missed. Then, we'll examine the process itself, from gaining trust within the project to deploying the backdoor, dissecting the operating methods and the main protagonists. We will also dive into the technical details, explaining how the backdoor is deployed and how it can be exploited.\n\nThe XZ backdoor is not just an incredible undercover operation but also a gigantic puzzle to solve. Beyond the technical background, there is a story to tell here, to capitalize on what went wrong and what we could improve.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2501,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

2.45s - 7.45s | This text was transcribed using whisper model: large-v2

 Well, thank you for waiting. It was quite intense from the, the stage. Alright. So, thank you
11.35s - 17.69s |  very much for attending this talk. Uh, I hope you will find it uh, enjoyable. It's uh, it's a
17.69s - 22.69s |  cool story to tell and there is a lot to cover so, buckle up. So over the past uh, few years,
29.92s - 34.92s |  the security industry have, you know, investigated a lot of different security incidents.
37.66s - 43.60s |  But only a few of them were truly sophisticated. Meaning, something that was really
43.60s - 52.17s |  different than what we used to be. We can talk about, for example, the SolarWinds case, the
52.17s - 57.17s |  Lopetia attack or even the 3CX uh, supply chain attack last year. But today I want to talk
59.61s - 64.61s |  about um, another attack which surpasses even the most sophisticated we've seen before. This
64.89s - 69.89s |  is uh, an undercover operation that lasted almost three years, which is very impressive in
74.77s - 81.05s |  terms of technical details, but also the social engineering aspect is very impressive as
81.05s - 86.05s |  well. So I'm going to talk about the XE backdoor story, the undercover operation that set
87.99s - 93.09s |  the internet on fire. And I'm pretty sure that by the end of this presentation, your
93.11s - 98.11s |  definition of what is a sophisticated uh, sophisticated attacker is, will be changed. So I'm
101.05s - 106.71s |  Thomas Rocha, I'm a senior threat researcher at Microsoft. I've been working on the XE
106.71s - 113.15s |  campaign when it came out by uh, uh, Andres Freund, which is uh, a colleague of mine and we,
113.15s - 118.19s |  we, we discovered the, the backdoor itself. I'm French, as you probably may have heard, and
118.19s - 122.23s |  I'm living in Australia so I'm, I'm good with the jet lag now because it's been a week in
122.23s - 127.25s |  uh, in Vegas already. Uh, if you want to learn more about my work, you can visit my website
127.25s - 133.96s |  securitybreak.io or you can, you can also follow me on Twitter. What I will cover in this
133.96s - 139.56s |  presentation, first, how the backdoor was found. Then I will talk about the long term
139.56s - 145.50s |  operation and the timeline itself. I will then deep dive into the technical details and we
145.50s - 150.68s |  will discuss about some assumptions. And finally, I want to conclude this presentation of
150.72s - 159.14s |  what it means for us, for the security industry. Okay, this story began on Friday 29th of
159.14s - 164.14s |  March at exactly 851 minutes and it was uh, a message sent by Andres Freund to the OSS
170.22s - 175.22s |  security DL list. With the, the subject, backdoor in upstream exit libel ZMA leading to
176.22s - 181.22s |  SSH server compromise. So that's pretty much around that time when I saw the, the email and
186.36s - 191.56s |  read the investigation that I started to investigate more about the backdoor itself and how it
191.56s - 196.58s |  was working. But before, I want to talk a little bit about Andres and how he found the, the
198.58s - 203.54s |  backdoor. Because on the internet, there was a kind of a legend where everyone was saying
203.54s - 208.54s |  that the backdoor was discovered because of a 500 millisecond and uh, for, from Andres that
211.14s - 218.14s |  triggered the investigation. The reality is a bit different. Actually, what triggered the
218.14s - 224.46s |  investigation from Andres was that he found that the SSH login in some of the tasted, the
224.46s - 231.06s |  testing he was doing was actually failing. So he decided to investigate a little bit more to
231.08s - 237.36s |  try to understand why the SSH was uh, the SSH logins were actually failing. And he
237.36s - 242.36s |  discovered that there was a substantial CPU usage during the SSH and he found out the 500
245.20s - 254.57s |  millisecond delay which he identified, identified later in the new package uh, exit. And he
254.57s - 260.77s |  said that, he said itself, it was a bunch of coincidences. So if we, if we have a look to how
260.79s - 267.53s |  he discovered the backdoor. First, he saw that there was some issue with the SSH uh, login.
267.53s - 274.13s |  Then he decided to investigate and then he found uh, a little bit of uh, amount of CPU uh,
274.13s - 280.35s |  using by the SSH deep process. So he decided to investigate a little more and he, and he
280.35s - 285.35s |  found out that this amount of CPU usage was used by the Libel ZMA. But then that's now which
286.13s - 291.13s |  is becoming a little bit crazy because he actually used some specific setup which led him to
297.01s - 303.61s |  find the backdoor. First, he decided to choose a Debian unstable which at the time of the
303.61s - 308.65s |  release of the, the backdoor uh, only this kind of Linux version was affected by the
308.65s - 314.79s |  backdoor. Then he chose to use a specific flag. And without this flag, this flag, he
314.79s - 319.79s |  wouldn't have found uh, the, the backdoor because he was actually tracing the process using
319.79s - 326.21s |  Valgrind and Valgrind complaining, complained about uh, the, the processes because of the
326.21s - 332.47s |  flag he was setting up before. So that's super crazy because thanks to that, he was able to
332.47s - 337.49s |  investigate and to find out the high CPU usage was in the SSH deep processes below get CPU
337.85s - 344.99s |  ID. Keep that information in mind because it will be interesting and important for the next
344.99s - 357.28s |  part of the presentation. But you may wondering what the fuck is uh, exe, exe-utils
357.28s - 362.28s |  package. So the exe, the exe-utils package is a free software, an open source software which
364.66s - 371.42s |  is dedicated for lossless data compression through SDMA algorithm and exe. It, it is
371.44s - 377.12s |  maintained by Lasikolin which is the main maintainer of the backdoor of the, sorry, of the, of
377.12s - 384.00s |  the package since more than a, than a decade. The backdoor has been found in Libel ZMA in the
384.00s - 389.00s |  version of exe-560 and 561. And it was introduced by a mysterious user called Jiatan in
392.64s - 397.64s |  February 2024. The, the package and the backdoor affected mostly uh, development version so
398.50s - 403.50s |  it was not widely deployed when Andres found the backdoor itself. And Red Hat assigned the
406.04s - 411.04s |  vulnerability CVE 2024-30-94. There is something interesting here because you may
413.98s - 418.98s |  wondering as well why the exe-utils package has in, uh, has in any relation with uh, SSH.
419.98s - 424.98s |  Well I'm glad you ask. Actually the exe-utils uh, backdoor uh, package is widely used in
431.68s - 437.38s |  many Linux uh, distribution and it's a trusted open source component for pro- for
437.38s - 442.40s |  compression uh, and any kind of uh, optimization. The exe-utils has been used in the open
442.76s - 447.76s |  source industry for years and which is interesting is that open SSH is using the exe
451.60s - 456.60s |  compression to reduce the size of transfer data when you are doing a connection. So quite
459.40s - 466.46s |  interesting target for an attacker. Okay I want now to talk about the timeline. And it's a
466.46s - 471.46s |  bit uh, heavy so what I did I actually split the timeline into five different phases. The
472.08s - 477.08s |  first phase, the first phase which I called initial involvement of Gi-Tan from October 29,
481.96s - 486.96s |  2021 to June 29, 2022. So during this phase the user Gi-Tan started to get, started to
489.86s - 495.54s |  gain trust into the exe uh, project and started to do some commit and to work a little bit
495.54s - 500.54s |  more. Which is interesting is um, during that phase as well, there was, there was a
502.18s - 508.92s |  additional persona that was part of a kind of a pressure campaign against Lassie Collin, the
508.92s - 513.92s |  main maintainer of the exe package. To move the member, the um, the maintainership to another
517.20s - 522.20s |  user. So some additional personnel, persona such as Giga Kumar and Dennis Hance have been
524.54s - 531.04s |  part of this pressure campaign to put the pressure on Lassie Collin. And in June 29 of
531.06s - 536.06s |  2022, Lassie Collin started to mention Gi-Tan as a co-maintainer already. Then in phase 2,
539.00s - 544.00s |  which I call transition of mentorship from September 27 of 2022 to March 18 uh, 2023.
547.98s - 552.98s |  During this time Gi-Tan continued to contribute to the project to gain trust with uh, with
554.98s - 559.98s |  the, the main maintainer and to the project itself. On October 2022, Lassie Collin
561.72s - 567.86s |  was added to the Tukeni organization on GitHub, which is the organization uh, that released
567.86s - 572.86s |  the exe package. And an additional event as well during this time. Then during phase 3, which
575.14s - 580.14s |  I call preparation for the attack from March 2023 to January 19, 2024. During this time, a
583.64s - 588.64s |  bunch of information happened as well. First Gi-Tan uh, updates the Google OSS first to send
589.28s - 594.28s |  bugs to his own email. Then another persona, Hans Jensen, sends patches for GNU indirect uh,
598.92s - 603.92s |  function features, which is quite important as well. And uh, and Gi-Tan also disables uh,
606.96s - 612.30s |  iPhone support during the OSS first build, which is quite important because it's a kind of uh,
612.30s - 617.30s |  evading some, some security protections. And then during phase 4, which I call backdoor
618.68s - 623.68s |  insertion and distribution from February 23 uh, to March 28 of 2024, this is where Gi-Tan
627.48s - 633.66s |  started to release the backdoor. So in February 24, Gi-Tan merged hidden backdoor binary
633.66s - 638.66s |  code in kind of test files, which are actually fake text test files. And then he released the
641.66s - 646.64s |  version 5.6.0 with an additional file that was not present in the GitHub repository itself.
649.20s - 654.20s |  And in March 9, uh, Gi-Tan committed uh, an update of the backdoor because there was a bug and
657.48s - 663.18s |  then he released the version 5.6.1, which was backdoored as well. And then on the last phase,
663.18s - 668.18s |  phase uh, phase number 5, which I call discovery and response from March 28 to March 30, this
670.82s - 676.56s |  is where Andres found the backdoor, started to alert and to send the email with his own
676.58s - 684.12s |  investigation. And this is where internet was on fire as well. But there is something which is
684.12s - 688.12s |  interesting, I talk about the pressure campaign. So let me give you a little bit more detail
688.12s - 695.14s |  about that. Cause this is quite interesting from the social engineering aspect. So first I
695.14s - 700.24s |  mentioned that some additional personas were part of this pressure campaign to move the
700.24s - 705.24s |  mentorship of the, of the backdoor to someone else. So in March, uh, in April 2022,
708.68s - 713.68s |  Jigar Kumar sent a message. Patches spend years. In May 2022, Dennis Hance, the, the other
716.22s - 721.62s |  persona, sent another message as well and said, I asked a question here a week ago and I have
721.62s - 727.34s |  not heard back. It has not updated in over a year. Is there a plan for this thing in the future?
727.34s - 732.54s |  Lassie Colleen, which at the time was getting all these messages from these personas and
732.62s - 737.62s |  so on. Jihatan has helped me with exe-utils and he might have a bigger role in the future. It's
741.34s - 748.22s |  clear that my resources are too limited. In May 2022, Jigar Kumar answered. Over a month and
750.42s - 756.26s |  no closer to being merged. Not a surprise. Jigar Kumar sent another message. Progress will not
756.26s - 761.50s |  happen until there is a new maintainer. The current maintainer lost interest or doesn't care
761.52s - 766.52s |  to maintain anymore. Quite aggressive. Then on June 2022, Lassie Colleen answered. My
769.16s - 774.16s |  ability to care has been fairly limited, mostly due to long term mental health, but also due to
774.16s - 779.16s |  some other things. Jihatan may have a bigger role in the future. And he mentioned also, and I
781.54s - 786.88s |  think this is quite important in this case, he mentioned, it's also good to keep in mind that
786.90s - 793.15s |  this is a non-paid OB project. In June 2022, Jigar Kumar sent another message. Right now you
795.35s - 802.35s |  shock your repo. Why wait until 540 to change maintainer? Why delay what your repo needs?
802.35s - 807.73s |  Dennis Ant sends a message. Why not pass on mentorship for exe for C so you can give exe for
807.73s - 814.63s |  Java more attention? And then Jigar Kumar sent another message. Jia, this is the first time he
814.63s - 820.21s |  actually talked to Jia. Jia, I see you have recent commits. Why can't you commit this
820.21s - 825.21s |  yourself? And then Lassie Colleen replied on June 2022, on the day 29. Jihatan may have a
828.61s - 833.61s |  bigger role. He is practically a co-maintainer already. Some change in mentorship is already
836.29s - 841.29s |  in progress. Mission accomplished. Jihatan is no part of the project and he has more rights
844.69s - 849.73s |  to contribute. Alright, so now I want to talk about the technical details and how the back
849.73s - 855.81s |  door was deploying and how the back door works as well. So remember, I mentioned that the
855.81s - 862.15s |  user Jihatan deployed two different test files. The first one was bad3corrupt underscore
862.15s - 867.15s |  lzma2 dot exe and the second one was goodlarge underscore compressed dot lzma. And
867.85s - 872.85s |  additionally, when he released the latest version, version 5.6.0 of the exe package, he
878.93s - 884.79s |  shipped the version with an additional file called build2host dot m4. If you are not
884.79s - 890.53s |  familiar with m4 files, it's a kind of macro file used for configuration during the
890.53s - 898.85s |  compilation process. And this file was present in the release but not in the repository. So
898.87s - 905.79s |  let me talk a little bit more about the build2host dot m4 file. And I will focus here on the
905.79s - 910.79s |  version 5.6.0. So what you see on the screen is just the malicious part of this file just to
913.83s - 918.63s |  focus on what it is exactly doing but imagine that this file is super big with a lot of
918.63s - 923.63s |  different configuration and a lot of legitimate actions. So the ones that you saw, you see on
923.89s - 928.89s |  the screens are only the malicious part. So first, you can see there is a variable called
931.93s - 936.93s |  glam config make with a grep which actually look for one of the malicious test file that have
940.41s - 945.41s |  been released and specifically the bad3corrupt underscore lzma2 dot exe. Then we have in
946.33s - 951.33s |  number two, two additional variable. The first one which is the TR tool translate which is
956.61s - 961.61s |  basically doing a kind of a substitution algorithm for part of the backdoor of the file
964.31s - 969.31s |  itself, the bad3. And the second one is actually showing the test file and making a set to
969.59s - 974.59s |  retrieve the extension of this file exe which will later be used as a common line. And as you
981.53s - 986.53s |  can see, the translation of this piece of screen is the cat at the end of the presentation.
988.53s - 993.53s |  So basically transforming the file itself and decompressing using exe, the file which have
993.97s - 998.97s |  been the obfuscated, the obfuscated kind of using TR. So here you have a look of what was
1008.46s - 1013.46s |  the original bad3corrupt lzma2 file before the decryption, the, the, the, the substitution
1015.56s - 1020.56s |  and the, the decompression using exe and you have the malicious script on your right. So if
1020.92s - 1026.92s |  you have a look to this malicious script, there is some interesting information here. So
1026.92s - 1031.94s |  first I highlighted a comment which is actually an hexadecimal string. So today we still
1035.40s - 1041.38s |  don't know what is exactly this strings but I believe because in version five six one, this
1041.38s - 1046.88s |  hexadecimal string was not the same. So I believe this strings was potentially related to a
1046.90s - 1053.28s |  kind of a versioning number. Then we have a bunch of uh head command which are used to
1053.28s - 1058.68s |  manipulate input data stream. And at the end we have the stash3 and backdoor extraction
1058.68s - 1063.68s |  because in the bad3corrupt um uh in the, in the bad3corrupt lzma and the second file, the
1065.76s - 1071.66s |  good large compressed lzma, there is the next part of the, of the, the release of the
1071.66s - 1076.86s |  backdoor and also the decompression of an object. I will come to it later. I just
1076.86s - 1082.68s |  give me, let, let me give you a look, a deeper look of what the file, what the script is
1082.68s - 1089.06s |  doing to release the next part. So first is decompress the second malicious file, remember
1089.06s - 1095.74s |  the second test file, good large underscore compressed dot lzma that cons, contains the
1095.74s - 1100.74s |  stash3 and the binary backdoor. It remove a ju, a bunch of junk data and unius byte
1101.12s - 1108.06s |  because the file is a bit obfuscated. There is again a custom substitution cipher using
1108.06s - 1113.06s |  tr and then all the, the deciphering data uh decompressed again using exe. Which lead to
1116.64s - 1121.64s |  the stash3 which is another script which is doing a bunch of checking during the compilation
1122.64s - 1127.64s |  process. So let me walk through some of the checking this stash3 is doing. First, it's
1131.02s - 1135.72s |  checked for the iPhone support, remember previous commit we discussed about it, keep that in
1135.72s - 1140.72s |  mind for the, for the next part. Then you verify crc source file, crc64 underscore fastc
1143.00s - 1149.24s |  and crc32 underscore fastc for require iPhone code because the backdoor require this
1149.24s - 1155.68s |  feature. There is a bunch of multiple checks, it verify the version of the Linux system, uh
1155.68s - 1160.28s |  validate the gcc comp, compiler, check for the previous two test file because if the two
1160.28s - 1165.06s |  test file are not present there is no need to continue to deploy the backdoor, so it's a kind
1165.06s - 1170.06s |  of protection. It ensures position independent code and also it extract the backdoor from
1170.86s - 1175.86s |  the, the test file goodlarge compressed dot lzma and this backdoor ex uh extracted from this
1182.01s - 1187.01s |  file will be embedded into the, the object file liblzma la dash crc64 dash fast dot o. Then
1192.79s - 1197.79s |  there is a modification of a function isarch extension supported in crc xx86clmul dot h
1198.75s - 1203.75s |  and it replaces getcpuid with two underscore with getcpuid with one underscore. Remember
1212.52s - 1217.52s |  getcpuid was where address trust the execution of the backdoor and the amount of CPU usage.
1228.54s - 1231.78s |  So I want to talk little bit about the backdoor extraction itself because it's quite
1231.80s - 1236.80s |  interesting how the attacker did it as well. So in the code there is a, a piece which is using
1239.14s - 1244.14s |  the AWK function um tools from Linux and this is actually doing like a kind of a RC4 like
1247.72s - 1252.72s |  algorithm to decrypt the payload itself that will be later store into the liblzma la crc64.
1253.44s - 1258.44s |  So quite interesting to see that as well. So to recapitulate a little bit the compilation
1266.41s - 1272.05s |  process because I know it could be quite uh quite complex. So first we have the execution of
1272.05s - 1278.29s |  the macro file the build to host dot m4 which is executed and subsequent scripts are also
1278.29s - 1283.29s |  executed. It run all the checks and it create the make file if previous conditions are met
1285.59s - 1289.83s |  because there was a bunch of information. If all the conditions are not met then the
1289.83s - 1295.57s |  backdoor is not released. Then during the make process there is a backup of the original
1295.57s - 1300.57s |  file which has been backdoor and liblzma la crc64 fast dot o. There is a backup because
1303.15s - 1309.09s |  if something, something goes wrong the backdoor itself I mean the the code itself can push
1309.09s - 1314.09s |  back the original file and so there is no track into the final release of the exe utility.
1315.09s - 1321.59s |  Package. There is also some specific compilation flag. I think I think resolvers run at
1321.59s - 1326.59s |  startup. Modification of the file crc64 fast dot c and crc32 fast dot c and then finally
1330.51s - 1337.15s |  compilation linking stage manipulation and clean up because the attacker did well they also
1337.15s - 1342.41s |  have a bunch of clean cleaning up to avoid any forensic investigation or further further
1342.41s - 1347.43s |  investigation. And then at this point we are here malicious liblzma is incorporated into the
1350.63s - 1358.15s |  compiled liblzma. So now I want to talk a little bit more about the backdoor itself and some of
1358.15s - 1364.13s |  the functionalities. So first it's using the iFunc feature which allows for dynamic
1364.13s - 1369.23s |  resolution of function implementation during the run time meaning it can load some specific
1369.23s - 1374.51s |  features at the run time. And actually the backdoor hijacks the iFunc resolver to load the
1374.51s - 1380.85s |  modification of the global offset table which which is a kind of a table with address to some
1380.85s - 1387.05s |  specific functions. And here on the screen what you can see is actually the malicious get CPU
1387.05s - 1395.72s |  ID that will trigger the backdoor and continue the execution to the global offset table hijack.
1395.72s - 1402.26s |  Another interesting feature about the backdoor is the usage of dlaudit to set up the hook and to
1402.26s - 1407.64s |  bypass railroad and to intercept also redirect function so function call. If you are not
1407.64s - 1412.64s |  familiar with railroad it's a kind of a memory protection space to avoid uh to avoid to have
1412.64s - 1417.98s |  some some space that could be vulnerable for some vulnerability exploitation. So what it is
1417.98s - 1422.98s |  doing here, so first it's checking that the loaded target process is SSHD because remember it
1423.26s - 1428.26s |  is our target here. And verify that the shell library and specifically libel ZMA because
1432.12s - 1438.66s |  this is the vulna the the this is where the backdoor is loaded is already present. Then it set up
1438.66s - 1443.66s |  the dlaudit structure to start the audit mechanism. And during the dynamic linking so think
1445.80s - 1450.80s |  about all these steps uh doing doing the the loading. It resolve and bind symbols and then
1453.98s - 1460.72s |  the dlaudit bind function is called by the linker whenever a symbol needs binding. And if all
1460.72s - 1465.72s |  the conditions are met then it set the backdoor to the install hook function to install the the
1467.96s - 1476.32s |  hooking function that the payload will need later. There is also the global offset table uh
1476.32s - 1481.32s |  redirect which I mentioned is a kind of a table with uh function address. And in that case at
1482.28s - 1487.28s |  the runtime the backdoor will manipulate these pointers into the global offset table to
1490.62s - 1499.49s |  redirect calls to the main malware function. And if you have a look to the investigation, if
1499.49s - 1506.63s |  you have a look to the to the running at this time, everything will look like it's been
1506.63s - 1515.25s |  called through the CPU ID functions. On top of that there is additional evasion
1515.27s - 1522.27s |  mechanisms and kind of obfuscation. First there is a strings obfuscation. In that case what
1522.27s - 1529.35s |  the backdoor is doing is looking for a tree structure. A tree structure is basically uh a
1529.35s - 1534.99s |  corresponding reference between a strings and a number. And what the backdoor is doing is
1534.99s - 1540.23s |  looking for a specific number to retrieve the strings it needs for the execution of the
1540.25s - 1547.70s |  payload. So if you it's kind of uh if you are familiar it's kind of API API hashing where you
1547.70s - 1552.70s |  are retrieving the function call uh based on a specific hash. And in that case the sample the
1555.74s - 1560.74s |  payload is is looking for some specific string and for example 0x1d0 is for RSA public
1563.62s - 1568.62s |  decrypt which is one of the hooked function. Or for example for 0x300 for the ELF header
1568.74s - 1573.74s |  which is used for the deployment mechanism as well. And you have some of the strings that was
1577.58s - 1585.62s |  extracted by the backdoor and needed for the rest of the execution. So as I said there is
1585.62s - 1590.62s |  function hook that have been added by the by the by the payload itself. So first what it is,
1593.62s - 1598.50s |  what it what it is doing, it's actually retrieving obfuscated string from the tree
1598.54s - 1605.12s |  structure. And one of the string which is important here are the RSA public decrypt function
1605.12s - 1610.62s |  which is a hook and the RSA gate zero key function which is also a hook. These two
1610.62s - 1615.62s |  function are used in the latest SSH server version and are called when an RSA certificate is
1617.86s - 1623.10s |  configured is using for the authentication. Remember that because this is important. And the
1623.10s - 1629.54s |  last function which have been hook is the EVP PK set one RSA which it's a little bit well
1629.54s - 1634.64s |  because it's not used in the latest SSH version but probably that it has been set up for
1634.64s - 1642.90s |  compatibility or probably for a specific environment. There is a bunch of other checks and
1642.90s - 1649.12s |  evasion used by the sample uh by the payload. Here there is an overview so first as we saw
1649.12s - 1654.46s |  it is checks that the current process is well SSHG because there is no need to deploy the
1654.46s - 1659.46s |  backdoor if we if we are not running uh if SSHG is not running. It check for a potential kill
1661.40s - 1667.50s |  switch. So this one is not very clear. This is a string that was present into the malware
1667.50s - 1672.10s |  itself, the payload. But it's not very clear what's the goal, what was the goal of this
1672.10s - 1676.08s |  string. Some researcher are thinking that it could be like a kind of a kill switch if the
1676.08s - 1681.08s |  backdoor see the this uh strings into the the environment the the memory then it will not run.
1681.68s - 1686.68s |  Potentially a kill switch. It also abuses the legit LZMA alloc function for memory
1689.18s - 1695.62s |  allocation which is required by the payload at some point. And there is also it is the
1695.62s - 1700.62s |  backdoor is also hooking the logging function. Meaning for every authentication through the
1703.96s - 1711.38s |  backdoor nothing will be logged into the into the log of the machine. So that means it's also
1711.40s - 1716.14s |  more difficult for forensic investigation and incident response. And there is a bunch of
1716.14s - 1722.14s |  other advanced functionality such as encryption, anti-replay, it also embeds its own tiny
1722.14s - 1729.09s |  embedded disassembler which is required at some point as well. But how the how does the
1729.09s - 1734.87s |  backdoor works really? So remember I said there is uh three main function that have been
1734.87s - 1740.67s |  hooked and which is interesting as well is that the backdoor embeds three main function to be
1740.69s - 1746.67s |  triggered. To trigger this function there is kind of a magic number actually three magic
1746.67s - 1751.37s |  number and there is an operation which is used by the backdoor itself which is magic one
1751.37s - 1757.67s |  multiply by magic two plus magic draw which which will give us the command number that will
1757.67s - 1763.51s |  be triggered by the payload itself and the backdoor. So the first one command zero and
1763.51s - 1768.51s |  command one is actually an SSH authentication bypass using root login. Second one is a
1771.35s - 1776.35s |  remote code execution via systemd, cmd2 and the third one is uh cleaning uh close the
1778.73s - 1783.97s |  pre-authent authentication that have been previously opened. And if you pay attention to the
1783.97s - 1788.97s |  to the diagram below to trigger this specific uh command the attacker have to embed the
1792.45s - 1797.45s |  payload into an RSA certificate that will be read by the by the backdoor server during the
1800.91s - 1806.29s |  authentication and then there is bunch of decryption. Of course to exploit this specific
1806.29s - 1811.29s |  backdoor there is a not coded certificate used so that means only the attacker itself can log
1816.03s - 1824.47s |  in to the compromise server because he already have the private key. So to give you a little
1824.47s - 1829.47s |  more details of how was the certificate payload. So you have here a kind of an overview of
1833.25s - 1840.25s |  what is inside the certificate itself. So first this certificate is used to the connection to
1840.25s - 1845.25s |  the SSH uh to the SSH uh process to the backdoor server. Then there is an exchange of the
1847.83s - 1854.83s |  public key and this public key there is also a sharp 256 which is calculated as well. So let
1854.83s - 1860.13s |  me give you an overview of the certificate itself. First if you have a look it's a normal RSA
1860.17s - 1867.07s |  certificate but there is some interesting information. In the IV, I call that the IV because
1867.07s - 1873.75s |  it's used later. The this IV is actually the magic numbers. Remember the magic numbers are
1873.75s - 1880.39s |  used to calculate the common number that will be interpreted by the the server and the the
1880.39s - 1887.53s |  backdoor itself. And then in the modulus N uh payload in the in the modulus N part of the RSA
1887.57s - 1892.57s |  certificate there is the payload which is encrypted in Shasha 2020 uh Shasha 20 sorry. And
1895.91s - 1900.91s |  this payload is decrypted using the outcoded ED448 public key that have been exchanged
1904.99s - 1909.99s |  during the initiation of the connection. But only with the first 32 byte. And it's also
1909.99s - 1914.99s |  using the IV which are the magic numbers used outcoded into the the malicious RSA key. And
1917.89s - 1924.27s |  to decrypt the payload. Then in the decryption of the payload we have two main parts. The
1924.27s - 1930.51s |  first which is the signatures which have been verified by the payload to be sure this is
1930.51s - 1936.65s |  well this is well the attacker that has been trying to connect. And we have the payload itself
1936.65s - 1943.65s |  which have been executed. And the signature is generated with the CMD value which have
1943.67s - 1950.55s |  been calculated. A five byte flag which we don't know at this time what is it exactly. The
1950.55s - 1955.55s |  payload itself and the Shasha 256 that have been calculated from the ED448 signature. So a
1958.19s - 1964.33s |  bunch of mechanisms to avoid also uh the replay of the certificate and to investigate a
1964.33s - 1971.15s |  little bit more. And at this point JITAN is in. So there is a small um let me show you. I did a
1971.15s - 1979.90s |  small uh demonstration using I did a small demonstration using uh a payload using uh
1991.69s - 1996.69s |  someone someone reused um uh recoded actually the the backdoor. So I reused this code. So on
1999.83s - 2004.77s |  on the right you have the target which is the attacker. So what I did here I recompiled the
2004.77s - 2010.41s |  backdoor itself with my own certificate so I can reuse the code and authenticate like if I
2010.87s - 2017.11s |  was the attacker. So you have the target on your right. On the on the bottom you have the logs
2017.11s - 2022.11s |  because some researcher found that if you activate the verbose mechanism in the in the logs
2024.69s - 2030.69s |  and the configuration of SSH there is a logging feature uh that appear and then there is some
2030.69s - 2035.69s |  track some trace into the into the logs. So what I'm using here I'm actually running the
2036.05s - 2041.05s |  backdoor against my server which have been compromised and here you can see there is what I
2044.09s - 2049.33s |  did here is extracting some of the components that have been used to generate the RSA
2049.33s - 2054.93s |  certificate used to authenticate to the compromised server. And as you can see here you can
2054.93s - 2061.07s |  see the OSCE, the SHA256, the different magic number, the magic command in that case it's
2061.09s - 2067.27s |  number two so I'm using the RCE remote code execution and then we have the certificate that
2067.27s - 2073.27s |  have been sent to the compromised server. And if you look to the target here I've been
2073.27s - 2078.27s |  written a file called it's me and that have been executed by uh the certificate itself. And
2080.31s - 2085.81s |  this payload was actually part of the RSA uh key that are sent to the mal- to the
2085.83s - 2090.83s |  compromised server. The second one is a um is a remote code execution as well just to uh have a
2093.87s - 2099.01s |  river shell and to be able to uh authenticate and to do some action onto the mali- onto the
2099.01s - 2146.02s |  compromised server. Okay. Sorry about that. Okay so you may wondering who is behind uh this
2148.66s - 2154.90s |  attack. So as I as I discussed at the beginning there was multiple personas involved into
2154.92s - 2159.92s |  the uh into the deployment of the backdoor for the pressure campaign against LaCie calling. So
2162.42s - 2167.42s |  remember I talk about Jigar Kumar, Dennis Ants and Ants Jensen and G. Atan as well. So what I
2169.50s - 2175.74s |  did here I wanted to know if because we already had this their their email address also their
2175.74s - 2182.38s |  username and I wanted to understand if there is some connection or if the specific email
2182.42s - 2187.42s |  addresses were known before or not. So what I actually did I look for some uh connection using
2191.60s - 2197.64s |  this email address especially for the G. Atan user and I found out that there was only a few
2197.64s - 2204.14s |  server only a few website that was using this email address. What I found out as well is that
2204.14s - 2211.02s |  for Jigar Kumar with the proton mail address I was able to recover the date of creation of
2211.02s - 2217.66s |  this email address which was on twenty twenty-two April, April twenty-seven and which is
2217.66s - 2224.14s |  interesting because this email address have been created just a day before Jigar Kumar sent
2224.14s - 2229.14s |  the first email to the to the XE uh utils uh DL list and and project. So Jigar Kumar, Ants
2232.88s - 2237.82s |  Jensen and Dennis Ants was part of the first pressure campaign and the second one,
2237.82s - 2243.30s |  Misoator and Krigorin was part of the second pressure campaign which occurred between the
2243.30s - 2249.04s |  release of the version five six oh and the release of the version five five six one. And which
2249.04s - 2254.04s |  is interesting is that if you have a look to the structure of this email addresses they all have
2256.68s - 2262.48s |  the same structures. They have a username, they have a number and they all use used a free
2262.48s - 2267.48s |  email service. And also what I wanted to discover is does this email address are using I've been
2270.32s - 2276.86s |  for example known in public data leak database. And I checked for all of them and all of them
2276.86s - 2283.10s |  were not present in any of the public leak leak database. And Brian Krebs at the time of uh the
2283.10s - 2288.10s |  investigation and when everyone was crazy about it uh said it's super rare to have one email
2288.76s - 2293.76s |  address which is not present in data leak databases. But it's even more rare to have multiple
2298.54s - 2303.68s |  email address which are not present in any of the data leaks. Which could give us some
2303.68s - 2308.68s |  information about you know a really well crafted uh operation. So what can we do about it?
2313.05s - 2318.19s |  Well it's not an easy question and I don't think I have the the answer today. But here is some
2318.21s - 2324.09s |  elements maybe to you know just to think about it. Maybe something that could be done
2324.09s - 2328.53s |  specially on project like this one that have been widely used everywhere will be to have like a
2328.53s - 2334.37s |  strict contributor verification. Also to ensure that the builds are reproducible meaning to
2334.37s - 2340.47s |  have like the equivalent of the GitHub repository and the release of the tarball. Then
2340.47s - 2345.25s |  hooded hooks and railroad protection but as we saw in that case the backdoor were actually
2345.27s - 2351.91s |  using uh bypassing for of the railroad. And also improving dependency management could be a
2351.91s - 2359.76s |  good way to improve issue like this one. There is also something which is important to keep in
2359.76s - 2365.40s |  mind which is what does it mean for the security community and beyond. So first I think it's
2365.40s - 2371.68s |  important to keep in mind that the entire industry relies on open source tools and as we saw
2371.70s - 2376.70s |  for the XE util package some people are relying of a base project such as the XE uh util package.
2381.44s - 2387.28s |  I think also the discovery of the backdoor itself was a mix of luck, coincidence and
2387.28s - 2393.02s |  expertise because without the investigation of Andres then we won't be able to we probably
2393.02s - 2397.86s |  wouldn't wouldn't have been able to find the backdoor itself. So I think it's kind of
2397.90s - 2404.28s |  important to think about it. I believe also if you are if you have a look to the
2404.28s - 2410.68s |  sophistication, the mechanisms and the deep understanding of Linux operating systems I
2410.68s - 2416.72s |  believe it's also redefine what we call sophisticated attacker. And of course as I said
2416.72s - 2421.56s |  there is no easy solution probably the knowledge of what I'm trying to do today meaning
2421.56s - 2427.84s |  explaining you how the backdoor is working and what the attacker did is also maybe part of
2427.84s - 2433.02s |  the solution because knowledge potentially is the key so you are you are well prepared for
2433.02s - 2440.14s |  the next one. Of course in 45 minutes it's super difficult to give you the whole details.
2440.14s - 2445.98s |  There is a bunch of technical uh details uh into the the backdoor itself. There is a lot of
2445.98s - 2451.18s |  information to cover. So I want to acknowledge uh all the researcher that have been working
2451.18s - 2454.96s |  on it because they did a fantastic job and I really recommend you to have a look to the
2454.96s - 2461.60s |  different blogs at the end if you want to learn more about it. And because because of uh I
2461.60s - 2466.64s |  mean thanks to all the writer we know a little bit more today how the backdoor works but
2466.64s - 2471.52s |  there is potentially more to discover and potentially stuff that we will never discover. And
2471.52s - 2477.52s |  before to conclude on the presentation I just want you to to ask you a question to think
2477.52s - 2484.00s |  about for potentially the the rest of the day, the rest of the week or potentially the the rest
2484.00s - 2492.74s |  of your career. How many other JATAN do you think are paid are are paid to insert
2492.74s - 2496.38s |  backdoors in open source project? And thank you very much for listening me today.