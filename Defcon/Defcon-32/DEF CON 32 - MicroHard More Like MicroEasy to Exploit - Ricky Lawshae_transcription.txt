{
  "webpage_url": "https://www.youtube.com/watch?v=SPGt3M4rXJU",
  "title": "DEF CON 32 - MicroHard More Like MicroEasy to Exploit  - Ricky Lawshae",
  "description": "Microhard is a Canadian-based company that specializes in long range \"robust\" radio equipment. They are used in SCADA environments, point-of-sale terminals, power utilities, and more. From a security standpoint, however, some of their products are anything but \"robust\". And they have a habit of hiding their vulnerability fixes behind intentionally vague release notes, which will make this even more fun! (No, I'm not bitter at all) Command injections and buffer overflows abound, as well as a lesson or two in the need for a \"robust\" secure development process.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1096,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 5.00s | This text was transcribed using whisper model: large-v2

 Okay, so my name is Headless Zeke, Ricky Lausche, and this is my talk,
7.00s - 12.00s |  Micro Hard More Like Micro Easy. Pause for laughter, and off to a great start.
17.64s - 22.64s |  Okay, so yeah, first off, let me introduce myself. I'm a principal security researcher at Keysight
24.88s - 29.88s |  Technologies. I'm based out of Austin, Texas. I focus mainly on security,
30.04s - 35.04s |  offensive IOT research, and I've been doing this kind of stuff professionally since 2009.
37.44s - 42.44s |  And I speak at conferences fairly regularly. I've spoken at DEF CON like five times on the actual
45.44s - 50.44s |  stages, and this is my first time speaking at IOT Village. And then I have several hobbies. Most of
51.44s - 56.44s |  them involve me drinking whiskey. Okay, so that's who I am. Let's talk about who Micro Hard is.
62.32s - 67.32s |  They're a Canadian-based device manufacturer. They make basically cellular bridges for
71.46s - 76.46s |  Ethernet and serial devices. They're used in lots of different environments that people really
77.06s - 82.06s |  care about, such as like power utilities. I see unmanned vehicles listed on their list of
87.20s - 92.20s |  industries. You know, just basically everywhere you could possibly think of needing to remotely
93.70s - 98.70s |  access a device, they claim to be involved in some way. Okay, so that's Micro Hard as a
98.70s - 103.70s |  company. Let's talk about the device that we're going to be looking at today. It's called a
108.90s - 113.90s |  Bullet LTE-NA2. NA is for North America. So yeah, this is an LTE bridge for adding cellular
117.14s - 122.14s |  connectivity to serial and Ethernet devices. You know, it's meant for managing installations
122.90s - 127.90s |  remotely. This is a quote from their website. Connect any device, old and new, serial or
133.64s - 138.64s |  Ethernet and provide cellular remote access using the Bullet LTE-NA2. You know, what could
140.08s - 145.08s |  possibly go wrong? So I actually got this device because I was doing a security audit for a
146.04s - 151.04s |  utility company and they were wanting to deploy a bunch of different devices and wanted us to
154.00s - 158.98s |  check the security of the devices and this was one of them. And I did not end up recommending
158.98s - 163.98s |  that they deploy this in the field. And you'll see why. Okay, so first off, from a hardware
170.42s - 175.42s |  perspective, it's a 32-bit ARM Cortex A5 processor, which you can see here. It's a 32-bit
177.06s - 180.06s |  processor. You can see in the top view, this is kind of like a, you know, the top of the
180.06s - 185.06s |  board and the bottom of the board kind of picture. It's got down in the bottom of the top
186.94s - 191.94s |  view next to that orange-ish, yellow-ish thing is a Spansion flash firmware chip, 128 megs.
196.84s - 201.84s |  The entire file system is read-write, which is pretty awesome. And then it's also got 256 megs
202.58s - 207.58s |  of RAM. And then on the underside of the board, they've got this QuekTel modem, an EC25-AF.
212.26s - 217.26s |  And then they've also got connections for a SIM card slot, POE, Ethernet, USB, and serial in
222.00s - 230.04s |  addition to a couple of programmable IO ports. And then from the firmware perspective, the
230.44s - 235.44s |  firmware updates are completely unsigned and unencrypted, so you can pretty easily forge your
238.98s - 243.98s |  own if you wanted to. And they were also easy to extract with binwalk. Inside the firmware
247.32s - 253.52s |  updates, it's got the boot loader, it's got the Linux kernel, and it's got a full SquashFS
253.52s - 258.52s |  file system. So basically you could fully emulate this system if you were so inclined to
260.56s - 268.28s |  pretty easily. And then the software itself, the OS, is based loosely on OpenWrt, running a
272.52s - 277.52s |  Linux 3.6.9 kernel. In the version that I'm going to be demonstrating today, they were using
282.44s - 287.44s |  UHT2PD for web. They changed to that in the subsequent version and you'll see why they, why
287.92s - 292.92s |  they decided to change it. Um, and then, yeah, they use DropBear for SSH and TelnetD for
296.06s - 301.06s |  Telnet, kind of. Um, they actually have, whenever you log in with one of those services, uh, they
303.36s - 310.04s |  end up dropping you into like a, a jailed debug environment, um, which we'll talk about
310.04s - 315.04s |  extensively, uh, later on. And then on the UDP side, uh, they've got a discovery module,
317.48s - 323.22s |  discovery service, that basically, um, depending on the type of device you're using, will
323.22s - 330.22s |  send out a discovery probe, or will answer a discovery probe on one of these three ports and
330.22s - 336.75s |  give you a lot of information back. So, it wouldn't be one of my talks if I didn't, uh, discuss
339.53s - 346.98s |  a discovery protocol because I love discovery protocols. So on this one, like I said, it
346.98s - 351.98s |  sends, uh, or it listens for broadcast UDP messages, uh, port 2077, or 20077 is for, uh, 3G
358.82s - 363.82s |  devices, 87 is for IP based devices, and 97 is for LTE devices. So this one would respond, uh,
367.10s - 372.10s |  to broadcast messages it gets on port 20097. Uh, the magic probe is the same across the board.
373.10s - 378.10s |  And let's look at what that looks like. Um, so you can see, I'm, this is a scanner that I
382.54s - 386.88s |  wrote, um, where I just like, send out that broadcast packet to each one of those three
386.88s - 391.88s |  ports, and then I listen for responses. And so this is what the response looks like on the wire.
394.72s - 399.72s |  Um, one kind of annoying thing, um, is they, um, will respond to messages that are
402.72s - 408.56s |  sent to you from a random port on their side to your source port, but on the broadcast
408.56s - 413.56s |  address, which makes it really hard to correlate, um, responses that you get. Okay, so the
416.89s - 421.89s |  discovery, uh, response contains a lot of useful info. Uh, it's got the MAC address and the IP
423.53s - 428.53s |  address. Um, it's also got the host name and the SSID, um, for any kind of wireless, uh, stuff.
428.85s - 433.85s |  Um, and then it has the model name and the firmware version. Uh, and then it's got this thing
438.19s - 443.19s |  called NMS, um, that's the network management software. It's like their cloud based, um, thing
445.93s - 451.01s |  where you can register all of your devices and track the GPS location of all of them. Um, it's
451.01s - 455.85s |  got the domain and password hash, but I'm not going to be talking about NMS today, um,
455.87s - 460.87s |  because that's not part of this talk. Um, okay, so, and, and yeah, I wrote, uh, a scanner and
463.87s - 471.70s |  response parser and I'll put it up on my GitHub, which I'll link to later. Okay, so, uh,
471.70s - 477.48s |  let's, let's actually get into the bones. Uh, so the web management portal, this was kind of
477.48s - 483.28s |  the main focus of my audit when I was originally looking at these devices. Um, like I
483.32s - 488.32s |  mentioned earlier, it's UHC2PD, uh, based on the version from OpenWRT in 2014. Um, it's
492.76s - 499.30s |  used for configuring basically every aspect of the device. Um, and it is also reachable from
499.30s - 504.30s |  LAN and WAN side. Um, and that's enabled by default and you have to actually turn that off, um,
506.80s - 512.88s |  if you don't want it reachable from the WAN side. Um, but the best part is it's all shell
512.88s - 521.12s |  scripts. So like this is, this is the directory listing, um, and it's literally like every
521.12s - 526.12s |  single page is a shell script wrapped with a GUI. Um, so, you know, of course, uh, there are
529.16s - 535.04s |  multiple command injections throughout this thing. Um, they're all, all, uh, post-auth, so
535.04s - 542.04s |  you need a valid user account in order to access these pages. Um, so yeah, multiple command
542.04s - 549.10s |  injections, um, my example that I'm showing today, uh, is with the diagnostics page. Um,
549.10s - 554.64s |  because of course it implements ping, um, and if it has ping, it has command injection every
554.64s - 559.66s |  single time. Um, oh my god, was that really my time warning? Okay, I have to, I have to really
559.66s - 564.66s |  book it. Okay, um, so, so yeah, it has ping, so they tried to sanitize input but it failed
564.66s - 569.66s |  pretty horribly. Um, they just sanitized the host name, didn't worry about any of the other
573.20s - 579.40s |  arguments that you put in there. Um, so yeah, just leave host name blank and then put
579.40s - 586.48s |  whatever command you want, um, all in the account parameter. Uh, and let's show a demo of
586.48s - 591.48s |  that real quick. Okay, I'm not going to, I'm not going to go into, uh, lots of the, uh,
595.26s - 600.36s |  details of the exploits because I'm about to run out of time already. Um, but yeah, so this
600.36s - 605.36s |  is, this is, uh, post-auth, so, uh, you need a, a valid user name and password. But then you
611.10s - 616.10s |  run that and eventually you will, hey, you got a root shell. Um, because you injected a, you
617.10s - 622.10s |  know, whatever command you wanted to run and it has netcat on it, so I was able to get a root
624.90s - 632.05s |  shell pretty easily with that one. Okay. We're gonna, we're gonna hurry up. Okay, so yeah,
637.90s - 643.80s |  like I said, those, those, um, vulns were all post-auth, um, but I really wanted something
643.80s - 648.68s |  that was pre-auth, um, because that's so much sexier. Um, so I started looking at the
648.70s - 655.24s |  authentication, uh, the way they handled authentication. Um, and as far as logging in, um,
655.24s - 660.24s |  it was vanilla OpenWRT. They used, um, basic auth. Um, so basically base64 encoded user
663.92s - 668.92s |  colon pass. Um, and, and so since this is, you know, UHC2PD that's part of OpenWRT, you
672.46s - 678.00s |  think it would be very, uh, well vetted and everything, but it is an open source project, so
678.02s - 683.02s |  they were able to make their own modifications. Um, and so logins were generic. Logouts, um,
685.90s - 691.70s |  was where they made a mistake. Um, basically they wanted to set the basic auth header to
691.70s - 696.70s |  logout colon logout. Um, and then they did like a stir copy of that buffer to a statically
699.64s - 704.64s |  sized, uh, buffer. Um, and then they could compare what it was to logout logout and, and, you
705.32s - 710.32s |  know, log the person out that way. Um, but yeah, they didn't do any bounce checking or
712.50s - 717.50s |  anything. Um, so, so yeah, you can see, I'm just gonna skip past this cause I'm running out of
719.40s - 724.40s |  time. Um, but yeah, you can see, uh, you know, uh, stir copy, uh, and, and yeah, yeah.
724.88s - 729.88s |  Okay, let's do another demo. I am actually gonna talk about the code of this one because it was
735.62s - 740.62s |  very, uh, it was a very pat myself on the back kind of thing. This was my, my first ever in
744.50s - 749.50s |  the wild ARM ROP exploit. Um, so basically, um, yeah, so, so they do have dap and
754.70s - 761.64s |  ASLR and I wasn't able to find like a, a, um, uh, memory leak or anything to, to leak the base
761.64s - 766.64s |  address of libc, um, or UC libc. Um, so I, um, for the purposes of this demo, I disabled ASLR
772.66s - 778.90s |  but it is the lame version of ASLR where they only randomize the, the top part. Um, so in
778.90s - 783.90s |  theory you could brute force, um, by just like picking, picking an address for the base of UC
786.80s - 792.00s |  libc and then just trying over and over again and it'll just crash the website if it doesn't
792.00s - 798.28s |  work and if it, you know, if it eventually works then you get a shell. Um, but yeah, so, so
798.28s - 803.28s |  basically just, uh, you know, call, calling, uh, system, uh, from UC libc and passing, uh,
803.38s - 808.38s |  this, this command as the argument to UC libc. And this one, hey, that was really fast. So,
821.17s - 825.33s |  yeah, no authentication required for that one because it's, it's exploiting the
825.33s - 830.35s |  authentication protocol. So there's that one. And, okay, so I disclosed those back at, back
845.91s - 850.91s |  at the, um, when I was doing the audit originally. Um, they fixed it in, uh, R1112, um, by
855.05s - 860.05s |  adding more, uh, sanitization, um, and then they switched from using UHT TPD to using light
863.09s - 868.09s |  TPD. Um, so they no longer use UHT TPD. Um, but it's still all shell scripts. Um, so, so
870.63s - 875.83s |  yeah, it, um, that was the end of the audit and, um, I kind of stopped thinking
875.87s - 881.11s |  about the device. This release note still burns me to this day though because that was the
881.11s - 886.49s |  extent of the release note that they used for fixing all of my critical vulnerabilities is
886.49s - 891.49s |  miscellaneous housekeeping tasks that really, really bugged me. Okay, so, uh, cut to like a
894.25s - 899.33s |  few months ago. I decided to dig this device back out and look at it again. And this time
899.33s - 904.33s |  around I was looking at the telnet portal. Um, so like I mentioned before, um, it's, um,
906.33s - 911.67s |  a jailed environment but they give you lots of access to like, uh, QT commands for that
911.67s - 917.65s |  quack tail modem, or not QT, uh, AT commands for the quack tail modem. Um, so yeah, you can
917.65s - 922.65s |  see they give you lots of commands. Um, and that's handled by slash bin slash CLI test. Um,
926.45s - 932.13s |  that's spawned every time you log in as the admin user. Um, and that defines all of the AT
932.49s - 938.63s |  commands but, uh, not all of the AT commands were, were documented. Okay. Um, so, so yeah,
938.63s - 944.27s |  there was an undocumented command called ATM bash command. Um, that lets you run two bash
944.27s - 950.68s |  commands. Uh, PS and cat. Uh, and that's it, supposedly. Um, but the way they verified that
953.28s - 959.56s |  is by using, uh, str, str in case compare. And they were using the length of, uh, what they
959.58s - 964.58s |  were comparing from either PS or cat. So as long as the string, like, began with PS or cat, uh,
967.12s - 973.20s |  then you could put whatever you wanted at the end of it. Um, so, so basically, uh, yeah, you
973.20s - 979.34s |  just do like PS semi-colon and then another command and there, there you go. Okay, one last
979.34s - 987.79s |  demo and then, and then, um, I'm, I'm basically done. Okay, so again, post-auth, ray, there
987.79s - 1002.10s |  you go. Okay, so let's just blast through these last couple of slides to wrap up. Um, okay, so
1011.74s - 1016.34s |  that one was actually coincidentally fixed like the month before I found it, um, which was
1016.34s - 1021.34s |  also kind of annoying. Um, but the fix, like, I mean, it was, it was basically just in, in bash
1021.96s - 1026.96s |  command, they removed that one and didn't touch anything else and may have also added in some
1029.30s - 1034.30s |  brand new command injection forms in the latest firmware. Um, but yeah, so, uh, you can see
1036.78s - 1041.68s |  where they were trying to, to secure things and then they just failed miserably every single
1041.68s - 1046.68s |  time. Um, they need actual, like, you know, secure development processes. Um, and also I, I
1047.50s - 1052.50s |  get really pissed off about the vague release notes because in my opinion it like minimizes
1055.46s - 1060.88s |  the impact. If I saw something that just said, you know, miscellaneous housekeeping tasks and
1060.88s - 1066.88s |  I'm running in a, um, critical environment, I'm gonna completely ignore that update, uh,
1066.88s - 1072.18s |  because it seems like it's something I don't have to install and so it's just leaving me still
1072.18s - 1077.26s |  vulnerable. Um, but yeah, and then if it has command, er, if it has ping, it has command
1077.26s - 1082.26s |  injection. And that's, uh, how you get in touch with me. I'm HeadlessEc on most things. Um,
1084.90s - 1089.90s |  that's my GitHub. Um, and yeah, that is it. Sorry if I went over time. That's it.