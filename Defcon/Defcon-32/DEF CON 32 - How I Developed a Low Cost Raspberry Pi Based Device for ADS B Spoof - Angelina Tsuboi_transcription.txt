{
  "webpage_url": "https://www.youtube.com/watch?v=KytDyg5s-E8",
  "title": "DEF CON 32 - How I Developed a Low Cost Raspberry Pi Based Device for ADS B Spoof - Angelina Tsuboi",
  "description": "As a pilot and cybersecurity researcher, I am very interested of the nexus between aviation and security. To explore this interest, I developed a device called Fly Catcher - a device that detects for aircraft spoofing by monitoring for malicious ADS-B signals in the 1090MHz frequency. The device consists of a 1090 MHz antenna, a Flight Aware RTL SDR, a custom 3D printed case, a portable battery charger, and a MicroUSB cable.\n\nThe device receives ADS-B information from the antenna and the software-defined radio, which is then passed into a Convolutional Neural Network written with Python to detect whether or not the aircraft is spoofed. I trained the neural network on a dataset of valid ADS-B signals as well as a generated spoofed set of aircraft signals, to teach Fly Catcher how to detect and flag any suspicious ADS-B signals. It does this by checking for discrepancies in the signal's characteristics, such as its location, velocity, and identification.\n\nThe result outputted by the neural network is then displayed onto a radar screen allowing users to detect spoofed aircraft near them. To test the device, I brought it with me for an hour-long flight to scan for a wide variety of aircraft enroute. After the flight, the data was fed into the Neural Network to analyze any spoofed aircraft I might have encountered.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1201,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.50s - 1.62s | This text was transcribed using whisper model: large-v2

 Hello, everyone.
1.62s - 4.38s |  Thank you so much for coming to my talk today.
4.38s - 7.66s |  Today, I'll be speaking a little bit about ADS-B security
7.66s - 9.46s |  and a personal project I've worked on
9.46s - 11.90s |  on the intersection of aid deviation
11.90s - 16.26s |  and signals intelligence called Flycatcher.
16.26s - 19.74s |  So quick overview of the device I created.
19.74s - 21.06s |  It's called a Flycatcher
21.06s - 23.98s |  and it's made for effective ADS-B monitoring
23.98s - 27.68s |  and detecting foreign instances of aircraft spoofing.
29.30s - 30.98s |  It's low cost and reliable.
30.98s - 33.58s |  It's created using the Raspberry Pi
33.58s - 34.82s |  and it's compatible
34.82s - 39.02s |  with multiple software-defined radio signal sources.
39.02s - 41.96s |  And I created my own convolutional neural network
41.96s - 45.26s |  that parses ADS-B inputs in order to detect
45.26s - 48.70s |  for reliable and unreliable aircraft signals.
50.22s - 52.10s |  A little bit about my background.
52.10s - 54.42s |  I'm still upstarting in my cybersecurity field
54.42s - 58.30s |  but I've been a software developer for about a decade
58.30s - 61.06s |  and I've been focusing on aerospace security
61.06s - 64.06s |  for the past few years with an emphasis on aviation
64.06s - 68.02s |  due to my piloting experience.
68.02s - 70.90s |  And a little bit of recap on what ADS-B is.
70.90s - 73.66s |  It stands for Automatic Dependent Surveillance Broadcast
73.66s - 76.90s |  and it's a mandated technology for performing surveillance
76.90s - 79.54s |  and signals intelligence on airplanes.
79.54s - 82.66s |  And if we break the acronym down, it's automatic,
82.66s - 84.98s |  meaning it doesn't require any manual input
84.98s - 86.40s |  from the pilot itself.
86.40s - 89.46s |  It's dependent, meaning that it requires GPS signals
90.18s - 91.24s |  from satellites in order to transmit
91.24s - 93.82s |  the aircraft's information and positioning.
94.90s - 96.22s |  It's meant for surveillance,
96.22s - 100.50s |  so it contains complete comprehensive information
100.50s - 102.86s |  about the data of the aircraft transmitted itself,
102.86s - 106.46s |  such as its airspeed, positioning, altitude, and so forth.
106.46s - 110.46s |  And lastly, it continuously beacons out and broadcasts data
110.46s - 114.42s |  allowing for ground-based ATC or other pilots
114.42s - 118.58s |  to receive that information in order to triangulate
118.58s - 124.10s |  where the aircraft is positioned in the sky.
124.10s - 128.74s |  So here's a imagery conceptual overview of how ADS-B works.
128.74s - 131.74s |  All ADS-B signals are derived
131.74s - 134.38s |  from the Global Navigational Satellite System,
134.38s - 137.62s |  which provides positioning information
137.62s - 140.50s |  to the aircraft itself, which is then beaconed out
140.50s - 143.90s |  via the mandated ADS-B out hardware components
143.90s - 145.50s |  internally on the airplane.
145.50s - 148.24s |  And once that information is beaconed out via packets
148.24s - 150.40s |  on the 1090 megahertz protocol,
150.40s - 152.56s |  it can be received by other airplanes
152.56s - 155.16s |  alongside ground-based receivers and antennas
155.16s - 158.36s |  alongside air traffic control in order for those receivers
158.36s - 163.46s |  to figure out where the airplane is positioned.
163.46s - 166.88s |  So this technology works using three core components
166.88s - 170.30s |  that allow for ADS-B to be broadcasted on airplanes.
170.30s - 171.56s |  There's the GPS receiver
171.56s - 173.60s |  that receives the positioning information
173.60s - 175.00s |  from the satellites themselves,
175.00s - 178.72s |  and then the ADS-B packets are transmitted
178.72s - 180.40s |  via the transponder on the plane,
181.12s - 182.28s |  which is required on all planes.
182.28s - 185.00s |  And it typically uses the mode S protocol
185.00s - 188.74s |  in order to send comprehensive data about the plane itself.
188.74s - 191.96s |  And internally on the plane, it has an ADS-B in,
191.96s - 194.72s |  allowing for continuous monitoring
194.72s - 197.40s |  by the pilots themselves of other air traffic
197.40s - 201.72s |  in the vicinity.
201.72s - 206.00s |  Although ADS-B is relied on by a wide range of airplanes
206.00s - 210.00s |  and pilots worldwide, it has some core vulnerabilities.
210.00s - 212.56s |  It is unauthenticated and unencrypted.
212.56s - 213.72s |  Unauthenticated meaning
213.72s - 216.28s |  that there is no verification of the transmission.
216.28s - 220.04s |  So any ground-based hacker can transmit ADS-B packets
220.04s - 222.96s |  and it'll automatically be received as a packet.
222.96s - 224.80s |  There's no amount of verification
224.80s - 228.30s |  alongside its unencrypted nature,
228.30s - 231.32s |  making it transparent to anyone
231.32s - 235.44s |  who tunes into that frequency.
235.44s - 238.20s |  This reveals a lot of attack vectors,
238.20s - 241.22s |  especially on the communications end.
242.18s - 245.42s |  The four core ones are jamming, spoofing,
245.42s - 247.78s |  replay attacks, and message injection.
247.78s - 249.96s |  Jamming is when a ground-based transmitter
249.96s - 252.02s |  can flood the ADS-B frequency
252.02s - 255.02s |  with a bunch of garbalist data.
255.02s - 256.18s |  There's also spoofing,
256.18s - 259.40s |  where it's more of a selective-based jamming attack,
259.40s - 262.38s |  where you can custom fabricate data packets
262.38s - 263.80s |  and then transmit it.
263.80s - 266.90s |  This can effectively create something called a ghost plane,
266.90s - 269.70s |  where a ghost airplane would show up
269.70s - 271.46s |  and pop up on the ADS-B feed
271.46s - 273.46s |  that isn't really a plane itself.
273.46s - 274.62s |  There's replay attacks,
274.62s - 278.14s |  where you capture ADS-B packets from an earlier time
278.14s - 279.30s |  and then replay it.
279.30s - 282.22s |  So you're effectively creating a duplicate airplane
282.22s - 285.84s |  that is then transmitted and then received.
285.84s - 287.86s |  And then there's also message injection,
287.86s - 290.08s |  where you play around with the ADS-B packets
290.08s - 291.42s |  individually themselves
291.42s - 293.74s |  in order to mess with specific telemetry,
293.74s - 296.58s |  like the altitude, airspace, airspeed,
296.58s - 298.10s |  positioning, and so forth.
299.02s - 302.70s |  The one I chose to focus on for this project is spoofing,
302.70s - 305.82s |  because I enjoyed its customized nature.
305.82s - 309.60s |  A lot of spoofing can be detected
309.60s - 311.02s |  using artificial intelligence,
311.02s - 313.06s |  and I wanted to pursue that kind of modality
313.06s - 318.58s |  for detecting spoofed airplanes for this project.
318.58s - 320.82s |  So how spoofing on ADS-B works
320.82s - 323.06s |  is that a ground-based hacker
323.06s - 326.38s |  can transmit ghost aircraft into the sky
326.38s - 328.82s |  by creating custom-fabricated packets
328.82s - 331.46s |  that mimic the ADS-B protocol.
331.46s - 334.74s |  And these spoofed airplanes can be tracked
334.74s - 336.18s |  by other airplanes in the sky
336.18s - 340.79s |  alongside ground-based receivers.
340.79s - 343.41s |  So I went through a four-step build process
343.41s - 345.89s |  as I was constructing this device.
345.89s - 349.81s |  Firstly, I set up a ADS-B reception ground station
349.81s - 354.25s |  using four components that I'll be outlining later.
354.25s - 356.73s |  I went about constructing a device so it was portable
356.73s - 359.45s |  and I could stow it on the back of an airplane.
359.45s - 362.81s |  Then I went about training a deep neural network
363.77s - 368.33s |  in order to detect for instances of aircraft spoofing.
368.33s - 371.59s |  And then lastly, I stowed the device itself
371.59s - 373.77s |  on the back of a sport cruiser
373.77s - 375.65s |  and flew it around the South Bay
375.65s - 377.71s |  in order to get access to data
377.71s - 380.41s |  in order to train the artificial intelligence
380.41s - 384.70s |  machine learning model that I created.
384.70s - 386.50s |  So one thing I wanted to mention
386.50s - 389.30s |  is there's a wide range of credible data sources
389.30s - 391.46s |  in order to get access to ADS-B data
391.46s - 393.50s |  that you can actually access right now.
393.50s - 396.90s |  There's ADS-B Exchange, FlightAware, ADS-B Hub.
396.90s - 399.62s |  For this project, I wanted to go about
399.62s - 402.90s |  manually getting these transmitted signals.
402.90s - 406.34s |  So I set up my own ADS-B reception ground station.
406.34s - 411.16s |  This consisted of a FlightAware Pro Stick Plus SDR
411.16s - 412.98s |  as my software-defined radio option
412.98s - 415.62s |  in order to get specialized ADS-B signals,
415.62s - 419.96s |  which relies on the RTL2832U chipset,
419.96s - 421.06s |  which is really configurable
421.06s - 423.94s |  with a lot of dumb 1090 decoders.
423.94s - 426.78s |  I used a 1090 megahertz rubber ducky antenna
426.78s - 428.76s |  for a cheap and reliable setup,
428.76s - 433.22s |  the Raspberry Pi in order to analyze the ADS-B packets
433.22s - 435.78s |  alongside the FlightAware GUI display
435.78s - 437.96s |  in order to have a visual output
437.96s - 443.14s |  of the ADS-B display data I was getting.
443.14s - 446.26s |  So once you're able to receive the ADS-B signals
446.26s - 449.34s |  that are propagated on the 1090 megahertz frequency,
449.34s - 452.22s |  you need to go about decoding these signals.
452.22s - 454.14s |  And the signals I chose to decode
454.14s - 456.70s |  were the ones transmitted on the mode S.
456.70s - 458.66s |  There's different modes of ADS-B.
458.66s - 460.62s |  There's A, C, and S.
460.62s - 463.38s |  S is the most comprehensive of all the modes
463.38s - 466.14s |  and contains advanced mode with comprehensive data
466.14s - 467.54s |  about the aircraft itself.
468.66s - 471.86s |  And on the bottom is a mesh structure breakdown
471.86s - 473.06s |  of ADS-B packets.
473.06s - 476.06s |  You can see it starts with the first few bits
477.54s - 479.38s |  outlining the downlink format.
479.38s - 481.06s |  There's the transponder capability,
481.06s - 482.34s |  the ICAL designation,
482.34s - 485.34s |  which all aircraft has its own ICAL identifier
485.34s - 488.50s |  to identify it alongside its message
488.50s - 492.06s |  taking up the 33 to 88-bit sequence
492.06s - 498.26s |  alongside with a parity ID appended to the end of it.
498.26s - 500.66s |  So the way I integrated Tom1090
500.66s - 504.38s |  was I embedded it directly on the Raspberry Pi itself.
504.38s - 507.86s |  And as soon as the 1090 megahertz ADS-B antenna
507.86s - 510.06s |  was able to retrieve the signals,
510.06s - 514.02s |  it fed it through the Dump1090 decoder software protocol,
514.02s - 516.86s |  which you can download and install directly onto the Pi.
516.86s - 519.22s |  And then it creates a JSON output,
519.22s - 521.54s |  which you can parse and visualize
521.54s - 526.36s |  on a wide range of GUI sources.
526.36s - 529.32s |  I also wanted to add some sort of plotting and visualization
529.32s - 532.76s |  for both my ground station and the device itself.
532.76s - 535.60s |  So once the JSON output was tabulated
535.60s - 537.76s |  by the Dump1090 decoder,
537.76s - 541.12s |  I fed it into the FlightAware visualization dashboard
541.12s - 547.09s |  in order to see the live ADS-B broadcasts.
547.09s - 550.25s |  Once I was able to get a sufficient ground station running
551.17s - 554.41s |  and it was able to pick up some sort of signals,
554.41s - 557.01s |  I wanted to convert it into a device
557.01s - 558.61s |  so I could make it portable
558.61s - 561.17s |  and have it bestowed on the back of an airplane
561.17s - 563.93s |  in order to get access to more comprehensive data
563.93s - 566.13s |  in a wide range of locations.
566.13s - 569.73s |  Here's a build outline of materials that I used.
569.73s - 574.41s |  I used the Raspberry Pi 3B, a custom case enclosure
574.41s - 578.77s |  alongside a TFT display case on top
578.77s - 584.31s |  alongside my 1090 megahertz rubber ducky antenna.
584.31s - 586.95s |  The final build looks something like that.
586.95s - 590.63s |  It was good because it had a battery case
590.63s - 592.63s |  attached to the bottom of it,
592.63s - 595.71s |  making it so I could use it wherever I wanted to.
595.71s - 597.07s |  It was highly portable.
597.07s - 598.71s |  It didn't take up that much space
598.71s - 603.05s |  and it was a durable design.
603.05s - 605.17s |  So once the device was constructed,
605.17s - 608.85s |  I went about architecting the algorithm
608.85s - 612.29s |  that was supposed to be classifying for spoofed airplanes.
612.29s - 616.97s |  And there's a wide range of indicators of spoofed aircraft.
616.97s - 620.17s |  And here's a graph of the altitude and speed graph
620.17s - 622.77s |  of a typical and genuine aircraft.
622.77s - 627.17s |  You can see that it outlines the main phases
627.17s - 628.33s |  of flight itself.
628.33s - 630.01s |  So you can see in the beginning,
630.01s - 634.29s |  it will have like a ascension as the airspeed goes up
634.29s - 636.89s |  and the altitude goes up as the airplane is taking off.
636.89s - 640.77s |  You can see the cruising indication
640.77s - 642.61s |  near the middle of the flight.
642.61s - 645.73s |  And then finally you see a decrease of all the values
645.73s - 647.69s |  as the airplane is landing.
649.13s - 652.29s |  You can check for spoofed airplanes
652.29s - 656.65s |  by checking for inconsistencies of telemetry values,
656.65s - 657.69s |  such as positioning.
658.05s - 660.45s |  If it has weird GPS coordinates
660.45s - 664.29s |  that don't outline its phase of flight or its location,
664.29s - 667.65s |  or it just abruptly pops up in different locations,
667.65s - 668.97s |  that's an indication.
668.97s - 671.49s |  There's also altitude, if there's a lot of variance
671.49s - 673.21s |  in the altitude being displayed
673.21s - 675.81s |  on some of the ADS-B plotline charts.
676.69s - 679.05s |  Also identification, spoofed airplanes
679.05s - 681.57s |  are not really identified.
681.57s - 684.49s |  So within the ADS-B message structure itself,
684.49s - 687.65s |  you'll see like a null or you won't see a lot of values
688.49s - 696.64s |  for any of the identification fields in the data packet.
696.64s - 699.16s |  So once I was able to get the feature vectors
699.16s - 701.44s |  derived from the ADS-B inputs,
701.44s - 704.16s |  I went about creating a dense neural network
704.16s - 707.48s |  in order to classify for these spoofed signals.
707.48s - 711.80s |  And a dense neural network overlays a neural network itself
711.80s - 714.08s |  which is a artificial intelligence model
714.08s - 716.44s |  that's derived from the human brain
716.44s - 719.48s |  and it consists of multiple interconnected layers.
719.48s - 720.44s |  And in a dense one,
720.44s - 723.12s |  you'll see all the layers connected together.
723.12s - 724.92s |  And as each neuron process
724.92s - 727.24s |  there's the input from the feature vectors,
727.24s - 729.72s |  it applies some weight and bias to it
729.72s - 732.84s |  and then it passes the result through an activation function
732.84s - 735.12s |  in order to make an accurate guess
735.12s - 738.16s |  of whether an airplane is spoofed
738.16s - 742.97s |  and running it through a binary classifier.
742.97s - 746.25s |  So I went about creating the DNN
746.25s - 749.41s |  by custom coding a Python script
749.41s - 752.17s |  that utilize the TensorFlow library
752.17s - 755.93s |  in order to accurately detect for this spoofed airplane.
755.93s - 758.77s |  And I used the ReLU activation functions
758.77s - 762.85s |  at each of the three layers consisting of the DNN
762.85s - 766.97s |  and those were three densely connected interconnected nodes
766.97s - 770.49s |  and the final layer contained a sigmoid function
770.49s - 773.05s |  in order to make a binary classification.
773.05s - 775.65s |  Zero indicating that the airplane was not spoofed
775.65s - 783.14s |  and one being that the airplane was spoofed.
783.90s - 785.86s |  As for the training data I used for the model,
785.86s - 788.26s |  I used historical ADS-B records
788.26s - 791.42s |  from a wide range of ADS-B data sources.
791.42s - 795.34s |  ADS-B exchange had ADS-B data sets
795.34s - 799.26s |  going back to the 2000s that I was able to leverage,
799.26s - 803.70s |  FlightAware being another great source and OpenSky.
803.70s - 806.86s |  And I was able to download archives of their ADS-B data
806.86s - 809.98s |  from CSB records they had had in the past.
809.98s - 813.86s |  And I was able to get data from my own ground station
813.86s - 815.62s |  alongside the device itself.
815.62s - 818.34s |  What I did was I would take all those signals
818.34s - 821.02s |  and once it passed through the dump 1090 decoder,
821.02s - 824.02s |  I saved all the data into a CSB record
824.02s - 829.16s |  for it to be put into the model.
829.16s - 831.44s |  As for testing the device itself,
831.44s - 834.28s |  I really wanted to get a wide range of data
834.28s - 835.76s |  from a lot of locations.
835.76s - 839.12s |  And although it could have traveled to different locations
839.12s - 842.28s |  via car or anything in order to get the data,
842.28s - 846.24s |  I wanted to go full on with this project.
846.24s - 849.64s |  So I put the device on the back of a sport cruiser,
849.64s - 851.36s |  which is a single engine airplane.
851.36s - 854.68s |  And I flew it around a lot of different areas
854.68s - 858.16s |  within the South Bay area in Los Angeles.
858.16s - 859.52s |  And you can see that's a picture of me
859.52s - 861.68s |  loading it on the sport cruiser
861.68s - 864.62s |  and me flying the plane to all those different locations.
865.62s - 868.62s |  And as for the data collection process,
869.58s - 871.74s |  the device just sat on the back of the airplane
871.74s - 874.58s |  and it was continuously monitoring the ADS-B signals
874.58s - 878.02s |  around me using a 1090 megahertz antenna.
878.02s - 882.30s |  And it was just keeping a file in the Raspberry Pi itself,
882.30s - 887.30s |  which contained ADS-B records of all the airplanes nearby.
890.03s - 892.47s |  As for the scan locations in this project,
892.47s - 897.47s |  I went pretty much all the South Bay Los Angeles area,
897.51s - 901.11s |  Santa Monica, Torrance, Malibu, Palisades,
901.11s - 903.23s |  Burbank, and downtown Los Angeles.
903.23s - 906.23s |  I made sure to go through pretty popular airspaces.
907.15s - 909.59s |  LAX was really popular.
909.59s - 911.55s |  Burbank was also popular.
911.55s - 915.11s |  And I also went to local airports
915.11s - 919.27s |  like Santa Monica airports, Van Nuys,
919.27s - 921.03s |  in order to get a wide range of data
921.03s - 923.07s |  because especially at commercial airports,
923.07s - 925.19s |  you'll get like 747s,
925.19s - 927.75s |  but you won't get single engine airplanes.
927.75s - 931.39s |  While if I went to a more local airport,
931.39s - 934.63s |  I would get a bigger range or a bigger breadth of data
934.63s - 937.39s |  because that's where you get like multi-engines,
937.39s - 940.71s |  helicopters, single engine airplanes.
940.71s - 942.99s |  So I wanted to have data that reflected
942.99s - 949.43s |  both general aviation and commercial aviation as well.
949.43s - 953.43s |  Once I was able to collect and tabulate this data,
954.27s - 955.11s |  in a CSV format,
955.11s - 957.83s |  I fed it into the deep neural network model
957.83s - 960.15s |  I created using TensorFlow.
960.15s - 963.83s |  And then in order to get a visual plot of the classification
963.83s - 966.51s |  once the spoofed aircraft was classified,
966.51s - 968.67s |  I used a library called Folium
968.67s - 976.72s |  in order to make a visual plot of the spoofed airplanes.
976.72s - 978.80s |  Build improvements going forward.
978.80s - 983.20s |  One is using more proper signals intelligence techniques.
983.20s - 987.28s |  This was a pretty straightforward scan of it.
987.28s - 990.96s |  So it wasn't really analyzing the signals themselves.
990.96s - 993.64s |  It was analyzing the data contained within the signals.
993.64s - 997.48s |  But another approach of detecting for ADS-B spoofing
997.48s - 1000.68s |  is looking for the first phase of the retrieval process
1000.68s - 1002.72s |  where you analyze the signals themselves.
1002.72s - 1004.52s |  And one modality of doing this
1004.52s - 1007.64s |  is a technique called RSSI fingerprinting.
1007.64s - 1010.64s |  RSSI indicating the signal strength of the aircraft.
1011.32s - 1014.32s |  ADS-B out transmission.
1014.32s - 1018.44s |  So as each airplane transmits the ADS-B message
1018.44s - 1019.92s |  using its ADS-B out,
1019.92s - 1023.80s |  it will have its own unique RSSI identifier.
1023.80s - 1026.20s |  And this could be a more proper technique
1026.20s - 1031.04s |  of analyzing each of the individual RF characteristics
1031.04s - 1032.60s |  of the signals themselves.
1032.60s - 1037.60s |  And you can localize the signals where they come out of
1037.92s - 1040.16s |  in order to identify the airplanes.
1040.68s - 1042.84s |  And typically when you're doing RSSI fingerprinting
1042.84s - 1043.96s |  for a spoofed plane,
1043.96s - 1048.04s |  you get more deviations and deflections of the RSSI signal.
1048.04s - 1049.52s |  While for a valid plane,
1049.52s - 1051.60s |  you'll have more of a consistent output.
1051.60s - 1054.32s |  So that would be a signals intelligence way
1054.32s - 1056.16s |  of improving this build.
1056.16s - 1059.36s |  And secondly is to use more refined algorithms.
1059.36s - 1061.24s |  I use the DNN for this approach,
1061.24s - 1064.16s |  but there's a lot of exploration with other models
1064.16s - 1065.60s |  that could be done.
1065.60s - 1067.52s |  So using other deep learning models
1067.52s - 1069.32s |  like recurrent neural networks
1069.32s - 1073.04s |  or long short-term memory networks could be sufficient
1073.04s - 1076.04s |  alongside adding reinforcement techniques
1076.04s - 1077.80s |  in order to improve the accuracy
1077.80s - 1079.92s |  of the current convolutional network.
1080.96s - 1083.48s |  The tests I ran with this convolutional network
1083.48s - 1087.08s |  reflected accuracy rates of 90%,
1087.08s - 1092.12s |  but that could be improved using these approach.
1092.12s - 1096.40s |  Additional enhancements would be the training data itself.
1096.40s - 1098.72s |  One huge constraint with this project
1098.76s - 1100.24s |  was the training data
1100.24s - 1103.16s |  because a lot of the training data for the spoofed dataset.
1103.16s - 1106.24s |  So there was a valid dataset and there was a spoof dataset.
1106.24s - 1108.12s |  The valid dataset was very easy to get
1108.12s - 1111.60s |  because there's a huge tabulated records
1111.60s - 1116.00s |  of ADS-B messages that are from a wide range of sources.
1116.00s - 1118.20s |  But when you're dealing with spoof sources,
1118.20s - 1120.84s |  I can only get it from very specialized people
1120.84s - 1123.72s |  within the aviation signals intelligence techniques.
1123.72s - 1126.08s |  And you're also dealing with the legality issue
1126.08s - 1127.84s |  in that regard because it's really hard
1127.84s - 1131.40s |  to get access to spoofed data you can train a model on.
1131.40s - 1135.96s |  So I would say for half the spoof signals,
1135.96s - 1138.80s |  half of them had to be generated myself.
1138.80s - 1141.76s |  So I had to go into the perspective
1141.76s - 1144.00s |  of a person who would be spoofing these signals
1144.00s - 1147.44s |  in order to manually generate ADS-B messages
1147.44s - 1150.44s |  that would be spoofed in nature in order to train this model.
1150.44s - 1152.88s |  However, having more realistic data
1152.88s - 1154.24s |  in order to train this dataset
1154.24s - 1161.96s |  would make this neural network model more accurate.
1161.96s - 1166.68s |  And one way for increasing the accuracy rate
1166.68s - 1168.40s |  of another way of doing it
1168.40s - 1171.64s |  would also be using a technique called data augmentation,
1171.64s - 1174.08s |  which would further refine the approach
1174.08s - 1176.92s |  of manually generating these spoofed signal messages
1176.92s - 1181.00s |  that I could directly feed into the neural network itself,
1181.00s - 1184.64s |  allowing me to have a more comprehensive data array
1184.64s - 1190.92s |  of spoofed signals that I could train this model on.
1190.92s - 1192.20s |  Thank you. That's about it.
1192.20s - 1194.48s |  If you have any questions, feel free to come up
1194.48s - 1196.64s |  or ask them right now.
1196.64s - 1197.92s |  That's my contact information,
1197.92s - 1199.92s |  but thank you so much for coming today.