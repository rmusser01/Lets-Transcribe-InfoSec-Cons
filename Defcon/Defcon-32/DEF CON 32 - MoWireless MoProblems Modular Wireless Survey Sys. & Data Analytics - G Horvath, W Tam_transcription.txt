{
  "webpage_url": "https://www.youtube.com/watch?v=jrlvMXfftec",
  "title": "DEF CON 32 - MoWireless MoProblems: Modular Wireless Survey Sys. & Data Analytics - G Horvath, W Tam",
  "description": "Often there are times to collect #allTheWireless, but with that comes some planning, we've created a modular survey system and developed an Elastic-based analytic platform named PacketGlass to visualize and explore the terabytes of information collected over multiple surveys. Our system collects all data types supported by Kismet plus raw PCAP data, ingests the data, and displays tens of millions of devices in an easy to query and display manner. Using different parsing techniques, We plan to show how to build one of these survey platforms and discuss the methodology used to transform Elastic into a robust analytical platform.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1269,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 5.00s | This text was transcribed using whisper model: large-v2

 Alright, good afternoon everyone and this next talk that is sponsored by the Packet Hacking
7.80s - 12.80s |  Village. Is More Money More Problems, oh actually I'm wrong, sorry. Is Mo Wireless More
14.08s - 21.77s |  Problems by Jeff Harv, uh, Jeff Horvath and Winston Tam.
24.41s - 27.35s |  Hey guys, how you doing? Thanks for, uh, thanks for coming out to our talk today. Uh, Mo
27.35s - 30.81s |  Wireless, Mo Problems, modular wireless security systems and the data analytics at
31.03s - 33.73s |  the Packet Hacking Village. Welcome. Uh, I'm Jeff Horvath from Alsatian Consulting. Uh,
33.73s - 39.07s |  presenting with me today is Winston Tam from Uplinks LLC. Hello. So tell you guys a little
39.07s - 42.61s |  bit about me. I did 13 years in the army as an intelligence officer. I did 10 of those
42.61s - 47.65s |  years in special operations units. Uh, once I got out of the military, I started Alsatian
47.65s - 51.35s |  Consulting. Uh, and there's our website if you ever want to check us out. We do cyber
51.35s - 56.23s |  security, uh, digital signature reduction, personal data protection to private sector
56.25s - 60.85s |  and public sector individuals. Uh, I have a BA in political science from Drexel
60.85s - 64.69s |  University. I have a master's in information security engineering from the Sands
64.69s - 68.89s |  Institute. And with that I got 10 GAAC certifications and there's my analyst ID so you
68.89s - 73.97s |  can prove that I'm not a liar. Uh, I'm a huge wireless enthusiast and I have two German
73.97s - 80.41s |  shepherds, a 13 year old girl named Bell and a three year old boy named Gunner. Uh,
80.41s - 85.15s |  hey everybody, my name's, uh, Winston. Uh, I am a, uh, I work in software development with
85.17s - 89.47s |  my company, uh, Uplinks. Uh, I spent eight years in the Navy, uh, for those special
89.47s - 93.11s |  operations. Uh, during that time I was a network engineer, pen tester, and a red
93.11s - 98.11s |  teamer. Uh, I also did like three concurrent years as a commercial pen tester for banks,
99.49s - 103.89s |  ISPs, and, uh, funny enough, like an Indian reservation. They get like a .gov domain.
103.89s - 108.89s |  That's kind of cool. Um, yeah, I do, uh, DIY tinkering, um, love 3D printing, uh, have a
110.33s - 115.13s |  lot of projects, a bunch of expired certs I don't care about. Uh, I'm a proud Bengal
115.15s - 120.69s |  cat dad. Uh, I stopped playing factorial. I switched over to RimWorld and, uh, but I'm
120.69s - 126.49s |  still, yeah, I know, I know. Yeah. And, uh, I'm a decent rock climber. Uh, and yeah,
126.49s - 127.23s |  that's how I spend my time.
129.69s - 133.53s |  So let's talk about why we did this, why, uh, the impetus behind this, this whole
133.53s - 137.49s |  project and me being a huge wireless nerd. Uh, I wanted to collect large swaths of
137.49s - 140.67s |  data. I want to collect all of the, all of the channels, all of the packets, get all
140.67s - 144.77s |  of the things. Uh, and my initial thought for this was, okay, how many adapters can
144.79s - 149.29s |  I actually put onto one computer? Can I just do an all in one situation? And if I can,
149.29s - 153.23s |  how physically big is that and how much power is that going to take? And what I found
153.23s - 157.97s |  was that that then creates a huge issue with form factor because in order to put the
157.97s - 161.87s |  requisite amount of cards that we have displayed here on the, on the front on one
161.87s - 166.11s |  computer, that's going to be a rather large box. Uh, so there's form factor issues
166.11s - 169.81s |  that were power concerns with it, with getting enough power to, to have that and
169.81s - 173.45s |  actually have it be kind of portable, uh, number of peripheral devices, right? The
173.47s - 176.99s |  more things you add, the more the operating system has to take care of and has to keep
176.99s - 180.59s |  track of. So the more things you add, the more Ram you have, and eventually you have
180.59s - 185.63s |  this incredibly powerful system that really can only do about one or two things. Um, and
185.63s - 189.31s |  with all that collection, even if we did get that to work, it still has a large amount
189.31s - 194.23s |  of data. I mean, think about how much wifi is flying around white right now and how
194.23s - 199.35s |  much, uh, how much data in a one hour run you can get if you're listening to every
199.35s - 203.85s |  single channel. So we had a lot of large amounts of data that were, were choking my
203.85s - 206.93s |  analytic tools. I couldn't put it into Google earth. I couldn't put it into
206.93s - 210.97s |  another app called QGIS. I couldn't put it into wire shark because they were just
210.97s - 215.89s |  too big and I would end up either having to strip out data and miss things or I
215.89s - 220.57s |  would end up having, um, you know, an incomplete amount of data. So my solution
220.57s - 224.13s |  to that is building the signal processing and reconnaissance kit yellow, which yes,
224.13s - 227.13s |  I know it looks a little orange, but I really wanted the last letter to be a Y
227.13s - 230.59s |  and I couldn't think of any kind of tech thing that started with Y. So that's why it
230.59s - 234.99s |  ends in Y and that's why I'm calling that yellow. Um, it's a modular wireless
234.99s - 238.83s |  collection. Each Raspberry Pi is set to do a different band of the wireless band,
238.83s - 243.71s |  uh, frequency. Uh, it also do Bluetooth BLE. Um, with these Android phones, it
243.71s - 248.39s |  will do, um, cellular parameters. So what tower you're on, what frequencies you're
248.39s - 252.39s |  talking to the cell network on, how good or how bad of service you have, how far
252.39s - 255.19s |  you are from the tower. Because again, I'm a huge wireless nerd and that stuff
255.19s - 261.09s |  really interests me. Uh, it's got 13 alpha NEH cards, 13, uh, media tech alpha
261.09s - 266.83s |  cards, one wifi six card because there really isn't that much wifi six and me
266.83s - 272.07s |  being a self funded guy, I'm, uh, not going to waste money buying, uh, chips
272.07s - 275.57s |  that I'm, that just aren't going to get used. Uh, and then there are five new
275.57s - 281.51s |  like SDRs running, uh, looking for RTL 433 compatible devices. Uh, again, this
281.53s - 285.27s |  things are running on three individual Raspberry Pi fives, uh, four Android
285.27s - 288.55s |  phones and the Android phones are running, uh, wiggle and also G net track
288.55s - 293.29s |  pro. And then I bagged, bagged it all up into these REI trailgate gear cubes and
293.29s - 299.79s |  then put all of that into this portable REI trailgate gear bin. So why did I make
299.79s - 304.17s |  it modular? Well, one, we talked earlier about the memory requirements for having
304.17s - 308.67s |  a lot of devices. If I distribute those devices across multiple, multiple, uh,
308.69s - 314.37s |  computers, multiple, um, pies, I can then, uh, my RAM requirements go down
314.37s - 318.07s |  because Raspberry Pis have been able to run 13 wireless cards simultaneously
318.07s - 321.61s |  ever since the Raspberry Pi two. So the Raspberry Pi five is more than enough
321.61s - 326.31s |  power to handle that much, that much traffic. So we distributed amongst
326.31s - 330.05s |  multiple devices. Uh, I don't have a need for live processing. I don't need to
330.05s - 333.49s |  see my data come in. I'm going to do all of my analytics on the backend when I
333.49s - 337.79s |  have everything merged together. Uh, so I don't need to set alerts. I don't need
337.81s - 340.61s |  to have a GUI. I don't need to have anything. This is all just a fire and
340.61s - 345.89s |  forget headless collection system. Uh, this also reduces bottleneck because now
345.89s - 350.03s |  I don't have all this stuff feeding into one device. It still has to keep track
350.03s - 353.19s |  of all the other, all the other devices and all of the other peripherals that
353.19s - 357.37s |  are attached to it. Uh, that also, uh, allows for a little bit of more
357.37s - 361.13s |  robustness because if I have an issue with a collected file, if I have an
361.13s - 365.21s |  issue with a collected database, uh, I may lose that entire day's run. I may
365.23s - 369.47s |  lose that entire day's session. So now, now I have it distributed amongst
369.47s - 372.77s |  different devices. Uh, if something happens to one of them, I still have
372.77s - 377.01s |  collection from the other two. Uh, this also by dividing it up like this,
377.01s - 380.41s |  creates smaller files, which are much more manageable. Uh, it's scalable. I
380.41s - 384.01s |  can, as I become more interested in other types of wireless technology, I
384.01s - 389.25s |  just build a new pie and then we build a new, uh, a new ingest into it. Uh, so
389.25s - 392.59s |  show you what some of that looks like. And I've got two examples here for
392.61s - 398.57s |  single device characterization and AP characterization. And because this is
398.57s - 407.20s |  not my first Defcon, I'm not doing it live. So what we have here is, uh, this,
407.20s - 411.64s |  the sample dashboard for, uh, signal devices. And we have the OUI of the
411.64s - 415.08s |  devices that it sees time of day analysis about when those devices are
415.08s - 418.18s |  active day of week. And I did all my collection on a Tuesday. So that's why
418.18s - 422.92s |  it's all in one, one pot, uh, probed SSIDs for client devices. So what wifi
422.92s - 426.14s |  networks are they looking for? What access points that they've been seen on?
426.16s - 430.46s |  What protocols have been collected? And this is a video. This is not a live
430.46s - 436.74s |  website, so I can't scroll. There we go. We got the, uh, layers and the, uh,
436.74s - 440.86s |  types of, um, types of protocols that we got collected. And this is all from,
440.88s - 445.34s |  uh, T shark with wire shark. Uh, we got MDNS device names. We've got DHTB
445.34s - 450.14s |  client names and operating system. We have user agent strings. We have MDNS
450.14s - 453.52s |  information about the actual thing. Uh, and this is all from unencrypted
453.52s - 457.64s |  wireless networks that are collected with Kismet that, uh, packet glass
457.64s - 462.68s |  actually will, will take out and, uh, customize and, and contextualize. So
462.68s - 465.50s |  that's what it can show for single devices. When we talk about access
465.50s - 469.92s |  points, uh, when we talk about that, uh, here we've got dots on a map. This
469.92s - 474.76s |  from a drive that I took in, uh, Washington DC. Uh, here we got the top
474.76s - 480.06s |  values of the access points, their encryption, their channel, uh, their
480.06s - 488.83s |  bandwidth, uh, their capabilities, and it scrolls down and you can see
488.83s - 492.83s |  there's lots of things. And then again, we get into more information about
492.83s - 496.83s |  the network itself. So again, the chip manufacturer, uh, the, the BCID with
496.83s - 501.31s |  the OUI lookup, the SSID list of the SSIDs we've seen, what the router
501.31s - 505.03s |  gateway IP addresses, subnet mask, DNS server information that the router is
505.05s - 512.58s |  giving up, uh, in an unencrypted network. And there's also support for 802.11
512.58s - 515.90s |  H, uh, the country code, country settings. So I can see what kind of
515.90s - 520.78s |  country a, or what kind of frequencies of devices is using, uh, what the WPS
520.78s - 525.10s |  Wi-Fi protected setup information is about the manufacturer, about the, uh,
525.10s - 528.90s |  type of device, what clients are associated with it, uh, all kinds of
528.90s - 532.50s |  information, uh, related to the operation of that network. Again, all
532.50s - 536.34s |  passively collected because I can collect all of the Wi-Fi's with, uh,
536.34s - 541.84s |  with the Sparky box. So I'm going to turn it over to Winston. He's going to
541.84s - 544.68s |  tell you about the ones and zeros behind it, all that actually make those
544.68s - 545.88s |  pretty dots up here on a map.
546.60s - 553.99s |  All right, everybody. So, uh, yeah, what, yeah, let's try it. Let's get this,
553.99s - 560.98s |  uh, how do you blow this up? Do I doesn't look like it. There you go. Hey,
561.00s - 565.98s |  took a second. Cool. Thanks. All right. So, uh, yeah, he collected a lot of
565.98s - 571.58s |  data. Um, and a lot of them were geo data. And, uh, I'm just going to go
571.60s - 575.64s |  over the specs, the planning and kind of the execution of it. But overall, I
575.64s - 579.90s |  kind of realized over the course of a conversation at a bar that, uh, this is
579.90s - 583.24s |  a, uh, geo wireless processing hub from a multiple software.
585.80s - 589.44s |  So, like I said, uh, we kind of were just having a, uh, a chat, just
589.44s - 593.04s |  drinking. And, uh, he was telling me about all his wireless problems. Uh,
593.04s - 596.20s |  and, uh, you know, and two and a half hours later I was like, yeah, hold my
596.20s - 601.61s |  beer. Let me, let me do this. And I signed on to do that. So the objective
601.61s - 605.17s |  is to kind of like put dots on maps, right? Um, Jeff is doing everything in
605.17s - 610.11s |  the number one column over there. He's collecting it from Kismet wiggle, um,
610.13s - 613.75s |  arrow dump, a couple other formats. I'll mention more later. Um, so pretty
613.75s - 617.31s |  much all my responsibility is in the number two section, the analytics
617.31s - 621.11s |  platform. Um, at this point, as he was telling me all about it, I've kind of
621.11s - 627.27s |  had one in mind. Um, spoiler alert, it's a, it's elk. And, um, the, the goal
627.27s - 630.51s |  is to make it easy for him to put a dots on maps, um, pretty much change
630.51s - 636.31s |  up maps or even visualization if he needs to. So like I was mentioning
636.31s - 639.75s |  earlier, these are the type of different formats that he mentioned. Um, but
639.75s - 642.51s |  just to give you an idea, the files I'll be actually be dealing with were
642.51s - 649.63s |  like.kismets.tsv, SQLite, CAP, CSVs. Uh, maybe not everything, uh, needs to
649.63s - 653.03s |  be pre-processed, but, um, as I was working on this, I was realizing I kind
653.03s - 656.47s |  of have to consolidate everything down to one single format, uh, that would
656.47s - 663.21s |  work with elk. So what is elk? Um, so overall elk is just this, uh, open
663.21s - 669.31s |  source-ish. Um, it's, it's a big asterisk there. Um, uh, analytics
669.31s - 673.89s |  platform, uh, it does real-time data collection. Um, E stands for Elastic
673.89s - 679.11s |  Search, L is Logstash, K is Kibana. Um, but what you really care about is the
679.11s - 682.83s |  ingestion order is actually, uh, from Logstash, that's where the data comes
682.83s - 687.79s |  in. Uh, Logstash forwards it over to Elastic Search into indexes, uh, where
687.79s - 691.95s |  you will perform some kind of like tagging to like go, Hey, this is how
691.95s - 695.01s |  we're going to retrieve the data. Um, and so when you can actually look up,
695.17s - 697.85s |  uh, do the searching later, uh, and Kibana is where you do the
697.85s - 704.63s |  visualization. So right out of the box, elk doesn't really do what we need it
704.63s - 707.83s |  to do. It doesn't know what a Kismet file is. Uh, it certainly doesn't know.
708.27s - 713.71s |  Um, yeah, it doesn't, it doesn't really know how to use any of that data. Um,
714.43s - 717.83s |  for example, maybe coming from Wiggle, we have something like called Trilat, a
717.83s - 721.11s |  field called Trilat, and coming from Kismet, we have something called
721.37s - 725.69s |  Latitude. Uh, we need to somehow let Elasticsearch know, Hey, uh, these guys
725.69s - 729.45s |  are the same thing. This is the same type of geo data. Um, they also have
729.49s - 732.97s |  different data structure for all of these, uh, files coming in. Uh, and
732.97s - 737.33s |  lastly, um, the first party solution for Elastic Map is, uh, Elastic Map
737.33s - 742.01s |  server, uh, that costs money and, uh, I don't like to give money away. So,
742.01s - 748.12s |  uh, let's, let's do a free version of that. So this is a little diagram I
748.12s - 752.76s |  drew up, um, to kind of like handle the whole solution. Uh, the right side is,
752.78s - 756.38s |  uh, everything you saw, uh, it's containerized, uh, with Docker. Uh, in
756.38s - 760.90s |  this case, we're just using Docker compose. And, uh, we also added the, a,
760.92s - 765.14s |  a map, a little map server on the right side there. Um, on the left-hand side
765.14s - 768.74s |  is pretty much where most of the pre-processing happens. We're, uh, using
768.74s - 773.78s |  a Python script to just handle everything. Uh, and yeah, and we have
773.78s - 781.43s |  like three directories that will, uh, kind of go over in a little bit. So
782.25s - 787.13s |  the work ahead of us is pretty much to have one, uh, stand up a copy of Elk,
787.29s - 791.97s |  two, convert the files, three, we need to normalize the data field, four, uh,
791.97s - 795.09s |  we need to tell how, how we're going to use that data. And in five, we need
795.09s - 798.57s |  somewhere, uh, even if we can put it on a coordinate space, some kind of
798.57s - 801.81s |  mapping on the background to show, Hey, where are, where on the map are we?
802.09s - 804.77s |  Cause you can have coordinate systems, but it doesn't necessarily have to
804.77s - 808.41s |  translate to a map that we're, uh, you know, what you can put anything you
809.07s - 818.13s |  want behind there. All right. So great news about Elk. It already came pretty
818.13s - 822.59s |  much pre-assembled, right? Uh, if you look for Docker compose for Elk, um,
822.59s - 825.31s |  they've already made it super easy. Easiest thing you ever do is just
825.31s - 828.23s |  download it. Docker compose up deep. You have it up and running, but like I
828.23s - 832.25s |  said, it doesn't do anything yet. Um, but I do want to give like huge props
832.25s - 836.19s |  to like Elk Ninja for making this like really frictionless. Um, I'm pretty
836.19s - 842.08s |  sure that's actually the first party, uh, GitHub project for them. All right.
842.10s - 845.82s |  So talking a little bit about converting the files into a compatible format. Um,
845.86s - 850.24s |  so like I said, I decided to do this in a Python script, uh, outside of, uh,
850.26s - 855.14s |  the Elk stack. Um, so we have a ingest folder and index folder and an archive
855.14s - 858.58s |  folder. We're pretty much dumping all of the data that we collected into an
858.58s - 863.08s |  ingest folder where the Python script can be monitoring it. Um, and we can be
863.08s - 867.54s |  monitoring for like Kismet files, SQL files or whatnot. Um, and we kind of
867.54s - 871.70s |  chose it for the, uh, the least amount of work that Jeff had to do. Um, so
871.70s - 874.96s |  pretty much, uh, as soon as he's exporting it, we want to have all the
874.96s - 878.88s |  default settings. So, uh, for, I think wiggle, it might be as something as
878.88s - 882.92s |  simple as like backup dot SQL lite. All right. So, uh, the search pattern I'm
882.92s - 887.52s |  looking for then as backup dot, you know, star SQL lite, um, for the Python
887.52s - 890.88s |  script. Uh, if I have to convert it down, then I'll convert it down to a
890.88s - 895.52s |  Jason. And, uh, if I don't have to, I pretty much just pass it along from a
895.52s - 899.44s |  TSV or CSP and move it right along. Um, for the Jason's there are, there is a
899.44s - 904.30s |  little kind of like a, uh, log stash or elastic search ism, which is you
904.30s - 909.14s |  pretty much have to convert all Jason's into a single line, uh, per entry. Uh,
909.14s - 915.42s |  and just for, uh, elastic search efficiency reasons. Uh, so you, there is
915.42s - 919.22s |  a multi-line format you can do, um, but that like, honestly, do you want to be
919.22s - 925.06s |  less efficient? So here's an example of how we might, uh, convert it from
925.06s - 929.10s |  wiggle. Uh, so the Python scripts is going to look for, okay, cool. I see a
929.10s - 935.44s |  backup dot SQL lite. Um, and, uh, we're going to just run this command. Uh,
935.46s - 938.14s |  yeah, these are prefields. So this is kind of like slightly of a destructive
938.14s - 942.60s |  editing. This is also why we also back up the originals. Um, but these are the
942.60s - 946.44s |  fields that Jeff told me, Hey, this is what I need. Great. Awesome. You could,
946.44s - 950.24s |  Hey, I say select star and grab everything. Uh, but if you're not really
950.24s - 954.48s |  needing to, uh, because the amount of data we're dealing with, we really want
954.48s - 961.06s |  to just like cut down on size where we can. And same thing for Kismet as well.
961.08s - 964.80s |  Uh, we're also dumping it out into a Jason file. And if it has a PCAP file,
964.80s - 969.00s |  if, uh, we can like dump it out into a PCAP NG. Uh, and this is where we kind
969.00s - 973.84s |  of ran into a little tricky thing. I tried using packet beat and, uh, packet
973.84s - 977.16s |  B is really, it feels like it's more designed for any kind of like streaming
977.48s - 981.00s |  or network monitoring. It's not really designed for this like individual file
981.00s - 985.04s |  ingestion. So, uh, what I decided to do was just have T shark actually
985.04s - 989.24s |  converted back from PCAP also into Jason. And that's also another step where we
989.26s - 993.14s |  can do more filtering down so we can remove data that has absolutely, uh,
993.18s - 996.02s |  nothing to do with us. Because at first I was like, yeah, let's keep all the
996.02s - 1000.14s |  data. Uh, I think we wound up filling up that, what we fill up a two terabyte
1000.14s - 1004.02s |  drive. Yeah. Like in, in like a single session. So that was like, well, that's
1004.02s - 1007.38s |  the, let's not do that. Um, so yeah, we started looking for other types of
1007.38s - 1014.46s |  traffics and things that we specifically wanted. So to the, yeah, the next part
1014.46s - 1019.06s |  is then we had to, uh, tag and normalize the data. Right. So even though we bring
1019.08s - 1022.80s |  it into Logstash, uh, so we moved it over from pre-processing into Logstash.
1022.80s - 1027.12s |  Now Logstash kind of needs a way to go, okay, what am I doing with this? So right
1027.12s - 1030.76s |  off the bat, we're using the file plugin, uh, and then for filtering, this is
1030.76s - 1035.00s |  where I was talking about earlier. Um, this is how we let it know, Hey, uh, or
1035.00s - 1040.44s |  start transforming from if Wiggle calls it, uh, latitude or, uh, and Kismet
1040.44s - 1046.36s |  calls it, uh, I don't know, try long or try lat or whatever. Right. Uh, we're
1046.38s - 1049.06s |  trying to give it a way to say, Hey, we're going to want consolidate all of
1049.06s - 1053.22s |  this data type into one single naming field or a single field. Um, so that
1053.22s - 1056.74s |  Elasticsearch knows how to use it. Um, and then, yeah, in the output,
1056.78s - 1062.46s |  obviously we're just sending it over to Elasticsearch. And now that we are
1062.46s - 1065.62s |  actually in Elasticsearch, we need to tell Elasticsearch, okay, cool. Within
1065.62s - 1070.18s |  this index, um, it doesn't, even though we called it say location, right? It
1070.18s - 1073.70s |  doesn't really know what location is yet. So here's where we actually define,
1073.82s - 1076.18s |  Hey, we called something, we made something called location and we're
1076.18s - 1079.80s |  going to define it into a geopoint. Um, now geopoint is something that's
1079.80s - 1083.20s |  native to Elasticsearch. So it knows how to use that data. Um, because we
1083.20s - 1085.78s |  gave it a lat and a long, um, and it looks at it, it's like, Oh, cool. This
1085.78s - 1089.44s |  is an array. It has a lat and a long. Let's put that as a dot. Yeah. Let's,
1089.44s - 1093.04s |  let's put that somewhere on the map. Um, and that's pretty much how that
1093.04s - 1096.24s |  works. And we have to repeat this process for every software that we want
1096.24s - 1100.32s |  to do that. Um, but that's essentially the whole pipeline and to tie the whole
1100.32s - 1103.44s |  thing together, like I said, because we're not interested in, um, you know,
1103.62s - 1107.66s |  paying too much to do this. Uh, we just decided to use map Tyler, which is
1107.66s - 1110.78s |  another open source software that we can just grab that Elasticsearch
1110.78s - 1113.16s |  actually made it pretty easy where you can just either pop it in the
1113.16s - 1116.10s |  settings or in an environmental variable when you run up or spin up
1116.10s - 1120.34s |  Elasticsearch. Uh, for the case of using map Tyler, that's actually just a
1120.34s - 1125.54s |  domain for self self hosted option for it. Um, and in this case we're also
1125.54s - 1130.18s |  using just open street maps. Um, so that's how we're able to just like put
1130.18s - 1132.28s |  tiles underneath, uh, the coordinate system.
1134.24s - 1137.32s |  Yep. So to wrap it up, I want to give some special thanks to main, the packet
1137.32s - 1141.48s |  hacking village committee for allowing us to present today, uh, Elk Ninja for
1141.48s - 1146.56s |  the work on the dockerized, uh, version of elastic, uh, dark matter for giving
1146.56s - 1151.56s |  me an idea of how to build a large scale wireless collection rig, uh, drag
1151.56s - 1154.80s |  or, and why go project Geicov solutions for making all the software that powers
1154.80s - 1158.88s |  this, uh, powers the system. Uh, my husband, Mark Winters, who helped me
1158.88s - 1164.78s |  make this actually fit into a nice, pretty present presentable form, a monkey
1164.78s - 1168.82s |  user for letting us borrow a lot of his pictures for this amazing presentation
1169.30s - 1177.05s |  and Tyler Carper for his contributions with, uh, with Winston. So questions,
1177.05s - 1182.39s |  comments, complaints, other things to begin with. See, yeah.
1188.97s - 1189.33s |  Yes.
1190.77s - 1194.77s |  Do you do anything special? Do you take any special efforts to synchronize the
1194.79s - 1200.07s |  time? Because I would imagine when you reintegrate the data, you have to have
1200.07s - 1204.03s |  the top list. Those three devices have to have their time. Yep. So they get, so
1204.07s - 1209.11s |  they get their, uh, time from the, uh, NTP server whenever I connect them up.
1209.15s - 1212.17s |  And then they have an RTC battery in there that's keeping that, keeping that
1212.17s - 1215.95s |  running. So I may lose a few seconds, but with what I'm doing, it's not really
1215.99s - 1235.48s |  like, I'm not looking for an exact one to one correlation. Anything else? I
1235.50s - 1239.18s |  just grab it all. Yep. And then, and then afterwards, then I look for the
1239.18s - 1242.18s |  anomalies. Then I look for the things that I, that I want to see. It's like,
1242.18s - 1245.44s |  oh, that protocol looks interesting. Let's look more at that, at that device.
1248.32s - 1251.22s |  Uh, so I've been able to find a lot of stuff through MDNS. I've been able to
1251.22s - 1255.64s |  find a lot of stuff through, um, DHCP requests, a lot of information about
1255.66s - 1261.93s |  devices themselves, which has been really handy for that. Yep. They're,
1261.93s - 1262.97s |  they're getting mid signal, so.