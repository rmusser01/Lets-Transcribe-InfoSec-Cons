{
  "webpage_url": "https://www.youtube.com/watch?v=-KXgcWuv-Ug",
  "title": "DEF CON 32 - Secrets & Shadows: Leveraging Big Data for Vulnerability Discovery - Bill Demirkapi",
  "description": "When we consider the conventional approaches to vulnerability discovery, be it in software or websites, we tend to confine ourselves to a specific target or platform. In the case of software, we might reverse engineer an application's attack surfaces for untrusted input, aiming to trigger edge cases. For websites, we might enumerate a domain for related assets and seek out unpatched, less defended, or occasionally abandoned resources.\n\nThis presentation explores the untapped potential of scaling security research by leveraging unconventional data sources. We'll walk through design flaws that enable two examples: forgotten cloud assets and leaked secrets. Instead of starting with a target and finding vulnerabilities, we'll find vulnerabilities and relate them to our targets. We won't just stop at discovery. We'll also discuss the incentives that create them and how to solve the ecosystem issues as an industry.\n\nWhile you can't easily scale every issue, this project has led to tens of thousands of highly significant yet seemingly trivial weaknesses in some of the world's largest organizations. Prepare to shift your perspective on vulnerability discovery, learn scalable approaches to address commonly overlooked bugs, and understand how even the simplest misconfiguration can have a devastating impact.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2544,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 6.46s | This text was transcribed using whisper model: large-v2

 You're killing me, dude.
6.46s - 7.30s |  All right, everyone.
7.30s - 9.86s |  Thank you so much for coming out to this talk.
9.86s - 11.54s |  It's called Secrets and Shadows,
11.54s - 15.36s |  Leveraging Big Data for Vulnerability Discovery at Scale.
15.36s - 17.52s |  I'm so excited to be here for another year
17.52s - 19.02s |  at another DEF CON,
19.02s - 22.38s |  and I really do have something in store for you today.
22.38s - 26.91s |  Let's get right into it.
26.91s - 29.21s |  So just a disclaimer,
29.21s - 30.83s |  everything we're gonna talk about today
30.83s - 33.59s |  was done completely independent of my employer,
33.59s - 38.27s |  outside of work, with my own money, my own resources.
38.27s - 39.97s |  If you wanna talk about this work
39.97s - 41.87s |  outside of this presentation,
41.87s - 42.83s |  just please refer to me
42.83s - 44.91s |  as an independent security researcher.
44.91s - 51.44s |  It helps me be able to do work just like this.
51.44s - 53.70s |  So my name is Bill Demerkappa,
53.70s - 57.60s |  and I am a security researcher with a diverse background
57.60s - 61.36s |  in low-level software security and also cloud security.
62.38s - 63.82s |  Could we boost the mic a bit?
64.82s - 67.94s |  I'm interested in defense and offense.
67.94s - 70.82s |  I love solving hard security problems,
70.82s - 74.54s |  and while I did start with a software security background,
74.54s - 76.26s |  I feel like the impact we can have
76.26s - 79.48s |  with cloud security is much wider.
79.48s - 80.74s |  For example, you could have
80.74s - 83.50s |  the most complex software vulnerability in the world,
83.50s - 84.96s |  but at the end of the day,
84.96s - 89.40s |  a simple ID check or missing ID check in a cloud environment
89.40s - 92.10s |  can lead to a much broader impact.
92.14s - 94.74s |  And that's what really got me interested in the cloud.
94.74s - 97.22s |  It's the ability to have an impact
97.22s - 100.18s |  without the same technical complexity
100.18s - 105.79s |  that comes with exploiting low-level vulnerabilities.
105.79s - 106.91s |  So in this talk,
106.91s - 111.47s |  we're gonna discuss vulnerability discovery at scale.
111.47s - 113.87s |  And what I mean by that is we're gonna take a look
113.87s - 117.19s |  at how we traditionally approach vulnerability discovery
117.19s - 119.51s |  with two common bug classes,
119.51s - 123.55s |  dangling cloud resources and leaked secrets.
123.55s - 125.79s |  The goal is to identify the limitations
125.79s - 128.03s |  of our historical approach
128.03s - 135.42s |  and shift our perspective through some practical examples.
135.42s - 138.86s |  So some background.
138.86s - 140.10s |  Now, from a high level,
140.10s - 142.46s |  everyone knows what cloud computing is.
142.46s - 145.94s |  It's basically a way where you can create infrastructure
145.94s - 148.06s |  like servers, websites, and more
148.06s - 150.38s |  without needing to actually purchase
150.38s - 152.18s |  your own physical server rack.
153.42s - 156.38s |  The cool part is this can save you a lot of money.
156.38s - 158.10s |  If you're just creating your own blog,
158.62s - 161.50s |  you really don't need that many resources at all.
161.50s - 163.58s |  Why not borrow someone else's?
163.58s - 165.66s |  And that's really the fundamental principle
165.66s - 167.62s |  of cloud computing.
167.62s - 170.62s |  All you're doing is borrowing from someone else's pool
170.62s - 177.19s |  of shared resources.
177.19s - 179.95s |  So cloud environments are managed over the internet,
179.95s - 183.15s |  but how do we actually secure this access?
183.15s - 185.55s |  Well, for AWS, the way it works
185.55s - 188.83s |  is that you can use something called an access key.
188.83s - 192.59s |  An access key can be short-lived or long-term token
192.59s - 194.95s |  that specifies credentials for your account
194.95s - 198.03s |  and allows you to manage your AWS resources
198.03s - 200.79s |  depending on the role and permissions assigned to you.
202.39s - 204.95s |  Can we please increase the microphone sound?
205.95s - 209.03s |  And for other platforms, it's similar.
209.03s - 211.11s |  For example, for Google Cloud,
211.11s - 214.67s |  the types of authentication include service accounts,
214.67s - 216.79s |  you can use CLI credentials,
216.79s - 220.83s |  and in general, tokens are how we're able to operate
220.83s - 222.83s |  with these cloud environments.
223.79s - 229.68s |  Unfortunately, tokens also present a pretty severe risk.
229.68s - 232.00s |  So cloud provider tokens are dangerous
232.00s - 236.04s |  because by default, there's little restriction
236.04s - 238.56s |  on who can use those tokens.
238.56s - 240.44s |  For example, by default,
240.44s - 243.52s |  if you create a root access key in AWS,
243.52s - 246.44s |  anyone from any IP can use that access key
246.44s - 249.04s |  to manage your cloud environment.
249.04s - 252.32s |  Now, obviously, the impact of a leaked cloud credential
252.32s - 254.84s |  will really depend on the context.
254.84s - 256.52s |  For example, a lot of websites
256.52s - 259.28s |  hard-code a Google Maps API key,
259.28s - 261.28s |  and in reality, despite the fact
261.28s - 264.80s |  that it can lead to billing overcharges and abuse,
264.80s - 266.72s |  the impact is still fairly limited.
267.64s - 269.88s |  But with a root AWS key,
269.88s - 273.08s |  the dangers are much more problematic.
273.08s - 276.72s |  For example, if you stored your database in AWS
276.72s - 279.56s |  or you store your computing in AWS,
279.56s - 281.84s |  an attacker could use your credentials
281.84s - 284.72s |  to not only access customer data,
284.72s - 289.81s |  but to interfere with your production workflows.
289.81s - 292.29s |  Now, when we talk about how everything in the cloud
292.29s - 294.01s |  is shared and borrowed,
294.01s - 297.81s |  what I mean by that is by nature, by its nature,
297.81s - 302.21s |  the cloud model introduces risk from this sharing model.
302.21s - 304.97s |  So, for example, when you create a virtual machine,
304.97s - 307.61s |  what's really happening is you're borrowing time
307.61s - 311.29s |  on a physical server that your cloud provider has bought.
311.29s - 313.61s |  And on this physical resource,
313.61s - 317.17s |  you get assigned a network IP, for example.
317.17s - 318.61s |  And the reason this is dangerous
318.61s - 321.65s |  is because once you're done with a resource,
321.65s - 324.17s |  if you still have dangling DNS records
324.17s - 325.85s |  pointing at that resource,
325.85s - 328.73s |  suddenly that exposes an opportunity
328.73s - 331.57s |  for an attacker to take advantage of.
331.57s - 332.97s |  So, from a high level,
332.97s - 335.73s |  I view cloud resources in two categories,
335.73s - 338.73s |  primitive resources and shared resources.
338.73s - 341.45s |  So, a primitive resource is something like a virtual machine
341.45s - 344.65s |  where you get assigned a dedicated IP address.
344.65s - 348.65s |  That IP address is not used by any other customer but you.
348.65s - 350.45s |  Whereas with a shared resource,
350.45s - 353.45s |  what's really going on is it's a serverless application
353.45s - 355.85s |  that serves multiple customers.
355.85s - 358.73s |  For example, if you have a serverless function
358.73s - 360.85s |  that you can call on your cloud provider,
360.85s - 364.37s |  that URL you used to connect to that serverless function
364.37s - 366.17s |  probably corresponds to an IP
366.17s - 368.65s |  that serves a lot of other customers.
368.65s - 370.69s |  The reason this distinction is important
370.69s - 374.33s |  is because it impacts what type of dangling DNS records
374.33s - 375.89s |  you need to worry about.
375.89s - 377.21s |  So, for primitive resources
377.21s - 380.21s |  where you have that unique IP address,
380.21s - 382.69s |  that includes pretty much every type of DNS record
382.69s - 384.93s |  that could be dangling, like an A record,
384.93s - 387.93s |  a C name record, a name server, and et cetera.
387.93s - 390.05s |  But whereas if it's a shared resource
390.05s - 392.85s |  where the endpoint is shared across customers,
392.85s - 395.81s |  that's gonna be limited to C names, name server,
395.81s - 397.97s |  MX, those types of records.
397.97s - 399.69s |  And the distinction there is that
399.69s - 401.65s |  when the endpoint is shared,
401.65s - 404.29s |  suddenly you don't have to worry about the A record
404.29s - 407.49s |  pointing at a IP address you no longer control.
408.65s - 411.77s |  So, what can an attacker do with that domain control?
411.77s - 413.89s |  Well, from a high level, it can enable phishing,
413.89s - 416.41s |  malware distribution, scams, et cetera.
416.41s - 418.89s |  It can lead to cross-site scripting.
418.89s - 421.57s |  And there's going to be context-specific impact,
421.57s - 424.53s |  like you can bypass the trusted host names check
424.53s - 426.45s |  in a software update installer.
426.45s - 428.33s |  That's something I've seen pretty common.
428.33s - 432.17s |  You can abuse the brand trust and reputation
432.17s - 434.73s |  in order to spread misinformation.
434.73s - 437.89s |  Now, I included a quote below from APNIC
437.89s - 441.65s |  on an article talking about this potential abuse.
441.65s - 444.37s |  So, from a high level, they found that
444.37s - 446.93s |  when it came to dangling DNS record abuse,
447.89s - 451.73s |  in general, 75% of the hijacked dangling resources
451.73s - 456.53s |  were being used for black hat search engine optimization
456.53s - 458.29s |  and really promoting bad websites
458.29s - 463.88s |  you don't want anyone going to.
463.88s - 467.40s |  So, to be clear, past approaches
467.40s - 470.80s |  for these types of bugs already exist.
470.80s - 473.52s |  Where with dangling cloud resources,
473.52s - 476.40s |  we've seen that attackers can go ahead
476.40s - 478.48s |  and enumerate cloud IP pools
478.48s - 481.00s |  and capture these resources that are dangling.
481.00s - 484.00s |  But with leaked secrets, what we've seen is
484.00s - 487.80s |  that a lot of work really relies on a limited scope.
487.80s - 490.12s |  So, what I mean by that is,
490.12s - 492.76s |  everything that happens with leaked secrets
492.76s - 495.08s |  is always about a specific target,
495.08s - 498.56s |  like a specific folder, a specific repository,
498.56s - 500.12s |  or a specific directory.
501.20s - 503.52s |  And the problem with this is,
503.52s - 506.00s |  to start with dangling resources,
506.00s - 508.92s |  some past work includes, you can buy DNS data
508.92s - 512.20s |  and then enumerate your cloud provider's IP pool
512.20s - 514.40s |  in order to find what's dangling.
514.40s - 517.00s |  So, if I go ahead and create a resource
517.00s - 519.56s |  over and over again in a cloud environment,
519.56s - 521.32s |  I'll be assigned IP addresses
521.32s - 523.88s |  that are not assigned to any other customer.
523.88s - 527.68s |  And if one of these IP addresses matches a DNS record
527.68s - 529.92s |  that I found in DNS data
529.92s - 532.40s |  that threat intelligence providers sell,
532.40s - 534.60s |  well, that's one way you can capture
534.60s - 536.80s |  a dangling DNS record.
537.68s - 539.96s |  And other attempts also include
539.96s - 541.88s |  going after a specific target.
541.88s - 543.96s |  So, instead of using DNS data you buy
543.96s - 545.80s |  from threat intelligence providers,
545.80s - 548.64s |  you'll instead go ahead and enumerate that provider pool,
548.64s - 550.64s |  but this time compare against subdomains
550.64s - 555.49s |  you've enumerated for that specific provider.
555.49s - 557.69s |  So, to give you some examples,
557.69s - 559.53s |  there's been a lot of work in this area.
559.53s - 562.97s |  Bishop Fox originally came out in 2015 with an article
562.97s - 565.57s |  where they used this passive DNS data,
565.57s - 567.29s |  or at least a variant of it,
567.29s - 570.65s |  in order to enumerate an AWS cloud IP pool
570.65s - 573.85s |  and then capture AWS IPs that corresponded
573.85s - 576.49s |  to a specific domain they were interested in.
576.49s - 578.37s |  So, in that case they used bing.com
578.37s - 580.57s |  to find those dangling DNS records.
582.25s - 586.21s |  Some other work includes flying a false flag
586.21s - 587.65s |  from Black Hat, it's a talk,
587.65s - 589.85s |  where they used passive DNS data
589.85s - 591.77s |  from these threat intelligence providers
591.77s - 596.64s |  to determine whether IPs they captured were dangling.
597.08s - 600.56s |  This project was, again, focused on creating these backends
600.56s - 602.86s |  for C2 malware platforms.
602.86s - 605.34s |  They wanted to take control of legitimate domains
605.34s - 607.12s |  so that they could abuse those domains
607.12s - 609.00s |  for a false level of trust.
610.76s - 612.56s |  One interesting note about this project
612.56s - 615.22s |  is that they noted that after releasing it,
615.22s - 619.16s |  it would appear that AWS and GCP now assign IPs
619.16s - 621.52s |  from a limited pool for your account.
621.52s - 623.16s |  We'll touch on this more later,
623.16s - 624.90s |  but this is what we're gonna be focusing on
624.90s - 627.44s |  when it comes to dangling DNS resources.
627.44s - 629.16s |  The topic is well-traversed,
629.16s - 630.42s |  but what's not well-traversed
630.42s - 632.18s |  are the modern deterrents against it
632.18s - 633.66s |  and how we can bypass them.
635.22s - 637.18s |  And finally, there's still a lot of work
637.18s - 640.82s |  where attackers simply enumerate your domain's subdomains
640.82s - 644.92s |  and then find IPs that match them.
644.92s - 646.62s |  Now, when it comes to leaked secrets,
646.62s - 648.50s |  the story's a bit different.
648.50s - 652.70s |  It's not as well-traversed as dangling DNS records at all.
652.70s - 655.48s |  So, for example, there's tools that you can use
655.52s - 659.00s |  to search a Git repository for these secret patterns.
659.00s - 661.56s |  And even GitHub has a system
661.56s - 663.78s |  where they'll scan every content,
663.78s - 666.88s |  every piece of code uploaded to their platform
666.88s - 668.96s |  for these secret patterns.
668.96s - 670.72s |  But the limitation with this work
670.72s - 674.68s |  is that it's really a very small scope.
674.68s - 676.22s |  I mean, think about how much code
676.22s - 678.04s |  is really gonna end up on GitHub.
678.04s - 680.28s |  You know, most enterprises aren't gonna put
680.28s - 683.28s |  their closed-source applications on GitHub
683.28s - 687.67s |  where this scanning would occur in the first place.
687.67s - 690.33s |  Now, going on to defender approaches
690.33s - 692.09s |  to mitigate these vulnerabilities,
692.09s - 694.81s |  well, there have been pretty limited as well.
694.81s - 698.21s |  Oftentimes, these are treated as customer vulnerabilities,
698.21s - 700.37s |  which technically is correct.
700.37s - 701.93s |  If you think about it from a high level,
701.93s - 705.37s |  if you leak a secret or leave a DNS record dangling,
705.37s - 707.39s |  that is your responsibility.
707.39s - 709.25s |  But what I think that is often missed
709.25s - 711.33s |  is the provider's responsibility
711.33s - 714.57s |  in how they encourage these insecure defaults.
715.33s - 718.85s |  So for example, tokens are really, really easy to use.
718.85s - 721.03s |  Have you ever thought about how easy it is
721.03s - 723.19s |  to use a token in your code?
723.19s - 726.41s |  And that's how it can get leaked in the first place.
726.41s - 728.49s |  Now, Fortune 500 companies might have
728.49s - 731.51s |  those standard secure development lifecycle practices
731.51s - 732.97s |  where they can avoid this,
732.97s - 736.53s |  but in reality, a lot of small to medium-sized businesses
736.53s - 738.17s |  might not understand this nuance
738.17s - 744.09s |  or be able to apply it uniform across their organization.
744.09s - 746.53s |  Now, this is something we're gonna talk about later,
747.21s - 748.77s |  but I want you to keep it in mind.
748.77s - 752.69s |  Remember, even though it's a cloud customer vulnerability,
752.69s - 754.45s |  there's incentives that lead to them
754.45s - 756.09s |  being created in the first place.
757.21s - 759.85s |  So let's talk about the traditional security mindset.
761.01s - 763.65s |  Traditional bugs discovery is often centered
763.65s - 765.33s |  around a specific target.
765.33s - 766.85s |  You know, if I'm looking for vulnerabilities,
766.85s - 769.25s |  I might go reverse engineer an application,
769.25s - 771.17s |  and with dangling domains,
771.17s - 774.37s |  one of the earliest approaches was going first,
774.37s - 776.65s |  enumerating the subdomains of my target,
776.65s - 779.29s |  and then enumerating the cloud provider IP pools
779.29s - 782.05s |  in order to identify dangling resources.
782.05s - 785.39s |  Now, for secrets, again, we start with a specific target,
785.39s - 787.29s |  whether that be a single repository
787.29s - 789.45s |  or a single platform like GitHub.
790.45s - 792.21s |  And what I really started to think about
792.21s - 794.29s |  as I looked into this further and further
794.29s - 795.97s |  was whether there's an opportunity
795.97s - 799.13s |  for some vulnerabilities to be approached differently.
799.13s - 802.99s |  For example, were we really facing tunnel vision here?
802.99s - 805.71s |  Why do we need to start with a specific target?
806.55s - 808.27s |  It's almost as if, you know,
808.27s - 809.95s |  there is a lack of focus in the industry
809.95s - 811.71s |  against finding bugs at scale,
811.71s - 814.87s |  and rather finding bugs in individual areas.
814.87s - 816.55s |  And that's what I really wanted to focus on
816.55s - 817.81s |  with this research is,
817.81s - 820.81s |  can we find these vulnerabilities at scale?
821.97s - 824.47s |  So to expand on this, with dangling resources,
824.47s - 827.35s |  the traditional mindset might include start with a target
827.35s - 829.39s |  and then capture vulnerable assets.
829.39s - 831.31s |  But as we've seen with past work,
831.31s - 834.07s |  it can often be a lot larger than that too.
834.07s - 836.03s |  For example, the security at scale approach
836.03s - 837.11s |  to dangling domains would be
837.11s - 840.03s |  to capture dangling assets first,
840.03s - 842.23s |  and then check if there's any DNS records
842.23s - 845.65s |  still pointing at them using passive DNS replication data.
846.55s - 848.71s |  Now, here's where it gets interesting.
848.71s - 851.21s |  For leak secrets, there's no such equivalent.
852.03s - 855.27s |  You know, we have approaches to scan limited scopes
855.27s - 856.93s |  for these secret patterns,
856.93s - 860.55s |  but when it comes to that security at scale mindset,
860.55s - 863.99s |  it still goes around a very limited target.
863.99s - 867.95s |  You know, we start with a repository, a folder, a file,
867.95s - 870.27s |  instead of starting with a diverse data source
870.27s - 877.64s |  that allows us to look for these secrets in a broad manner.
877.64s - 879.88s |  So this is what I really want you to take away
879.88s - 881.40s |  from this talk from a high level,
881.40s - 883.12s |  is that there's an untapped potential
883.12s - 885.38s |  to use unconventional data sources
885.38s - 887.36s |  to find these vulnerabilities.
887.36s - 888.90s |  We're about to go through some examples,
888.90s - 890.74s |  but what I really want you to think about
890.74s - 891.96s |  is not just, you know,
891.96s - 894.36s |  here's how Bill applied it to dangling domains
895.08s - 895.92s |  and leak secrets,
895.92s - 897.12s |  but rather how you can apply it
897.12s - 899.92s |  to other types of vulnerability classes as well.
899.92s - 902.56s |  This is not just about these two vulnerability classes.
902.56s - 904.60s |  These two vulnerability classes are examples
904.60s - 908.58s |  that you can apply to your own work.
908.58s - 910.90s |  So let's talk about how we would actually implement this
910.90s - 912.62s |  in practice.
912.62s - 913.50s |  From a high level,
913.50s - 916.66s |  we start with the vulnerability, not the target.
916.66s - 918.10s |  So, and then we work backwards
918.10s - 920.50s |  by using creative data sources.
920.50s - 922.42s |  Remember, for dangling resources,
922.42s - 924.18s |  we already have a playbook.
924.66s - 927.10s |  You know a DNS record is dangling
927.10s - 928.66s |  if it points at an IP address
928.66s - 931.26s |  that the customer no longer controls.
931.26s - 933.88s |  How do you know if an IP is no longer controlled
933.88s - 934.94s |  by a customer?
934.94s - 936.98s |  Well, we can enumerate the cloud IP pool
936.98s - 940.42s |  and determine every IP that we get in our attacker account
940.42s - 942.86s |  is likely something that no other customer controls
942.86s - 945.42s |  because that IP is assigned to us.
945.42s - 946.94s |  But how do we know if it's dangling?
946.94s - 949.82s |  Well, again, that passive DNS replication data.
949.82s - 951.00s |  And if you're not familiar with this,
951.00s - 953.78s |  how it works is that threat intelligence providers
954.46s - 956.26s |  will work with DNS providers
956.26s - 960.14s |  to sell this aggregate DNS traffic data.
960.14s - 963.14s |  For example, you can give these threat intel providers
963.14s - 965.14s |  an IP address and they'll give you
965.14s - 969.84s |  every single DNS record that points at it.
969.84s - 973.52s |  Now, again, we can capture assets first with DNS records
973.52s - 975.60s |  instead of starting with a target.
975.60s - 978.48s |  What we'll do is we'll go through a cloud provider pool
978.48s - 981.14s |  and we'll go and enumerate every IP address
981.14s - 982.28s |  that we're able to get
982.28s - 985.16s |  and look for DNS records that point at it.
985.20s - 986.60s |  What we're gonna do in the next section
986.60s - 989.76s |  is apply this generic technique we've seen in past work
989.76s - 992.10s |  against modern deterrence.
993.76s - 995.52s |  But what about secret scanning?
995.52s - 996.68s |  So this is the interesting one.
996.68s - 1001.10s |  This is one that we still have a lot of research to do in.
1001.10s - 1003.12s |  We have passive DNS replication data
1003.12s - 1007.04s |  for dangling resources, but what about leaked secrets?
1007.04s - 1009.32s |  From a high level, the ideal data source
1009.32s - 1012.56s |  needs to be diverse, needs to be sufficient in volume,
1012.60s - 1017.28s |  and it needs to include a diverse set of websites,
1017.28s - 1020.68s |  executables, not just open source applications,
1020.68s - 1024.36s |  but we need to include closed source applications too.
1024.36s - 1026.16s |  And we need to make sure that this is done
1026.16s - 1027.56s |  in a feasible way.
1027.56s - 1030.92s |  For example, even if we have a large data set
1030.92s - 1033.56s |  of these files, we need to make sure we can scan it
1033.56s - 1034.84s |  in a practical manner.
1035.80s - 1038.00s |  So where can we find this large collection
1038.00s - 1039.98s |  of apps and scripts?
1039.98s - 1043.84s |  So what about virus scanning platforms?
1045.38s - 1047.62s |  This is where it's gonna get really interesting.
1047.62s - 1050.38s |  So what we've seen with past work
1050.38s - 1053.30s |  is a lot of people focusing on these platforms
1053.30s - 1055.38s |  with limited diversity.
1055.38s - 1057.42s |  You know, we look at GitHub, it's really gonna only be
1057.42s - 1060.18s |  open source repositories that are being scanned
1060.18s - 1062.58s |  and automatically revoking keys.
1062.58s - 1064.18s |  You know, we look at these tools,
1064.18s - 1067.30s |  they all focus on scanning individual targets
1067.30s - 1070.34s |  like folders, specific repos, et cetera,
1070.34s - 1072.72s |  but what we're missing is that diverse data source,
1072.72s - 1075.70s |  and that's what I really focused on in this research.
1075.70s - 1078.46s |  What I found was that virus scanning platforms
1078.46s - 1080.72s |  were actually a really interesting target
1080.72s - 1083.34s |  because think about it, think about all the stuff
1083.34s - 1086.22s |  that people upload to virus scanning platforms.
1086.22s - 1087.92s |  You know, think about all the websites
1087.92s - 1090.50s |  that are automatically scanned, all the applications,
1090.50s - 1092.84s |  all the mobile apps that are included
1092.84s - 1094.98s |  in this virus total data source,
1094.98s - 1096.88s |  and as well as other platforms.
1097.94s - 1100.10s |  Now, with these scanning platforms,
1100.10s - 1102.90s |  it would be infeasible to go ahead and, you know,
1102.90s - 1105.82s |  download what, a billion, nine billion files
1105.82s - 1108.18s |  and scan each of them individually,
1108.18s - 1109.30s |  but we don't need to do that
1109.30s - 1112.38s |  because we can use the tools that they already provide us.
1112.38s - 1116.42s |  Nearly every virus scanning platform lets you search
1116.42s - 1119.26s |  for specific patterns, specific strings,
1119.26s - 1121.18s |  like they're literally spoon feeding us
1121.18s - 1122.86s |  to perfect data source here.
1122.86s - 1125.50s |  And traditionally, what we've used this data source for
1125.50s - 1128.90s |  is to find malware, you know, find malicious use, et cetera,
1128.90s - 1131.30s |  but what's really interesting about them is that
1131.30s - 1133.22s |  what if we use secret patterns
1133.22s - 1135.34s |  instead of malicious patterns?
1135.34s - 1136.98s |  What if instead of looking for malware,
1136.98s - 1138.78s |  we look for secrets instead?
1140.34s - 1142.20s |  And with virus total, this is retro hunt,
1142.20s - 1143.44s |  but seriously, if you look at
1143.44s - 1145.80s |  nearly every other virus scanning platform,
1145.80s - 1149.46s |  what you'll find is that they have a similar future,
1149.46s - 1151.06s |  at least if you have an account.
1152.50s - 1157.64s |  So let's apply this in practice.
1157.64s - 1160.88s |  So with secret scanning, the plan is from a high level.
1160.88s - 1164.04s |  We wanna make sure that we look for secret patterns.
1164.04s - 1165.44s |  And what that really means is,
1165.44s - 1168.48s |  think about your AWS access key.
1168.48s - 1169.40s |  I don't know if you've noticed,
1169.40s - 1172.36s |  but it'll often start with A-K-I-A.
1172.36s - 1174.88s |  And what we can do is we can create these regex strings
1174.88s - 1177.52s |  for identifying these secrets,
1177.52s - 1180.24s |  and we can look for them using the same tools
1180.24s - 1182.72s |  we have available for malware hunting.
1182.72s - 1186.80s |  So most virus platforms allow you to search by a Yara rule.
1186.80s - 1189.60s |  And so what we can do is we can create a Yara rule
1189.60s - 1191.64s |  for these secret patterns,
1191.64s - 1194.76s |  and then we can search samples uploaded to the platform
1194.76s - 1197.64s |  for whether these patterns exist in them.
1197.64s - 1200.00s |  Now, one thing interesting that I did in this research
1200.00s - 1202.96s |  was also focused on validating these secrets.
1202.96s - 1205.46s |  So I've looked at a lot of past work into leaked secrets,
1205.46s - 1208.44s |  and what I've found is there's a lot of theoretical research
1208.44s - 1210.12s |  that discusses things like,
1210.12s - 1212.32s |  oh, we looked for these secret patterns,
1212.32s - 1214.76s |  and we found these unique keys,
1214.76s - 1216.48s |  but you read into it a little deeper,
1217.16s - 1219.24s |  and they didn't even check if those keys are legitimate.
1219.24s - 1221.48s |  That's something that didn't really make sense to me.
1221.48s - 1223.32s |  There's gonna be thousands and thousands
1223.32s - 1226.48s |  and tens of thousands of keys that match a specific pattern
1226.48s - 1229.08s |  but are not active in practice.
1229.08s - 1232.32s |  And so what we did was that I used a platform
1232.32s - 1233.82s |  to actually validate these keys,
1233.82s - 1235.36s |  at least with basic metadata,
1235.36s - 1239.36s |  and validate that they're legitimate for our use case.
1239.36s - 1241.68s |  Now, some patterns are gonna be really noisy,
1241.68s - 1244.80s |  but if the provider doesn't make it easy
1244.80s - 1246.56s |  to identify their secrets,
1246.56s - 1248.04s |  you're gonna find that you're gonna have to scan
1248.04s - 1251.00s |  thousands and thousands of secret patterns
1251.00s - 1253.36s |  in thousands of thousands of files.
1253.36s - 1255.98s |  So how do we deal with this large volume?
1255.98s - 1257.88s |  Well, what I did to do it on my budget,
1257.88s - 1260.20s |  remember, I'm doing this everything out of pocket,
1260.20s - 1262.48s |  was leverage serverless computing.
1262.48s - 1267.48s |  So I needed a capacity of having several physical server racks
1267.60s - 1271.56s |  but I don't have money to buy several physical server racks.
1271.56s - 1273.96s |  Instead, I can rent them using the cloud,
1273.96s - 1277.64s |  and what that really means is I made a serverless function
1277.64s - 1280.60s |  in order to scan these files,
1280.60s - 1282.28s |  and I also made a serverless function
1282.28s - 1284.86s |  to validate the keys that were found.
1284.86s - 1287.84s |  And this way, I don't actually have to pay that much
1287.84s - 1289.88s |  because I only pay for what I use.
1289.88s - 1292.08s |  In practice, my costs were actually
1292.08s - 1293.92s |  fairly reasonable for an individual.
1295.44s - 1296.80s |  Now, for dangling resources,
1296.80s - 1298.80s |  again, the methodology from a high level
1298.80s - 1302.84s |  was to reallocate resources over and over and over again.
1302.88s - 1304.28s |  And then it was to cross-check them
1304.28s - 1307.00s |  with passive DNS replication data.
1307.00s - 1309.38s |  Remember, this isn't necessarily new,
1309.38s - 1312.46s |  but what's interesting about them is that
1312.46s - 1315.88s |  we're gonna be talking about bypassing modern deterrents.
1315.88s - 1317.90s |  And what I mean by that is a lot of cloud providers
1317.90s - 1320.72s |  have implemented these mitigations to make it harder
1320.72s - 1323.68s |  to do this dangling DNS record enumeration,
1323.68s - 1327.04s |  and we're gonna bypass them.
1327.04s - 1329.08s |  So from a high level,
1329.08s - 1331.84s |  one thing I wanna call out is that earlier no.
1331.84s - 1334.72s |  Remember, it would appear that AWS began
1334.72s - 1339.08s |  serving Elastic IPs from a small, specific pool
1339.08s - 1340.76s |  similar to GCP.
1341.60s - 1345.12s |  This severely limits the diversity of addresses received.
1345.12s - 1348.20s |  And so let me tell you what this really means in practice.
1348.20s - 1351.52s |  So what's going on here is that AWS and GCP
1351.52s - 1354.96s |  have a mitigation where when you are asked
1354.96s - 1357.00s |  to assign me an IP address,
1357.00s - 1359.96s |  whether that be an Elastic IP or in GCP case,
1359.96s - 1362.74s |  nearly every resource that you can go ahead and allocate
1362.74s - 1364.24s |  that needs an IP,
1364.24s - 1366.30s |  these cloud providers will only give you
1366.30s - 1371.00s |  a specific set of IPs assigned to a shared pool
1371.00s - 1374.40s |  that's limited to your account and maybe a few others.
1374.40s - 1378.92s |  And for AWS, this is gonna be largely Elastic IP sharing.
1378.92s - 1382.68s |  So that means whenever you ask for a dedicated Elastic IP,
1382.68s - 1385.16s |  you'll notice if you free an Elastic IP
1385.16s - 1386.32s |  and allocate another one,
1386.32s - 1388.64s |  you're gonna be assigned the same one over and over again,
1388.64s - 1389.70s |  or in general.
1390.44s - 1391.66s |  It's really hard to actually enumerate that pool
1391.66s - 1393.28s |  using Elastic IPs alone.
1394.52s - 1397.98s |  Now with AWS, they also introduced a mitigation.
1397.98s - 1399.10s |  I don't know if it's intentionally
1399.10s - 1401.50s |  to go against dangling DNS enumeration,
1401.50s - 1404.42s |  but they did introduce a mitigation in 2024
1404.42s - 1406.58s |  where every IP address you received
1406.58s - 1410.02s |  was actually had an increased surcharge.
1410.02s - 1413.46s |  So now every IP you got allocated costs you extra money.
1413.46s - 1416.54s |  And this deters attacks by making it more expensive
1416.54s - 1418.62s |  to enumerate their public IP pools
1418.62s - 1423.50s |  and capture these dangling DNS records.
1423.50s - 1425.58s |  Now for Google Cloud, it's interesting.
1425.58s - 1428.14s |  They actually had quite a lot more than I expected.
1428.14s - 1430.02s |  So for project levels,
1430.02s - 1433.62s |  so every account can have about 10 to 15 projects
1433.62s - 1434.78s |  assigned to them.
1434.78s - 1436.58s |  By default, you can request an increase,
1436.58s - 1438.20s |  but you need justification.
1438.20s - 1442.50s |  Now IPs are again assigned from a small pool just like AWS.
1442.50s - 1445.26s |  You only have eight IPs you can use by default
1445.26s - 1446.86s |  in per region and globally.
1447.74s - 1449.34s |  And with these accounts,
1449.34s - 1452.42s |  you also had something called a billing account restriction.
1452.42s - 1454.06s |  So with Google Cloud,
1454.06s - 1457.54s |  every credit card can be created into a billing account.
1457.54s - 1459.18s |  Now you can create a few billing accounts
1459.18s - 1460.88s |  based off of one credit card,
1460.88s - 1462.78s |  but if you try to create more than a few,
1462.78s - 1465.06s |  you'll automatically hit their suspension
1465.06s - 1466.42s |  and you'll have to go justify
1466.42s - 1469.94s |  why are you creating a 50th credit card account
1469.94s - 1472.14s |  or billing account with one credit card.
1472.14s - 1475.30s |  And so all these deterrents really make it difficult
1475.30s - 1478.38s |  for attackers to enumerate these dangling domains.
1478.38s - 1480.02s |  In fact, with Google Cloud,
1480.02s - 1482.74s |  while managed DNS enumeration was always a thing
1482.74s - 1484.60s |  and has been for the past few years,
1484.60s - 1486.78s |  attackers haven't been able to enumerate
1486.78s - 1490.50s |  Google Cloud's public IP pools for quite some time,
1490.50s - 1495.16s |  at least none researched that I could find online.
1495.16s - 1497.26s |  So with those AWS mitigations,
1497.26s - 1499.14s |  they're actually pretty simple to bypass.
1499.14s - 1500.98s |  Instead of allocating elastic IPs,
1500.98s - 1505.26s |  we can just restart EC2 instances with ephemeral IPs
1505.26s - 1508.10s |  and we can perform the enumeration by just restarting,
1508.66s - 1513.66s |  restarting, and my IP address that my EC2 instances assigned
1514.06s - 1518.02s |  will generally rotate a lot faster through unique IPs
1518.02s - 1520.98s |  than if you tried with elastic IPs.
1520.98s - 1523.30s |  In fact, I actually was able to enumerate
1523.30s - 1526.26s |  nearly 2.4 million unique IP addresses
1526.26s - 1529.62s |  in a span of six months by using this methodology.
1530.50s - 1532.26s |  Now with Google Cloud, again,
1532.26s - 1535.18s |  they had a harder set of mitigations,
1535.18s - 1538.50s |  but those mitigations were deterrence.
1538.50s - 1541.78s |  So how it worked was that I used a backend bucket
1541.78s - 1544.54s |  with a load balancer in order to assign IP addresses
1544.54s - 1545.78s |  to my resources.
1545.78s - 1547.74s |  But this still didn't let me get past
1547.74s - 1549.62s |  these cloud resource restrictions.
1549.62s - 1551.14s |  How do we do that?
1551.14s - 1553.10s |  Well, once we have this primitive
1553.10s - 1555.16s |  for enumerating cloud IPs,
1555.16s - 1557.16s |  we can talk about those limitations.
1557.16s - 1559.62s |  But for high level information,
1559.62s - 1562.46s |  where we used forwarding rules instead of virtual machines
1562.46s - 1564.42s |  in order to enumerate these IPs.
1566.10s - 1569.18s |  So with Google Cloud, remember all those restrictions?
1569.18s - 1572.02s |  Well, we can actually bypass all of them fairly cheaply.
1572.86s - 1575.18s |  So number one, with a billing account,
1575.18s - 1576.38s |  one interesting thing I found
1576.38s - 1577.98s |  was that you can assign billing accounts
1577.98s - 1579.74s |  across Google accounts.
1579.74s - 1580.94s |  This was a useful primitive
1580.94s - 1583.62s |  where if I could create a billing account in one account,
1583.62s - 1585.88s |  I can actually assign it across several accounts.
1585.88s - 1587.94s |  And the reason this is interesting is,
1587.94s - 1589.96s |  well, what about those quotas?
1589.96s - 1591.50s |  Well, with account quotas,
1591.50s - 1594.06s |  remember you can only create a certain amount of projects.
1594.06s - 1596.54s |  Now again, you can request an increase in this limit,
1596.54s - 1599.10s |  but you don't wanna have to do this justification.
1599.10s - 1600.58s |  I felt that it would be inappropriate
1600.58s - 1601.68s |  to assume that an attacker
1601.68s - 1603.78s |  would be able to get this quota increase.
1603.78s - 1604.74s |  What I found was though,
1604.74s - 1607.12s |  you can create a Google Workspace environment.
1607.12s - 1610.32s |  So what that means is I can create a fakebusiness.com,
1610.32s - 1612.62s |  I can create Google Workspace environment for it,
1612.62s - 1615.70s |  and I can create practically as many Google accounts
1615.70s - 1620.26s |  as I want for about $6 per account per month.
1620.26s - 1622.62s |  And this way, each of those accounts
1622.62s - 1624.58s |  gets a dedicated quota limit
1624.58s - 1627.10s |  and allows you to bypass these quota limits
1627.10s - 1629.46s |  by creating, for example, 10 accounts.
1629.46s - 1633.78s |  Now that's $60, but now your quota has been 10-timed.
1633.78s - 1636.54s |  And finally, to bypass billing account restrictions,
1636.54s - 1638.52s |  remember those credit card restrictions,
1638.52s - 1640.16s |  billing accounts can only be associated
1640.16s - 1642.46s |  with a certain number of projects.
1642.46s - 1645.62s |  Well, we can instead then use virtual credit cards.
1645.62s - 1648.58s |  And I use privacy.com, that's not a recommendation,
1648.58s - 1651.06s |  it's just one of the easiest that worked for me.
1651.06s - 1653.26s |  And what really this means is
1653.26s - 1655.98s |  it's not like they're bypassing KYC practices,
1655.98s - 1657.74s |  they verified my identity,
1657.74s - 1659.40s |  but it still allows me to create
1659.40s - 1661.66s |  as many credit card numbers as I want
1661.66s - 1663.98s |  and be able to create as many billing accounts as I want
1663.98s - 1666.04s |  to be able to bypass every single restriction
1666.04s - 1668.22s |  we discussed with Google Cloud.
1668.22s - 1670.46s |  And so this is what I really wanna mention
1670.46s - 1671.42s |  from a high level,
1671.42s - 1673.56s |  is Google Cloud implemented all these deterrents
1673.56s - 1675.94s |  to try to make sure you can't enumerate
1675.94s - 1678.42s |  their dangling IPs,
1678.46s - 1679.70s |  but in practice,
1679.70s - 1682.30s |  these deterrents weren't addressing the root cause,
1682.30s - 1684.74s |  which was the fact that the dangling IPs
1684.74s - 1691.30s |  still existed in the first place.
1691.30s - 1694.60s |  So let's talk about a little bit of the discovery process
1694.60s - 1698.32s |  and what I was able to find with these techniques.
1699.94s - 1702.70s |  So with dangling resources,
1702.70s - 1705.30s |  I was able to enumerate over 2 million IP addresses
1705.30s - 1707.18s |  for Google Cloud and AWS.
1707.18s - 1709.10s |  These are unique IP addresses
1709.10s - 1711.48s |  and they're mostly primitive resources.
1711.48s - 1713.60s |  So these IPs were created by,
1713.60s - 1716.96s |  remember, restarting an EC2 instance
1716.96s - 1719.82s |  or creating forwarding rules over and over again.
1720.80s - 1721.64s |  As far as I'm aware,
1721.64s - 1723.00s |  this is one of the first methodologies
1723.00s - 1726.54s |  to successfully bypass every single Google Cloud deterrent
1726.54s - 1728.98s |  that is intended to stop this type of attack
1728.98s - 1730.54s |  in the first place.
1730.54s - 1735.54s |  I captured over 60,000 unique fully qualified domain names.
1735.84s - 1738.52s |  And this reflects past research into this area
1738.52s - 1742.10s |  where researchers found that these FQDNs,
1742.10s - 1743.68s |  there are a lot of different A records
1743.68s - 1747.52s |  that pointed at IPs that were no longer being controlled.
1747.52s - 1750.28s |  Now out of these 60,000 FQDNs,
1750.28s - 1753.88s |  there are about 54,000 unique second level domains.
1753.88s - 1754.92s |  And what that really means
1754.92s - 1756.96s |  is that once you take away the subdomain,
1756.96s - 1759.04s |  let's say a.b.com,
1759.04s - 1761.60s |  we're just focusing on the unique number of APEX
1761.60s - 1763.60s |  or second level domains.
1763.60s - 1766.64s |  Well, that was over 54,000.
1766.64s - 1770.40s |  And finally, over 5,000 of the domains
1770.40s - 1771.80s |  that I was able to capture
1772.84s - 1775.56s |  were included in the Tranco top 1 million list.
1775.56s - 1778.76s |  So Tranco is a listing of every domain
1778.76s - 1781.76s |  that they're aware of within a certain ranking.
1781.76s - 1783.64s |  And it allows you to compare
1783.64s - 1786.02s |  what is supposed to be an objective metric
1786.02s - 1789.30s |  for ranking of the domain based on DNS data.
1789.30s - 1793.00s |  Now, there are a lot of Fortune 500 companies impacted.
1793.00s - 1796.22s |  And what I found really interesting was that with AWS,
1796.94s - 1799.14s |  we had a roughly 25,
1799.14s - 1802.98s |  a rate of 25 dangling domains per 1,000 IPs.
1802.98s - 1806.74s |  But with Google Cloud, it was nearly 36.
1806.74s - 1811.06s |  And so what I suspect this discrepancy is as a result of
1811.06s - 1814.02s |  is that Google Cloud hasn't been able to been enumerated
1814.02s - 1817.72s |  for quite a few years.
1817.72s - 1819.40s |  Now, this talk isn't gonna focus
1819.40s - 1822.32s |  on the actual impact against customers
1822.32s - 1824.08s |  because I promised DEF CON review board
1824.08s - 1825.82s |  I wouldn't get stuck on it.
1825.82s - 1827.94s |  But you can see that I was able to compromise
1827.94s - 1830.14s |  some of the world's largest organizations,
1830.14s - 1834.60s |  including the Western District Court of Texas,
1834.60s - 1836.46s |  the New York Times,
1836.46s - 1841.10s |  the State Government of California, and Dior.
1841.10s - 1843.52s |  And yeah, it was a pretty fun time.
1843.52s - 1844.94s |  There was a lot more examples here.
1844.94s - 1847.30s |  Again, this isn't intended to cover it.
1847.30s - 1849.74s |  That's on a separate blog post as well.
1849.74s - 1852.58s |  I really go into detail about the impact.
1852.58s - 1854.34s |  And for a secret scanning,
1854.34s - 1855.94s |  again, what was really interesting
1855.94s - 1860.26s |  was that I scanned over 5 million unique files
1860.26s - 1862.30s |  from various platforms, not just VirusTotal.
1862.30s - 1863.86s |  That was just one of them.
1863.86s - 1867.62s |  And I discovered over 15,000 validated secrets.
1867.62s - 1868.96s |  And out of these secrets,
1868.96s - 1872.90s |  they included over 2,500 unique, again, validated.
1872.90s - 1875.20s |  These aren't just, you know, may match a pattern.
1875.20s - 1876.42s |  These are validated.
1876.42s - 1878.98s |  To over 2,500 validated secrets,
1878.98s - 1881.98s |  over 2,400 unique AWS keys,
1881.98s - 1884.78s |  over 2,200 GitHub personal access tokens
1884.78s - 1886.52s |  and fine-grained tokens,
1886.52s - 1889.76s |  over 600 Google's cloud service accounts,
1889.76s - 1892.38s |  over 460 Stripe accounts,
1892.38s - 1895.54s |  and the rest are largely from miscellaneous providers
1895.54s - 1896.70s |  added up together
1896.70s - 1899.34s |  that I didn't feel the need to include in this slide.
1900.30s - 1912.12s |  And again, there will be a blog to recap this,
1912.12s - 1913.92s |  but from a high level,
1913.92s - 1915.64s |  it's some of the largest organizations
1915.64s - 1917.00s |  in the world were impacted.
1917.00s - 1918.82s |  You know, just a fun example a few months ago
1918.82s - 1923.00s |  was Slack, Stanford's entire Slack workspace,
1924.18s - 1926.98s |  Samsung's workspace for Bixby.
1926.98s - 1928.96s |  I was able to get a bot token
1928.96s - 1931.42s |  for this Samsung Bixby tenant,
1931.42s - 1933.48s |  and which allowed me to read messages
1933.48s - 1935.06s |  from nearly every channel,
1935.06s - 1937.62s |  every single channel that the bot had access to
1937.62s - 1940.68s |  because of a default scope that was quite broad.
1940.68s - 1941.94s |  You know, some other interesting things
1941.94s - 1944.54s |  included the Supreme Court of Nebraska.
1944.54s - 1945.58s |  That was a fun one,
1945.58s - 1948.58s |  where they uploaded a password list to VirusTotal
1949.32s - 1951.38s |  with like 300 credentials from different,
1951.38s - 1954.18s |  like, I don't know, different AWS providers,
1954.18s - 1955.22s |  different cloud providers,
1955.22s - 1957.36s |  their security solutions, et cetera.
1957.36s - 1959.02s |  That was a really fun one.
1959.02s - 1960.72s |  You know, there are database backups
1960.72s - 1962.54s |  with a lot of these AWS keys
1962.54s - 1965.10s |  that had broad access to S3 buckets.
1965.10s - 1967.38s |  Anyways, you'll be able to read a lot more about this
1967.38s - 1968.54s |  this following week.
1969.70s - 1972.74s |  So by leveraging a security at scale mindset,
1972.74s - 1975.14s |  we can help protect thousands of organizations
1975.14s - 1977.14s |  far beyond a limited scope.
1977.98s - 1980.98s |  Remember, instead of starting with a specific target,
1980.98s - 1983.02s |  by starting with a diverse dataset,
1983.02s - 1985.58s |  we were able to have a much wider impact
1985.58s - 1988.48s |  than any of past work into leaked secrets.
1989.42s - 1991.30s |  You can read more about some of this impact
1991.30s - 1995.14s |  in an article that should be released right now
1995.14s - 1997.06s |  by Matt Burgess from Wired.
1997.06s - 1999.34s |  And I'll be releasing a detailed technical blog
1999.34s - 2000.58s |  later this week,
2000.58s - 2003.36s |  once I figure out whether a certain cloud provider
2003.36s - 2007.62s |  can actually revoke some of these keys or not.
2007.62s - 2012.70s |  So bringing it all together.
2012.70s - 2016.18s |  Hard coding secrets is the path of least resistance.
2016.18s - 2019.10s |  So remember, these are customer vulnerabilities,
2019.10s - 2024.10s |  but what enables them is these bad incentives.
2024.16s - 2025.00s |  Think about it.
2025.00s - 2026.38s |  Think about how easy it is to go ahead
2026.38s - 2028.58s |  and generate an AWS access key
2028.58s - 2031.10s |  or generate a Google Cloud Service account
2031.10s - 2033.86s |  and then put that into your executable directly.
2033.86s - 2036.80s |  You know, the libraries for these different providers
2036.80s - 2040.02s |  allow this direct interface in the first place.
2041.52s - 2043.28s |  Now, the reason this is really important
2043.28s - 2044.68s |  is because a lot of developers
2044.68s - 2047.82s |  are gonna follow the path of least resistance,
2047.82s - 2050.54s |  especially from smaller to mid-cap businesses.
2051.46s - 2054.88s |  And with dangling DNS records, the same problem exists.
2054.88s - 2057.12s |  It's the path of least resistance.
2057.12s - 2059.80s |  I created an AWS EC2 instance,
2059.80s - 2063.44s |  I put my DNS record pointing at that AWS EC2 instance,
2063.44s - 2065.52s |  and the path of least resistance
2065.52s - 2068.56s |  is leaving that DNS record even if I deallocate it.
2069.44s - 2071.56s |  And what I think we need to really focus on
2071.56s - 2074.28s |  is making sure that the path of least resistance
2074.28s - 2076.12s |  is the secure path.
2076.12s - 2080.48s |  And what this really means is with dangling resources,
2080.48s - 2082.64s |  I think we need to have better ownership
2082.64s - 2086.84s |  of cloud resources and DNS records, better association.
2086.84s - 2088.60s |  So for example, some cloud providers
2088.60s - 2092.28s |  have tried to associate their DNS services
2092.28s - 2095.72s |  with their EC2 resources, as one example.
2095.72s - 2098.52s |  And the problem with this is a lot of different customers
2098.52s - 2100.46s |  are gonna use different DNS providers,
2100.46s - 2101.84s |  different cloud providers.
2101.84s - 2104.52s |  What we really need is an industry-wide solution
2104.52s - 2108.44s |  of tracking DNS records and tracking cloud resources
2108.44s - 2112.96s |  and putting them together.
2112.96s - 2115.92s |  Now, for hard-coded secrets,
2115.92s - 2117.68s |  what I really think we need to focus on
2117.68s - 2119.72s |  is making sure that it's hard
2119.72s - 2122.32s |  to include secrets in your code.
2122.32s - 2124.88s |  So don't have short-access tokens
2124.88s - 2130.55s |  that your library just blindly accepts from a string,
2130.55s - 2150.08s |  but instead for, all right, thank you for that.
2150.08s - 2151.64s |  That was a nice wake-up call.
2153.88s - 2156.16s |  All right, anyways, so yeah,
2156.16s - 2157.48s |  with these hard-coded secrets,
2157.48s - 2158.88s |  what I really think we need to do
2158.88s - 2161.76s |  is make sure to limit the secrets
2161.76s - 2164.40s |  so that they can only be inserted from the environment
2164.40s - 2165.84s |  or from a file on disk,
2165.84s - 2168.00s |  and make it hard to hard-code these secrets
2168.00s - 2170.28s |  inside of an executable in the first place.
2170.28s - 2171.88s |  Now, again, you can have exceptions.
2171.88s - 2174.10s |  You can have it so a customer can opt out
2174.10s - 2175.98s |  from the secure default,
2175.98s - 2182.13s |  but we need to make sure that the secret default is secure.
2182.13s - 2185.69s |  So what about remediating these vulnerabilities?
2185.69s - 2188.53s |  Well, remember, for dangling records at a high level,
2188.53s - 2191.37s |  it's gonna be hard to contact every single host
2191.37s - 2193.89s |  of every 60,000 dangling domain
2193.89s - 2195.69s |  that I was able to discover.
2195.69s - 2199.49s |  What we really need is a way to tie ownership to DNS records.
2200.25s - 2201.37s |  And we need to do this across the industry
2201.37s - 2205.83s |  because of that multi-cloud approach.
2205.83s - 2209.75s |  Now, for secrets, this is where it gets really interesting.
2209.75s - 2212.33s |  So I went ahead and asked a bunch of organizations
2212.33s - 2214.49s |  that I found secrets for, including GitHub,
2214.49s - 2217.01s |  including AWS, including OpenAI,
2217.01s - 2219.01s |  whether I could report secrets to them
2219.01s - 2221.17s |  and they could revoke them automatically.
2221.17s - 2223.97s |  Now, GitHub has that program for scanning secrets
2223.97s - 2225.85s |  on their platform already.
2225.85s - 2228.07s |  Remember, if you actually go ahead and post a,
2228.07s - 2231.85s |  for example, OpenAI access key on a public repository,
2231.85s - 2235.43s |  that access key will be revoked within a few minutes.
2235.43s - 2237.03s |  And what I was curious was, hey, GitHub,
2237.03s - 2240.35s |  can I please use this mechanism you already have?
2240.35s - 2242.75s |  Well, unfortunately, they said no.
2242.75s - 2246.47s |  And in fact, several providers said no, like AWS,
2246.47s - 2249.45s |  despite the fact that they already had given this mechanism
2249.45s - 2251.47s |  to GitHub and despite the fact
2251.47s - 2254.51s |  that an attacker could access the mechanism
2254.51s - 2258.35s |  by posting a public git or public commit.
2258.35s - 2260.75s |  Now, one exception to this was OpenAI,
2260.75s - 2263.19s |  who immediately responded with an endpoint
2263.19s - 2265.47s |  for reporting these keys and allowed me
2265.47s - 2267.35s |  to automatically revoke the keys
2267.35s - 2269.85s |  that I discovered in the wild.
2269.85s - 2272.51s |  But what do we do about everyone else?
2272.51s - 2274.59s |  So the problem with these secret keys
2274.59s - 2277.55s |  is that the impact is far, far, far greater
2277.55s - 2279.59s |  than dangling DNS records.
2279.59s - 2280.95s |  In fact, we just saw some
2280.95s - 2282.55s |  of the world's largest organizations
2282.55s - 2285.19s |  and there were several more impacted.
2285.19s - 2287.07s |  I didn't feel comfortable releasing this work
2287.07s - 2288.87s |  without at least some stopgap
2288.87s - 2292.67s |  until these cloud providers could take the secure default.
2292.67s - 2296.23s |  So what I actually did was I developed a mechanism
2296.23s - 2299.45s |  that used GitHub's mechanism anyway
2299.45s - 2303.41s |  for revoking these secrets because they said no,
2303.41s - 2304.59s |  but I don't care.
2305.63s - 2308.39s |  But yeah, so what I did was I have this system now
2308.39s - 2311.23s |  where whenever new secrets are discovered,
2311.23s - 2313.57s |  I'll go ahead and create a gist
2313.57s - 2315.11s |  and the way I create this gist
2315.11s - 2319.23s |  is by automating the entire GitHub login process
2319.23s - 2321.55s |  and then just am using an UI endpoint
2321.55s - 2322.99s |  for creating a public gist.
2322.99s - 2325.59s |  And this way, it'll actually trigger
2325.59s - 2327.55s |  the GitHub secret scanning mechanism
2327.55s - 2330.03s |  that they could have given me direct access to anyway.
2330.03s - 2337.37s |  So yeah, anyways.
2337.37s - 2338.61s |  Now, what's really cool about this
2338.61s - 2341.73s |  is that almost every secret that you saw listed
2341.73s - 2343.17s |  in the previous section,
2343.17s - 2345.01s |  a lot of them are gonna be revoked.
2345.01s - 2347.05s |  There's an exception to that though.
2347.05s - 2349.49s |  One of the largest providers which did have leaked secrets
2349.49s - 2351.01s |  was AWS.
2351.01s - 2353.67s |  Now, AWS takes an interesting approach.
2353.67s - 2355.81s |  When you post your AWS access key
2355.81s - 2358.99s |  on a public GitHub commit or post,
2358.99s - 2362.53s |  what they do is that they'll create a support case for you
2362.53s - 2366.09s |  and restrict to write access using that key.
2366.09s - 2367.13s |  I found that kind of interesting.
2367.13s - 2369.81s |  So what's really happening is AWS
2369.81s - 2371.49s |  is aware of these secret keys,
2371.49s - 2374.71s |  but they're choosing not to revoke them for some reason.
2375.73s - 2377.29s |  Yeah, that's an interesting one.
2377.29s - 2381.25s |  So effectively, if you find a leaked AWS access key
2381.25s - 2384.77s |  on GitHub, you can still use that key to read S3 buckets,
2384.77s - 2389.33s |  read RDS database data, to read download files from S3.
2389.33s - 2392.41s |  You know, I remember I looked at a AWS key last weekend
2392.41s - 2395.01s |  for a casino that was dealing,
2395.01s - 2400.01s |  well, alleged to deal with over $1 billion of bets a month.
2400.57s - 2402.37s |  And I was like, okay, wait a minute.
2402.37s - 2403.33s |  Was this reported?
2403.33s - 2404.71s |  We should get this revoked.
2405.41s - 2406.79s |  But in reality, what happened was
2406.79s - 2409.23s |  AWS created this support case.
2409.23s - 2410.75s |  The customer never saw it
2410.75s - 2413.39s |  because the support email was sent
2413.39s - 2415.31s |  to their generic billing account.
2415.31s - 2417.35s |  You know, a lot of people, a lot of enterprises
2417.35s - 2420.59s |  set up an AWS account and use a generic billing email
2420.59s - 2421.91s |  that no one really looks at.
2421.91s - 2423.83s |  And so the support case was ignored,
2423.83s - 2426.31s |  and this key is still active today.
2426.31s - 2427.63s |  You know, it's disappointing
2427.63s - 2430.15s |  because I don't know what more I can do for my shoes.
2430.15s - 2431.31s |  You know, I've created a mechanism
2431.31s - 2433.87s |  that can help automatically revoke most of these keys.
2433.87s - 2435.75s |  But what do we do about keys
2435.75s - 2438.51s |  that the provider doesn't take action on?
2438.51s - 2439.91s |  And so this is where I really think
2439.91s - 2441.75s |  providers need to switch up is,
2441.75s - 2444.83s |  number one, if someone's secret key,
2444.83s - 2447.39s |  you have both components, is on the internet
2447.39s - 2451.31s |  and you know about it, you need to revoke that immediately.
2451.31s - 2453.75s |  I mean, it's crazy to me to think that even on GitHub,
2453.75s - 2455.59s |  if you post your AWS access key,
2455.59s - 2457.51s |  that's not gonna be automatically revoked.
2457.51s - 2460.31s |  Every other provider I looked at does automatically revoke.
2460.31s - 2464.23s |  Google Cloud revokes, Slack revokes, OpenAI revokes.
2464.23s - 2470.49s |  The largest cloud provider by market share does not revoke.
2470.49s - 2473.89s |  Now, if you're interested in starting this sort of research
2473.89s - 2477.05s |  yourself, what I'd focus on is breaking down
2477.05s - 2479.37s |  the traditional methods of finding vulnerabilities.
2479.37s - 2481.77s |  So with dangling domains, that was checking
2481.77s - 2483.93s |  if the DNS record is actually pointing
2483.93s - 2486.53s |  at a uncaptured IP address.
2486.53s - 2489.85s |  And with secrets, it was trying to find
2489.85s - 2493.05s |  those secret patterns in a diverse data source.
2494.01s - 2496.57s |  So in this case, we used virus scanning platforms,
2496.57s - 2498.93s |  but you can use a similar methodology
2498.93s - 2503.37s |  against a larger set of vulnerability classes.
2503.37s - 2505.69s |  And what you really wanna do is correlate those steps
2505.69s - 2507.69s |  with these large data sets,
2507.69s - 2509.69s |  regardless of their intended usage.
2511.29s - 2513.73s |  Thank you so much for coming out to this talk.
2513.73s - 2521.19s |  What a fun time.
2521.19s - 2525.58s |  We do have a few minute for questions.
2525.58s - 2530.03s |  Oh, we apparently don't have microphones, that's...
2530.03s - 2531.39s |  All right, yeah, if you have questions,
2531.39s - 2534.55s |  feel free to come up and we can have a chat over on stage.
2534.55s - 2536.51s |  Thank you so much for coming out to this talk.
2536.51s - 2537.35s |  What a fun time.
2537.35s - 2539.87s |  And yeah, I look forward to working with these providers
2539.87s - 2541.51s |  to address these vulnerabilities.