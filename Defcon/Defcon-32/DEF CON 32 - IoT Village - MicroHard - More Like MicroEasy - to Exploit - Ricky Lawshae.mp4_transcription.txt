{
  "webpage_url": "local:1732053801:b36b9535:DEF CON 32 - IoT Village - MicroHard - More Like MicroEasy - to Exploit - Ricky Lawshae.mp4",
  "title": "DEF CON 32 - IoT Village - MicroHard - More Like MicroEasy - to Exploit - Ricky Lawshae.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 5.00s | This text was transcribed using whisper model: large-v2

 Okay, so my name is Hedlo Seek.
5.00s - 10.00s |  And this is my talk, Micro Hard, More Like Micro Easy.
11.76s - 16.76s |  Pause for laughter, and off to a great start.
17.60s - 21.32s |  Okay, so yeah, first off, let me introduce myself.
21.32s - 23.88s |  I'm a principal security researcher
23.88s - 27.64s |  at Keysight Technologies, based out of Austin, Texas.
28.16s - 32.00s |  I focus mainly on offensive IOT research,
32.88s - 34.64s |  and I've been doing this kind of stuff
34.64s - 37.40s |  professionally since 2009.
37.40s - 40.24s |  And I speak at conferences fairly regularly.
40.24s - 44.12s |  I've spoken at DEF CON like five times
44.12s - 46.92s |  on the actual stages, and this is my first time
46.92s - 48.62s |  speaking at IOT Village.
50.16s - 53.64s |  And then I have several hobbies.
53.64s - 56.16s |  Most of them involve me drinking whiskey.
56.72s - 59.92s |  Okay, so that's who I am.
59.92s - 62.36s |  Let's talk about who Micro Hard is.
62.36s - 66.48s |  They're a Canadian-based device manufacturer.
66.48s - 70.48s |  They make basically cellular bridges
70.48s - 73.42s |  for ethernet and serial devices.
74.38s - 77.52s |  They're used in lots of different environments
77.52s - 80.72s |  that people really care about,
80.72s - 83.88s |  such as power utilities.
83.88s - 85.96s |  I see unmanned vehicles listed
85.96s - 88.12s |  on their list of industries.
89.72s - 91.40s |  You know, just basically everywhere
91.40s - 93.08s |  you could possibly think of needing
93.08s - 95.72s |  to remotely access a device,
95.72s - 99.40s |  they claim to be involved in some way.
100.24s - 103.24s |  Okay, so that's Micro Hard as a company.
103.24s - 105.08s |  Let's talk about the device
105.08s - 108.08s |  that we're gonna be looking at today.
108.08s - 111.16s |  It's called a Bullet LTE-NA2.
111.16s - 113.76s |  NA is for North America.
114.60s - 117.80s |  This is an LTE bridge for adding cellular connectivity
117.80s - 121.02s |  to serial and ethernet devices.
123.32s - 127.92s |  It's meant for managing installations remotely.
127.92s - 130.24s |  This is a quote from their website.
130.24s - 132.80s |  "'Connect any device, old and new,
132.80s - 136.16s |  "'serial or ethernet, and provide cellular remote access
136.16s - 139.48s |  "'using the Bullet LTE-NA2.'"
139.48s - 141.32s |  What could possibly go wrong?
142.16s - 144.72s |  So I actually got this device
144.72s - 147.16s |  because I was doing a security audit
147.16s - 149.84s |  for a utility company,
149.84s - 151.52s |  and they were wanting to deploy
151.52s - 153.28s |  a bunch of different devices
153.28s - 155.68s |  and wanted us to check the security of the devices,
155.68s - 157.12s |  and this was one of them,
157.12s - 158.96s |  and I did not end up recommending
158.96s - 162.16s |  that they deploy this in the field,
164.04s - 167.46s |  and you'll see why.
167.46s - 171.86s |  Okay, so first off, from a hardware perspective,
171.86s - 176.30s |  it's a 32-bit ARM Cortex-A5 processor,
176.30s - 177.78s |  which you can see in the top view.
177.78s - 180.30s |  This is kind of like the top of the board
180.30s - 182.82s |  and the bottom of the board kind of picture.
184.02s - 187.54s |  It's got, down in the bottom of the top view,
187.54s - 190.66s |  next to that orangish-yellowish thing
190.66s - 195.66s |  is a Spansion flash firmware chip, 128 megs.
196.82s - 198.86s |  The entire file system is read-write,
198.86s - 200.06s |  which is pretty awesome,
200.46s - 204.70s |  and then it's also got 256 megs of RAM,
204.70s - 206.66s |  and then on the underside of the board,
206.66s - 211.66s |  they've got this QuekTel modem, an EC25-AF,
212.30s - 214.06s |  and then they've also got connections
214.06s - 219.06s |  for a SIM card slot, PoE, Ethernet, USB, and serial,
221.86s - 228.78s |  in addition to a couple of programmable I-O ports,
228.78s - 232.22s |  and then from the firmware perspective,
232.22s - 234.66s |  the firmware updates are completely
234.66s - 236.50s |  unsigned and unencrypted,
236.50s - 240.14s |  so you can pretty easily forge your own if you wanted to,
241.34s - 244.74s |  and they were also easy to extract with binwalk.
246.26s - 250.38s |  Inside the firmware updates, it's got the bootloader,
250.38s - 251.98s |  it's got the Linux kernel,
251.98s - 255.12s |  and it's got a full SquashFS file system,
255.12s - 259.02s |  so basically you could fully emulate the system
259.02s - 261.88s |  if you were so inclined pretty easily.
265.26s - 267.26s |  And then the software itself,
267.26s - 272.18s |  the OS is based loosely on OpenWRT,
272.18s - 275.04s |  running a Linux 3.6.9 kernel.
276.48s - 279.70s |  In the version that I'm gonna be demonstrating today,
281.44s - 285.38s |  they were using UHT2PD for web,
285.38s - 287.82s |  they changed to that in a subsequent version,
287.82s - 291.42s |  and you'll see why they decided to change it.
291.78s - 295.30s |  And then, yeah, they use DropBear for SSH
295.30s - 298.30s |  and TelnetD for Telnet, kind of.
298.30s - 301.14s |  They actually have, whenever you log in
301.14s - 303.22s |  with one of those services,
303.22s - 308.06s |  they end up dropping you into a jailed debug environment,
309.14s - 312.26s |  which we'll talk about extensively later on.
313.66s - 316.56s |  And then on the UDP side,
316.56s - 319.60s |  they've got a discovery service that basically,
319.60s - 322.80s |  depending on the type of device you're using,
322.80s - 325.28s |  will send out a discovery probe,
325.28s - 327.48s |  or will answer a discovery probe
327.48s - 330.04s |  on one of these three ports
330.04s - 334.39s |  and give you a lot of information back.
334.39s - 337.71s |  So it wouldn't be one of my talks
337.71s - 340.63s |  if I didn't discuss a discovery protocol,
340.63s - 344.85s |  because I love discovery protocols.
344.85s - 346.61s |  So on this one, like I said,
346.61s - 351.07s |  it listens for broadcast UDP messages.
352.07s - 356.91s |  Port 2077, or 20,077,
356.91s - 361.91s |  is for 3G devices, 87 is for IP-based devices,
362.19s - 364.39s |  and 97 is for LTE devices.
364.39s - 368.71s |  So this one would respond to broadcast messages
368.71s - 371.67s |  it gets on port 20,097.
372.79s - 376.55s |  The magic probe is the same across the board,
376.55s - 379.01s |  and let's look at what that looks like.
379.93s - 383.45s |  So you can see, this is a scanner that I wrote,
383.45s - 385.93s |  where I just send out that broadcast packet
385.93s - 387.97s |  to each one of those three ports,
387.97s - 390.97s |  and then I listen for responses.
390.97s - 395.13s |  And so this is what the response looks like on the wire.
395.13s - 400.13s |  One kind of annoying thing is they will respond
402.69s - 405.13s |  to you from a random port on their side
405.13s - 409.53s |  to your source port, but on the broadcast address,
409.53s - 413.69s |  which makes it really hard to correlate responses.
413.69s - 416.21s |  There you go.
416.21s - 419.05s |  Okay, so the discovery response
419.05s - 422.09s |  contains a lot of useful info.
422.09s - 424.61s |  It's got the MAC address and the IP address.
424.61s - 427.53s |  It's also got the host name and the SSID
427.53s - 430.33s |  for any kind of wireless stuff.
431.81s - 435.85s |  And then it has the model name and the firmware version.
436.65s - 440.17s |  And then it's got this thing called NMS,
440.17s - 442.61s |  that's the network management software.
442.61s - 445.93s |  It's like their cloud-based thing
445.93s - 447.73s |  where you can register all of your devices
447.73s - 450.77s |  and track the GPS location of all of them.
450.77s - 452.67s |  It's got the domain and password hash,
452.67s - 455.85s |  but I'm not gonna be talking about NMS today,
455.85s - 458.13s |  because that's not part of this talk.
459.95s - 464.73s |  Okay, so, and yeah, I wrote a scanner and response parser,
464.73s - 466.05s |  and I'll put it up on my GitHub,
466.69s - 470.02s |  which I'll link to later.
470.02s - 474.14s |  Okay, so, let's actually get into the bones.
475.50s - 476.90s |  So the web management portal,
476.90s - 479.18s |  this was kind of the main focus of my audit
479.18s - 482.12s |  when I was originally looking at these devices.
483.02s - 486.66s |  Like I mentioned earlier, it's UHC2PD,
486.66s - 491.32s |  based on the version from OpenWRT in 2014.
492.22s - 494.54s |  It's used for configuring basically
494.54s - 497.74s |  every aspect of the device,
498.58s - 502.10s |  and it is also reachable from LAN and WAN side.
502.10s - 504.02s |  And that's enabled by default,
504.02s - 506.82s |  and you have to actually turn that off
506.82s - 509.84s |  if you don't want it reachable from the WAN side.
510.98s - 515.76s |  But the best part is it's all shell scripts.
515.76s - 519.72s |  So like this is the directory listing,
519.72s - 522.32s |  and it's literally like every single page
522.32s - 524.60s |  is a shell script wrapped with a GUI.
525.60s - 528.88s |  So, you know, of course,
528.88s - 532.56s |  there are multiple command injections throughout this thing.
532.56s - 534.84s |  They're all post-auth,
534.84s - 536.94s |  so you need a valid user account
536.94s - 538.92s |  in order to access these pages.
540.44s - 543.32s |  So yeah, multiple command injections.
543.32s - 545.64s |  My example that I'm showing today
545.64s - 549.08s |  is with the diagnostics page,
549.08s - 552.12s |  because of course it implements ping,
552.12s - 554.36s |  and if it has ping, it has command injection.
555.12s - 555.96s |  Every single time.
557.52s - 560.00s |  Oh my God, is that really my time warning?
560.00s - 563.04s |  Okay, I have to really book it.
563.04s - 565.52s |  Okay, so yeah, it has ping.
565.52s - 567.76s |  So they tried to sanitize input,
567.76s - 570.08s |  but it failed pretty horribly.
570.08s - 571.88s |  They just sanitized the host name,
571.88s - 573.72s |  didn't worry about any of the other arguments
573.72s - 574.88s |  that you put in there.
575.80s - 578.56s |  So yeah, just leave host name blank,
578.56s - 580.96s |  and then put whatever command you want
581.96s - 584.52s |  all in the count parameter.
584.52s - 588.20s |  And let's show a demo of that real quick.
589.88s - 592.36s |  Okay, I'm not gonna go into
594.04s - 596.92s |  lots of the details of the exploits,
596.92s - 599.72s |  because I'm about to run out of time already.
599.72s - 602.52s |  But yeah, so this is post-auth,
602.52s - 607.52s |  so you need a valid username and password,
608.44s - 611.76s |  but then you run that,
611.76s - 616.76s |  and eventually you will, hey, get a root shell.
618.12s - 621.72s |  Because you injected whatever command you wanted to run,
621.72s - 623.00s |  and it has netcat on it,
623.00s - 625.16s |  so I was able to get a root shell
625.16s - 629.63s |  pretty easily with that one.
629.63s - 637.13s |  Okay, we're gonna hurry up.
637.13s - 638.41s |  Okay, so yeah, like I said,
638.41s - 642.65s |  those phones were all post-auth,
642.65s - 645.09s |  but I really wanted something that was pre-auth,
645.09s - 647.33s |  because that's so much sexier.
647.33s - 650.49s |  So I started looking at the authentication,
650.49s - 652.97s |  the way they handled authentication,
652.97s - 655.29s |  and as far as logging in,
655.29s - 657.57s |  it was vanilla OpenWRT.
657.57s - 660.93s |  They used basic auth,
660.93s - 665.21s |  so basically base64 encoded user colon pass.
666.81s - 670.89s |  And so since this is UHC2PD,
670.89s - 672.33s |  that's part of OpenWRT,
673.01s - 675.49s |  so you'd think it would be very well-vetted and everything,
675.49s - 677.61s |  but it is an open-source project,
677.61s - 681.65s |  so they were able to make their own modifications.
681.65s - 684.29s |  And so logins were generic,
684.29s - 687.33s |  logouts was where they made a mistake.
688.97s - 691.53s |  Basically, they wanted to set the basic auth header
691.53s - 693.53s |  to logout colon logout,
694.57s - 698.93s |  and then they did a star copy of that buffer
698.93s - 701.85s |  to a statically-sized buffer.
702.85s - 705.41s |  And then they could compare what it was
705.41s - 709.57s |  to logout logout and log the person out that way.
710.65s - 714.01s |  But yeah, they didn't do any bounce checking or anything.
714.01s - 717.05s |  So yeah, you can see,
717.05s - 718.65s |  I'm just gonna skip past this,
718.65s - 720.25s |  because I'm running out of time.
721.53s - 725.69s |  But yeah, you can see star copy,
727.61s - 729.53s |  and yeah, yeah.
730.53s - 732.45s |  Okay, let's do another demo.
732.45s - 734.97s |  I am actually gonna talk about the code of this one,
734.97s - 739.97s |  because it was a very pat myself on the back kind of thing.
742.21s - 747.21s |  This was my first ever in the wild ARM ROP exploit.
749.21s - 754.21s |  So basically, yeah, so they do have DEP and ASLR,
755.17s - 760.17s |  and I wasn't able to find a memory leak or anything
760.17s - 764.81s |  to leak the base address of libc or UC libc.
766.93s - 771.41s |  So for the purposes of this demo,
771.41s - 775.13s |  I disabled ASLR, but it is the lame version of ASLR
775.13s - 778.37s |  where they only randomize the top part.
778.37s - 781.49s |  So in theory, you could brute force
782.49s - 787.49s |  by just picking an address for the base of UC libc,
787.61s - 789.85s |  and then just trying over and over again,
789.85s - 792.33s |  and it'll just crash the website if it doesn't work,
792.33s - 796.45s |  and if it eventually works, then you get a shell.
797.29s - 802.29s |  But yeah, so basically just calling a system from UC libc
806.29s - 811.29s |  and passing this command as the argument to UC libc
812.49s - 818.90s |  and this one, hey, that was really fast.
821.02s - 823.10s |  So yeah, no authentication required for that one
823.10s - 827.40s |  because it's exploiting the authentication protocol.
828.46s - 844.08s |  So there's that one, and okay, so I disclosed those
845.12s - 848.86s |  back when I was doing the audit originally.
849.70s - 854.70s |  They fixed it in R1112 by adding more sanitization,
858.18s - 861.94s |  and then they switched from using UHT TPD
861.94s - 866.94s |  to using light TPD, so they no longer use UHT TPD,
867.14s - 869.04s |  but it's still all shell scripts.
869.94s - 872.94s |  So yeah, that was the end of the audit,
872.94s - 876.86s |  and I kind of stopped thinking about the device.
876.86s - 880.32s |  This release note still burns me to this day, though,
880.32s - 882.56s |  because that was the extent of the release note
882.56s - 886.30s |  that they used for fixing all of my critical vulnerabilities
886.30s - 888.14s |  is miscellaneous housekeeping tasks
888.14s - 889.80s |  that really, really bugged me.
891.92s - 895.22s |  Okay, so cut to like a few months ago,
895.22s - 898.82s |  I decided to dig this device back out and look at it again,
898.82s - 902.08s |  and this time around, I was looking at the Telnet portal.
902.08s - 907.08s |  So like I mentioned before, it's a jailed environment,
908.04s - 911.44s |  but they give you lots of access to like QT commands
911.44s - 914.76s |  for that QuackTel, or not QT, AT commands
914.76s - 916.92s |  for the QuackTel modem.
916.92s - 919.88s |  So yeah, you can see they give you lots of commands,
921.28s - 924.78s |  and that's handled by slash bin slash CLI test.
926.40s - 929.40s |  That's spawned every time you log in as the admin user,
929.96s - 932.64s |  and that defines all of the AT commands,
932.64s - 936.48s |  but not all of the AT commands were documented.
936.48s - 939.96s |  Okay, so yeah, there was an undocumented command
939.96s - 944.96s |  called ATM bash command that lets you run two bash commands,
945.60s - 948.78s |  PS and cat, and that's it, supposedly.
951.73s - 953.31s |  But the way they verified that
953.31s - 956.53s |  is by using a certain case compare,
956.53s - 958.09s |  and they were using the length
958.09s - 962.29s |  of what they were comparing from either PS or cat.
962.29s - 967.17s |  So as long as the string like began with PS or cat,
967.17s - 970.21s |  then you could put whatever you wanted at the end of it.
970.21s - 975.09s |  So basically, yeah, you just do like PS semicolon,
975.09s - 978.69s |  and then another command, and there you go.
978.69s - 986.62s |  Okay, one last demo, and then I'm basically done.
986.62s - 999.08s |  Okay, so again, post auth, right, there you go.
1002.26s - 1006.62s |  Okay, so let's just blast through
1006.62s - 1009.38s |  these last couple of slides to wrap up.
1011.34s - 1013.86s |  Okay, so that one was actually coincidentally fixed
1013.86s - 1016.08s |  like the month before I found it,
1016.08s - 1020.78s |  which was also kind of annoying, but the fix like,
1020.78s - 1024.50s |  I mean, it was basically just in bash command,
1024.50s - 1027.26s |  they removed that one and didn't touch anything else,
1027.26s - 1029.16s |  and may have also added in
1029.16s - 1031.14s |  some brand new command injection forms
1031.14s - 1034.06s |  in the latest firmware, but yeah,
1034.06s - 1039.06s |  so you can see where they were trying to secure things,
1039.18s - 1043.18s |  and then they just failed miserably every single time.
1043.18s - 1045.10s |  They need actual like, you know,
1045.10s - 1047.04s |  secure development processes,
1049.18s - 1051.40s |  and also I get really pissed off
1051.40s - 1053.10s |  about the vague release notes,
1053.10s - 1056.14s |  because in my opinion, it like minimizes the impact.
1056.14s - 1059.02s |  If I saw something that just said, you know,
1059.02s - 1060.82s |  miscellaneous housekeeping tasks,
1060.82s - 1064.10s |  and I'm running in a critical environment,
1064.10s - 1066.94s |  I'm gonna completely ignore that update,
1066.94s - 1068.16s |  because it seems like it's something
1068.16s - 1070.02s |  I don't have to install,
1070.02s - 1073.74s |  and so it's just leaving me still vulnerable,
1073.74s - 1076.66s |  but yeah, and then if it has ping,
1076.66s - 1078.06s |  it has command injection.
1079.22s - 1081.86s |  And that's how you get in touch with me
1081.86s - 1084.42s |  on Headless Geek on most things,
1084.42s - 1086.22s |  and that's my GitHub,
1087.46s - 1089.98s |  and yeah, that is it.
1089.98s - 1091.62s |  Sorry if I went over time.
1093.34s - 1094.18s |  That's it.