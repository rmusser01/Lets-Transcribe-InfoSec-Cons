{
  "webpage_url": "https://www.youtube.com/watch?v=M-2d3sM3I2o",
  "title": "DEF CON 32 - Winning the Game of Active Directory - Brandon Colley",
  "description": "The Game Of Active Directory (GOAD) is a prebuilt vulnerable Active Directory (AD) environment primarily created for pentesters. Touting over 30 methods of attack, GOAD offers multiple paths to full AD takeover. But is that really how you win the game? Regardless of color, as security professions our goal should be to better secure environments. This talk walks through AD attack strategies, exploiting misconfigurations that ultimately pwn AD. Mitigations for these attacks are discussed and implemented, showcasing how they stop common attacks. Implementing these protections in your environment is truly how you win the Game Of Active Directory.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2584,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.37s - 9.29s | This text was transcribed using whisper model: large-v2

 Okay, I am with the Packet Hacking Village, and this particular speaker is being sponsored
9.29s - 15.85s |  by us, and we are delighted to present Brandon Colley, who is going to obviously talk to
15.85s - 17.97s |  you about Active Directory.
17.97s - 23.53s |  He has been, he'll tell a little bit about himself, but he works for Trimark Security,
23.53s - 25.81s |  and I'm also proud to call him friend.
25.81s - 32.24s |  Take it away.
32.24s - 37.00s |  Thank you, Kathy, friend Kathy, Investigator Chick, everybody.
37.00s - 40.44s |  Alright, can you guys hear me okay in the back?
40.44s - 41.44s |  Awesome.
41.44s - 42.44s |  Let's do this.
42.44s - 47.96s |  So, title, as you all know, is Winning the Game of Active Directory.
47.96s - 53.28s |  So a little bit about myself is I served in an operations role, managed Active Directory
53.28s - 58.84s |  for about 15 years for multiple different organizations before I joined Trimark about
58.84s - 61.00s |  two and a half years ago.
61.00s - 66.84s |  A senior security consultant for them, and just got promoted to the service lead role
66.84s - 70.72s |  for our Microsoft Cloud assessment, so I'm kind of joking and saying that this might
70.72s - 76.96s |  be my last on-prem Active Directory presentation, so maybe next year you'll come to see, like,
76.96s - 81.36s |  Winning the Game of Entra ID or something like that, so.
81.36s - 87.00s |  Recently founded my own company and got a logo created, so I threw it up there, so B&R
87.00s - 89.40s |  Consulting is a company that I just started.
89.44s - 96.12s |  I'm a father, here's one of my kids with me at a Chiefs game, I saw a Chiefs hat, go Chiefs,
96.12s - 101.20s |  and my wife Bridget came with me today, so I am a very loving husband, as I hope she'd
101.20s - 102.20s |  also agree.
102.20s - 114.17s |  First time at DEF CON as well, so, and so before we really start digging in, I want,
114.17s - 118.33s |  I mean, the title of the game is How to Win the Game of Active Directory, so let's talk
118.33s - 122.81s |  about what I'm talking about when I talk about the game of Active Directory.
122.81s - 129.29s |  So GoAD, as I like to call it, or somebody said GoAD, so Prebuilt Active Directory Lab
129.29s - 137.37s |  is a multi-domain environment, they have multiple different builds that you can create and touts
137.37s - 141.81s |  over 30 different vulnerable configurations just out of the box.
141.81s - 147.05s |  It's created and maintained by Mayfly of Orange Cyber Defense, and Mayfly gave me permission
147.05s - 152.49s |  to go ahead and use this in the presentation, he just wanted to know when it gets posted
152.49s - 155.49s |  online and he wants my slides, so.
155.49s - 160.37s |  It was originally created for penetration testers to practice attacking Active Directory,
160.37s - 166.73s |  so real quick, where are my penetration testers in the audience, or any red team side people,
166.73s - 171.39s |  how about anybody on the blue side, okay, so we're heavily blue, awesome, and then everyone
171.39s - 177.17s |  else is just unaffiliated, I'm assuming, you don't get a vote.
177.17s - 181.73s |  So when you start playing a game, first thing you gotta do is character selection screen,
182.01s - 186.93s |  so we can choose to be a penetration tester, which your job is to exploit vulnerabilities,
186.93s - 191.37s |  misconfigurations, moving to a little bit of a red teamer, you're gonna start looking
191.37s - 195.77s |  a little bit more at testing detections and doing a little bit more stealthy activities
195.77s - 201.49s |  when performing Active Directory tests, and then our defenders, like most of you, are
201.49s - 206.85s |  looking forward to learning how to harden your environments, performing consistent monitoring
206.85s - 210.97s |  of those environments and just consistently improving the overall security posture of
210.97s - 213.11s |  your Active Directory.
213.11s - 216.13s |  The other character you could choose is to be an adversary, so I'm gonna assume that
216.13s - 220.41s |  the rest of you didn't raise your hands are my adversaries, right, but they don't play
220.41s - 223.09s |  by the rules anyway.
223.09s - 226.13s |  So the most important rule when you play a game is how do you win, right, and that's
226.13s - 229.53s |  what I'm here to talk about, is how do you win the game of Active Directory, and a lot
229.53s - 233.93s |  of people think that you can win the game of Active Directory by gaining domain admins,
233.93s - 238.93s |  right, that's the keys to the kingdom, once you get domain admin, it's game over, it may
238.93s - 243.57s |  be exfil of data, maybe you want some of that, uh, that juicy information that's in
243.57s - 248.61s |  Active Directory, or maybe you just wanna create persistence and you wanna be slow and
248.61s - 253.49s |  methodic about your efforts, however I'm here to kind of challenge that a little bit and
253.49s - 258.41s |  say that the way that you truly win the game of Active Directory, regardless of which character
258.41s - 264.41s |  you choose, is to maintain a secure environment, continuously improve that environment and
264.41s - 268.73s |  implement the safeguards that are needed to keep your Active Directory safe, and also
268.73s - 270.37s |  continuous progress.
270.37s - 274.09s |  So what I'm here to do today is kind of show you both sides of that, I'm gonna take a little
274.09s - 279.73s |  bit of an attack methodology and also defense methodology, so we have a, Ted Mosby likes
279.73s - 283.97s |  to say we have a tightly scheduled evening of awesomeness ahead of us, so let's go, and
283.97s - 289.73s |  I guess technically now it is evening, or afternoon anyway, so our agenda, we're gonna
289.73s - 295.33s |  stick with the gameplay idea, uh, we've got three different levels, so level one, we're
295.33s - 300.49s |  gonna call Reconnaissance, Enumeration, PrivEsc, and then level four is when we pwn Active
300.49s - 308.06s |  Directory and that's really our, our end boss.
308.06s - 313.54s |  So starting off with Reconnaissance, our first question when we are, are either protecting
313.54s - 319.94s |  or attacking Active Directory is kind of what's visible with simply network access, right,
319.94s - 324.44s |  no usernames, no passwords, we just are on the network and, and maybe in this case we
324.44s - 327.50s |  just know the IP address of a domain controller.
327.50s - 332.22s |  So here's an example of using CrackMap Exec, and this is our first misconfiguration which
332.22s - 338.26s |  is called anonymous access, if this is configured in your domain, anybody with network access
338.26s - 343.66s |  direct line of sight to your domain controller can query for a list of users as well as some
343.66s - 347.26s |  of the public information such as description.
347.26s - 352.22s |  And so here if we drill in, we identify that we've already got our first credential in
352.22s - 357.62s |  Samwell who had, must have had an administrator put his password in the description field
357.62s - 360.73s |  for some odd reason.
360.73s - 364.89s |  So how do we mitigate this other than just don't put passwords in description fields,
364.89s - 373.17s |  right, that's kind of the obvious one here, is removing these groups from your domain,
373.17s - 379.57s |  domain root, sorry, the pre-Windows 2000 group, I'm not saying to delete this from the domain
379.61s - 385.89s |  root, but if the members of this include the everyone group or the authenticated, I'm sorry,
385.89s - 391.89s |  not authenticated, the anonymous logons group, then this is possible.
391.89s - 396.49s |  In, in the Goad lab, the screenshot on the right is actually how it was configured, is
396.49s - 402.09s |  you're just giving root access to anonymous logon and that's what enables the ability
402.09s - 406.57s |  to, to see everything without having any sort of initial user.
406.65s - 410.53s |  So once we've removed that, we rerun the attack, we get nothing.
410.53s - 416.57s |  So we get an error message, nothing comes back, anonymous access no longer relevant,
416.57s - 419.33s |  so now we have to dig in a separate way.
419.33s - 424.05s |  So if we can't do it anonymously, we're going to have to build a user list, and so the game
424.05s - 429.01s |  of Active Directory, if you've, if you've used it before, you, you may know it's based
429.01s - 432.95s |  on the game of Thrones, which is kind of where the game of thing comes from, right?
432.95s - 439.55s |  So this is a good place for us to start scraping credentials, I'm sorry, not credentials, usernames.
439.55s - 444.55s |  So we're going to pull out the first names, last names, combine those, and form a user
444.55s - 445.59s |  list.
445.59s - 450.71s |  So the screenshot on the left is the user list that I'm using, which is a first name
450.71s - 457.67s |  dot last name, that's the, the, the methodology that's used in the lab, but in your environments
457.67s - 461.95s |  it might be a first initial dot last name, you might not have a dot, it might be your
461.95s - 464.95s |  last name and then your first name, something like that.
464.95s - 470.15s |  So we can go ahead and we can throw all of those into a user list, and then we can attack
470.15s - 474.29s |  Active Directory, still anonymously, using a script like this.
474.29s - 480.03s |  So this is just an in-map script that all you need to have is your user list in a text
480.03s - 485.27s |  file, and again the domain IP, and what it's going to do is it's going to attempt to authenticate
485.27s - 490.27s |  to Kerberos, or it's going to query Kerberos, Kerberos is going to come back and, and tell
490.27s - 493.99s |  you one of two things, it's either going to say, uh, yeah, that's valid, or no, that's
493.99s - 494.99s |  invalid.
494.99s - 500.35s |  So now we've got a list of nine valid accounts that were in that, uh, file, and so now we
500.35s - 502.55s |  know who we can attack.
502.55s - 505.91s |  And you guys might say, hey, it's not fair, you knew it was the Game of Thrones, so you
505.91s - 510.83s |  knew who you were attacking, well, there are plenty of lists out there on GitHub that you
510.83s - 516.87s |  can just do a, a very top 100 common names, and you can do the same style of attack.
516.87s - 521.11s |  And once you get one or two hits, then you kind of know the naming convention, right,
521.11s - 525.87s |  and then you just go out to LinkedIn, and you search up, uh, Microsoft, or whoever you're
525.87s - 530.55s |  attacking, and you scrape from there, right, so this is real world stuff that, that you
530.55s - 534.31s |  can obviously do.
534.31s - 539.27s |  And so the reason that this works is, is ingrained in the Kerberos protocol.
539.27s - 543.39s |  So if an account doesn't exist, then you're going to get this first, uh, error message,
543.39s - 545.51s |  which is that the principle's unknown.
545.51s - 550.03s |  If the user does exist, you're going to get one of those other, other two responses, and
550.03s - 553.23s |  that's basically what happens under the covers of this in-map script.
553.23s - 567.19s |  Sorry, I'm gonna drink, and this is weird, so.
567.19s - 576.27s |  Okay, so the fix for, for this is not easy, um, and sometimes not even possible.
576.27s - 582.03s |  And this is a, this is a no-fix, uh, bug, I guess you can say, Microsoft doesn't consider
582.23s - 589.07s |  user enumeration to be a bug, so the, the best thing that we can really offer is just,
589.07s - 593.59s |  if you're looking at being able to change things, is don't use the same, uh, email address
593.59s - 598.35s |  that you use for your same account name, or vice versa, uh, instead maybe create some
598.35s - 602.35s |  sort of non-standard naming convention by throwing something about the department, or,
602.35s - 606.11s |  or the type of person, if it's, um, like I used to work at a university, so maybe like
606.11s - 610.39s |  a F for faculty, S for staff, A for administration.
610.39s - 614.59s |  Maybe you do F for finance, um, I for IT, something like that, right?
614.59s - 619.91s |  Or probably the best thing to do is use multiple trailing digits, uh, and this is gonna exponentially
619.91s - 624.35s |  create a whole lot more trouble, where you're gonna have to have a much larger user list
624.35s - 629.47s |  and a whole lot more time to be able to really enumerate a full contents of Active Directory.
629.47s - 634.91s |  And I understand that this is hard, um, mitigations are more around password policies, which we're
634.91s - 638.39s |  gonna attack here, um, in a little while.
638.39s - 644.07s |  But because I talked about the Kerberos protocol, I wanna go back through another anonymous
644.07s - 649.47s |  thing that you can do, is attack, uh, Kerberos pre-authentication, and so this is known as
649.47s - 654.51s |  an AS rep-roast, and so this is what it looks like when you perform an AS rep-roast attack
654.51s - 657.59s |  using the ImpactKit toolkit.
657.59s - 662.87s |  And accounts that do not require pre-authentication are going to come back and give us a password
662.87s - 663.87s |  hash.
663.87s - 668.83s |  And in this case, Brandon Stark, uh, no relation, by the way, uh, gives us password hash for
668.83s - 671.82s |  free.
671.82s - 676.22s |  And with that, we can use Hashcat or John the Ripper or some other, um, offline attack
676.22s - 681.14s |  tool where we can throw this through, and I just threw it through, uh, a ROKU, which
681.14s - 687.58s |  is just a typical user list, uh, password list, sorry, and we get the clear text credentials,
687.58s - 695.21s |  uh, in just a matter of a few, a few minutes.
695.21s - 698.45s |  So fixing this is, is pretty easy.
698.45s - 699.45s |  It's just a checkbox.
699.45s - 705.41s |  So there is a Kerberos pre-authentication checkbox on user accounts, says do not require
705.41s - 707.09s |  Kerberos pre-authentication.
707.09s - 712.53s |  This is a super, super legacy thing, uh, pretty, pretty free of a win in an environment.
712.53s - 717.29s |  So if you've got any of this in your environment, um, removing that checkbox is gonna mitigate
717.29s - 723.29s |  it, which means after we remove that checkbox, Brandon no longer gives out his password freely,
723.29s - 727.89s |  uh, so we're gonna have to attack the passwords using some of the more, uh, more well-known
727.89s - 729.73s |  styles of, of password attacks.
729.73s - 738.65s |  I need, like, a desk someplace, like, right here, I'm gonna spill that on my computer.
738.65s - 744.49s |  Okay, so password attacks kind of fall into a few different categories, and so we're gonna
744.49s - 748.13s |  attack password reuse by doing a password spray.
748.13s - 756.29s |  And so, excuse me, password spray is, uh, trying a small handful of passwords against
756.29s - 758.75s |  all usernames in an environment.
758.75s - 763.75s |  So in this case, I used some of the passwords that I already found in the environment, and
763.75s - 768.87s |  I'm just seeing if there's possible password reuse, uh, across user accounts.
768.87s - 773.41s |  In this one, it didn't hit anything, but some common uses for this is things like using
773.41s - 783.02s |  Summer 2024, or Defcon 32, or whatever, right, like, um, and just seeing kind of what hits.
783.02s - 788.66s |  Uh, a similar attack is a credential stuff attack, and this is more commonly used with
788.66s - 795.14s |  breach credentials, so this is also a password reuse attack, but it's more specific to the
795.14s - 801.02s |  user account themselves, so, or the user themselves, so if they use the same password, say, for
801.02s - 807.10s |  LinkedIn, and we're able to identify that the, the email address that they signed in
807.10s - 812.42s |  with LinkedIn was the same as the Active Directory that we're attacking, it's possible that,
812.42s - 816.82s |  that we may be able to hit something using a credential stuffing attack.
816.82s - 821.86s |  In this specific account, um, sorry, this specific screenshot, uh, I kind of lazily
821.86s - 828.62s |  just used the same user list, and, as the password list, which simulates the, the situation
828.62s - 835.26s |  where a user has the same password as their username, which is not terribly common anymore,
835.26s - 838.98s |  but, uh, used to be common around, like, service accounts and things like that, so if you got
838.98s - 844.94s |  passwords that haven't changed in your environment for a very long time, this may, may be possible.
844.94s - 850.78s |  And so we did get a hit on that one, uh, we got the account Hodor, which, uh, we'll
850.78s - 856.94s |  use later in another authenticated attack, but so some of the things that we can do is,
856.94s - 861.40s |  and I showcase here just checking out the password policy to prove that you can view
861.40s - 865.66s |  it as any user in the domain, so once you have that initial user, you can query the
865.66s - 870.86s |  password policy and maybe tailor your password attacks a little bit more specific, and so
870.86s - 875.38s |  if you're wondering why on earth someone could have the same username and password,
875.38s - 882.06s |  it's due to the complexity requirement that's disabled in this lab, also the, the character
882.06s - 888.86s |  limit is only five, which I have seen worse than that, so five, not, not the worst, um,
888.86s - 892.06s |  some other things that you want to do with your password policy, other than kind of the
892.06s - 896.62s |  obvious two there, is looking at some of the account lockout threshold, as far as, and
896.62s - 901.46s |  also some of the other password, uh, requirements in there, I do, I do have a link to an article
901.46s - 906.14s |  I wrote called password policy a la carte, that's gonna be in my resources, so, uh, check
906.14s - 912.99s |  that out, uh, after the talk, I do want to talk a little bit about account lockout, because
912.99s - 917.95s |  it is an effective strategy to blocking some password style attacks, um, not gonna talk
917.95s - 922.93s |  about monitoring, because that's another, another thing, um, but you can query things
922.97s - 928.63s |  using password, um, crack map exec, and so, here, I've just simulated something, uh, uh,
928.63s - 933.17s |  I, this is an oopsie, so for the red teamers, you're probably somewhat familiar, hopefully
933.17s - 937.41s |  not, with seeing something like this, where you see log on failure, log on failure, log
937.41s - 941.45s |  on failure, and then you see account locked out, and hopefully this is just the one account,
941.45s - 947.55s |  and not, like, all the accounts, right? Um, mistakes happen, uh, but log on failures are,
947.57s - 953.15s |  are going to kind of reset that account lockout counter. So, to help combat that, whether
953.15s - 957.75s |  you're looking, I am showing the attack tools, but defense tools is kind of, um, another way
957.75s - 962.75s |  that you can look at stuff like this. When we rerun the, the crack map exec script, using
964.59s - 970.43s |  the user's flag authenticated, we can get the bad password count, so, here, we identify
970.43s - 973.87s |  the very bottom account was the one that we accidentally locked out, the other ones are
973.89s - 980.43s |  sitting at four, and so, we can wait, uh, for those password, um, resets to retime before you
980.43s - 987.51s |  attempt to attack them again. So, that concludes level one. Yes, right? So, we gained three
988.79s - 992.89s |  attack credentials, uh, three account credentials, but that's not necessarily the goal that we
992.89s - 997.35s |  talked about, so, the goal, rather than getting those credentials, is more so the
997.35s - 1002.89s |  vulnerabilities that we've identified as being able to patch, and so, in level one, we
1002.91s - 1007.07s |  talked about anonymous access, removing that from an environment, using a little bit more
1007.07s - 1012.51s |  robust usernames, and how attacks like that might occur, Kerberos pre-authentication, and
1012.51s - 1017.61s |  how that's a pretty quick, easy win, and then improvements to password hygiene and account
1017.61s - 1029.74s |  lockout. Alright, so, on to level two. I like that cute little bunny over there. Um, so, I
1033.40s - 1038.10s |  called this one enumeration, and then I, I told myself, nah, I should change it, cause this
1038.10s - 1043.02s |  is a little bit more, like, privilege escalation, and lateral movement stuff, and I realized
1043.02s - 1049.23s |  that, whatever, it's, it's just hard, so we're just gonna call it more hacks. So, the main
1049.23s - 1052.97s |  difference between this level and the first level is that we're doing a little bit more while
1052.97s - 1058.05s |  authenticated. So, what type of Active Directory presentation would be complete without
1058.05s - 1063.11s |  talking about Kerberosting? So, Kerberosting is an attack on accounts that have, uh,
1063.11s - 1067.65s |  service principal names, or SPNs. So, here's what that looks like. It's an authenticated
1067.65s - 1072.65s |  attack. You're able to identify both Jon Snow and the SQL service account are vulnerable to a
1074.17s - 1079.43s |  Kerberosting attack. So, we're gonna take those hashes, we're gonna throw those through
1079.43s - 1085.87s |  Hashcat again, and here we cracked the Jon Snow account, because it was a weak password. So, you
1090.10s - 1094.80s |  can run something like this. So, this is a quick PowerShell search that you can run, uh, get
1094.80s - 1099.80s |  an AD user, where you just are looking for accounts that have service principals, and these
1101.00s - 1105.44s |  usually are not cleaned up, because service accounts are scary. So, if you're an
1105.44s - 1109.14s |  administrator, you don't want to touch a service account, because you don't know if it's being
1109.14s - 1113.28s |  used, or where it's used, and you dare not change the password, because you have no idea where
1113.28s - 1116.68s |  to change it, what's gonna break, and change it back, like what's gonna happen, right? I've been
1116.68s - 1120.16s |  there, I did that for 15 years, and no, I didn't do this, and no, I didn't change those
1120.18s - 1125.66s |  passwords. Um, but what I'm telling you we can do, is we can look at things like LastLogon, which
1125.66s - 1130.66s |  may not be 100% accurate, but it may be helpful. Is the account privileged? If it's
1131.96s - 1137.80s |  privileged, and it's Kerberostable, then that's pretty much a free win for an adversary. So,
1137.80s - 1142.80s |  specify, uh, specifically look at those first. For the remaining ones, go ahead and look at what
1144.48s - 1149.44s |  the service principal says. So, in our case, the Jon Snow account, and I realize that's a little
1149.46s - 1154.00s |  bit small, but there's a HTTP setting in there, so there's a website that it's attempting to
1154.00s - 1159.64s |  coordinate with, called the wall.north, seven kingdoms, etc. If I check DNS for that, it
1159.64s - 1164.64s |  doesn't even exist. So, if I can't access that web server at all, then this service account's
1165.98s - 1170.98s |  not doing anything. So, we're gonna go ahead and remove that. The one that's going to remain
1170.98s - 1176.42s |  is the SQL service account, because it actually is running SQL, it's required to do that. Uh,
1176.44s - 1182.18s |  that one didn't crack, because it's using a long, strong, complicated, random password. And so,
1182.18s - 1187.18s |  that's how you protect other accounts that are, um, Kerberostable, is with, with that. And so,
1189.12s - 1193.76s |  this is what the attack looks like now that we removed the service principal. Jon Snow no
1193.76s - 1207.24s |  longer shows up as even being attackable. On path attacks. So, this I like to claim to be God's
1208.16s - 1213.16s |  gift to AD pentesters. Is that right, you pentesters? Right? This, um, responder, you set
1217.00s - 1223.34s |  this up and it, it'll just listen and respond to clients on the network. It's gonna say, uh,
1223.34s - 1227.34s |  client's gonna come out and say, hey, I'm looking for so and so, and it's like, yeah, that's me.
1227.34s - 1232.28s |  Yeah, that's me too, that's me too. And, um, if we have it set up in this way, it can poison
1232.32s - 1238.46s |  those requests and we can actually get NTLM hashes. In this case, it's NTLM v1 hashes for these
1238.46s - 1242.96s |  accounts. And so, we can do what we've done twice already, is we can crack them hashes again
1242.96s - 1248.48s |  with Hashcat. And so, here we've got our third account that we've been able to crack. And this
1248.48s - 1255.32s |  one was just from listening to the network. And while that's scary, the scarier thing that you
1255.32s - 1260.42s |  can do is you can configure responder to run in a similar way, but instead of giving you the
1260.46s - 1265.94s |  hashed credentials, you can tell it to go ahead and pass those or relay those using NTLM relay
1265.94s - 1271.00s |  X. And you can relay that authentication attempt to a target or targets. So, in this case, I'm
1271.00s - 1276.64s |  targeting a web server, the one that ends in 22 there. And I'm just gonna wait for responder to
1276.64s - 1282.28s |  get some authentication to happen. It's gonna send that here and then I've told it to set up a
1282.28s - 1286.76s |  SOX proxy. So, I've got an active connection using Edward Stark, which just happens to be an
1286.76s - 1293.78s |  administrator on that web server. So, now, we've got a shell on our target. So, we can do
1293.78s - 1299.94s |  things like this, where we can interrupt, uh, interact with that session and we can run
1299.94s - 1307.56s |  secrets dump on it. Pardon me. So, you can see I specified no password. I don't need a
1307.56s - 1311.84s |  password. I've already authenticated to it. I have an active session and I can run secrets dump
1311.84s - 1317.04s |  against it and I can dump the local SAM hashes. So, this includes the local administrator
1317.08s - 1320.92s |  account. Any other local accounts that exist. So, if you've got like a help desk account or
1320.92s - 1325.68s |  something like that, that you've, you've placed on systems. This will dump all local credentials
1325.68s - 1330.70s |  on that, that server or workstation. Also more fun, it's gonna extract saved credentials. So, here
1333.20s - 1339.26s |  we're attacking service account. So, if you may recognize the SQL service account that was not
1339.26s - 1345.64s |  Kerberoastable. You will not be Kerberoasting me. Uh, was in plain text because it's configured as
1345.64s - 1351.44s |  a service. It's running a service which is required for SQL, SQL Express. So, that account
1351.44s - 1356.46s |  was free on that machine. And so, what can we do for on path attacks? So, the quickest and
1358.96s - 1365.10s |  probably, uh, the easiest of all of these is preventing the LLMNR, which is link local
1365.10s - 1370.36s |  multicast name resolution. Yes, I had to write that down and no, I'll not memorize that. Um, I
1370.36s - 1375.32s |  do have a, a great article linked for that one as well. Actually, I have articles for all
1375.32s - 1382.34s |  these. Um, you may have remembered or noticed that, that those hashes were NTLMV1 hashes
1382.34s - 1388.24s |  with, which are infinitely easier to attack than NTLMV2. So, enforcing this on your domain
1388.24s - 1393.24s |  controller and setting it to the highest security level of enforcing NTLMV2 to exist on your
1393.90s - 1398.90s |  network. Ideally, not allowing NTLM at all and allowing Kerberos to do what it's supposed to do
1401.74s - 1407.98s |  for the last 20 years. Uh, this is hard and I don't know that I've ever fully seen this. I've
1407.98s - 1412.52s |  seen people auditing it and, and really starting to get ready for it. Um, another thing that
1412.52s - 1418.42s |  we've seen, I think twice at Trimark is LDAP signing and channel binding. This is another
1418.42s - 1422.96s |  thing that's incredibly difficult. It can break a lot of those non-Windows devices. I've
1422.98s - 1430.60s |  also got a couple links to some articles that have been written about this as well. A thing
1430.60s - 1434.70s |  that I don't think's all that hard, some administrators do think that's hard, that this is
1434.70s - 1439.48s |  hard. Um, this is protecting the accounts themselves. So, this might be a little bit easier
1439.48s - 1444.52s |  to get through some of that change management for you, is using the protected users group.
1444.52s - 1447.82s |  Because you're only impacting whatever users you put in it and not the enterprise when you're
1447.82s - 1453.30s |  making domain controller changes. Uh, co-worker of mine, Jake Hildreth, which owns our Active
1453.32s - 1458.12s |  Directory Security Assessments. He has a blog and a presentation. He's writing a tool to help
1458.12s - 1464.40s |  assist with end users adding, uh, accounts to the protected users group. So, again, I've got
1464.40s - 1469.40s |  that in the resources. Alright, so level two's down. We Kerberos to John Snow. We cracked the
1471.00s - 1476.00s |  hash from responder for Rob Stark. And we found the SQL service account running. So, now
1476.54s - 1481.54s |  we've got six accounts. And we've got five more vulnerabilities that we have patched. So, we
1483.82s - 1488.82s |  cleaned up SPNs. We disabled LLMNR and NTLM V1 by enforcing V2. We talked a little bit about
1492.40s - 1496.76s |  at least thinking about LDAP signing and channel binding. And then also the protected users
1496.76s - 1505.68s |  group. Protecting, um, those highly privileged users in your, your domain. So, level three, I
1505.68s - 1509.92s |  called PrivEsc. Again, this is maybe a little bit more lateral movement-y. Um, also some
1509.92s - 1515.70s |  pretty, pretty domain crushing attacks in this one too. And I'm gonna kinda start by going
1515.70s - 1520.44s |  backwards just a smidge. Cause I wanted to show Bloodhound just a, just a little bit. Um,
1520.44s - 1525.34s |  Bloodhound is an amazing tool that you can use to scan your Active Directory environment. And
1525.34s - 1531.38s |  here I'm just showcasing what paths are available to domain admin. And here I'm gonna zoom in
1531.38s - 1536.32s |  on the one that we just owned. So, we just got that Rob Stark account. And Rob Stark is a
1536.32s - 1540.82s |  member of the administrators group, which is just this very simple step away from domain
1540.82s - 1544.82s |  admins. And so, that one's just a little bit too boring, cause you can just add yourself to that
1544.82s - 1550.40s |  group, right? So, we're gonna do something cool. And we're gonna identify what ACL modification
1550.40s - 1555.18s |  may look like. So, here you might remember our old friend Samwell, who was our first attack
1555.18s - 1559.54s |  with that description field misconfiguration. Well, Samwell, for whatever reason, has the
1559.54s - 1564.54s |  ability, has a write DAQL on a GPO that's linked to the domain root. So, what does that look
1566.38s - 1573.65s |  like? So, here's what it looks like when we look at the policy itself. We see that the
1573.65s - 1578.79s |  delegation tab shows us that we have some privileges with Samwell. If we dig into him a
1578.79s - 1582.83s |  little bit, we identify he doesn't look too terribly dangerous, because he doesn't have write
1582.83s - 1587.83s |  permission. He has read and he has, um, delete. But we have to actually look at advanced to
1588.07s - 1593.07s |  identify what the real threat to this is, which is that write DAQL permission, which
1594.23s - 1600.27s |  translates to modify permissions and modify ownership. So, Sam can give himself, or anyone
1600.27s - 1605.47s |  else, access to modify this GPO. And there's a number of different things you can do once you
1605.47s - 1611.55s |  can modify a GPO, specifically at the domain root. One such example is just creating a file
1611.55s - 1616.79s |  that's gonna run at login for all users on all computers in your environment. So, we can do
1616.79s - 1622.85s |  some pretty messy stuff with that. So, mitigating this is, is fairly simple. You just have to
1622.85s - 1628.49s |  check out the, the GPOs. I don't have a script for this. Um, I should probably write one. So, I
1628.49s - 1632.29s |  may write one and put it up on GitHub, where you can actually scan some of the ACLs that might
1632.29s - 1636.73s |  be dangerous. But specifically start with your domain root and then move on to domain
1636.73s - 1642.55s |  controllers, move to, uh, other protected OUs to identify group policies that maybe have
1642.57s - 1647.57s |  delegations. Uh, also ownership. So, identify who has owner on your GPOs. And so, if we clean
1650.91s - 1658.23s |  that up, then we're in a lot better shape for any of that ACL modification. So, I'm gonna take
1658.23s - 1664.03s |  us a little bit back. So, you remember when we attacked the web server that we were
1664.03s - 1669.97s |  targeting, this stuff? Um, I don't really remember either, but basically what we did was we
1670.01s - 1676.19s |  were able to gain the local credentials for that web server. And what we can do with local
1676.19s - 1682.69s |  credentials is we can do a pass the hash attack. So, in this example, we're using the
1682.69s - 1686.99s |  administrator. This could be, like I said, a help desk account or any other local account. And
1686.99s - 1693.07s |  we can target all other known IPs in that domain. And this could be, uh, servers. This could
1693.07s - 1699.35s |  be workstations. And in this case, we identify that very first one, the castle black. That's
1699.35s - 1702.93s |  the one that we attacked. We expected that one to show up as pwned. But that bottom one,
1702.93s - 1709.09s |  Winterfell, is actually a domain controller. It's, I mean, this is a lab, so this is fairly
1709.09s - 1713.37s |  unrealistic. But the reason this works is because when you promote your first domain
1713.37s - 1718.37s |  controller, it's going to use that credential as the domain administrator credential. Um, so
1720.31s - 1725.11s |  just a little bit of digression on that. But with that, we don't even need to know what the
1725.11s - 1729.69s |  password is for that administrative account. We can just pass that hash and authenticate. And
1729.69s - 1734.89s |  here, I'm using EvilWinRM. And you can see at the bottom that I've got a shell on our domain
1734.89s - 1739.89s |  controller. And solution for this is to use something like LAPS. So, old admins like myself
1742.67s - 1747.67s |  maybe remember that the days before LAPS was a thing where you would use a GPO and you'd set the
1748.17s - 1753.17s |  local administrator account on all machines. And thanks to the C password, where everybody
1755.51s - 1761.05s |  could read that, we've now got clear text credentials. So, other than even just reuse and
1761.05s - 1766.05s |  passing the hash, uh, C password has clear text creds. That's not even an attack that, that I
1767.49s - 1772.69s |  showcased in this. It's fairly old. We do still see it on old GPOs. Even if they're unlinked, they
1772.71s - 1778.65s |  still have some C passwords in them. So, you may check that. But this is what LAPS looks like. Um,
1778.65s - 1785.07s |  I've got articles on that as well. Cause I'm not gonna go super into LAPS. I am gonna go a little
1785.07s - 1795.28s |  bit into Kerberos delegation though. So, Kerberos delegation is a required feature of Windows.
1798.02s - 1803.58s |  It's when, an example would be when a user authenticates to a web server and then that web
1803.60s - 1809.30s |  server needs to authenticate on behalf of that user to a database server, for example, to be able
1809.30s - 1815.12s |  to, uh, provide the, the correct results for the user that's asking. So, it's kind of a security
1815.12s - 1818.88s |  thing. It's pretty much built in. But in this case, when we talk about delegation, we're talking
1818.88s - 1824.16s |  about impersonation. Which means that web server has the ability to impersonate any user in the
1824.16s - 1829.64s |  domain. And so, what that looks like, specifically when we're attacking const- uh,
1829.66s - 1835.32s |  unconstrained delegation, is we have a shell on that web server that we had shown that we
1835.32s - 1841.84s |  attacked earlier. And since it's set up for unconstrained delegation, we either wait, or we
1841.84s - 1846.84s |  can con, um, coerce an administrator to log into that system that we're in control of. And so,
1848.24s - 1854.38s |  here, using Mimikatz, I was able to export the tickets for Brandon. So, a client named Brandon.
1854.40s - 1862.56s |  Uh, Brandon was very impressionable admin at the time. So, Brandon logged into our, our server
1865.02s - 1871.22s |  that we had control of. Using Mimikatz, we were able to set up what's called a pass the ticket
1871.22s - 1876.74s |  attack. And then we load that ticket into our session. And we can view that using that K list
1876.74s - 1881.84s |  tickets to identify that we have that cached ticket for Brandon. And then that last command in
1881.84s - 1887.08s |  the bottom is just opening a PowerShell, PowerShell session to a domain controller. So,
1887.08s - 1894.10s |  we're authenticating as a domain admin to a domain controller. And now, we've got a shell on
1894.10s - 1899.94s |  the domain. We run whoami. We just look at sysvol. And so, now, we've basically owned that
1899.94s - 1905.08s |  domain controller. I've got a lot more attacks to, to go. So, I'm not gonna stop there, though.
1905.08s - 1910.38s |  So, how do we stop this specifically? So, moving unconstrained delegation to constrained
1910.38s - 1916.78s |  delegation is a good way to mitigate this. Uh, you can specify the specific service or server
1916.78s - 1925.21s |  that's required instead of just allowing delegation to occur wherever, wherever it needs.
1925.21s - 1931.39s |  That, again, can be somewhat difficult to identify. So, what I like to do, even in the, I'm not
1931.39s - 1936.33s |  saying don't do that, but what I am saying do is mark accounts as sensitive and cannot be
1936.33s - 1941.19s |  delegated. So, all of your administrators, this is kind of a baby step to the protected users
1941.19s - 1945.81s |  group. Set them up like this. Because, like I said, Brandon was very impressionable. And he
1945.81s - 1950.65s |  could be tricked to logging into wherever, because he's an admin. You know, somebody, user
1950.65s - 1954.55s |  calls, he logs in wherever they tell him to log in as his domain admin credentials, right?
1954.55s - 1960.73s |  What could go wrong? So, now that I've set Brandon as sensitive, he can't be delegated, on
1960.73s - 1965.77s |  the right here is what we just did. So, that's what the attack looked like in Mimi Cats. If
1965.77s - 1972.03s |  that attack were to attempt, be attempted when the account was set up, he, he was still, he
1972.03s - 1976.83s |  still logged in and we can still look at some stuff in Mimi Cats, but we don't have that ticket
1976.83s - 1980.31s |  granting ticket, which means we can't load it into the session and we can't attack that account
1980.31s - 1990.05s |  anymore. Alright, so, level 3 is over. We don't have any new accounts, but we're kind of beyond
1990.05s - 1994.93s |  that now. You know, we've kind of gotten to the point where we're already, uh, on the precipice
1994.93s - 1999.93s |  of domain admin. We've already kind of gained that full domain, uh, compromise. So, what we've
2000.63s - 2005.63s |  learned in, in level 3 is how to fix ACL and ownership issues, specifically on GPOs, but other
2008.07s - 2013.61s |  objects are also important. Configuring laps to prevent things like local administrative
2013.61s - 2018.45s |  credentials beyond multiple machines being able to perform lateral movement. Implementing
2018.45s - 2022.65s |  constrained delegation instead of unconstrained, and then protecting your admin accounts using
2022.65s - 2035.60s |  the account as sensitive and cannot be delegated flag. Alright, now the fun one. We're gonna
2035.60s - 2040.60s |  pwn AD. So, the print nightmare. I don't know if you all remember this. Um, it was 3 years ago,
2043.70s - 2048.00s |  I think now, and this I like to call the attack that got me into InfoSec. So, I told you I
2048.00s - 2052.88s |  worked for TriMark for 2 and a half years now. Print nightmare came out when I was still a
2052.88s - 2058.82s |  sysadmin. It let me poke at it and proved to my administrators that it was exploitable. So, we
2058.82s - 2064.62s |  had something to do. So, this is what that looks like. So, running a CrackMap exec tool as
2064.64s - 2071.02s |  well as the impact tool, we identified that the spooler is running on our target system and the
2071.02s - 2079.25s |  protocols necessary to perform the attack are also available. So, what this attack looks like
2079.25s - 2083.99s |  is we can just host a malicious DLL on a Samba share from this Kali box. This is where the
2083.99s - 2088.99s |  screenshots are coming from. Using the cube 0x0 exploit, we can target the domain controller and
2091.79s - 2095.81s |  we're using just a regular user account. So, that Hodor account that we grabbed, no
2095.83s - 2100.29s |  administrative credentials in the domain whatsoever, can authenticate to that domain
2100.29s - 2106.51s |  controller and because the print spooler is is available on that server, we can throw this
2106.51s - 2111.51s |  nightmare DLL at it and it says exploit completed. And what that exploit does is it's created a
2114.75s - 2120.29s |  new account for us in the domain. It's called print nightmare 2 and it is in the
2120.29s - 2127.70s |  administrator's group. And this is my favorite mitigation because it's the easiest
2127.74s - 2133.02s |  mitigation. So, we just disable the print spooler. And yes, I I know print nightmare has been
2133.02s - 2138.42s |  patched, thank goodness. So, not this specific attack is available everywhere anymore, but the
2138.42s - 2144.06s |  print spooler is used in so many coercion attacks that can occur now that I like to say, if
2144.06s - 2150.66s |  you're not printing or performing printing as a print server, then you have no need to run the
2150.66s - 2157.04s |  print spooler whatsoever. So, disable it either manually here or use a GPO to to disable it and
2157.08s - 2165.42s |  here you see on the right hand side that that server is no longer vulnerable to attack. So, our
2165.42s - 2171.92s |  last attack is gonna be um one of the active directory certificate services, so ADCS, uh
2171.92s - 2177.12s |  vulnerable con-configuration that we're gonna attack using the certify tool. So, this has been
2177.12s - 2183.14s |  very popular over the last couple years. Uh about two years ago or so, we saw this as a
2183.14s - 2187.60s |  critical vulnerability on almost every single assessment that we did. Thankfully, things have
2187.60s - 2191.84s |  gotten a little bit better in the industry now. But this is what that looks like. So, we're
2191.84s - 2198.52s |  gonna run our certify tool with a find command. This is just using a regular user account to a
2198.52s - 2206.37s |  domain controller. So, our output's gonna include all the vulnerabilities that exist in that
2206.37s - 2210.29s |  domain, if it's running uh certificate services. And yeah, I'm gonna drill into that,
2210.29s - 2216.95s |  cause it's hard to see. So, the specific one that we're gonna pick out is called ESC1 or uh
2216.95s - 2222.19s |  escalation one. This is from the certify pre-owned stuff that Spectrops put out. Um it's
2222.19s - 2228.23s |  also in the resources. So, what makes us vulnerable is that enrollee subject uh enrollee
2228.23s - 2233.07s |  supply subject, which equals the subject alternative name, can be applied when you enroll a
2233.07s - 2238.07s |  certificate. The second half of that puzzle is who can enroll dangerous certificates. So, in
2241.01s - 2246.61s |  this case, we have domain users, have enrollment rights, and that means that anybody can
2247.27s - 2253.44s |  enroll a certificate and they can specify that they are whoever they want to be. And so, we
2253.44s - 2258.44s |  can go uh take the next step and we can run certify and request our certificate. So, here we
2259.74s - 2264.52s |  can see we're targeting that ESC1 template. We're telling it that we want to be
2264.52s - 2270.46s |  administrator. We can tell it whatever we want. But of course, we wanna be the administrator
2270.46s - 2279.64s |  account. So, we've saved that private key locally and now we're gonna authenticate with it. So,
2279.64s - 2284.64s |  now we run the certify auth command. We specify the PFX, the domain controller, and we've
2285.88s - 2290.88s |  now got the uh credential cache. So, the Kerberos credential as well as the hash for the
2292.18s - 2298.62s |  administrator account. Which means we can do bad things. So, we can run secrets dump using
2300.00s - 2304.96s |  that hash. We could also authenticate with that that C cache file doing that and we can dump
2304.96s - 2310.28s |  the entirety of the domain controller. So, here we've got the the SAM, but that's not even
2310.28s - 2316.28s |  really what we want. We want the NTDS.DIT file. So, this contains the entire contents of
2316.28s - 2322.16s |  Active Directory and all the NT hashes for every single user. And we did this with very little
2322.16s - 2327.16s |  privilege whatsoever. So, in that context, that attack was game over, right? But we're not
2329.42s - 2332.90s |  quite done. We still have some work to do because we're learning that domain admin doesn't
2332.90s - 2338.64s |  mean that we're we're finished as administrators. So, we need to investigate why the
2338.66s - 2343.24s |  vulnerable template existed in the first place. So, this is what I said earlier. It's that
2343.24s - 2348.54s |  two-piece. The domain users, it doesn't have to be domain users. It could just be a subset of
2348.54s - 2354.04s |  regular user accounts that could enroll certificates. So, the bigger issue is that supply
2354.04s - 2358.98s |  and the request. So, a little bit better of a mitigation is to require manager approval for
2358.98s - 2365.27s |  specific certificates. There's a number of different things that you can do. And this is what
2365.27s - 2369.85s |  the certificate that was issued looks like. So, here you'll see the subject was Brandon,
2369.87s - 2374.21s |  because he was the one that requested the certificate. But he requested it using the subject
2374.21s - 2381.84s |  alternative name as administrator. So, that's what it looks like when a certificate's enrolled.
2381.84s - 2386.18s |  And so, we already talked about how you can detect it, but how can you do it automatically? So,
2386.18s - 2391.18s |  this is another tool that a friend of mine, Jake, has put out called Locksmith. You can run
2392.68s - 2397.76s |  this whether you're on the blue side or the red side. This is a fantastic tool that discovers
2398.74s - 2403.48s |  several different misconfigurations in environments. So, this is what it looks like when it
2403.48s - 2409.82s |  detects ESC1. I think the coolest thing that it does is it provides fixes for you. So, it can
2409.82s - 2416.06s |  output some PowerShell that will actually mitigate this. And it looks at not only ESC1, but all
2416.06s - 2420.66s |  the way through 8, with the exception of 7. And also looks at some auditing being enabled,
2420.66s - 2426.00s |  which does not happen by default in ADCS. So, it provides fixes for every single one of these
2426.04s - 2436.37s |  as well. And so, we technically we created the Brandon Rocks account, but I wanted to put it up
2436.37s - 2443.98s |  here because I hope you agree. So, we got our last two vulnerabilities patched. So, two more
2443.98s - 2450.22s |  bin- mitigations is to disable that print spooler and run Locksmith in your environment. Our
2450.22s - 2454.36s |  game is still not over though. So, even though we've reached the end boss and we fought it,
2454.36s - 2458.40s |  there's always that next level. Our princess is always in another castle. There's always
2458.40s - 2463.54s |  something else you can do. There's always that next step. Um, Active Directory is not, is not
2463.54s - 2469.44s |  done with new vulnerabilities that come out on a regular basis. It's old, but it's, there's
2469.44s - 2473.96s |  new, new research that occurs every day. So, I urge you all to get an assessment done, get a
2473.96s - 2479.66s |  pen test done, uh, try out some of these tools. So, this is a list of all the resources that I
2479.66s - 2485.76s |  used. So, use, if you have permission to run these tools, everybody please, right? I'm not
2485.76s - 2491.34s |  telling you to go hack yourself without permission. Um, I'll hold that up there just for a
2491.34s - 2499.14s |  second. Um, I will, I will share these on my, my GitHub and, cause here's a list of all those
2499.14s - 2504.24s |  resources I talked about. As well as the character selection screen. So, I put this back up
2504.24s - 2511.24s |  because I love AI art and how bad it is at spelling things specifically. Um, I also told it to
2511.24s - 2516.38s |  give me a character selection screen for the game of Active Directory. And it came back with
2516.38s - 2525.72s |  this. And everybody is sad. Every single person has a frown on their face. Like, this guy
2525.72s - 2530.20s |  bottom, like, three from the right, he's got circles under his eyes. I don't know, he's beat
2530.20s - 2535.84s |  up. And then there's the names of them. There's Dad, and Oh Lordy, and Doy, and, and, it's
2535.84s - 2554.08s |  fantastic. So, with, with that, thank you all for coming. Packed house, fantastic, guys. Um,
2554.08s - 2558.76s |  so, you can, um, follow me or find me on pretty much everything. I'm TechBrandon, GitHub's
2558.92s - 2564.46s |  TechBrandon. Um, Twitter, LinkedIn. Uh, thank you, Packet Hacking Village. Thank you, DefCon.
2564.46s - 2569.14s |  Um, I do think I've got a decent amount of time for questions. So, if anyone wants to stick
2569.14s - 2579.14s |  around and has any questions, I will, uh, do my best. Cool. Or you can just, or you can go early
2579.14s - 2581.38s |  and you can go get a snack, cause it's lunchtime.