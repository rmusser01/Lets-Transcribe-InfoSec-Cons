{
  "webpage_url": "https://www.youtube.com/watch?v=H8Y-j0sYqvo",
  "title": "DEF CON 32 - Fine Grained Authorisation with Relationship Based Access Control - Ben Dechrai",
  "description": "Who can tag me in a post? If I move this file to another folder, who now has access? If my owner breaks up with his friend, will I still get a bone?\n\nWhether you're a human, or a dog, let's face it, authorisation is hard. Role-based access control is a great starting point but hard to scale. Attribute-based access control scales better, but neither are much good at answering more complex conditions, like whether friends-of-friends can read your posts. For such situations, we generally have to wrap this up into business logic.\n\nThis is where relationship-based access control (ReBAC) comes in, offering a nuanced approach to accessing resources without codifying that into the applications.\n\nIn this session, we'll look at how to define these relationships, experience live demos, and discover how we can deploy our own fine-grained authorisation service. Expect some tail-wagging insights and a few laughs as we explore access control from a canine's point of view.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1721,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 4.94s | This text was transcribed using whisper model: large-v2

 All right. So with that in mind, welcome to the stage, Ben.
4.94s - 11.51s |  Thank you. Hello everyone. Um, I'm going to be that annoying guy for the uh, person behind
14.11s - 19.01s |  the camera. I like moving a lot, hence I've got the, the handheld. I don't like to be stuck
19.01s - 24.09s |  behind a podium. But the main reason I'm here today is uh, cause I'd like to talk to you
24.09s - 29.13s |  about some security matters that interest me. Uh, who here is familiar with access control
29.13s - 32.83s |  within web applications in some way or form? About half of you. That's cool. Who knows
32.83s - 39.83s |  what RBAC is? ABAC? Rebac? Cool. Increasingly dropping numbers of hands. That's kind of what I
40.51s - 44.31s |  expected. I think we've got about 10% people here who know Rebac. So we're going to dive
44.31s - 48.15s |  in and we're going to go a little bit deep dive into how Rebac works. Now normally this
48.15s - 53.85s |  is a 45 minute to one hour conversation. So excuse me if I skip over some bits, but please
53.85s - 56.75s |  come and ask me questions afterwards. But we're going to go a little bit deep on how
56.77s - 60.91s |  the data actually gets stored so that we as developers understand how Rebac was going to
60.91s - 65.71s |  help us and how the relationship based access control actually works or may not work for you.
65.71s - 70.29s |  It's not always the right solution. But who am I? Um, I'm a guy who develops slides that
70.29s - 75.49s |  have really bad contrast on LED screens. Uh, also I've been a software engineer for too
75.49s - 78.89s |  many years. I don't, I used to put the number up there. Uh, it made me feel old so now I
78.89s - 83.03s |  just do a sense. You can do the maths in your head. Uh, I love working with developer and
83.05s - 87.15s |  open source communities. I've been doing that for about 20 years. I'm really passionate
87.15s - 90.59s |  about security and privacy. If you want to talk to me about any of those things, those are
90.59s - 95.63s |  my jam. Come talk to me afterwards. Uh, I'm currently working as a developer advocate for a
95.63s - 100.27s |  company called ArcJet, hence the branding across my chest here. We're a, uh, a middle
100.27s - 104.41s |  west security solution for your web applications. If you are writing any kind of web
104.41s - 108.17s |  application at all, check out arcjet.com and just plug it in. It's free. Give it a try.
108.17s - 112.55s |  We'd love to hear what you think about it. Uh, if you want to contact me, I've got the X
112.57s - 117.23s |  logo on there, although I still like to call them Twitter. Um, I, I feel some ways about an
117.23s - 123.07s |  organization, uh, whose community does not accept certain people's desire to change their
123.07s - 126.95s |  identity. So I will not allow Twitter to change their identity either. So my Twitter handle
126.95s - 132.75s |  is at Ben Dechry. My DMs are open. Uh, contact me if you like. It's, it's not an
132.75s - 137.69s |  instruction. It's a, it's an offer. So let's get into it. Access control 101. Basics and
137.69s - 141.83s |  understandings thereof. First thing we're going to have a look at, um, is the, the
141.87s - 145.01s |  caricatures we're going to be looking at. So whenever it comes to access control, the dog
145.01s - 148.65s |  wants the bone, right? So we're going to look at ways that we can stop or allow the dog
148.65s - 152.75s |  from accessing the bone. First one's going to be using RBAC, role based access control.
152.75s - 156.05s |  It's probably one of the simplest access control mechanisms. So we'll skip through this
156.05s - 159.55s |  very quickly. Basically we have a number of roles. You've got an admin, you've got a
159.55s - 164.49s |  manager, employee, and a guest. And in our case, our dog, this is Shadow. Shadow has a blue
164.49s - 169.73s |  hat on. Blue hats are employees. Uh, and the door is locked to all, but the admins,
169.73s - 174.11s |  managers, and employees, we don't want guest dogs getting to the bones. Only employee
174.11s - 178.91s |  manager and admin dogs, my analogies fall apart a little bit sometimes, are going to get
178.91s - 183.29s |  access to the bone. So because, because Shadow has access, the door opens. Role based
183.29s - 189.05s |  access control. Nice and simple. Next one. Attribute based access control. This is kind of
189.05s - 192.09s |  like role based because you could say, well, the role is an attribute of a person, but
192.09s - 196.73s |  attribute puts so many more layers on top of this. So we've got, uh, four attributes here
196.73s - 201.47s |  of the dog. This is Min. Uh, this is a, a, a white Siberian husky. These are actual real
201.47s - 205.61s |  dogs in my life. I like to relay them into my talks. Uh, there are four characteristics.
205.61s - 210.45s |  Service dog, good boy, loyal, and fierce. I can tell you while Shadow is a service dog, Min
210.45s - 214.15s |  will never be a service dog. If you've ever seen one of those dogs that just cannot control
214.15s - 217.99s |  itself because it's always so bloody happy, that's Min. So she will never ever be a, a, a
217.99s - 223.75s |  service dog. But she is usually, uh, a good boy or, or loyal. She is not fierce. We've
223.77s - 227.65s |  decided in this case that we're going to make her a loyal dog and the door will open if you
227.65s - 233.05s |  are a good boy or a loyal dog. Now, as an aside, I go on tangents occasionally. You might be
233.05s - 237.35s |  asking yourself, but why doesn't a service dog get a bone? Because a service dog is good,
237.35s - 242.49s |  right? Service dogs deserve bones. Anybody agree with that? Nobody agrees with that? You
242.49s - 247.33s |  all hate service dogs. That's what I'm learning about you lot. Jesus. Rough crowd. Um, no,
247.33s - 251.77s |  service dogs are working. They don't get to eat. But we're going to layer an attribute on
251.79s - 255.49s |  top of this. Because you could say, well, that's just a role, right? The attribute here we're
255.49s - 262.29s |  going to put in is time. Who does have a dog? Wrong audience. Who has cats? Okay, let's
262.29s - 268.67s |  pretend your cat likes eating bones. Or for those of you who have dogs. Who, who, uh, lets
268.67s - 273.47s |  their dog sleep in their bedroom with them at night? Who would like the sound of a crunching
273.47s - 278.43s |  bone at 3 a.m.? No, I certainly don't like the sound of a crunching bone at 3 a.m., so if
278.43s - 286.43s |  it's outside of 9 p.m. to 9 a.m., no bone for you. So, sadly, men get no bone. Uh, but there
286.43s - 289.67s |  are plenty of other things we can do attributes on. We've got actual identity, physical
289.67s - 293.97s |  location, network location, the time, the weather, whether or not you're authenticated to a
293.97s - 297.59s |  system. There are lots of things you can layer on top of this as an attribute of whether or
297.59s - 302.13s |  not somebody should get access to a resource. So, a bit more complexity, a bit more
302.13s - 306.47s |  flexibility about how we can control our resources, which brings us on to relationship based
306.47s - 312.25s |  access control. And this changes the paradigm quite significantly as I lose my balance. So,
312.25s - 317.79s |  um, this dog doesn't actually have a name. Uh, who, who here had a dog? What was your dog's
317.79s - 324.29s |  name? Liam. This is Liam. Thank you. Liam, um, is actually a dog. Dali designed Liam. I
324.29s - 329.09s |  thought it came out a little bit like a cat, but, uh, that's what we're going with. So, um, Liam
329.09s - 333.93s |  has an owner. Uh, you are the mad scientist, congratulations. Uh, so Liam's owner is a mad
333.93s - 338.05s |  scientist. The mad scientist is friends with a farmer. The farmer has a whole load of
338.05s - 344.22s |  sheep, and for the vegetarians in the audience, I apologize, but sheep have bones. Ten
344.22s - 348.94s |  minutes? Oh, I need to stay back. This is, this is not good for me, because A, I'm going to fall
348.94s - 353.68s |  off the back of the stage. Not too far, okay. Just right, right here, okay. The guy who
353.68s - 359.60s |  likes to roam may no longer roam. That's okay. Uh, so, we, we have this, this chain of
359.60s - 364.94s |  relationships, as you can see. So, we can see here that, uh, Liam may or may not have access to
364.94s - 370.26s |  the bone based on the rules that you can see. Now I'm getting feedback. Based on the rules
370.26s - 374.90s |  you can see on the door there. Yep. Oh, sorry, let's just zoom in a little bit. The rules you
374.90s - 379.26s |  can see on the, on the door there. So, with relationship based access control, we don't
379.26s - 387.47s |  actually have a concept of users anymore. We just have a concept of entities and
387.47s - 395.69s |  relationships. Entities and relationships. I'll keep going unless they actually stop me, or
395.69s - 400.61s |  unless too many people in the audience cringe. So, here we've got an action. Can the action
400.65s - 405.23s |  eat be completed on the bone? Uh, so, note that we're looking here at what can be done to the
405.23s - 410.27s |  bone. We're not looking at what Shadow or, or Liam can do. We're looking at what can be done
410.27s - 414.69s |  to the bone, what actions can be taking place. If it's the animal owner, or the friend of the
414.69s - 420.11s |  owner of an animal, or the pet of a friend of the owner of the animal, they can eat the bone.
420.11s - 424.47s |  Technically, I suppose you could argue, no, I probably wouldn't want the owner of the bone,
424.47s - 428.23s |  the sheep, to be eating the bone. That would be a little bit weird. But you can see we just
428.23s - 432.19s |  find here a set of relationships that allow us to decide whether or not the bone can be
432.19s - 436.81s |  accessed by the dog. And because through those green lines there, which are really terrible
436.81s - 441.23s |  in this background, you can see that the flow does actually go all the way through. Liam
441.23s - 446.23s |  gets a bone. Good for Liam. So, the door opens. Now, say one day the farmer and the mad
448.89s - 452.47s |  scientist break friends. They're no longer friends with each other. Suddenly that
452.47s - 455.85s |  relationship is broken. Now, nothing has changed about the bone, and nothing has changed
455.85s - 460.01s |  about Liam. But the relationship is broken, therefore the friend component of that rule
460.01s - 465.17s |  there breaks. So, the only rule that allowed Liam to get access to that bone is now broken,
465.17s - 469.59s |  and the door shuts. So, that's what a relationship-based access control is about. It's not
469.59s - 474.71s |  so much about defining what somebody or some user can do. It's about what actions can be
474.71s - 480.75s |  performed on a resource based on a set of rules that relates lots of resources together. Does
480.79s - 486.79s |  that make sense? Cool. So, under the hood, who here is familiar with the entity attribute
486.79s - 491.75s |  value model of designing? So, if you've ever done any kind of content management systems or
491.75s - 495.21s |  anything like that where you've got an undefined at the beginning of your project, you have
495.21s - 498.75s |  an undefined number of entities, you want a way to be able to create new entities in your
498.75s - 502.95s |  system without having to do a database deployment, because they are nasty, especially when
502.95s - 508.53s |  you have a lot of data. So, the entity attribute value model of data storage basically says
508.53s - 512.31s |  you have a table that defines entities, and you have another table that defines the
512.31s - 515.93s |  attributes and values for that entity. So, if you want to add another entity, it's just
515.93s - 520.69s |  another row in a table. Nice and simple. Let's have a quick look at how that works. So,
520.69s - 525.15s |  we've got a user and an article. So, we're going to be looking at a blog post system, for
525.15s - 528.53s |  example. So, we've got a user and an article, and on this right hand side here we've got a
528.53s - 531.81s |  whole jumbled load of mess. But you can see that we've got the entity ID, the second
531.81s - 537.43s |  column. So, the first, second, and the last two rows in the attribute table belong to a
537.43s - 542.43s |  user. And because the second column has number twos in it, the third and fourth rows belong
545.05s - 549.35s |  to an article. So, you can see the user's username is Robin, and the user's password is
549.35s - 554.93s |  password. Down there we have username Morgan and password. For some reason they like using
554.93s - 559.81s |  JSON Web Tokens for their passwords, but that's their password. And then in the middle
559.81s - 563.05s |  through there you can see that we've got an article, one article, instance ID of the
563.05s - 568.31s |  article is one. We've got a title of Rebec for the win, and content is can has FGA, fine
568.31s - 574.81s |  grained access control. So, now if we want to pull stuff out, we can use a fairly simple
574.81s - 581.05s |  ish join within an SQL table to say, well, pull all these things out, and I can pull out, for
581.05s - 587.51s |  example, get me all of the articles that you have. Give me the title and the content. Or
587.55s - 590.63s |  maybe rather than getting information about one entity, you could say give me a list of
590.63s - 596.29s |  all the users and just give me their usernames. So, this table setup basically allows you
596.29s - 600.87s |  to get really varied views across the data you have without having to change your database
600.87s - 604.59s |  schema, without having to know what that schema looks like to start with, and you can
604.59s - 609.25s |  store arbitrary data in there and pull it out in whichever way you want. It's complicated
609.25s - 615.83s |  and expensive to pull out, and it's somewhat complicated to set up and use within more so
615.83s - 619.65s |  than if you had like an article table and a user table and a comment table. So, if we
619.65s - 623.69s |  wanted to add a comment, for example, we just add an extra row over there, and then we can
623.69s - 628.15s |  add some extra columns here saying, okay, so we've now got this entity ID three, instance ID
628.15s - 633.19s |  one, so this is comment number one, the article ID is number one, author is Sam, comment
633.19s - 638.69s |  was first, and here's the date Sam. So, without making any database schema change, I've
638.69s - 643.65s |  added a whole new entity to the system. The only reason I tell you about EAV is because this
643.69s - 648.61s |  is very similar to the way that Reback is managed under the hood. So, let's have a look at
648.61s - 653.39s |  how that works. We've got entities on the left-hand side, Robin is a user, Acme Co is an
653.39s - 658.19s |  organization, and Reback for the win is an article. And down here we have some
658.19s - 662.47s |  relationships. So, we're now looking at just subject ID, and I apologize for the color
662.47s - 666.51s |  scheme, we've got a relationship ID, which is just arbitrary for this table, we've got a
666.51s - 671.77s |  subject entity ID and an object entity ID. So, how does a subject relate to an entity? A
671.77s - 676.23s |  subject is an entity, it's just the primary entity within a relationship. So, we're saying
676.23s - 683.23s |  subject one, the user, entity ID three, the article, relationship type is owner. Therefore
683.23s - 689.66s |  we know that Robin is the owner of the Reback for the win article. We can then add in that
689.66s - 694.66s |  Robin, user one, is a member of organization Acme Co. And we can add in that Morgan, user
695.08s - 700.08s |  four, is a member of the organization Acme Co as well. So, we now know that both Robin
703.58s - 708.32s |  and Morgan are members of Acme Co. Now we have another one here where we say the organization
708.32s - 714.28s |  is a viewer of the Reback article. But organizations can't view things. So, we're able
714.28s - 718.28s |  to extend that slightly and put an extra entity relation on there. How do the entities
718.28s - 723.74s |  relate to each other? Through this member relation. So, if we dial that back, if we see
723.74s - 729.74s |  here we've got member, in the middle two rows here we've got a relationship of members. So,
729.74s - 737.02s |  what we now know is that members of organization two can view the Reback for the win article.
739.64s - 744.64s |  So, now if I add another member into that organization they automatically inherit that because
744.64s - 749.52s |  the relationship exists already. Does that make sense? This is where it gets a little bit
749.52s - 753.64s |  murky. You don't need to know all of this. I just want you to understand how the data sits
753.68s - 758.88s |  in there so that when we start pulling it out you can see what's going on. So, the other
758.88s - 762.76s |  thing we can do is define permissions on all of these. So, we've got the relationships
762.76s - 766.80s |  but what does that actually mean they can do? So, permission ID one, again arbitrarily
766.80s - 772.84s |  for the permissions table, relates to relationship ID one. So, relationship ID one was Robin
772.84s - 777.60s |  is the owner of the Reback article. So, we're saying here, well, one of the permissions
777.60s - 784.88s |  is read. Relationship ID one is also that Robin is the owner of the article. Robin also has
786.50s - 793.50s |  write access. And then we have relationship ID four which is this, this inferred down
793.50s - 800.38s |  here, members of organization two, members of organization two have read permissions. So,
800.38s - 804.96s |  even over here we've got relationship types and entities like viewer is just a label. It
804.96s - 808.84s |  doesn't mean anything to the system. But when you look at that you see what that means is
808.84s - 815.96s |  the permission for viewer for any member of organization two has read access on article
815.96s - 823.96s |  one. So, there's one extra table here compared to EAV but this allows us to define a multitude
823.96s - 829.34s |  of relationships and permissions and how they relate to each other and to other entities.
829.34s - 833.54s |  And more importantly they allow you to chain those identities. Remember how we went from
833.54s - 838.12s |  Liam to the mad scientist to the farmer to the sheep to the bone? It's not just one to one.
838.12s - 841.72s |  You can define these huge big chains and if any part of that chain gets broken then the
841.72s - 848.26s |  relationship breaks. So, querying the Reback model, how does this work? Let's say we come in
848.26s - 854.96s |  here and we want to find out who can read. We can see here that the read, sorry, who can
854.96s - 860.96s |  write. The permission ID there is two. So, if we, let's just go back one. I think I've got the
867.39s - 873.09s |  wrong one highlighted there. I want to find out who can write a Reback article two. So, first
873.09s - 877.09s |  thing we do is we look at the, and the highlighting isn't working so great here, the object
877.09s - 881.43s |  entity ID three there is the Reback article. So, we say okay, within the relationships let's
881.43s - 885.97s |  find out everything we know about the article. And we can see here that the fourth one there
886.01s - 890.85s |  can be excluded straight away because the relationship ID number four is not in the
890.85s - 898.13s |  permissions table. However, relationship ID one is in that table that is related to the
898.13s - 905.39s |  object identity two. So, we can pull out the user Robin has write access to the article. So,
905.39s - 909.35s |  you can look at things in other directions as well. And then further to that you can even
909.35s - 913.05s |  say okay, well tell me everything about the article rather than starting from the permissions.
913.09s - 918.31s |  So, we look at article number three. We know that Robin is the owner of that article
918.31s - 923.97s |  already. And if we look at the viewer here we can then, and this is what I was talking about
923.97s - 929.59s |  before how member gets extrapolated to infer relationship status. So, we can see that the
929.59s - 937.59s |  member here of organization two has access to the article. And if we then fold those in you see
937.59s - 941.39s |  how before this one here was highlighted. What we're now doing is saying the subject is now
941.39s - 946.93s |  the object. So, where the object is now entity ID two where also the relationship type is
946.93s - 951.05s |  member. That's where this one basically gets folded out. So, that's probably one of the
951.05s - 957.85s |  most complicated lookups. It's really deep diving straight into the depths of the Reback
957.85s - 961.59s |  schema. But essentially what we're doing there at that point is we're saying this
961.59s - 964.77s |  permission or this relationship here doesn't make sense from a permission sense because
964.77s - 969.35s |  you don't give permissions to inanimate objects like organizations. Necessarily, I mean
969.35s - 974.65s |  you do. But that doesn't really help an end user. How do we then unfold that and then
974.65s - 979.77s |  extrapolate that to refer to the actual user entities? And this is where it gets
979.77s - 983.51s |  complicated because Reback as I said doesn't have a concept of a user necessarily. You
983.51s - 987.97s |  can, you could actually ask Reback what is the relationship between this organization
987.97s - 991.89s |  and that network? Neither of them really do anything. They're system entities. They're
991.89s - 997.47s |  not user entities. But they still have relationships. So, it's powerful but also complex.
997.47s - 1002.47s |  So, implementation details. Let's have a think about how we might do something in code.
1005.71s - 1010.13s |  Which is probably the way most of us do the more complicated business logic like this. So,
1010.13s - 1015.25s |  if we want to allow editing an article, if a user is an admin or an editor, if an editor is
1015.25s - 1020.97s |  allowed to edit this particular article, if the article is sensitive then we also want to
1020.97s - 1024.47s |  make sure that the person is on site and we want to make sure that they're doing it during
1024.47s - 1030.29s |  office hours. Seems like a fairly robust kind of setup that you might have in a large
1030.29s - 1037.17s |  organization. So, if. If the user is admin or if the user is editor. Cool. So, we've got, we
1037.17s - 1043.67s |  know what role the user has. Also, if the user is an editor and the list of document
1043.67s - 1048.21s |  editors contains the current user. So, we don't want any editor to be able to edit this.
1048.21s - 1052.83s |  Only if the list of editors for this particular article includes the current user. So, we
1052.83s - 1056.83s |  can compound those two together. Then also we want to say, well, if the document isn't
1056.83s - 1061.53s |  sensitive, then we can carry on. Otherwise, we're going to check to see if the user's
1061.53s - 1067.57s |  location is on premises or if the user's location is currently in office hours. And I say
1067.57s - 1071.69s |  the user's location because in a world like today, who knows when it's 9 to 5 for
1071.69s - 1076.03s |  somebody. So, as long as it's within the location they're in, it's working hours and
1076.03s - 1081.19s |  they're on premises or the document is not sensitive and they meet the user requirements,
1081.19s - 1085.15s |  they're going to get access to this document. Imagine if you had to come back and change
1085.15s - 1090.78s |  those rules three months later. So, instead what we're going to do is we're going to
1090.78s - 1096.28s |  define entities within our relationship-based access management tool of choice. We're
1096.28s - 1100.24s |  going to define a document. The document has an owner and an editor. The owner is a
1100.24s - 1106.50s |  user and the editor is a member of an organization with the member type editor. So, you
1106.50s - 1110.74s |  can have different types of people within groups. And then we're going to have a
1110.74s - 1114.28s |  sensitive document. That's the definition of a normal document. A sensitive document is
1114.28s - 1119.60s |  going to extend document. It's also going to have an edit action on it that says if it's
1119.60s - 1124.56s |  within working hours and the document, it's the document owner who's trying to do this
1124.56s - 1128.06s |  action. Because remember, we're defining actions on an entity and who's allowed to
1128.06s - 1133.24s |  perform it. So, can edit be done on a sensitive document? Yes, you can if you are the
1133.24s - 1138.82s |  document owner and you are the document owner and you're on premises. Or if you're an
1138.82s - 1143.64s |  editor and you're on premises. So, this gets tied into your relationship-based access
1143.64s - 1149.64s |  model schema and permission systems. So, now your code can change from this to that.
1151.48s - 1157.48s |  And now your business logic isn't restricted or it doesn't include the permissions
1157.48s - 1161.06s |  check because there's no real reason for that to be there. The permission for who
1161.06s - 1165.40s |  should access an entity within your system should not be dependent on what's in the
1165.40s - 1170.14s |  business logic. There's a fast and firm rule for that. This gives you two benefits. One
1170.14s - 1174.64s |  from a clean code, easy to read perspective. That is much easier to read. You know
1174.64s - 1178.44s |  exactly what's going to happen. You don't have to think about it. Also, from a
1178.44s - 1182.98s |  permissions and access control management perspective, your security team can manage the
1182.98s - 1187.90s |  rules and the schema separately from your development team and it puts the
1187.90s - 1195.88s |  responsibility in the right place. So, demo time. This is the fun part. So, the first
1195.92s - 1200.20s |  part was all about dogs. Then we went to document access management, which is
1200.20s - 1205.92s |  important but boring. So, we're going to go back to dogs. I have tried a number of
1205.92s - 1209.54s |  products. There are all these products up on the screen here. There are many more. These
1209.54s - 1213.58s |  are relationship-based access management tools. Some of them are open source and
1213.58s - 1220.12s |  free to use. Some of them are paid for. I'm going to be using Permify in this demo. Am I
1220.12s - 1223.42s |  going to annoy anybody by switching over to this on the AV team? Because they didn't
1223.58s - 1228.42s |  check me on this one. So, I apologize in advance. I'm going to need both hands. So, I'm
1228.42s - 1234.84s |  just going to stop screen sharing. Let's jump over here and we're going to have a first
1234.84s - 1242.84s |  look at Postman. So, let's make this a bit bigger. Can you all read that okay? Excellent.
1242.84s - 1247.70s |  So, let's have a look from the beginning. We're going to create a tenant. In fact, the
1247.70s - 1255.40s |  first thing I'm going to do, because like all developers, I decided to test this before I
1255.40s - 1258.12s |  started the talk. So, I'm just going to restart Permify in the background. So, we're
1258.12s - 1262.24s |  starting from a bank slate. So, now over here, what we're going to do is we're going to
1262.24s - 1266.08s |  create a new tenant. So, Permify allows you to have multiple tenants in your system. So,
1266.08s - 1271.24s |  you can sandbox or isolate certain areas of your organization or even certain
1271.24s - 1279.66s |  organizations within a larger system. So, we're going to create a tenant over here called
1279.66s - 1285.82s |  Dog and Bone. If I hit send on that, we'll see down here that we get a positive response
1285.82s - 1289.36s |  back, a 200, and we've got our tenant. So, the next thing I'm going to do is create the
1289.36s - 1296.00s |  schema. Now, this schema, for some reason, Permify wants it in a single string. So, to make
1296.00s - 1303.67s |  it easier, I have it over here. This is very similar to what we saw in the slides. Basically,
1303.67s - 1308.41s |  we've got a definition of a dog. A dog has an owner, which is a person. We've got a sheep. A
1308.41s - 1312.71s |  sheep has an owner that is also a person. A sheep also has a bone, which is of entity type
1312.71s - 1317.91s |  bone. We've got a person. A person can have a friend, would be another person. A person can
1317.91s - 1322.75s |  also have sheep and a person can have dogs. So, we've got bidirectional rules here. And
1322.75s - 1327.45s |  then we've got a relationship between the bone. The bone has an owner, and that's a sheep.
1327.45s - 1334.15s |  And then we've got a permission. Can the owner's friend's dog eat? And eat is true if that
1334.15s - 1343.26s |  comes out as a relationship that exists. So, let's submit that through, and we should find
1343.26s - 1353.07s |  that that has now worked. If I now create some relationships, come on, get bigger. Where's
1353.07s - 1362.18s |  the handle? It's always hiding. I'll just scroll through little by little. So, actually, if
1362.18s - 1367.00s |  I make this slightly smaller, is that still readable at the back? Yep, okay. So, at least we
1367.00s - 1370.04s |  can see a bit more at a time. So, we can see here we've got a relationship between a subject
1370.04s - 1374.34s |  and an entity. Remember I said a subject is also an entity, but it's just a primary entity in a
1374.34s - 1379.88s |  relationship. Is the microphone cutting in? A little? I'll go back to this one. Because I
1379.88s - 1384.34s |  don't need to type as much now. So, we can see the subject, mad scientist, is the owner of
1384.34s - 1390.04s |  shadow the dog. We can see here that shadow the dog is also a dog belonging to the scientist.
1390.04s - 1395.08s |  And then we've got the farmer has dolly the sheep. The sheep belongs to the farmer. And we've
1395.08s - 1403.74s |  got dolly is a sheep to the femur. And the femur is a bone to the sheep. So, we've got these
1403.74s - 1410.08s |  relationships built up now. So, if I come through and I ask what friends does the scientist
1410.08s - 1414.78s |  have, because we haven't defined those relationships yet, if I execute that, we'll see down
1414.82s - 1422.02s |  here that the result is nothing. We have no ‑‑ he has no friends. He's a sad scientist. As it
1422.02s - 1427.52s |  happens, the farmer is also a sad farmer. The farmer has sheep. So, a little bit happier
1427.52s - 1432.82s |  probably. I know, sheep are better than dogs. I digress yet again. So, can shadow eat the
1432.82s - 1441.71s |  bone? What do we reckon? No? So, if I hit that, it comes through. Result denied. So, it's a
1441.75s - 1449.36s |  very low energy kind of reaction that I'm getting. But it's also a very low energy kind of
1449.36s - 1455.90s |  output. So, I thought I've got these two requests here that I can make. The first one calls
1455.90s - 1460.36s |  data right. What I'm going to do is I'm going to say, okay, the mad scientist is now friends
1460.36s - 1464.90s |  with the farmer. And then I've got another one here, break friends. It's data delete. And
1464.90s - 1468.94s |  in here I'm defining the mad scientist is no longer a friend with the farmer. So, to make this
1468.94s - 1480.39s |  a little more exciting, I decided to show you all my sister's Facebook page. And also, let's
1480.39s - 1485.21s |  bring this back in over here. I have a dog and a bone. Let's just refresh this because it
1485.21s - 1490.97s |  doesn't like having the lid shut on it. And for some reason I'm getting an image rendering
1490.97s - 1496.59s |  error. There we go. What demos go perfectly. So, door's closed. Dog can't get a bone. So,
1496.75s - 1502.75s |  what happens if the farmer makes friends with the scientist? What do you think? No, it
1509.65s - 1516.15s |  didn't work. Did I call the right one there? Looks like you're offline. Yeah, but I'm doing
1516.15s - 1527.49s |  everything locally. So, did I call the wrong one? Did I call break friends? Let's double
1527.49s - 1536.82s |  click on that one. Darn it. Well, I will show you that if we come over here and look at
1539.12s - 1545.20s |  friends of mad scientist, we should now have, there we go, the friendship is now in here. So,
1545.20s - 1551.74s |  now if I call can shadow eat the bone, it comes back as still denied. Okay. So, this is
1551.74s - 1555.24s |  where the demo fails. I'm more than happy to work out why the demo failed. It was
1555.24s - 1559.54s |  probably something to do with keeping my Wi-Fi off at DEF CON and closing my laptop lid
1559.54s - 1563.82s |  between testing demos. But the theory is there. The results should have come back
1563.82s - 1567.50s |  immediately. I had a little bit of a cheat in my app. It was basically polling every
1567.50s - 1572.58s |  second. But there are plenty of ways of connecting to databases and getting a full
1572.58s - 1577.74s |  time stream of data back. So, you can get almost like a push notification or an immediate
1577.74s - 1581.70s |  notification of permission changes if that's something you need in your environment. Most
1581.70s - 1584.50s |  of the time it's probably something you only need every time you make a request to make
1584.50s - 1590.74s |  sure that request should be honored. But one of the things that I want to caution is that
1590.74s - 1597.16s |  while this is complicated and exciting and perhaps when it comes to permission systems,
1597.16s - 1602.66s |  dare I say a little bit sexy, I'm not sure, it's not always the right solution. As I
1602.66s - 1606.32s |  said, there's a lot more computation power required for doing things like checking
1606.32s - 1610.20s |  whether or not a permission should be granted. Role based access control is always going
1610.20s - 1615.70s |  to be your easiest. That's always simply like is this person an admin, yes or no. In fact,
1615.70s - 1619.40s |  in some situations if you think of your home internet router, you don't even have
1619.40s - 1623.66s |  permission systems like are they logged in, yes or no. That's technically the simplest. So,
1623.66s - 1631.16s |  work out which level of permissions complexity or the way that your data is modeled and how
1631.16s - 1635.48s |  you want to define whether or not access should be allowed. Work out what level of
1635.48s - 1639.44s |  complexity you can get to at a minimum while still meeting your requirements. Because if you
1639.44s - 1645.02s |  go for the full thing straight out, re-back all the way baby, absolutely it's fun. You will
1645.02s - 1649.40s |  probably create a situation where your job is now indispensable. You will not be fired
1649.40s - 1653.40s |  because nobody knows what the hell you did. But it's not always the right solution.
1654.02s - 1657.64s |  Pick the right one for you. If you're currently going through a situation where you want
1657.64s - 1662.56s |  to implement some kind of permission control, more than welcome to come up and talk to me
1662.56s - 1666.68s |  afterwards and tell me a story. I'll let you know if I've got any clue at all as to what
1666.68s - 1672.18s |  you may or may not consider. I'm certainly not going to tell you I know your system
1672.18s - 1675.56s |  inside out and can tell you what the answer is but I'm happy to have a chat and go through
1675.56s - 1682.02s |  that with you. But I would like to finish by just saying thank you. If I can even fire
1682.02s - 1690.64s |  my slides. Let's just get that back up there. So again, that's my contact details at the
1690.64s - 1695.94s |  top there. ArcJet are currently running a contest. If you want to try our product out,
1695.94s - 1699.76s |  there's some prizes we're giving away as well. Challenge.arcjet.com. Give it a try. Let us
1699.76s - 1703.94s |  know. We would really love to know from you how you find the product, how easy it is to
1703.94s - 1709.60s |  use and what we can do to make it easier for you to make your website sit better. But this
1709.60s - 1712.94s |  talk is about permission systems. Come talk to me. Thank you for your time. Have a great
1712.94s - 1714.56s |  rest of your DEF CON. Thanks.