{
  "webpage_url": "https://www.youtube.com/watch?v=YPcOwKtRuDQ",
  "title": "DEF CON 32 - Anyone can hack IoT- Beginner\u2019s Guide to Hacking Your First IoT Device - Andrew Bellini",
  "description": "Yes, anyone can hack IoT devices and I\u2019ll show you how! It doesn\u2019t matter if you\u2019re an experienced pen tester in other fields, completely new to cybersecurity or just IoT curious, by the end of this talk you\u2019ll have the knowledge to hack your first device. You might be thinking - but I thought IoT was complicated, required knowledge of hardware, and expensive tools. In this talk, I\u2019m here to dispel those myths by directly showing you the methodology, tools and tactics you can use to go and hack an IoT device today (or maybe when you get home). I\u2019ll cover what IoT devices are best for beginners, what tools you need (and don\u2019t need), how to build a small toolkit for less than $100, common tactics to get a foothold into IoT devices and how to find your first vulnerability or bug.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 3252,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.21s - 5.89s | This text was transcribed using whisper model: large-v2

 Welcome everyone. My name is Andrew Bellini and I am here today to both
5.89s - 11.09s |  convince you and show you that anyone can hack IOT devices. So in the talk
11.09s - 14.33s |  today I'm hoping to both convince you that and I'm also going to walk you
14.33s - 19.11s |  through a methodology that you can go take home, buy a cheap consumer IOT
19.11s - 23.69s |  device and hopefully hack it. Before we get into the actual specifics of that I
23.69s - 28.65s |  actually just want to start with a really quick joke and that joke is the
28.65s - 34.25s |  S in IOT stands for security. Has anyone heard that joke before here? It's one
34.25s - 38.17s |  that I hear, yeah I see some people are hearing it. It's one that I hear tossed
38.17s - 42.69s |  around the cybersecurity community and usually when I hear that joke it's
42.69s - 47.41s |  actually by folks that don't work specifically in IOT or embedded security
47.41s - 52.29s |  but as someone who actually has a background working in industrial IOT
52.29s - 56.61s |  devices and embedded devices I won't say I'm not salty about it I'll actually put
56.61s - 63.33s |  my hand up and be the first to say that it is a well-deserved joke. So the thing
63.33s - 66.85s |  about that joke is and we can all you know have a laugh at IOT devices and
66.85s - 71.49s |  their lack of security but the reality is if you you know check out and look
71.49s - 75.93s |  at how many estimates for IOT devices there are connected in the world right
75.93s - 80.17s |  now you'll see greater than 15 billion you know estimates that's almost two per
80.17s - 86.21s |  person of IOT devices and in addition to that we're expecting there to be a big
86.25s - 90.17s |  surge of IOT devices because of AI and machine learning how they're going to be
90.17s - 94.85s |  used for edge devices and it's estimated looking at the projections there could
94.85s - 101.21s |  be 30 million by or 30 billion sorry by the end of the decade so that is a lot
101.21s - 105.05s |  of things to secure and these are everywhere so it's not like they're just
105.05s - 109.97s |  in our households from you know smart cameras to even smart toilets these are
109.97s - 114.13s |  also in critical infrastructure they're in our cars they're essentially
114.13s - 120.22s |  everywhere nowadays so one of the things that I kind of thought when I was
120.22s - 124.18s |  starting to get interested in IOT security is there's so many devices and
124.18s - 128.74s |  in addition to that there's this agreed-upon kind of thing in the security
128.74s - 133.46s |  community that IOT devices are not secure so I figured there would be a lot
133.46s - 138.58s |  of people doing IOT hacking and the cyber criminals are definitely taking
138.58s - 142.78s |  advantage of this they love finding vulnerabilities and IOT devices and
142.78s - 146.98s |  adding them to their botnets or using them for initial access but my
146.98s - 150.66s |  experience was in the ethical hacking community when I started meeting hackers
150.66s - 155.10s |  and things like that and asking them if they hack IOT devices a lot of times the
155.10s - 159.70s |  answer was no and that was kind of reaffirmed today too I've had a booth
159.70s - 162.70s |  here where we've been doing IOT hacking and I had mostly beginners who had never
162.70s - 168.42s |  done it and it was awesome to teach them that so one of the things that you know
168.42s - 171.82s |  I when I ask people why aren't you doing IOT hacking there's a few
171.82s - 176.50s |  misconceptions that I hear about it and I just want to try and dispel some of
176.50s - 180.82s |  those so the very first one is that it's too expensive so you need to buy
180.82s - 185.02s |  expensive gear you need like you know an oscilloscope or like a microscope or
185.02s - 189.30s |  expensive tools to get into it when you're starting out and this is a
189.30s - 194.18s |  reality you're probably going to need to buy the devices you want to hack on and
194.18s - 199.02s |  then addition there was really a large lack of affordable training when I was
199.02s - 203.14s |  looking to learn even you know five years back it was like $5,000 for a
203.14s - 208.66s |  course a lot of them were in person and then the second misconception I hear is
208.66s - 212.10s |  that it's very complicated you need to like have an engineering degree you need
212.10s - 217.02s |  to know about electronics you need about hardware circuits all of that stuff you
217.02s - 220.50s |  need to know about special protocols in addition to just the you know normal
220.50s - 225.78s |  things that you need to know about hacking and in my opinion you know some
225.78s - 228.90s |  of these are true there is some truth to it but I actually think there are ways
228.90s - 234.54s |  that you can actually learn to hack IOT devices commercial IOT devices off the
234.54s - 238.10s |  shelf without spending that much money and there is a lot of great resources to
238.10s - 243.42s |  learn how to do it for free or for very limited amounts of money okay so I've
243.42s - 246.74s |  been chatting for a little bit I just wanted to give a quick intro to who I
246.74s - 252.14s |  am and why I know a little bit about IOT and IOT security so my name again is
252.14s - 257.30s |  Andrew Bellini I go by digital Andrew on the socials my background is actually in
257.30s - 261.62s |  electrical engineering so before I got into cybersecurity I did a lot of work
261.62s - 266.10s |  actually designing embedded devices and industrial IOT devices so that's a
266.10s - 269.74s |  little bit where I learned about it not specifically in security but just
269.74s - 275.10s |  actually you know designing the devices that we use I now work as a content
275.10s - 280.30s |  creator at TCM security so there I am the creator of our IOT hacking course
280.30s - 284.90s |  it's a beginners IOT hacking course and I also created our practical junior IOT
284.90s - 288.62s |  tester certification and if you do want to link up with me you want a copy of
288.62s - 291.86s |  these slides you want to see what I'm working on I got lots of free blog
291.86s - 297.67s |  resources or anything like that check out my website so a little bit of
297.67s - 302.07s |  motivation for this talk I have one specific goal and that is to provide you
302.07s - 307.71s |  with a methodology specific tools and knowledge to vine vulnerabilities aka
307.71s - 313.35s |  hack in commercial IOT devices and I have a couple messages here from some of my
313.35s - 316.99s |  previous students just to give you some motivation and also proof that this
316.99s - 320.59s |  methodology works so I had one student he actually just messaged me a couple
320.59s - 324.87s |  weeks before Defcon I was super excited to see this I didn't know him before but
324.87s - 328.65s |  he said I took I took your course and he had you know chatting with him I he had
328.65s - 333.39s |  never done any IOT hacking he took my suggestion he went and got a cheap smart
333.39s - 337.95s |  camera off Amazon and he actually was able to find three vulnerabilities in it
337.95s - 340.95s |  got in touch with the vendor and he's got three CVS coming so super excited
340.95s - 343.99s |  for about that and then there was another message this person didn't want
343.99s - 346.91s |  me to put their name up but he he took my course as well and then he bought a
346.91s - 351.63s |  cheap router and he found a remote code execution vulnerability in it and I just
351.63s - 355.67s |  was chatting with him about how he could submit that to a CNA because the vendor
355.67s - 360.62s |  didn't want to talk to him about it but how he found a vulnerability so this
360.62s - 365.06s |  chat is for everyone of course if you're here I'm glad you're here if you are if
365.06s - 369.98s |  you're new to IOT or you're IOT curious as I say this talk is specifically
369.98s - 374.22s |  catered to people who are new or just curious about IOT and it's going to
374.22s - 380.58s |  assume you have limited or no experience with IOT or embedded systems so it's a
380.58s - 383.94s |  really quick agenda of what we're in for today we'll start with some really
383.94s - 387.62s |  quickly safety and and legal considerations we'll then talk about
387.62s - 391.90s |  what device you should actually pick if you're getting started on so if you want
391.90s - 394.62s |  to go home and buy something off Amazon what you should look for if you're gonna
394.62s - 398.66s |  go dumpster diving for example we'll then talk about how you can build out an
398.66s - 401.94s |  affordable toolkit and what stuff you should buy or what's up you should avoid
401.94s - 406.02s |  and how to not you know break the bank doing this then I'm going to take a look
406.02s - 410.22s |  at locating using and abusing hardware interfaces we'll then talk about
410.22s - 413.82s |  acquiring firmware and then after that we get our hands on the firmware we'll
413.82s - 417.94s |  talk about analyzing and reversing engineering it so just a really quick
417.94s - 421.02s |  staying out of trouble this is kind of like the golden rule of ethical hacking
421.02s - 425.14s |  in my opinion only test devices that you're authorized to and then this is my
425.18s - 429.02s |  personal suggestion since I am giving a talk about potentially how to go out and
429.02s - 433.78s |  find CVs and IOT devices but I always recommend being ethical and following
433.78s - 438.90s |  responsible disclosure if you do find things unfortunately for a lot of IOT
438.90s - 442.38s |  devices they don't have bug bounty programs but they do have responsible
442.38s - 446.34s |  disclosure so you can at least report it get some credit and get a CV that way or
446.34s - 449.94s |  something so last one's up to you but you know I would implore you to go that
449.94s - 454.38s |  route if you find something okay so I did want to just give a little chat
454.38s - 458.02s |  about staying safe because sometimes I give workshops or things like that and
458.02s - 461.42s |  I teach people about IOT and hardware hacking and they're a little bit nervous
461.42s - 465.78s |  about opening up a device and working on the hardware of it so the first thing I
465.78s - 471.86s |  will say is IOT hacking is in itself very inherently safe so hardware hacking
471.86s - 476.74s |  on commercial IOT devices and that's really if you just only follow one basic
476.74s - 480.02s |  rule you'll be fine and that rule is that you should never work on anything
480.02s - 483.26s |  high voltage so when you open up the device you're working on it most of
483.26s - 487.70s |  these devices are going to be like 12 volts 9 volts 3.3 volts 5 volts operating
487.70s - 491.50s |  voltage all of those are for the most part safe to work on you probably won't
491.50s - 495.06s |  even feel it if you touch it the voltage from our walls and our house and stuff
495.06s - 499.06s |  that stuff can really hurt you so just stay away from that stuff just work
499.06s - 503.58s |  inside your device you'll be fine never use any damage or modified power
503.58s - 506.54s |  supplies because that's how we can accidentally introduce those higher
506.54s - 510.62s |  voltages into the device damage our device ourselves and then this last one
510.62s - 514.86s |  is more about keeping your devices safe but when I give workshops I see people
514.86s - 518.62s |  doing this all the time this is the most common way to brick or fry your device
518.62s - 521.82s |  but if you have it open and you're working on it then that's not how the
521.82s - 526.74s |  manufacturer intended you to be using it and if you're plugging in clips or wires
526.74s - 529.94s |  or things like that if you have it powered on it's easy to bridge
529.94s - 533.42s |  something and do a short circuit and that's the easiest way that I see people
533.42s - 536.36s |  who are learning fry their device so it's just really good practice if
536.36s - 540.96s |  you're not using it turn it off plug anything in you need then turn it on
540.96s - 543.64s |  when you're done and if you need to unclip it you power it off then you work
543.64s - 547.08s |  on it and it's easy to forget I'm always walking around my workshops warning
547.08s - 551.00s |  people of that last thing I just want to give a really quick shout out to because
551.00s - 555.28s |  people have gotten seriously injured from this or hurt doing this you aren't
555.28s - 557.92s |  really gonna counter these and IOT devices but if you take your hardware
557.92s - 560.60s |  hacking skills that you learn from this to other things I have larger power
560.60s - 564.76s |  supplies is watch out for large capacitors because these can actually
564.76s - 568.92s |  pack a punch as far as the amount of energy they store and also some people
568.92s - 572.88s |  don't realize but when you unplug these devices or capacitors from the wall they
572.88s - 575.96s |  can hold their charge for quite a while so you may think you're safe but they
575.96s - 580.20s |  can zap you this is not common in pretty much all IOT devices but I just say this
580.20s - 583.36s |  because a lot of people have this misconception if it's unplugged it's
583.36s - 588.28s |  safe but if there's large capacitors that's not the case okay so now that
588.28s - 592.04s |  we've got all of the preamble and everything out of the way we can get on
592.04s - 596.24s |  to you know kind of my methodology for how you can go home get a cheap consumer
596.24s - 600.08s |  IOT device and hack it so the first thing to do is actually to pick the
600.08s - 605.36s |  right target if you're learning so I always suggest the cheaper the better
605.36s - 608.80s |  when you're starting to learn and there's a couple reasons for this the
608.80s - 612.40s |  first one is and this isn't always the case but usually you get what you pay
612.40s - 617.80s |  for in terms of security and also hardware security so on cheaper devices
617.80s - 621.40s |  you generally won't run into limitations on the hardware where the
621.40s - 626.08s |  debug ports are locked down or the firmware is encrypted and then the
626.08s - 629.16s |  second one which kind of goes with my second point here is I never hack
629.16s - 634.00s |  anything that I don't mind bricking or destroying and if it's a cheap device
634.00s - 637.56s |  then you're not gonna be as concerned or upset if you fry it and you know I'll
637.56s - 641.36s |  raise my hand and say I still you know fry or brick devices it happens I've
641.36s - 644.52s |  been hardware hacking for a long time and it still happens and if you're a
644.52s - 648.28s |  follower of Joe Grand for example probably one of the most famous hardware
648.28s - 652.20s |  hackers he gave a talk a few DEF CONs ago he literally he literally just
652.20s - 656.52s |  talked about all of the devices that he had bricked over the years so it happens
656.52s - 660.96s |  to all of us if you're looking for a specific type of device my suggestion is
660.96s - 665.20s |  to go with cheap routers or cheap smart cameras they're great to start on they
665.20s - 668.12s |  usually have vulnerabilities that you can find and also more importantly they
668.12s - 674.20s |  almost always run embedded Linux which in my opinion is a much easier type of
674.36s - 677.44s |  device to hack on when you're learning than something with a microcontroller
677.44s - 682.24s |  like ESP 32 or STM 32 that's gonna be running an RTOS those are a little bit
682.24s - 685.56s |  more advanced or harder when you're getting started and I will give another
685.56s - 690.56s |  shout out to a dumpster diving so on my on this picture here this is one of many
690.56s - 694.48s |  bins I have at my house are just full of old devices and I just kind of put it
694.48s - 698.10s |  out into the universe like my friends and family know that I'm this dude that
698.10s - 701.92s |  likes hacking weird electronic stuff so if they're throwing away their router or
701.92s - 706.60s |  camera then they ask me or I find them in like disposal bins or whatever I
706.60s - 709.56s |  can't resist so it's a great way to learn though because usually these
709.56s - 712.60s |  devices work fine people are just they're obsolete or whatever but they
712.60s - 717.16s |  don't have to worry about breaking them or anything okay so once we've got a
717.16s - 720.40s |  device hopefully it's a smart camera or a router or something we've got to
720.40s - 725.48s |  acquire a little bit of gear to go along with this methodology so I've got a
725.48s - 727.96s |  couple of rules for that the first one is we don't want to break the bank when
727.96s - 731.00s |  we're starting out you might not know if you want to do it or not we don't want
731.00s - 736.48s |  this to be a limitation I also generally find that gear for IOT
736.48s - 740.88s |  hacking follows the 80-20 rule so if you're not familiar with this with this
740.88s - 747.14s |  rule it's kind of the idea that for any given input that's 20% of the inputs are
747.14s - 751.00s |  responsible actually for 80% of the outputs and I find that to be true with
751.00s - 754.52s |  IOT hacking tools you need to get a few of them and they'll do most of the heavy
754.52s - 758.68s |  lifting and then you'll need to acquire the more specialized expensive tools for
758.68s - 764.20s |  specific tasks sure at this point everyone's seen a lot of the meme of
764.20s - 767.84s |  this Turkish shooter guy and I just wanted to demonstrate this I was kind of
767.84s - 771.52s |  poking fun last week and like the IOT and hardware hacking community about how
771.52s - 774.88s |  we all like to acquire gear and I'll be the first one to say like I'm addicted
774.88s - 778.64s |  to buying gear I've got all the stuff in the left-hand side of this picture but
778.64s - 781.20s |  really when you're starting out with cheaper devices you can probably get away
781.20s - 787.70s |  with literally two things and spend ten dollars okay so the first piece of
787.70s - 790.86s |  equipment that you should get if you don't have one already is a digital
790.86s - 795.18s |  multimeter this is like the Swiss RB knife of electronics it can do things
795.18s - 799.98s |  like measuring voltage current resistance do continuity testing mostly
799.98s - 804.46s |  we will use this for verifying voltage levels and also we can actually use it
804.46s - 808.22s |  to find a lot of common debug ports without special equipment we can
808.22s - 812.98s |  actually you know ID those and then do further investigation into those ports
812.98s - 818.06s |  you can literally spend $5 on this this yellow one on here that's $5 I got this
818.18s - 822.18s |  off Aliexpress I've used it in my workshops before I mean I wouldn't use
822.18s - 825.70s |  it for like commercial QA testing or anything but as far as learning IOT
825.70s - 830.22s |  hacking getting started it's not bad I have five to a hundred dollars listed
830.22s - 833.22s |  here I wouldn't recommend spending more than a hundred dollars but you can but
833.22s - 838.96s |  your $5 one honestly it's not that bad the second piece of equipment you'll
838.96s - 845.36s |  need is a USB to X adapter and by X I mean the protocols that our IOT devices
845.36s - 848.88s |  are going to be talking at the hardware level so these are where those like
848.88s - 854.20s |  debug and test ports come into play the most common ones are UART SPI or so
854.20s - 860.56s |  you'll sometimes you're referred to a spy I2C JTAG and SWD the most common one
860.56s - 864.68s |  you'll actually see and what we're gonna be focusing on is UART so you can just
864.68s - 868.64s |  go and get this $2 one and that will work for this methodology you get these
868.64s - 872.72s |  off Aliexpress Amazon sometimes come like a pack of four for $10 you get in
872.72s - 877.28s |  250 so if you just want to go the cheap route you just buy this $2 one you'll be
877.28s - 881.52s |  fine if you kind of want a future proof and you actually want a tool to work
881.52s - 885.60s |  into I always recommend the Tigard board I really like their board and they have
885.60s - 888.92s |  good training that's free that goes along with how to use it and it's gonna
888.92s - 892.00s |  talk all of these common protocols actually so it'll do UART for you and
892.00s - 897.16s |  then when you know if you need to jump up to something JTAG SWD or I2C
897.16s - 901.48s |  then you can use this as well okay so the last this is the last thing that's
901.48s - 905.04s |  gonna be in our toolkit is some sort of flash programmer you can get these in
905.04s - 910.20s |  all varying different levels but this is a cheap one for $10 and we will use
910.20s - 914.96s |  these to mainly extract the firmware off the device if we can't get it from other
914.96s - 919.96s |  methods so most of the cheap IOT devices I see and why I'm suggesting these
919.96s - 925.84s |  routers and cameras they all use the same like standard SPI flash chip 8 pin
925.84s - 929.82s |  so you can use a flash programmer generic one like this to read it if you
929.82s - 932.92s |  did get the Tigard you don't even need to get one of these you can just use the
932.92s - 936.92s |  the SPI connection on that and honestly you might not even need this so it might
936.92s - 940.04s |  mean before you were seeing us we got the firmware from the vendor then you
940.04s - 944.96s |  don't even need a flash programmer you can just download it all right so we got
944.96s - 948.08s |  all our stuff we picked the device we've got our gear we're ready to start
948.08s - 952.20s |  hacking the first thing we're gonna take a look at is abusing debug ports and
952.20s - 958.28s |  hardware interfaces so for the most part IOT and embedded devices they don't have
958.28s - 962.52s |  any keyboard or mouse input they don't have a monitor they just kind of do
962.52s - 965.88s |  something and if they're not doing that thing right then when you're designing
965.88s - 971.36s |  it and as a designer your debug and test interfaces these are like your only link
971.36s - 974.84s |  to that device to see what's going on what's going wrong what's happening
974.84s - 980.24s |  making sure things are going properly so what happens in R&D of the cheap devices
980.24s - 983.92s |  a lot of times is they will use these throughout the R&D design process we'll
983.92s - 986.68s |  get to the end device will be ready to go and they don't want to do another
986.68s - 990.84s |  revision of hardware and things like that or maybe firmware so they'll just
990.84s - 995.28s |  leave these on the board open like they were when they were testing in addition
995.28s - 998.40s |  a lot of times they're actually used in production devices for things like
998.40s - 1003.48s |  debugging doing logging QA testing and possibly even flashing memory or things
1003.48s - 1008.84s |  like that the most two common ones I see are UART and JTAG we're just gonna be
1008.84s - 1014.14s |  focusing on UART because on the majority of cheap consumer IOT devices that's the
1014.14s - 1020.12s |  most present one and I almost always see UART that you can use and abuse so this
1020.12s - 1024.04s |  talk is like the no BS no filler version of it so I'm not even gonna
1024.04s - 1027.20s |  really teach you about what the UART protocol is only the things that you
1027.20s - 1031.44s |  need to know to hack it it stands for universal asynchronous receiver
1031.44s - 1034.92s |  transmitter that just basically means there's no clock and there's two lines
1034.92s - 1039.92s |  one one for receiving and one for transmitting on it's a very old and
1039.92s - 1043.64s |  common protocol for electrical communication it's a little bit more
1043.64s - 1047.68s |  complicated than this but this the the basics of it is it literally just talks
1047.84s - 1053.52s |  binary with voltage so it sends plus 3.3 volts or 5 volts for one zero volts for
1053.52s - 1057.48s |  a zero and I got a little picture here of a capture if you're curious but
1057.48s - 1062.04s |  that's literally all you need to know about it for the as far as hacking it on
1062.04s - 1067.84s |  it so getting connection to a device as you are if you're doing like a pen test
1067.84s - 1070.96s |  or something that would be a finding but for the most part the manufacturers
1070.96s - 1076.20s |  don't actually care specifically about that however actually getting access to
1076.20s - 1081.20s |  the UART will make it a lot easier for us to be able to find vulnerabilities
1081.20s - 1084.72s |  like something that could be exploited from the web it's gonna make us a lot
1084.72s - 1089.52s |  easier to find those and the reason for that is we can view the devices logging
1089.52s - 1093.76s |  so that's probably the most important thing in embedded devices there's
1093.76s - 1098.24s |  usually not a lot of storage and they'll maybe be almost no actual writable
1098.24s - 1101.88s |  storage that we have so there's no place to store logs so instead we're just
1101.88s - 1107.28s |  going to dump that all out to UART in addition if we are encountering embedded
1107.28s - 1111.04s |  Linux then usually we can actually use the UART connection to get a shell into
1111.04s - 1115.40s |  the device we can do further enumeration that way sometimes we can access the
1115.40s - 1118.48s |  bootloader which is responsible for it actually brings up the device and if we
1118.48s - 1121.48s |  can get into the bootloader we can do things like dump the firmware see
1121.48s - 1125.32s |  environment variables and so yeah getting you art is a great thing
1125.32s - 1129.48s |  especially for the logging you can see in the picture here I'm just looking at
1129.48s - 1132.12s |  some of the boot logs and there's actually quite a bit of detailed
1132.12s - 1139.23s |  versioning information that we can see already so once you start using you art
1139.23s - 1142.59s |  and this happens to me like when I see a board it's very very easy to start
1142.59s - 1147.03s |  picking them out like whenever I see a PCB now just subconsciously I'm like oh
1147.03s - 1151.75s |  that's you are I can see it so I start looking for them and once you start
1151.75s - 1156.11s |  noticing a few characteristics you'll be able to ID them so generally for full
1156.11s - 1160.43s |  duplex you art so this means that you got two devices your IOT device and then
1160.43s - 1163.99s |  maybe your computer that has your adapter they're talking to they're both
1163.99s - 1167.99s |  talking to each other that means there's going to be a transmit line which you'll
1167.99s - 1172.31s |  see abbreviated always as TX a receive line abbreviated as RX and a ground
1172.31s - 1176.19s |  sometimes you'll see a VCC and I'm just calling that out because if you see four
1176.19s - 1179.87s |  pins for our hacking purposes you can just ignore the VCC we don't we don't
1179.87s - 1184.87s |  even need to use it so unfortunately they won't always make it as easy like
1184.87s - 1189.55s |  in this example here they've gone so nice as to label them for us and all the
1189.55s - 1192.95s |  hardware hackers but they won't always make it this easy sometimes you'll have
1192.95s - 1198.27s |  test pads like the ones here on this black circle PCB this is a camera that I
1198.27s - 1202.31s |  was hacking and you'll notice there's only two pins together but seeing those
1202.31s - 1205.11s |  two pins together and close to the processor I thought that they might be
1205.11s - 1208.95s |  you art and then I just picked up a ground elsewhere and then we got another
1208.95s - 1213.27s |  router here where they've got a connector here for you art and it's not
1213.27s - 1216.19s |  labeled but you know as soon as you see those pins together like that it's a
1216.19s - 1220.83s |  good indication that it's some sort of test interface so this is where we're
1220.83s - 1225.27s |  gonna pull out our DMM and we can use like our $5 DMM to actually pick up you
1225.27s - 1229.15s |  art so what we're going to do is we're gonna take advantage of the fact that
1229.15s - 1233.63s |  you art is extremely chatty on boot up so if you've ever booted up like your
1233.63s - 1237.03s |  Linux computer even or some Windows ones and you see all the stuff come and
1237.03s - 1241.27s |  scrolling through the screen telling you all those boot log information well
1241.27s - 1244.83s |  embedded Linux is the same and that's going to happen on the you art as well
1244.83s - 1248.55s |  and we can take advantage of that so what we can do is use our multimeter put
1248.55s - 1253.23s |  it on the volts DC setting and measure our the pins of interest so if we think
1253.23s - 1257.71s |  there might be a you are pin we'll just measure that from that from that
1257.71s - 1261.35s |  connector whatever it is to ground and then after we're doing that we'll power
1261.35s - 1264.23s |  on the device so I always like to have a power bar in my workstation that has a
1264.23s - 1268.79s |  button it makes it a lot easier and what you're looking for is a fluctuating
1268.79s - 1272.07s |  voltage after that boot up you'll usually be like a couple seconds after
1272.07s - 1276.59s |  take a second for like the initial bootloader to load things up and then
1276.59s - 1281.03s |  you'll start to see a bunch of voltage hopping up and down you won't see it go
1281.03s - 1285.35s |  like 0 to 3.3 volts or 0 to 5 volts because it's gonna be too fast for our
1285.35s - 1289.63s |  multimeter to read that so instead what you'll see is more of an average voltage
1289.63s - 1293.63s |  kind of moving around a lot of times these devices operate at 3.3 volts so
1293.63s - 1298.07s |  you'll see like 1.5 to 2.7 volts and you'll see that moving up and down so if
1298.07s - 1301.63s |  you see that that's a really indication I should look further at this port it's
1301.63s - 1306.27s |  probably transmitting something if you just power on the device and do this you
1306.27s - 1309.39s |  probably won't see anything because it's not going to be as chatty it'll maybe
1309.39s - 1312.83s |  just send a couple messages and it'll be really hard to even see those blips of
1312.83s - 1317.75s |  voltage you got to do it right at startup okay so we found this port we've
1317.75s - 1321.11s |  identified it the next thing we're going to do is we can just it's as easy as we
1321.11s - 1325.15s |  can just plug it into our computer basically we use our UART to USB bridge
1325.15s - 1329.07s |  adapter plug that into our computer the only thing you need to keep in mind for
1329.07s - 1333.15s |  it is it's really easy to put like names together so you want to put TX to
1333.15s - 1337.43s |  TX but the way that it works is one device is TX goes to the other ones RX
1337.43s - 1341.99s |  and vice versa so you just need to cross those lines grounds go to ground ignore
1341.99s - 1346.03s |  the VCC you're all good so just for reference I got a little picture here if
1346.03s - 1348.51s |  you're looking at the slides later but that's the pin out that you would
1348.51s - 1353.51s |  usually take so unfortunately sometimes they won't make it that easy they won't
1353.51s - 1356.51s |  put the header pin on there won't be through-hole connectors so what do we do
1356.51s - 1360.51s |  in that scenario the best option is to solder so hopefully you're hanging out
1360.51s - 1364.59s |  at the soldering skill station but if not there's there's ways we can get
1364.59s - 1368.63s |  around that so if you are lucky enough to have through-hole connectors like we
1368.63s - 1372.87s |  did I showed in the one router the best way to do that is to actually attach
1372.87s - 1377.31s |  some header pins to it and if you don't have those there's lots of clips clamps
1377.31s - 1382.03s |  adapters and things like that where you can buy more specific to your device
1382.03s - 1385.03s |  Google's your friend here and they're really not that expensive so just go out
1385.03s - 1388.79s |  and take a look at your different options and like just to show you if you
1388.79s - 1392.07s |  don't want to do soldering here's two things I've done in a pinch and shown in
1392.07s - 1395.91s |  classes where you can get away with generally with through-hole connectors
1395.91s - 1400.25s |  they'll actually be like connectivity that goes through the actual pin so if
1400.25s - 1403.51s |  you put a little pressure on what you're putting through it so kind of lean to
1403.51s - 1406.87s |  the left or right that'll be enough to get good contact I did it here with a
1406.87s - 1411.15s |  twist tie or that's some some sticky tack and obviously soldering is your
1411.31s - 1415.11s |  option but I don't want that to be a barrier to you know hacking IOT if you
1415.11s - 1419.51s |  don't have a soldering iron or to solder so this can be done in a pinch if you're
1419.51s - 1423.03s |  running on a Linux host I mostly just included these commands here for people
1423.03s - 1426.81s |  that are gonna be taking these slides afterwards but all we need to do to
1426.81s - 1431.47s |  actually get a shell or connect to the device is we need to just check and see
1431.47s - 1435.23s |  what the device ID is for our USB to UART adapter so we can do that with this
1435.23s - 1440.31s |  command and you'll get the device ID back it'll most likely be TTY USB 0 but
1440.31s - 1444.79s |  it could be 1 2 3 and then we can just launch a terminal emulator and use that
1444.79s - 1449.11s |  to get a UART connection when you're starting out I suggest using screen
1449.11s - 1453.39s |  because it's the easiest one there's lots of other ones Pico com minicom putty
1453.39s - 1457.43s |  if you're on Windows they're all fine but screen in my opinion is the easiest
1457.43s - 1462.11s |  one it requires very little setup the only two arguments you need is that USB
1462.11s - 1466.15s |  device ID that I showed before and then you'll notice the last thing here I've
1466.15s - 1471.35s |  got a number 115,200 that is the baud rate or speed that the UART is
1471.35s - 1476.43s |  communicating at and since this is an OBS no filler talk I'm not even
1476.43s - 1482.43s |  explain what baud rate is on 99% of IOT devices I see it is 115,200 so you can
1482.43s - 1486.23s |  just use that if it's not it's probably 9600 and if it's not that you're
1486.23s - 1490.95s |  probably doing something wrong there is also a very common list on Wikipedia you
1490.95s - 1498.45s |  can look out of other ones but it's pretty much gonna be 115,200 okay so if
1498.45s - 1500.85s |  everything worked with your connection you got screen running you power on
1500.85s - 1505.29s |  device you should start to actually now see those boot logs that we saw with our
1505.29s - 1510.25s |  multimeter actually start streaming through and do not discount the
1510.25s - 1513.61s |  importance of actually reading through those boot logs and seeing what they are
1513.61s - 1517.05s |  telling you they're gonna give you lots of versioning information that could be
1517.05s - 1520.77s |  enough to even find a vulnerability on its own seeing that it's using you know
1520.77s - 1524.41s |  underlying libraries or things like that that are outdated and someone's
1524.41s - 1527.77s |  already done the legwork and found a vulnerability in those will also give
1527.77s - 1531.61s |  you details in this one for example near the bottom showing all the partition
1531.61s - 1536.45s |  details about the flash EEPROM that's on it and that's gonna make it a lot
1536.45s - 1541.13s |  easier for us later to identify the different parts of the firmware after
1541.13s - 1544.37s |  the bootloader goes through and you know it's done streaming through the text you
1544.37s - 1548.09s |  can hit enter and a lot of times on cheap IOT devices that can be enough to
1548.09s - 1551.21s |  just get a shell they don't lock them down with a password or anything so then
1551.21s - 1555.37s |  we'll be in a root shell generally an embedded Linux everything just runs as
1555.37s - 1558.89s |  root there's no like least privileges or anything you'll just get a root shell
1558.89s - 1562.85s |  again like in the manufacturers they're not as concerned about this as being a
1562.85s - 1566.33s |  specific vulnerability so I wouldn't recommend reporting this or anything
1566.33s - 1569.93s |  because they already know about it they just don't necessarily care but we're
1569.93s - 1574.01s |  gonna abuse that to find something they do care about the majority of the
1574.01s - 1576.49s |  routers and smart cameras they're running embedded Linux so that's where
1576.49s - 1581.57s |  this is gonna make it easier to get that shell okay so I always mention this
1581.57s - 1585.29s |  because you know in cybersecurity I feel like we all want to get a shell everyone
1585.29s - 1588.73s |  loves getting shells and sometimes that's like the end all of what we're
1588.73s - 1592.37s |  doing if we're doing like web app or you know other different types of network
1592.37s - 1597.21s |  pen testing but for us actually connecting to the UART it's more
1597.21s - 1599.85s |  important for us to see the logging that's actually what we're more
1599.85s - 1604.05s |  we're more interested in or at least I am so if you don't get a shell that's
1604.05s - 1608.09s |  okay if you're not able to get in that's fine so sometimes there'll be a
1608.09s - 1612.05s |  password if there is there's ways around that we can maybe get the hash from the
1612.05s - 1615.85s |  firmware or Google it but even if you can't get a shell that's okay the way
1615.85s - 1619.13s |  that you are it works is like you don't need to authenticate or log in it's a
1619.13s - 1623.49s |  very like low-level protocol it's just going to stream those logging bits out
1623.49s - 1626.85s |  to you no matter what you don't need to log in or anything like that you can
1626.85s - 1631.21s |  still see the logging unless the device like sinks or tanks the UART which most
1631.21s - 1635.21s |  don't so I got just got some pictures here showing some interesting things I
1635.21s - 1639.21s |  see in logs one of them here is just showing the location of RSA keys as it's
1639.21s - 1643.37s |  setting up drop arrow it's common SSH protocol and then the other two ones are
1643.37s - 1648.29s |  interesting logging details about when I was actually interacting with the device
1648.29s - 1653.41s |  and showing what could potentially be command injection or one is just showing
1653.41s - 1659.01s |  how it sets up and saves the pre-shared keys and SS IDs for a router so if you
1659.01s - 1662.17s |  are lucky enough to get a shell I mean I was saying it's not as important but it
1662.17s - 1666.97s |  is always nice to get one we'll be good hackers then and do our enumeration so
1666.97s - 1671.45s |  start poking around best places to actually start looking are the Etsy
1671.45s - 1674.21s |  folders and the VAR folders those are probably some of the places where you'll
1674.21s - 1679.05s |  find like interesting configuration details and things like that some some
1679.05s - 1682.89s |  really quick wins are things I look for is their passwords hard-coded keys is
1682.89s - 1686.97s |  their endpoints that maybe they don't want to expose or that we could see
1686.97s - 1690.29s |  that's reaching out into the back end and of course a lot of times you'll have
1690.29s - 1693.85s |  like things like PS or net stat so you can see what processes are running and
1693.85s - 1696.53s |  what network connections are going out so that can give us a little bit of a
1696.53s - 1704.36s |  lay of the land around the device okay so at this point you know we've got our
1704.36s - 1707.04s |  device we've got our equipment we use our equipment to find our debug
1707.04s - 1711.68s |  interface what's the next step that's going to be to get our hands on the
1711.68s - 1715.84s |  firmware and in my opinion this is where my favorite part starts and where we can
1715.84s - 1720.20s |  start having some fun and find some vulnerabilities if you're not familiar
1720.20s - 1723.84s |  with what firmware is this essentially the software that is running on the
1723.84s - 1727.68s |  device and kind of call it firmware and differentiate it from software and that
1727.68s - 1731.44s |  it's kind of designed specifically for that device so that that device can
1731.44s - 1734.48s |  fulfill one function it's not really changing you're not going to like
1734.48s - 1738.12s |  install any software or anything on your router or smart camera we just get that
1738.12s - 1743.04s |  one piece of firmware in embedded Linux that we're talking about today the
1743.04s - 1747.40s |  firmware is generally comprised of four main parts we've got the boot loader
1747.40s - 1750.88s |  that's responsible for actually like bringing up the device on boot up loading
1750.88s - 1754.20s |  up the kernel we've got then got the Linux kernel itself that's going to be
1754.20s - 1759.08s |  one partition we then got the root file system so that's actually where all of
1759.08s - 1762.68s |  the interesting stuff is that make the device do what it's going to do all of
1762.68s - 1768.52s |  the binary scripts configuration documents all of that stuff is going to
1768.52s - 1772.16s |  be in the root file system well then possibly also have some sort of
1772.16s - 1776.28s |  partition where we can store a little bit of writable data so we'll generally
1776.28s - 1778.68s |  want to hunt for this as well because that's where you're going to find things
1778.68s - 1783.12s |  like passwords that users configured or like the maybe pre-shared key for their
1783.12s - 1786.60s |  wireless or all that kind of stuff so a lot of times you'll see that at the end
1786.60s - 1792.32s |  of the flash memory the root file system has the most goodies though by far so
1792.32s - 1796.00s |  that's all we're going to focus on today you can find vulnerabilities in the
1796.00s - 1798.68s |  other places in the boot loader and kernel but when you're starting out
1798.68s - 1802.12s |  we'll just look at the root file system and its contents and that's honestly
1802.12s - 1807.84s |  that where you'll find the majority of vulnerabilities anyway so there's three
1807.84s - 1811.16s |  main ways that I usually get my hands on the firmware there are a few other ones
1811.16s - 1817.00s |  that are more complicated but the easiest one is a lot of cheap IOT
1817.00s - 1821.64s |  manufacturers they just put their firmware available on the Internet from
1821.64s - 1825.44s |  the vendor to download the reason for this is that unfortunately they don't
1825.44s - 1830.16s |  put any type of update mechanisms into their device so they kind of pass that
1830.16s - 1834.96s |  responsibility down on to the end users if there is security patching or things
1834.96s - 1838.72s |  like that to go and hey make sure you go to our website check it every day
1838.72s - 1842.80s |  download the firmware and then put it on the device yourself which I think
1842.80s - 1846.60s |  unfortunately I would say like 99% of users don't do but to fulfill that
1846.60s - 1850.92s |  obligation they put the firmware on their website on the support page and
1850.92s - 1854.04s |  you can just google and find it and I love that because it's super easy to get
1854.04s - 1857.72s |  our hands on the firmware and if you do that then you can even do IOT hacking
1857.72s - 1861.72s |  for free you don't even need any gear you just download the firmware the
1861.72s - 1865.76s |  second way is if you did get a UART shell I would say like 90% of the
1865.76s - 1871.00s |  devices I see they have TFTP on them so it's trivial file transfer protocol this
1871.00s - 1875.48s |  is there because it's actually baked into the functionality of a lot of those
1875.48s - 1879.16s |  update mechanisms so if you have like a web app or a browser or something and
1879.16s - 1882.36s |  allows you to do a firmware update through that in the back end it uses
1882.36s - 1887.00s |  TFTP but we can you know abuse that or borrow it to set up our own TFTP server
1887.00s - 1890.68s |  and then we can just bring back files of interest or if we're patient enough
1890.68s - 1894.64s |  we can just bring the whole root file system back to our device over that and
1894.64s - 1897.98s |  then we don't even really need to worry about dumping the firmware and then the
1897.98s - 1901.36s |  last one which sometimes you'll need to do is you'll just dump the firmware off
1901.36s - 1907.04s |  of the device so in these cheap commercial IOT devices I'm suggesting
1907.04s - 1913.84s |  getting starting on they almost always use a 8 pin spy flash chip and these
1913.84s - 1919.16s |  always follow the same pin out and we can use our flash raw or our flash
1919.16s - 1922.76s |  reader that I suggested getting or the TiGuard to really do a really quick read
1922.76s - 1925.92s |  of these and we don't even need to usually take them off of the device you
1925.92s - 1931.28s |  can just read them in device in circuit and the way to do that is I generally
1931.28s - 1934.64s |  recommend using flash ROMs free open source software that's great for
1934.64s - 1939.40s |  interacting with flash chips so again command here for reference if you're
1939.40s - 1944.08s |  just wanting to follow along later but if you get a ch341 a programmer which is
1944.08s - 1948.68s |  that $10 one that I recommended from the start then you can just run this command
1948.68s - 1952.28s |  after you put the clip on and it's as easy as that there's also other test
1952.28s - 1956.48s |  clips you can do to use it but it's pretty straightforward it lists the
1956.48s - 1960.16s |  different pins that match the pins on the chip you can just google standard
1960.16s - 1964.20s |  SPI 8 pin flash and you'll see all of the pins there's six of them that you
1964.20s - 1968.16s |  need to use out of the eight pins just a heads up so if you did get the TiGuard
1968.16s - 1977.68s |  you can do this with the TiGuard okay so we've all this basically everything
1977.68s - 1982.64s |  we've been doing up until this point now has been to set us up for successful
1982.64s - 1988.36s |  reverse engineering of the internals of the device to figure out what's going on
1988.36s - 1993.66s |  and to hopefully find some vulnerabilities so that's what we're
1993.66s - 1997.76s |  going to be taking a look at now and so one thing you can do too if you don't
1997.76s - 2002.36s |  want to spend any money is you just can go and find the firmware for download
2002.36s - 2006.40s |  and then you can do the majority of these steps as well and then you haven't
2006.40s - 2010.68s |  even spent a dollar or you could also try and emulate the firmware as well
2010.68s - 2012.96s |  it's not something we're going into today but I just want to give that a
2012.96s - 2016.04s |  call out like if you can't get your hands on a device you don't want to
2016.04s - 2019.52s |  spend any money you just kind of want to get started you can do it for free just
2019.52s - 2023.64s |  get your firmware try and reverse engineer it and emulation is your friend
2023.64s - 2029.47s |  okay so the first thing we do once we get our hands on the firmware is it's
2029.47s - 2033.11s |  generally going to be in like a kind of like a blob format so generally it's
2033.11s - 2037.71s |  going to be in like a dot bin file or binary file or maybe a hex file possibly
2037.71s - 2042.03s |  a dot IMG but it's not going to be probably readable for us at that point
2042.03s - 2046.19s |  so we need to go ahead and actually unpack that firmware into the different
2046.19s - 2049.99s |  sections and files that are actually in there that we'll be able to interact
2049.99s - 2053.95s |  with better so the very first thing we do is cross our fingers that it's not
2053.95s - 2057.91s |  encrypted so again this is why I'm recommending when you're starting out go
2057.91s - 2061.87s |  for those cheaper devices because most likely they're not going to use
2061.87s - 2066.91s |  encryption for their firmware because it costs money both in software development
2066.91s - 2070.31s |  and R&D but also you're most likely going to need to spend a little bit more
2070.31s - 2076.83s |  on hardware to actually rely on that to handle that decryption at the startup if
2076.83s - 2080.39s |  you do come across encrypted firmware and you're just getting started my
2080.39s - 2085.11s |  suggestion would be just save that device for later down the road it's not
2085.11s - 2088.79s |  like it can't be defeated there's lots of attacks and things like that that we
2088.79s - 2093.87s |  can do to try and defeat the encryption and find the keys when the obviously
2093.87s - 2096.71s |  when it's booting up it's going to need to actually do that decryption and we
2096.71s - 2099.79s |  can possibly read the keys but it's a little bit more of an advanced topic so
2099.79s - 2102.87s |  I'd save that for down the road after you've done a few and go and find
2102.87s - 2106.99s |  another device and see if you can make sure that its device is not encrypted so
2106.99s - 2110.43s |  how do we check if it's encrypted and also how do we get the contents of that
2110.43s - 2115.95s |  we will use a utility called binwalk so there's a bunch of tools to do this in
2115.95s - 2120.47s |  various ones and you can take a manual approach but the easiest way and is to
2120.47s - 2126.11s |  just go ahead and use binwalk if we pass it two options the capital M and the E
2126.11s - 2130.35s |  it will just recursively go through and anything it identifies that it can pick
2130.35s - 2136.19s |  up as a file type that it knows it will try and uncompress that or unzip it or
2136.19s - 2140.03s |  whatever until it gets down to the actual it knows the file types whether
2140.03s - 2146.43s |  that's a binary file shared object XML whatever and the E is telling us to
2146.43s - 2149.43s |  extract it actually so if you just run binwalk without any commands it'll
2149.43s - 2152.91s |  actually just tell you what it sees and then if you pass in the E it'll go ahead
2152.91s - 2157.07s |  and try and actually break those down so awesome tool it does a lot of the leg
2157.07s - 2161.51s |  work for us alternatively we saw that we had those different partitions already
2161.51s - 2165.67s |  actually listed out for us in the boot log so you can use DD as well if you
2165.67s - 2169.19s |  want a manual approach just to carve it up and sometimes you have to but binwalk
2169.19s - 2176.28s |  is your friend it most it works most of the time okay so this is where the fun
2176.28s - 2180.44s |  starts so now that we've got the firmware we're going to go and actually
2180.44s - 2185.00s |  focus on the root file system and see what we can find so some really low
2185.00s - 2188.80s |  hanging fruit is just to look for the configuration files and poke through
2188.80s - 2194.84s |  those see if we can find anything that shouldn't be in there so a lot of times
2194.84s - 2198.48s |  when I'm teaching IOT hacking people are surprised to see but the most popular
2198.48s - 2201.80s |  the best tools I think are just some of the really easy basic Linux tools like
2201.80s - 2207.32s |  find strings and grep they go a long way with IOT hacking and we can use find
2207.32s - 2212.60s |  with the dash name argument and I like to just do like star dot extension so
2212.60s - 2217.96s |  I'll do star dot XML start out text start out JSON and I'll just go through
2217.96s - 2221.28s |  that and read through those documents a lot of times see XML and sometimes they
2221.28s - 2225.20s |  have interesting details in there that's some low-hanging fruits we can also use
2225.20s - 2230.08s |  strings so this is a tip that I teach if you use strings with a dash F the
2230.08s - 2234.24s |  dash F tack on it it'll bring back the file name that's attached to that string
2234.24s - 2238.04s |  and then we can run strings over like a whole file system or a whole group of
2238.04s - 2241.88s |  files and if we and then we can pipe that into grep and look for things like
2241.88s - 2247.64s |  password API key all of those things sometimes I'll look for like calm for
2247.64s - 2252.20s |  example or various TLDs just to see if we can find any endpoints and that can
2252.20s - 2255.76s |  just be an easy win as well using strings and piping it into grep it's one
2255.76s - 2262.94s |  of my favorite tricks when IOT hacking is to to do that the next thing we'll
2262.94s - 2266.76s |  take a look at that is like pretty easy because same with the the readable files
2266.76s - 2271.24s |  all of the scripts so a lot of times since embedded Linux is gonna be bash or
2271.24s - 2275.24s |  sh scripts you don't need to decompile them you can just take a look at them
2275.24s - 2278.68s |  read through them a lot of times the developers will put really nice comments
2278.68s - 2281.40s |  in there telling you what they're doing because they're being good developers
2281.40s - 2284.12s |  and putting comments and things like that it's funny I've seen like even
2284.12s - 2287.44s |  things like people's emails or like you know maybe if you find a problem with
2287.44s - 2291.76s |  this email me at this email or things like that but the one scripts that I
2291.76s - 2295.44s |  always suggest and you should look at right when you're getting started with a
2295.44s - 2301.20s |  device and looking at it are the RCS scripts so most IOT devices use a tool
2301.20s - 2306.12s |  called busy box which is a way to actually combine all of the binaries
2306.12s - 2311.28s |  into one binary to shrink them down and then they use their init process and the
2311.28s - 2317.60s |  way that busy box works is it runs all of the RCS scripts in Etsy slash init.d
2317.60s - 2321.68s |  so after the boot loaders finished and Linux is done it hands off to the busy
2321.68s - 2326.08s |  box init system and then it calls all of the scripts in there that start with RCS
2326.08s - 2330.76s |  and it does them in alphanumeric order so it'll go like RCS 1 2 or if you have
2330.76s - 2335.32s |  like sometimes you see like 1 and it tells you what they're doing and these
2335.32s - 2337.96s |  scripts are great because they're responsible for actually setting up the
2337.96s - 2342.36s |  device past Linux for what it actually does so if it's a camera or router then
2342.36s - 2346.04s |  it's probably going to you know bring up binaries or things like that to actually
2346.04s - 2349.68s |  do what the device does or sometimes they'll even reach out to like back-end
2349.68s - 2353.96s |  infra or cloud infra to let it know it's up or pass back information and again
2353.96s - 2357.20s |  these are human readable like they're just bash scripts so no decompiling no
2357.20s - 2361.32s |  real reverse engineering and another tip too is if you're not familiar with bash
2361.32s - 2365.88s |  like honestly chat GPT is really great at breaking down what bash scripts are
2365.88s - 2369.16s |  so you can just copy and paste these directly out of the firmware into our
2369.16s - 2372.88s |  friend chat GPT and it can help you out and tell you what's going on as well
2372.88s - 2376.16s |  yeah I frequently don't really find specific vulnerabilities in here
2376.16s - 2379.24s |  sometimes you'll find things that shouldn't be in there but the most of
2379.24s - 2382.20s |  the reason is just to get a lay of the land and it'll tell you about like
2382.20s - 2389.08s |  what's going on what binaries are being executed things like that okay so now
2389.08s - 2393.20s |  we're at in my opinion the most fun part and kind of like everything even the
2393.20s - 2396.14s |  other stuff before that has been leading up to setting ourselves up to be
2396.14s - 2401.10s |  successful at reverse engineering the binaries and libraries that are on the
2401.10s - 2405.26s |  device so this is where you're honestly most likely to find some sort of
2405.26s - 2410.10s |  vulnerability that you're going to report and the one complicated or thing
2410.10s - 2414.18s |  that I see people get stuck with on this is where do we actually start it's quite
2414.18s - 2418.58s |  possible there's dozens to hundreds to maybe a thousand different libraries and
2418.58s - 2423.38s |  binaries on the device it takes a lot of time to reverse engineer and understand
2423.38s - 2429.27s |  these so which one do we pick and how do we start so the easiest way to
2429.27s - 2433.67s |  actually do this is to avoid a needle in a haystack situation is to go with like
2433.67s - 2437.59s |  a forward down approach and this is what I teach or the methodology I teach when
2437.59s - 2442.03s |  people are starting and that is to start with the custom binaries and libraries
2442.03s - 2445.95s |  that are actually unique to the device so a lot of the libraries and binaries
2445.95s - 2449.67s |  are going to be Linux stuff so if you're familiar with using Linux you might be
2449.67s - 2453.73s |  able to just discount quite a few of these but if you're not or sometimes it
2453.73s - 2457.25s |  could be hard to tell especially with libraries did you know are these open
2457.25s - 2461.09s |  source Linux things that do Linux or C stuff or are these ones that the
2461.09s - 2465.49s |  designers of this device have actually created so then we run into the problem
2465.49s - 2468.33s |  is how do we know they're custom and after you start to do this for quite a
2468.33s - 2470.89s |  while you will start to pick out the names and stuff and go like oh yeah
2470.89s - 2475.25s |  that's that's a custom one but if we don't then the thing that I suggest to
2475.25s - 2480.37s |  do is to interact with a device and then follow that logging and trace that
2480.49s - 2485.77s |  logging down to the underlying binaries and functions and this is in my opinion
2485.77s - 2491.93s |  the easiest way when you're starting to actually find vulnerabilities so here in
2491.93s - 2497.01s |  this picture I've got an example so this is a common router here that that I like
2497.01s - 2500.85s |  to hack on and I went to the web browser of it so just like most routers it's got
2500.85s - 2505.65s |  a web browser where you can go on do lots of stuff set the pre-shared key set
2505.65s - 2511.21s |  what type of WPA2 WAP or whatever you know set all that stuff it's got a
2511.21s - 2514.53s |  bunch of utilities for some reason it's got a ping test thing you can make the
2514.53s - 2518.45s |  router ping other stuff so in this example I'm just playing around with
2518.45s - 2522.45s |  that because I kind of suspected that it might be you know doing bad things when
2522.45s - 2528.17s |  we try and ping stuff and so I wanted to find the underlying binary or function
2528.17s - 2532.01s |  or library that's actually responsible for that so what I do is I just go and
2532.01s - 2536.05s |  play with all the functionality if there's something that you can do on the
2536.05s - 2539.85s |  device to make it do something I do that and I don't specifically do that like
2539.85s - 2543.33s |  trying injections or anything I just when I'm starting out just use the
2543.33s - 2548.09s |  device how it's supposed to be used and I'll take a look at the logging and a
2548.09s - 2551.85s |  lot of times the logging will be very verbose in IOT devices when you're
2551.85s - 2556.05s |  interacting with things and then we can actually trace that logging back then to
2556.05s - 2560.17s |  the underlying binaries or libraries so in this device and I actually see this
2560.17s - 2563.93s |  in a decent amount of IOT devices they were nice enough to even just put the
2563.93s - 2568.97s |  the function that's actually calling that it's actually being called when you
2568.97s - 2572.37s |  try and run this ping test they put it in square brackets that's their like
2572.37s - 2577.85s |  logging nomenclature or whatever so it was called util underscore exec system
2577.85s - 2581.29s |  so I saw this immediately and if you're familiar with like you know web pen
2581.29s - 2584.09s |  testing or something like that immediately looked like it was making a
2584.09s - 2587.09s |  system call to me and then they put a bunch of details in it like they
2587.09s - 2590.93s |  actually give us how the command is being formatted so I didn't get to put
2590.93s - 2593.97s |  the whole thing because I was running a out of room but if you can't see it it
2593.97s - 2599.09s |  literally says oil start paying command is IP ping dash C and it gives the whole
2599.09s - 2603.81s |  details and in that you can actually see the IP address that we put in so
2603.81s - 2606.93s |  definitely is kind of like giving us a hint that there's possible command
2606.93s - 2613.04s |  injection or something we should look at deeper there okay so now we have an idea
2613.04s - 2616.90s |  that that function that util underscore exec system is of interest to us it
2616.90s - 2621.26s |  could be a potential injection point and what we should do is you know on the
2621.26s - 2624.54s |  past page or like when we're doing that like I will interact with everything I
2624.54s - 2628.90s |  can and take a note of where all the logging is happening what binaries and
2628.90s - 2632.62s |  functions that logging is coming from we'll just go back to our good friend
2632.62s - 2637.14s |  strings piping into grep one of my favorite tools for IOT hacking and we
2637.14s - 2641.92s |  can grep on that function name so a lot of times in less expensive IOT vices
2641.92s - 2645.34s |  again they're making it easier for us they don't strip binaries and things
2645.34s - 2648.58s |  like that so the function names will just end up compile in the compiled
2648.58s - 2653.46s |  binaries and libraries so we can just pipe that into grep and put the function
2653.46s - 2657.70s |  name in so in this example here I did that for a util exec system however what
2657.70s - 2661.38s |  if they do strip it well if we just go back one page here you can see the
2661.38s - 2665.26s |  printout here it kind of follows a format it says oil start paying command
2665.26s - 2669.86s |  is and then gives the command so that's a string that's actually in there too
2669.86s - 2673.02s |  and they're probably not going to obfuscate it it's not malware so we can
2673.02s - 2678.30s |  also just pipe common strings that we see so in this example I kind of thought
2678.30s - 2681.82s |  it was using like a print app or sprint app or something like that so we look
2681.82s - 2686.46s |  for a command is and we get the same hit you can see here that actual string how
2686.46s - 2690.42s |  it is in that binary is percent s command is percent s so it's using that
2690.42s - 2693.86s |  formatting so even if they do strip the function names there's still ways to get
2693.86s - 2701.29s |  around it and find those underlying binaries and libraries okay so now that
2701.29s - 2706.29s |  we've got our function name we know that it's in that so if I just go back
2706.29s - 2709.89s |  and this one for example we see the hit because we use dash F it's in this lib
2709.89s - 2715.21s |  CMM dot SO so that is a custom library that the makers of this router in this
2715.21s - 2719.45s |  example wrote that has the majority of the functionality of that router baked
2719.45s - 2726.37s |  into it we can pop that into Ghidra and start decompiling it so one of the
2726.37s - 2730.25s |  things that I find when I'm teaching IOT hacking or in my workshops is like this
2730.25s - 2733.09s |  is the point where people usually get a little bit overwhelmed if they're not
2733.09s - 2737.09s |  familiar with reverse engineering and it starts to look quite complicated because
2737.09s - 2742.13s |  the output of Ghidra can be very verbose when it decompiles it it is in my
2742.13s - 2746.53s |  opinion a little bit more complex than just looking at regular C code so it can
2746.53s - 2749.69s |  be a little like discouraging and I see some people are like okay I can't do
2749.69s - 2753.65s |  this I'm intimidated by it but I have a few tips that I think can make it a lot
2753.65s - 2757.61s |  easier for you to understand and read the output in here and still find
2757.61s - 2760.77s |  vulnerabilities even if you don't understand what the heck is going on and
2760.77s - 2765.53s |  most of it doesn't make sense so the very first thing I always say and is
2765.53s - 2769.61s |  because people who are in cybersecurity and have had a little bit of intro to
2769.61s - 2773.25s |  Ghidra or reverse engineering is it's usually looking at malware and this is
2773.25s - 2778.01s |  not malware so with malware usually good malware authors or majority of them are
2778.01s - 2781.01s |  going to try and obfuscate what they're doing make it confusing for reverse
2781.01s - 2784.05s |  engineering they're not going to use print statements if they have strings
2784.09s - 2788.33s |  they're going to obfuscate those strings they're very hard to see instead for our
2788.33s - 2793.01s |  IOT devices we have developers who are trying to be good helpful developers and
2793.01s - 2797.45s |  write very clean readable code so that it's easy for someone else to pick up
2797.45s - 2801.45s |  after them if someone's reading their code it's going to be testable debuggable
2801.45s - 2806.49s |  doing all those good things that developers do and also in IOT devices we
2806.49s - 2811.21s |  do a lot of printing out to UART to tell what's going on so that we can
2811.21s - 2815.29s |  actually do almost debugging through print statements in a production device
2815.29s - 2820.53s |  which is nice it makes it really easy for us to then go and trace those back
2820.53s - 2824.61s |  so one of the first things I always suggest with that in mind is to take a
2824.61s - 2829.69s |  look at the print statements and let those guide you to what is going on of
2829.69s - 2832.85s |  course you can't always trust print statements if you're a programmer you
2832.85s - 2835.69s |  know that it's not the best to always trust comments or print statements but
2835.69s - 2838.57s |  when you're getting started reverse engineering I think it's okay just read
2838.57s - 2842.69s |  the print statements the very first one that I have here that's in red it's just
2842.69s - 2845.61s |  actually that print statement that we saw in the logging so it helps us
2845.61s - 2850.17s |  confirm that we're in the right spot and then if you look down at line 32 it
2850.17s - 2852.89s |  might be a little hard to read but essentially what it's saying there is
2852.89s - 2856.61s |  it's just saying system fork failed and this we don't care about that it's not
2856.61s - 2861.21s |  important to us but if you look at the program flow and the if statements well
2861.21s - 2864.73s |  now you know what that program flow does it just checks if a system fork failed
2864.73s - 2871.53s |  because before that it says you know if local 234 equals F F F F F F well if I
2871.53s - 2874.85s |  saw that I have no idea what it was is it integral to the thing well if you
2874.85s - 2877.29s |  look at the print statement it tells you exactly what it is you can just ignore
2877.29s - 2881.33s |  that the second thing you can do with print statements that makes your life a
2881.33s - 2885.81s |  lot easier is a lot of times they'll be like print F's or sprint F's and if
2885.81s - 2890.41s |  you're not familiar with how those work essentially we have a slot holder for a
2890.41s - 2893.53s |  variable that we're going to pass into that print statement and then the print
2893.53s - 2897.21s |  statement basically tells you what that's what that variable is so in this
2897.21s - 2902.13s |  top example here we have the percent command is percent and then we have two
2902.13s - 2905.61s |  variables passed in that you know we wouldn't know what they were once param
2905.61s - 2909.21s |  one and once underscore underscore s well if we look and you know we just go
2909.21s - 2912.01s |  back a couple to that print statement well the first one this is that
2912.01s - 2915.89s |  identifier OAL underscore start ping command so we know maybe that's like
2915.89s - 2920.05s |  some sort of identifier and then the second one though now we know of our
2920.05s - 2924.93s |  interest well that's the actual string that we manipulate that we can pass the
2924.93s - 2929.81s |  IP address in and because of that sprint F or that print F function well now we
2929.81s - 2932.69s |  know that underscore underscore s variable we know what it is and that's
2932.69s - 2938.01s |  just through those print commands the next thing I'll call out or that's kind
2938.01s - 2941.25s |  of like the final thing that we've been working towards is to just start getting
2941.25s - 2948.01s |  used to seeing unsafe things being done so that the easiest one to actually find
2948.01s - 2952.25s |  is system command so you can see that's in the second square there we have a
2952.25s - 2954.97s |  system command and if you're not familiar with that when you're
2954.97s - 2959.21s |  programming C essentially that's a way for you to just pass down to Linux to
2959.21s - 2963.05s |  say like hey I want you to run this like shell command so it's essentially the
2963.05s - 2965.93s |  same as if you know you're at the terminal and you type in if you have a
2965.93s - 2969.29s |  shell whatever you pass in the system it's the same way so if you're not
2969.29s - 2973.37s |  already thinking this like this is an extremely dangerous thing to do in your
2973.37s - 2977.25s |  programming if you're using user variables and especially if you're not
2977.25s - 2981.85s |  going to be sanitizing those variables so in this one for example this util
2981.85s - 2985.17s |  underscore exec system function that they've written to make it easier to do
2985.17s - 2992.21s |  system calls it does no sanitization or checking however in this example the
2992.21s - 2998.03s |  caller of that that actually initially takes in that IP address well it does do
2998.03s - 3003.57s |  the sanitization but if you look on this device for example there are about 500
3003.57s - 3008.73s |  calls to this util underscore exec system and the person that wrote that
3008.73s - 3011.81s |  function this util underscore exec system that knows okay I need to
3011.81s - 3015.77s |  sanitize my inputs further down the chain they might not be the same ones
3015.77s - 3019.93s |  writing the code so you can actually see how it can happen to slip through where
3019.93s - 3024.09s |  user supplied input gets into a system call so that's one of the easiest things
3024.09s - 3028.87s |  when you're starting out is to just go interact with the device chase down the
3028.87s - 3032.97s |  inputs that you do because you know and see where do they end up in the code and
3032.97s - 3036.43s |  if they end up in a system call then I really need to look into this deeper and
3036.43s - 3041.75s |  see if there's a way that I can do some sort of command injection so of course
3041.75s - 3045.11s |  what's next after we know this well we keep interacting with the device and
3045.11s - 3049.07s |  tracing the logging back to the binaries or libraries so of course there's other
3049.07s - 3051.99s |  ways to approach this you could just start with the library and look at all
3051.99s - 3054.95s |  the system calls and go backwards but when you're getting started I think it's
3054.95s - 3057.83s |  a lot easier to understand and conceptualize and not get lost in
3057.83s - 3062.27s |  Ghidra to try and start at the source which is how we interact with it and we
3062.27s - 3066.43s |  know that there's like an injection point there and then see if that
3066.43s - 3071.03s |  actually filters down to something so don't just use web browsers like a lot
3071.03s - 3075.35s |  of IOT apps they have a mobile or IOT devices they have a mobile app so we can
3075.35s - 3078.43s |  go use that mobile app like do everything in the mobile app do all the
3078.43s - 3082.15s |  setup check all of that because it's gonna be like a lot of times one of
3082.15s - 3085.87s |  those lesser used places where there's some obscure setting or something you
3085.87s - 3089.87s |  can set do all of that and see what logging you can get and trace that back
3089.87s - 3093.23s |  and see where it goes like one example I found where I was able to crash a
3093.23s - 3098.31s |  device is it was a camera and if you wanted to pair it to your mobile app you
3098.31s - 3101.95s |  put the QR code up to the camera and you compare it to the mobile app and I was
3101.95s - 3105.43s |  never able to like get any buffer overflow or anything but I was able to
3105.43s - 3110.03s |  crash the camera by doing like a malformed QR code so just be creative if
3110.03s - 3113.67s |  there's cloud like somewhere you can sign up in the cloud and then interact
3113.67s - 3117.55s |  with your device do that like usually there's a free 30 days or something and
3117.55s - 3120.71s |  you know we're not actually pen testing the cloud thing we don't want to be like
3120.71s - 3124.51s |  trying to break that but just interact with it how you're supposed to and see
3124.51s - 3129.25s |  how that filters down into the device and then what we're looking for is when
3129.25s - 3132.61s |  you're starting out there's two main things I suggest to look for so the
3132.61s - 3137.35s |  first one is what we already looked at does it end up in an unvalidated or
3137.35s - 3143.07s |  unsanitized system call and like if you look at this router and go back and look
3143.07s - 3147.23s |  at the CVS for this one that I'm showing or lots of IOT devices you'll see lots
3147.23s - 3151.75s |  of command injections being done because in cheap IOT devices they want
3151.75s - 3154.95s |  to save money they don't want to write their own functionality it's way easier
3154.95s - 3159.83s |  to just use the built-in stuff in Linux and just hand it off to a system call so
3159.83s - 3163.27s |  it's not like these don't exist you can definitely find them the second one
3163.27s - 3167.71s |  that's probably a little bit more common but a little bit harder to find and
3167.71s - 3173.27s |  abuse is if it gets your input user input gets put into an unsafe C
3173.27s - 3177.43s |  function so there's a few examples of those are mem copy string copy string
3177.43s - 3182.51s |  cat print F that next one supposed to be sprint F get scan F so essentially what
3182.51s - 3185.67s |  these are doing though is they're going to be copying your data into some sort
3185.67s - 3190.11s |  of buffer and again memory is limited on IOT devices so we're always trying to be
3190.11s - 3194.43s |  kind of stingy with our buffers and a lot of times if you're not if you're not
3194.43s - 3198.87s |  sanitizing or validating those inputs then it can end up in a buffer where we
3198.87s - 3203.63s |  can overflow it and you know at the worst case buffer overflow or maybe just
3203.63s - 3207.27s |  crash the device and have some sort of denial of service so I could give a
3207.27s - 3210.39s |  whole another talk then about where to go from that from here and how to
3210.39s - 3215.39s |  actually then abuse these are actually exploit buffer overflows but if you do
3215.39s - 3219.11s |  get this far and you find this and like you'll be able to maybe crash the device
3219.11s - 3223.59s |  or get some seg faults or something then send me a message or just go out and do
3223.59s - 3227.35s |  some further research and there's a lot of great resources then for how to
3227.43s - 3232.19s |  identify these buffer overflows so that's where I'll end today I just want
3232.19s - 3235.35s |  to wrap up with a thank you thanks everyone for coming I hope you learned
3235.35s - 3239.75s |  something I hope you go home and go buy a cheap IOT device when you get home
3239.75s - 3244.51s |  hack it if you do let me know I love to hear when people hack it and if you want
3244.51s - 3248.71s |  a copy of these slides stay in touch with me link up resources anything you
3248.71s - 3252.75s |  can reach me at andrewbellini.com thanks everyone