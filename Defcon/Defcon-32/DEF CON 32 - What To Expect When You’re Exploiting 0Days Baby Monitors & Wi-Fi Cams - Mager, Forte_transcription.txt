{
  "webpage_url": "https://www.youtube.com/watch?v=caY7ls4G460",
  "title": "DEF CON 32 - What To Expect When You\u2019re Exploiting: 0Days Baby Monitors & Wi-Fi Cams - Mager, Forte",
  "description": "Home surveillance technology is a modern convenience that has been made accessible to the masses through the rise of IoT devices, namely cloud-connected Wi-Fi cameras. From parents monitoring their infants to homeowners watching their entryways, these cameras provide users with access to instant, high definition video from the convenience of a mobile phone, tablet, or PC. However, the affordability of these devices and relative ease of cloud access generally correlates to flawed security, putting users at risk. We set out to explore the attack surface of various Wi-Fi camera models to gain a deeper understanding of how these devices are being exploited. In the end, we devised methods to gain local root access, uncovered user privacy issues, discovered a zero-day vulnerability within a prominent IoT device management platform that allows attackers to gain remote control of millions of cameras worldwide and access sensitive user data, and revealed how these devices may be vulnerable to remote code execution attacks through completely unauthenticated means thanks to an inherently flawed implementation of their underlying peer to peer networking protocol. Along with demonstrating our exploits against live cameras, we will highlight the methods used to obtain our most significant findings and provide guidance on remediating the issues we encountered so these devices can be used safely in your household. We will also invite audience members to probe and attack a camera during our talk and earn a prize in the process!",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2401,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 5.28s | This text was transcribed using whisper model: large-v2

 Good morning DEF CON. Uh we are gonna be hacking some baby monitors and WiFi cameras today.
5.28s - 10.14s |  So a little bit about me, my name is Mark Mager, I'm senior manager of security research
10.14s - 15.18s |  at Elastic. Uh my background is primarily in Windows malware research and reverse engineering.
15.18s - 21.48s |  Uh so what do we need to know about uh WiFi cameras and baby monitors today? Um basically
21.48s - 24.52s |  we're gonna assume they're the exact same thing because they pretty much have the same
24.52s - 30.92s |  feature set. Uh they're literally marketed and sold as equivalent devices. So uh what
30.92s - 37.08s |  we're talking about is the $10 cameras you can find on Amazon uh that require internet
37.08s - 42.92s |  connectivity to that specific vendor's cloud platform. And there's very basic operations,
42.92s - 48.12s |  pan, tilt, zoom, uh things along those lines, motion detection, whatever. But yeah that's
48.12s - 52.88s |  the what we're talking about when we say WiFi cameras for today. Uh so why WiFi cameras?
52.88s - 59.68s |  Well there's literally almost 125 million households across the world that have these
59.68s - 66.36s |  cameras installed within their house. So uh these things are everywhere. Um and they're
66.36s - 70.72s |  obviously gotten going anywhere and they're super cheap. So you're gonna find them everywhere.
70.72s - 75.14s |  Um the attacks that are typically associated with these cameras, what you're probably gonna
75.14s - 81.76s |  hear about usually is uh people spying on babies uh and families, terrorizing them,
81.76s - 87.24s |  that sort of thing. Uh a bit upsetting there. And even things like uh Russians performing
87.24s - 96.24s |  uh reconnaissance on targets within Ukraine. Uh so when we set out to uh evaluate the attack
96.24s - 101.32s |  surface for WiFi cameras uh we wanted to break things down into a few different uh common
101.32s - 107.90s |  attack vectors. That broke down primarily into leak credentials and cloud vulnerabilities.
107.90s - 115.74s |  Those seem to be the most common um attack vectors, the most frequently seen ones um
115.74s - 121.30s |  in uh more of the the attacks that we kinda see across the board. Um yeah so kinda focusing
121.30s - 128.22s |  on those two, you know that's certainly what we wanted to kinda uh dig into was any vulnerabilities
128.22s - 135.26s |  specific to the cloud platforms, uh the applications that control the cameras, and uh the camera
135.26s - 144.31s |  hardware itself. Hello DEF CON. I'm Eric Forte and uh doing the presentation with Mark
144.31s - 149.27s |  and I'm a Security Research Engineer at Elastic. I'm on the Threat Research and Detection Engineering
149.27s - 155.47s |  team, otherwise known as TRADE. And my background is in Linux software development, IoT systems,
155.47s - 161.83s |  UAVs, civil space sector, and then also doing some threat research. And so when we're talking
161.83s - 165.75s |  about these cameras, we're for the purposes of this talk, we we looked at a number of
165.75s - 171.03s |  different cameras, but we're gonna primarily focus on the WandsView Q5 and the WandsView Q6.
171.03s - 178.11s |  And as far as why we picked these cameras, it was uh sort of clear to see on the Amazon reviews
178.11s - 182.35s |  that they uh might have something for us to look at, some vulnerabilities that other people had
182.35s - 191.23s |  just come across because they were readily hacked enough that um that it took notice. So these
191.31s - 197.47s |  cameras are made by WandsView, but there are other vendors that also produce cameras such as
197.47s - 202.35s |  Sonado and some others as well, which we'll touch on a little bit more in a little bit. But they're
202.35s - 207.95s |  primarily under the AJ Cloud management infrastructure. And so this is gonna be the
207.95s - 214.63s |  cloud services that provide you with the apps, with the weight of connecting to it. So they may,
214.63s - 218.83s |  the WandsView versus Sonado versus others may have their own little differences in the apps
218.91s - 224.91s |  themselves, but primarily this cloud interface is with AJ Cloud and we'll get into a lot more of
224.91s - 230.67s |  that in a minute. So when we were first with these cameras, we kind of looked at a few different
230.67s - 235.95s |  approaches for how we were gonna try and see if we could get some of those similar Amazon review
235.95s - 241.15s |  results. So first, we were looking at remote access. So this is gonna be accessing the camera
241.15s - 246.99s |  through whatever companion app that ships with with the camera. We also were gonna look at some
246.99s - 252.43s |  local attacks. So it's gonna be some active and passive networking recon in addition to seeing
252.43s - 257.63s |  what else other services and things were running there. Also looking at some device physical
257.63s - 263.31s |  manipulation, which obviously these are Wi-Fi cameras. They're not necessarily like closed
263.31s - 268.83s |  circuit TV cameras. So we're expecting that there's gonna be some physical attacks, which there are,
268.83s - 275.23s |  we'll get to that. But it's still, again, as an attack vector can enable some other aspects.
276.19s - 282.75s |  Then finally, looking at the hardware itself. So looking at the chip and seeing what we can use,
282.75s - 286.91s |  what we can either get the firmware off, what we can do to kind of, again, extend that vulnerability
286.91s - 291.95s |  process, look for serial communications and things like that, which spoiler alert, we have,
291.95s - 299.07s |  we found some over, over UART. So for our lab setup, we have a number of different things that
299.07s - 303.79s |  we wanted to look at, right? So we've got different apps. So, so we want to have a very controlled
303.79s - 308.43s |  environment because we, we know say one, they're easy to hack. So we don't want to be hacked
308.43s - 314.67s |  ourselves. But on top of that, we know as these are largely say Chinese make cameras that they
314.67s - 320.11s |  may also want to be watching what we're doing. So we wanted to have a completely different setup.
320.11s - 325.63s |  And so we have a mobile hotspot. I like the T-Mobile T9s. They're cheap. You can get them
325.63s - 331.15s |  for about 20 bucks and they do the job great. We have the camera of course itself. Then we needed
331.71s - 336.51s |  say Windows and Linux operating systems. You don't actually need Linux, except I would argue that you
336.51s - 341.15s |  do, but, but, but practically speaking, you don't need Linux to be able to run any of these things.
341.15s - 347.95s |  But, but we, we use that, but we did need Windows to also look at the companion Windows app in
347.95s - 353.55s |  addition to the iOS and Android apps, which we had phones and virtual machines set up for as well.
354.99s - 359.31s |  From a software side, we use a number of different tools, including say Wireshark,
360.27s - 364.91s |  running Android Studio to try and see what we could find out from the app, various other sort
364.91s - 372.19s |  of decompiling mechanisms, and also using the Elastic Stack to look at the network communication
372.19s - 376.91s |  logs and how we can parse some of the different protocols that we saw. And we will, again,
376.91s - 380.83s |  we'll talk to that more in a little bit, but specifically looking at some peer-to-peer traffic
380.83s - 386.99s |  there. From a hardware standpoint, since we wanted to do the full gamut of going from complete
386.99s - 391.95s |  hardware takedown as well as looking at all the software, we had some, some hardware teardown
391.95s - 399.15s |  tools. I like the, what iFixit has, but of course you can take your pick. Then we needed some USB
399.15s - 404.99s |  TTY connector, right? So in this case, you know, it's just your typical Adafruit USB TTY serial
404.99s - 412.03s |  connector there. We also have a, and we'll get to it more in a minute, but using the GreatFET 1
412.99s - 417.79s |  to, as a logic analyzer, to, and to be able to read voltages and things like that in case we
417.79s - 422.43s |  needed to actually like hard pull something off of the chip, solder something, or things like that.
422.43s - 426.35s |  Ultimately, we didn't need to do that, but we were prepared for that nonetheless.
427.79s - 432.99s |  Raspberry Pi, because it's easy to image and then make it, and distribute. So for,
433.79s - 437.63s |  for having, for doing cross-compilation and things like that, cheap, easy to come by.
437.63s - 446.67s |  And then also, we used Alpha Wi-Fi, just a USB Wi-Fi NIC, which for us, why this was important,
446.67s - 452.51s |  and why you'll need some NIC that you can get active, or rather passive sniffing on,
452.51s - 458.67s |  is because you're going to want to capture all of the traffic going from the camera to the cloud,
458.67s - 463.15s |  and not just what will appear as network traffic. And we'll get to that in a little bit,
463.23s - 467.79s |  because you're going to, if, to follow along, you'll need to, to parse some, some additional
467.79s - 473.55s |  protocols. So getting a little bit into our remote and local recon, initial attacks were
473.55s - 479.47s |  limited. They had a fairly locked down attack surface. The active network and local reconnaissance
479.47s - 484.75s |  doesn't reveal too much, or too much interesting as far as running on the traffic, the, or rather
484.75s - 491.87s |  running on the camera. The network traffic itself is fairly mundane. It uses encrypted web sockets,
491.87s - 495.39s |  which good sign, right, that they are at least using encryption, things like that.
496.75s - 501.47s |  So you, we tried to do some man-in-the-middle attacks, but ultimately we weren't particularly
501.47s - 506.83s |  successful with that. Looking at the apps themselves, they were likely obfuscated with
506.83s - 513.15s |  ProGuard. We couldn't, just from the, from being, unpacking the APK, get too far there.
514.59s - 520.43s |  But, so those APKs were just not easily that debuggable. But just as a quick note,
520.43s - 524.51s |  ultimately there's three lines of communication. We're going from the mobile app to the cloud,
524.51s - 528.75s |  the mobile app to the camera, and then also from the camera to the cloud, and then the mobile app.
528.75s - 532.67s |  And that, just as a sort of primer, we'll get into that more in a little bit.
534.03s - 539.71s |  Just as far as the physical device itself, again, we weren't really expecting it to be that secure.
539.71s - 544.75s |  It has an exposed reset button. So if you had this sitting, like let's say up here on stage,
544.75s - 549.31s |  if you were to walk by, hit the reset button and then flash a QR code, you could steal the camera
549.31s - 553.55s |  and then now it's yours. You have full control over it. Again, that's not particularly surprising
553.55s - 559.07s |  because that's part of the expected setup process. So, so in that sense, there's no,
559.07s - 565.95s |  once you have reset the camera, there's no verification. So there's also an exposed SD
565.95s - 571.23s |  card slot. So as we came to discover later, this can be used to load alternative firmware as well.
571.23s - 576.11s |  We'll get into what the bootloader looks like in a minute too, but this, if you were to craft a
576.11s - 580.59s |  malicious SD card, you could go plug it into the camera and then also have a field day there too.
582.03s - 587.23s |  The hardware recon starts to get a little bit more interesting. So when we look at the chip,
587.23s - 593.79s |  it's an Express T31 SoC. It's primarily a MIPS processor, but it also has a companion RISC-V
593.79s - 598.83s |  processor. But the primary thing I want you to focus on for the sake of the demonstration
598.83s - 606.27s |  is that we have an I2C and UART bus that we could be looking for right on the hardware,
606.27s - 613.87s |  on the chip itself. We also have a secure boot, which may, you know, that could throw a wrench
613.87s - 618.91s |  into things. And then we also have a hardware watchdog supported by this chip. Doesn't necessarily
618.91s - 623.87s |  mean they're using it, but again, these are things that we can look for in our hardware recon.
624.43s - 632.03s |  So in tearing down part of the camera, we found a potential UART, UN access ports there.
632.03s - 638.11s |  And so we connected a logic analyzer, the great FET-1, looked at the voltages, used some of the
638.11s - 646.59s |  protocol detection, saw that it appears to be UART. And if we look at the actual signal, we saw
646.59s - 653.31s |  that it indeed was. So we go ahead and use screen, but you can use again, whatever your favorite tool
653.31s - 661.95s |  is to connect over default baud rate to UART. And lo and behold on boot, we have UBOOT. So that
661.95s - 668.27s |  of course is useful for us, but also we in further expecting this, that secure boot is not enabled
668.83s - 673.71s |  by default, as far as the, on the camera, even though the chip supports it. So we can just do a
673.71s - 679.47s |  quick boot into single user mode and get a root shell so that we can start poking around further.
679.47s - 684.43s |  Now this camera was particularly easy to do this because you could just straight set the
684.43s - 689.23s |  environment variable, the environment variables for UBOOT to be able to boot into single user
689.23s - 693.15s |  mode and get root. Other cameras that we looked at were not as simple as this. And sometimes you
693.15s - 698.11s |  have to use memory offsets and things like that, but, but this one in particular, what was fairly
698.11s - 704.59s |  straightforward. So again, we can hit boot and then run, then just drop into our root shell
704.59s - 710.03s |  and then be able to poke around on the camera. So when, now that we're there, so a few things
710.03s - 714.43s |  that we want to then, then do to go forward. First off, we may want to try and establish
714.43s - 718.91s |  persistence, but if you've done this type of attack before going to say a single user mode,
718.91s - 724.11s |  especially on embedded devices and just embedded devices in general, you might see that you're on
724.11s - 731.39s |  a read only file system. Well, many times this is only read only ish. It's not quite truly read only.
731.39s - 739.07s |  So if we take a look at Fstab, we can see that a number of these mount points are separated,
739.07s - 747.31s |  but then also they are TempFS shares. So we can then you make our own TempFS partition,
747.31s - 753.79s |  or just mount a TempFS partition for read, write access, modify the desired settings. And we can
753.79s - 758.99s |  run whatever we want, of course, and have, have persistence, which largely for these type of
758.99s - 763.87s |  devices, you will need this type of interface, whether it be for, there's other methods for
763.87s - 768.91s |  logging, but again, when, when Linux is running, it often needs to be able to make some level
768.91s - 773.71s |  modifications. So this is just walking through one way of doing that of saying, Hey, I want to
773.71s - 781.79s |  create a, a TempFS share for dev, and then go ahead and mount it. And then also then mount Etsy
781.79s - 788.35s |  such that I can make Etsy read, write as well, which of course gives us access to,
788.35s - 794.51s |  to some other things. And so just demonstrating there that if I run that, if I just create a
794.51s - 800.83s |  file, then it does, in fact, it show up as opposed to when it didn't before. So if you want, so
800.83s - 804.03s |  that's just one way, of course, then you can go and do whatever you want from that perspective.
804.91s - 809.87s |  But if you want to go log into the existing root user, of course, you can pull Etsy password and
809.87s - 816.99s |  then go and just use John the Ripper or something to, to crack that hash and, and go from there.
816.99s - 820.75s |  But for, for our purposes, again, we want to keep going, looking for the other software
820.75s - 826.11s |  vulnerabilities. So this gives us a, an easy way to pull the firmware over the serial connection.
826.11s - 830.99s |  So we, and in addition to the firmware, we're pulling a JFS to read, write partition containing
830.99s - 836.83s |  any log data, again, just might be useful for us. So this is just demonstrating how you can,
836.83s - 840.99s |  one way of pulling the firmware. There are a number of different ways, but this is just how we
840.99s - 847.87s |  did it using, using binwalk. And then of course, just echoing the bytes out in the appropriate
847.87s - 853.23s |  format over the serial connection. So with that, I'm going to hand it over to Mark to see what he
853.23s - 860.40s |  did with the firmware. All right. So as Eric mentioned earlier, we definitely were running
860.40s - 867.92s |  into issues with the iOS and Android apps for Wansview specifically, right? So we're hitting
867.92s - 872.96s |  our heads against the wall a little bit. So we kind of back things up a little bit and went directly
872.96s - 879.60s |  to Wansview site and they host a version of Wansview cloud that is for older versions of
879.60s - 885.92s |  windows. I think it says windows seven specifically on their site. But the main takeaways from that
885.92s - 891.36s |  is that that app is still compatible with all Wansview devices. It does have a limited feature
891.36s - 897.52s |  set. I mean, they're still trying to push you towards using the apps. That's totally their
897.52s - 902.80s |  sort of thing because they want everybody to sign up for their cloud plan so they can make more money
902.80s - 911.28s |  off of everybody, not just the $10 sales from the device itself. A couple of other things related
911.28s - 917.28s |  to that, this windows app is it does generate a significantly less amount of network traffic
917.28s - 922.72s |  that's going to come in handy later. And the binaries are not packed. Eric mentioned that
923.76s - 929.52s |  the APKs look like they're probably packed with ProGuard. So, you know, definitely being able to
930.16s - 936.48s |  disassemble and decompile and debug pretty easily. That helps out quite a bit. And then
937.36s - 943.84s |  last but certainly not least is that it does generate a very, very verbose debug log file,
944.40s - 949.76s |  which I'm going to dig into right now. And the first thing we noticed when we ran the first time,
949.76s - 956.40s |  it logs user account credentials in clear text. That's obviously terrible. So, yeah,
956.40s - 963.68s |  not a great sign of things. And as Eric mentioned before, we had significant difficulties trying to
963.68s - 968.32s |  man in the middle any of the any of the app traffic before. So, we had no visibility into
968.32s - 976.40s |  that. But hopefully their developers decided to actually log all posts and post requests and
976.40s - 980.96s |  response data. So, it's all there in the clear. Who needs to man in the middle anything when you
980.96s - 988.81s |  have it in the clear on a file on disk? So, yeah. So, digging into it, yeah, we could definitely
988.81s - 994.17s |  get a ton of insight into the sign on process that we had we did not have before, including
994.97s - 1001.61s |  the actual endpoint APIs as well as, you know, all the fields that are involved both in the
1001.61s - 1007.77s |  requests and responses. So, you know, the first thing here is the app startup endpoint. It's not
1007.77s - 1016.25s |  really a ton there. It's more just initial setup. This check is more just to see if this is a valid
1016.25s - 1022.89s |  account that you're attempting to sign on. And then this here is where the actual let's see,
1022.89s - 1029.37s |  yeah, as an initial account where, but yeah, challenge involved where the tokens generated
1029.37s - 1034.49s |  for that specific client application. And then there's a little bit of a key exchange that
1034.49s - 1040.25s |  happens. But yeah, not too much else going on there. This is where the sign on really begins.
1042.01s - 1045.77s |  Yeah, your password is at least salted and hashed. So, it's not set in the clear, thank God.
1046.17s - 1053.37s |  And then yeah, I mean, it's mostly just to initialize the session and to confirm that
1053.37s - 1059.29s |  you are allowed to log into this account. From there, we, things really start to get interesting
1059.29s - 1065.85s |  because now we can, now that we're logged in, we can request a list of devices that are associated
1065.85s - 1071.69s |  with that specific account. And as you can see here, there's a specific device ID along with
1071.69s - 1080.73s |  some more configuration information, primarily endpoint URIs. And then there's another device
1080.73s - 1088.25s |  configuration API endpoint that's hit. This is very notable. We're going to refer back to this
1088.25s - 1096.97s |  later. But this is where a device ID is first transmitted from the application to the cloud.
1097.93s - 1104.97s |  And more configuration information comes through. We'll dig into that a bit. And then the last
1104.97s - 1114.01s |  request we really dig into is Fetch Infos. And this provides a much, much larger picture of
1114.01s - 1122.81s |  the data that is stored for that specific device. And there's a lot to kind of dig into. But what
1122.89s - 1129.05s |  you'll want to really highlight on is there's a snapshot URL that's provided. And that just
1129.05s - 1134.73s |  happens to be publicly accessible. And that's a picture of my kitchen. So from back in April.
1136.49s - 1143.29s |  So digging further into more of the response data, there's a few things certainly to note
1143.29s - 1149.85s |  here that are a bit concerning, right? The firmware version, the very specific firmware
1149.85s - 1156.89s |  version that is running on the device itself, that's referenced there along with the next
1156.89s - 1163.21s |  firmware version they're supposed to upgrade to, along with the actual SSID that the device is
1163.21s - 1167.53s |  currently signed on to, along with some other network configuration information,
1167.53s - 1174.65s |  including its MAC address. And then we also have geolocation data in the form of
1174.73s - 1182.49s |  uh you know time zone data and things like that. So going back to the device configuration uh
1182.49s - 1189.37s |  request, what we tried to do first is we wanted to see if we could actually access other devices
1189.37s - 1195.45s |  that weren't associated with the RPAS particular account. Um so we tried a very naive approach
1195.45s - 1201.61s |  where all we wanted to do was simply just replace the device ID in that particular request.
1201.61s - 1206.41s |  And uh without really doing a significant amount of reverse engineering, we can locate that
1206.41s - 1212.25s |  pretty easily based off of the verbose uh log data. Because if we just look up post request,
1212.25s - 1215.85s |  uh we can you know we can see how many times that's specifically logged
1215.85s - 1222.73s |  uh to the uh to the log file. And then we can cross-reference that with um the disassembly
1222.73s - 1229.93s |  in IDA in order to target the specific uh device configuration post request uh to get a better
1229.93s - 1236.01s |  idea of where we would want to jump in. And so some digging further into um the particular
1236.01s - 1242.49s |  function, um what we decided to do is we needed to set a breakpoint at this particular uh address
1242.49s - 1249.05s |  which would be before the post request actually goes out um before the uh the JSON is fully uh
1249.05s - 1253.53s |  fully formed as well. Um you know we're going to swap out the device IDs and memory and then
1253.53s - 1260.01s |  resume execution. So pretty straightforward. Uh what this uh ends up kind of looking like is you
1260.01s - 1265.61s |  know I wrote up maybe a 60 line uh Python script that that does this all for us uh which we will
1266.17s - 1276.81s |  dig into right now. Okay so what we have right here is um well first I'll demonstrate that
1276.81s - 1291.92s |  this account is so we already have one specific um camera that is tied to this account
1292.64s - 1298.72s |  and it's offline at the moment so nothing you know particularly concerning there right.
1298.72s - 1313.71s |  Uh we'll attempt to account uh to connect to it uh but nothing's going to happen. Now if we kick
1313.71s - 1319.39s |  off the exploit script what it's going to do is it's going to launch the same Wansview cloud for
1319.39s - 1329.23s |  Windows app uh we'll proceed to sign in as expected um and once we hit our breakpoint
1330.03s - 1336.83s |  we will swap out the device ID in memory uh and then once it says finished here
1336.83s - 1354.68s |  uh it will resume execution and we're online. So the thing is
1355.32s - 1363.66s |  so yeah we can we can do everything in the app we can we can pan and tilt um
1364.86s - 1369.26s |  yeah I mean that like I said it's a it is a bit more limited feature set compared to
1369.82s - 1377.58s |  the uh the mobile apps but basically right we've proven we can get access to uh an account that or
1377.58s - 1383.74s |  a device that's not associated with our account. It's obviously a very very uh significant uh
1384.30s - 1392.94s |  uh access control vulnerability um so yeah you know certainly that was a pretty big discovery
1392.94s - 1402.12s |  um you know right off the bat. So you might have seen in the background that there was a you know
1402.12s - 1407.96s |  certainly a lot of uh network traffic uh being generated in the background um it was all primarily
1407.96s - 1416.04s |  UDP um but we hadn't really no idea what it is in particular um now doing research before we
1416.04s - 1423.32s |  submitted Defcon we did come across uh a particular IoT peer-to-peer protocol uh called PPPP
1423.88s - 1431.96s |  um that was um pretty significantly researched and detailed by Polymer PC he has a website
1431.96s - 1439.88s |  um he presented a Defcon 28 in 2020 um fully tearing down the protocol and all that so uh
1439.88s - 1445.16s |  ideally this was going to be something that uh you know maybe that was going to be in use here too
1445.16s - 1452.52s |  so we kind of set out to explore that uh by just looking for references to P2P and and PPPP uh and
1452.52s - 1459.32s |  yeah sure enough within the Wansview cloud uh binary itself as well as the uh the DLLs we sound
1459.32s - 1465.08s |  we found you know numerous references uh even references to their specific PDBs which reference
1465.08s - 1472.20s |  both uh you know you know multiple peer-to-peer terms so yeah we're um pretty sure that we're
1472.20s - 1479.16s |  dealing with the same protocol and going from there then uh there is a excellent uh disector
1479.16s - 1484.36s |  for this peer-to-peer protocol that is uh available and posted on GitHub as of last year
1484.36s - 1488.76s |  um you know we load it in and all of a sudden that UDP traffic we have no idea what it is
1488.76s - 1494.44s |  turns into a very recognizable uh messaging sequence uh that's associated with peer-to-peer
1494.76s - 1502.76s |  uh so in very very briefly the peer-to-peer protocol is used by a ton of IoT devices across
1502.76s - 1508.04s |  hundreds of vendors it's been in use for uh you know the better part of the last decade if not
1508.04s - 1514.52s |  longer um it uses UDP hole punching in order to circumvent uh restrictive network configurations
1514.52s - 1519.96s |  uh and it allows you uh you know these apps to connect to the cameras from anywhere in the world
1519.96s - 1523.48s |  right they would they want it to be as accessible as possible right that's all point of these
1523.48s - 1528.76s |  devices um and yeah sometimes the connections are either they're either direct to the camera
1528.76s - 1533.24s |  depending on the configuration or they go through a relay uh if they have to if they have to um
1534.12s - 1543.61s |  you know get around certain restrictions uh all right nothing to do so now we have established
1543.61s - 1549.85s |  some initial access right so we also have as we looked at a little bit before the firmware which
1549.85s - 1555.85s |  we can now go into some of some of that static reverse engineering we have packet capture for
1555.93s - 1561.77s |  the camera and the app network communications we have log files from both the windows and the
1561.77s - 1568.33s |  camera logs the logs as when we logged in before under root we of course have access to all of the
1568.33s - 1575.29s |  the d message logs and things like that as well and then um we can get the camera logs from any
1575.29s - 1581.61s |  of its hardware mechanisms as well for the audio and camera hand tilt zoom etc so now we want to
1581.61s - 1587.29s |  kind of establish some more advanced access for looking for some additional exploits so one or
1587.29s - 1592.41s |  first we're going to look for that live log output for some immediate feedback to determine some of
1592.41s - 1598.25s |  the control flow again from the windows app right we were able to see that some of the they are
1598.25s - 1603.37s |  logging the post request and responses so we're hopeful that they're going to do something similar
1603.37s - 1608.33s |  on the camera but we also want to establish a we want to have a debugger running on that camera
1608.41s - 1614.97s |  so we can look at some of these applications and see what we can do so first for live log output
1614.97s - 1620.81s |  it's very very simple very easy you plug the uh serum you just get your serial shell over you
1620.81s - 1625.45s |  aren't plug it into say in this case a raspberry pi but again you could use whatever you like
1625.45s - 1629.93s |  and it spits out the logs over serial by default so you don't even necessarily need to use the the
1629.93s - 1635.21s |  root access or boot the single user mode to just get the logs but again that's just one way of
1635.21s - 1642.17s |  doing it but one thing that we'll quickly run into is the kernel watchdog so if the watchdog
1642.17s - 1649.45s |  is not written to it reboots the camera so this what we're seeing here is if you try to kill the
1649.45s - 1656.01s |  init the primary app or in this case we'll get to it in a minute but if you start to kill off things
1656.01s - 1662.01s |  in the camera to go look at them or pause things it will trigger the the kernel watchdog process
1662.01s - 1667.53s |  which will then reboot the camera this isn't the only say security mechanism this is just the one
1667.53s - 1672.25s |  that the primary one that you would have to get around to be able to run a debugger to be able to
1672.25s - 1677.93s |  look at the primary application that they're running on the camera which they call init app
1677.93s - 1684.25s |  which is which handles all of the connection to the aj cloud providing all of the video streaming
1684.25s - 1691.77s |  and the rest of the control the camera they wrap this init app in a daemon.sh script which is just
1691.77s - 1696.73s |  a simple while loop that says hey keep kicking off the init app if I have to kick it off more
1696.73s - 1701.53s |  the next number of times reboot it again acting sort of like again a catch-all in case something
1701.53s - 1708.33s |  went really wrong but that init app is reporting into the watchdog and so this is that's so if you
1708.33s - 1712.97s |  either kill the init app or again kill the daemon and then kill the init app that's where you're
1712.97s - 1717.21s |  going to end up rebooting the device and so if you're using single user mode to get root you're
1717.21s - 1722.65s |  going to to lose that and I and some of the unless you have set up some level of persistence
1722.65s - 1728.57s |  you're going to lose any of the the edits as well so of course next step is to defeat the watchdog
1728.57s - 1732.89s |  so there are a couple of approaches here right that you could do so the first one um which you
1732.89s - 1738.81s |  can actually get this example right off from the uh the kernel watchdog 8 api um information from
1738.81s - 1743.93s |  the the linux kernel you could just simply write some c code to keep sending a live messages to
1743.93s - 1749.21s |  the watchdog right and so since we have root access we could do something like that however
1749.21s - 1753.37s |  this approach is not necessarily what we want to do and not what we wanted to do either
1753.37s - 1760.41s |  because the the fundamental problem with this is that while you could keep sending the messages
1760.41s - 1765.53s |  or you could even use like take hold of the kernel semaphores and keep it open just for yourself so
1765.53s - 1772.81s |  init app can't write to it that doesn't necessarily that help you because init app if it can't write
1772.81s - 1778.73s |  to it then it's going to know that you're here and know that you're now disabling its ability
1778.73s - 1783.69s |  to operate and then it may change the way that it's going to operate in this case we know say
1783.69s - 1787.93s |  that it that it does but again that's not necessarily the approach you want to use even
1787.93s - 1792.17s |  though it might work for your environment so there's another way um there's there's other
1792.17s - 1795.05s |  ways other than these two but these are just the ones we're going to talk through today
1795.05s - 1801.13s |  um there's the magic close feature which if you go look in the linux kernel driver uh what the
1801.13s - 1807.61s |  watchdog driver api from linux kernel 2.4.18 you can see that there if you write a magic
1807.61s - 1811.77s |  character in this case an uppercase v there's another character that'll work as well but if
1811.77s - 1817.93s |  you write that to dev watchdog and that's the last thing that gets written to dev watchdog
1817.93s - 1824.17s |  it then can cleanly disable the watchdog uh the kernel watchdog now as a note the camera is not
1824.17s - 1830.73s |  running linux kernel 2.4.18 but it does still work um so your mileage may vary it's running a
1830.73s - 1836.09s |  three dot kernel but um again it still still may work so you could write a simple script such as
1836.09s - 1841.85s |  this or again however you would like to do it to just simply continuously write v and the reason
1841.85s - 1846.81s |  why you may want to do something like this instead of just write v and stop is something some other
1846.81s - 1851.53s |  process especially as you're doing your reverse engineering might come along and reactivate the
1851.53s - 1857.21s |  watchdog so if you want to try and keep making it such that that you're not going to be rebooted or
1857.21s - 1862.57s |  at least as have some protection against that you you might want to continuously write to it
1862.57s - 1868.01s |  so now with the watchdog generally defeated we need to be able to run a debugger on the camera
1868.01s - 1873.45s |  which means we need to be able to compile binaries that can run on the camera um so in this case we
1873.45s - 1881.61s |  discovered that our our camera is a little indian mint um so just as a quick um example we can
1881.61s - 1888.65s |  compile arbitrary c code using just out of the box um like the mips linux gcc compilers we can
1888.65s - 1895.77s |  run a quick hello mips and see so i did not know this at the time when i was doing it i built a
1895.77s - 1902.41s |  tool chain and compiled uh compiled gdb server myself using that tool chain but later on we
1902.41s - 1906.49s |  found that there is a pre-built one that works that that's the link to be able to get to it again
1906.49s - 1911.37s |  again that will be available but what you'll need to do to be able to run gdb server you'll need to
1911.37s - 1916.09s |  make sure that you're exporting the proper paths to get the proper libraries that an app needs
1916.09s - 1920.97s |  then expose it over some port it could be it works over serial i would recommend if you can use it
1920.97s - 1924.97s |  doing it over networking just because the serial debugging can be very slow when you're using this
1924.97s - 1934.57s |  many libraries um again just an example of how to do that um so we can then connect to our um use
1934.57s - 1939.61s |  and this is actually one important note when you're using gdb to connect to gdb server you will
1939.61s - 1945.69s |  likely you very likely need to use the multi-architecture version otherwise it will not
1945.69s - 1950.81s |  work unless you happen to be running um little indian mips on your laptop which at least for me
1950.81s - 1959.21s |  i i'm not um but once you get there again we know that an in-app is calling out to the watchdog so
1959.21s - 1964.89s |  we need to overwrite those functions in memory with no ops to be able to have it not call to
1964.89s - 1970.81s |  the watchdog at all is this absolutely necessary maybe not but it will make it a lot cleaner for
1970.81s - 1974.65s |  us if we just don't have to worry about it so that's that's what we did and you can at least
1974.65s - 1978.89s |  in our case we were able to find that that that those locations were where those functions were
1978.89s - 1986.65s |  and uh we just overwrote them sure so i'll hand it over to mark all right uh so yeah we're gonna
1986.65s - 1992.33s |  skip over the the this second demo on just kind of jump right into it so uh with the peer-to-peer
1992.33s - 1997.13s |  discovery what we wanted to do is build a client so we could actually connect directly to our
1997.13s - 2003.85s |  camera uh and uh issue commands to it in order to attack and exploit it right uh so the peer-to-peer
2003.85s - 2010.33s |  servers you can discover them uh using nmap or mass scan uh and delivering that 4-byte payload
2010.33s - 2018.49s |  uh to udp port 607222 um and yeah so very briefly how to establish a peer-to-peer connection
2018.49s - 2025.37s |  uh you need to send it a hello message from the client uh it'll it'll act back uh you need to
2025.37s - 2032.17s |  query for a specific device id if this peer-to-peer server has any idea of it uh those are device
2032.17s - 2036.01s |  ids are also serial numbers they're found on the bottom or on the back of these devices
2036.65s - 2041.37s |  um and hopefully the peer-to-peer server will say that it knows how to access the device
2041.45s - 2049.05s |  uh and then instruct you to punch a hole to a specific ip and port um and then once we have
2049.05s - 2054.97s |  the idea of where we're supposed to go to uh we can query that specific relay server or the device
2054.97s - 2061.93s |  itself uh you know if we can connect to it um it should hopefully say yes uh and then it'll send
2061.93s - 2066.73s |  its packets back and then yeah your peer-to-peer connection is ready uh so yeah there's a good
2066.73s - 2070.09s |  exploit script that we kind of base some of our work on uh definitely check that out when you
2070.09s - 2075.53s |  get a chance um but yeah basically uh in order to prove things out uh we we looked at how the
2075.53s - 2081.21s |  camera panned initially over wireshark uh it was very easy to tell which specific uh packet
2081.21s - 2087.45s |  belonged to a pan operation uh then we trace that back to uh debug debug log messages from the
2087.45s - 2093.93s |  firmware uh and then actually dug into the firmware itself specifically to find where uh
2093.93s - 2099.53s |  where that log uh message is being generated and what function is primarily handling um
2100.25s - 2107.77s |  a lot of the comms and all that so uh very brief uh demo and we're gonna just kind of jump ahead to
2107.77s - 2117.21s |  our more compelling demo of essentially what you can do um with our discovery of how to build a
2117.21s - 2125.53s |  peer-to-peer client so um what we can see here is there is a uh there's an ini file on the camera
2125.53s - 2132.25s |  itself that has the serial number and what we find out is that that's that is the only way that
2132.25s - 2140.65s |  the device knows what its own device id is and so there is actually a command through peer-to-peer
2140.65s - 2147.45s |  that allows us to overwrite the contents of that ini file so what we're trying to do is overwrite
2147.45s - 2154.01s |  uh the the serial number itself to an arbitrary value that's just going to completely brick this
2154.01s - 2159.05s |  machine and make it completely inaccessible to the internet and essentially the user is gonna
2159.05s - 2164.25s |  have to throw it away because there's no way to restore that unless you have access like we do
2164.89s - 2171.29s |  uh and so we send our packets uh and what we can see here is we pulled up the same ini file
2171.29s - 2178.09s |  and now it's full of garbage and we actually have another command we're gonna send to it that's
2178.09s - 2185.13s |  gonna crash and reboot the cam uh and from there uh what we can see is you know things are kind of
2185.13s - 2191.21s |  already going haywire a little bit uh the camera is attempting to reboot right now but what we'll
2191.21s - 2198.81s |  find out pretty shortly here is that it has uh it will attempt to issue requests to AJ Cloud's
2198.81s - 2203.45s |  infrastructure but ultimately it's going to be unsuccessful because it's sending along
2204.25s - 2213.07s |  absolute garbage uh in its curl requests and if we kind of like skip ahead a little bit here
2213.07s - 2223.68s |  this is a press for time um what we can see here yeah if you if you kind of highlight that
2223.68s - 2231.44s |  there's not much there ah yes so yeah yeah that doesn't really look like a good curl request
2231.52s - 2248.44s |  yes okay so very very briefly um what devices are actually affected by this right uh so Wansview
2249.24s - 2254.60s |  every single device associated with Wansview is affected including pet feeders, light bulbs,
2254.60s - 2259.88s |  indoor and outdoor cameras, uh Galayu as well since they're uh you know an affiliate company
2259.88s - 2267.72s |  of Wansview uh and Sonato as well um and then also Felimi is another uh manufacturer that that we
2268.04s - 2274.52s |  were able to experiment with um but ultimately the affected vendors uh it all stems from AJ
2274.52s - 2281.00s |  Cloud it's whoever's running their device firmware on their cloud platform and this
2281.00s - 2286.28s |  ultimately affects seven different vendors possibly even more we weren't able to confirm all of these
2288.70s - 2293.26s |  so just real quick what are some things that the vendors did right they have certificate web-based
2293.26s - 2297.02s |  authentication it was fairly difficult to do some man-in-the-middle attacks from that
2297.02s - 2301.90s |  they have signed and obfuscated APKs another good thing they have a pared down local operating
2301.90s - 2307.10s |  system that at least attempts to be read-only they could have had secure boot but again they have a
2307.10s - 2312.86s |  read-only ish file system so you have to do some work even with physical access to be able to go
2312.86s - 2317.34s |  and attack the machine what they did wrong of course unauthenticated cloud access are the
2317.34s - 2322.86s |  demos that we showed you again did not require any authentication we have significant verbose
2322.86s - 2327.90s |  debugging in the log app the vulnerable peer-to-peer access and again no secure boot despite
2327.90s - 2333.98s |  the SOC supporting it and it's very easy to manipulate when you have physical access so
2333.98s - 2338.22s |  mitigations of course if you want to use them segment them off your network the critical
2338.22s - 2342.30s |  vulnerabilities in the cloud infrastructure will put your data at risk so we would just recommend
2342.30s - 2349.26s |  not using them at all um again restrict the inbound outbound comms um you basically just
2349.26s - 2354.06s |  want to block all of the the different traffic that you have you could also flash it with a
2354.06s - 2359.10s |  different operating system for sake of time i'm going to kind of run through this really fast
2359.10s - 2364.78s |  open ipc i would recommend you checking it out the at least the q5 is directly uh supported so
2364.78s - 2370.94s |  you could flash it with that but it's surprise uh supports a lot of different socs so um we have our
2370.94s - 2377.10s |  tools that we used for this demo we'll be releasing them shortly on github um so and feel free to
2377.10s - 2382.22s |  follow along with the demo um there's some other future research opportunities again apologies
2382.22s - 2387.10s |  for having to run through this real quick but thank you so much for for coming to our talk
2387.10s - 2393.18s |  um special thanks to of course the following here and feel and definitely follow us um on
2393.18s - 2401.02s |  twitter and elastic security labs so again thank you very much defcon