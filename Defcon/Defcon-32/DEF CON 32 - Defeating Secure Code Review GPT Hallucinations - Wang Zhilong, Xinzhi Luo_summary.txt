**Talk Overview**
- Discuss strengths and limitations of **LLMs** for code analysis tasks
- Focus on code search and code clone detection
- Highlight when **LLMs** make mistakes and types of mistakes

**Introduction to Presenters**
- **Julo**: Graduate from Pennsylvania State University, works in security engineering, research interest in deep learning in cyber security
- **April**: Carnegie Mellon University graduate, security engineer, applies infosec knowledge in writing science fiction

**Large Language Models (LLMs)**
- **Definition**: Advanced machine learning models that understand and generate human-like text
- Use **deep learning** and **transformer architectures** to predict probable words
- Perform tasks like question answering, translation, and code analysis

**Software Development Life Cycle (SDLC)**
- **LLMs** assist in various stages by understanding semantics and recognizing patterns
- Tasks include code generation, test case creation, documentation, threat modeling, and identifying vulnerabilities
- Enhance **efficiency** and **quality** throughout the SDLC

**Limitations of LLMs**
- Can make mistakes by stating incorrect information as facts
- Tend to **hallucinate** and make up information based on probability

**Code Analysis Experiment**
- **Objective**: Determine types of code features **LLMs** can learn and process
- **Method**: Mask literal features (user-defined names) and evaluate code analysis tasks
- **Tasks**: Code clone detection and code search

**Anonymization Techniques**
- Three types: function name, variable names, and method invocation name
- Performance evaluation showed significant decrease when names are anonymized

**Root Causes of Misleading Names and Comments**
- **Malicious code committers**: Change names to avoid detection
- **Outdated comments**: Inconsistency with code due to frequent updates
- **Bad coding practice**: Confusing variable names by benign developers

**Challenges in Using LLMs for Code Analysis**
- **Lack of context**: Limited sequence length capability of models
- **Diverse performance** across different programming languages

**Solutions and Recommendations**
- Ad hoc solutions: Improve name conventions, detect inconsistencies
- Suggest changes in **LLM training**: Focus on logic feature prediction tasks

**Contact and Further Reading**
- Refer to ARXIV preprint for more details on the discussed issues and solutions
- Contact information provided for further inquiries