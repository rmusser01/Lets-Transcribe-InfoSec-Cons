{
  "webpage_url": "local:1732052217:073833ec:DEF CON 32 - IoT Village - Anyone can hack IoT - a Beginners Guide to Hacking Your First IoT Device - Andrew Bellini.mp4",
  "title": "DEF CON 32 - IoT Village - Anyone can hack IoT - a Beginners Guide to Hacking Your First IoT Device - Andrew Bellini.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.18s - 5.84s | This text was transcribed using whisper model: large-v2

 Welcome everyone. My name is Andrew Bellini and I am here today to both
5.84s - 11.04s |  convince you and show you that anyone can hack IOT devices. So in the talk
11.04s - 14.28s |  today I'm hoping to both convince you that and I'm also going to walk you
14.28s - 19.08s |  through a methodology that you can go take home, buy a cheap consumer IOT
19.08s - 23.68s |  device and hopefully hack it. Before we get into the actual specifics of that I
23.68s - 28.60s |  actually just want to start with a really quick joke and that joke is the
28.60s - 34.20s |  S in IOT stands for security. Has anyone heard that joke before here? It's one
34.20s - 38.12s |  that I hear, yeah I see some people are hearing it. It's one that I hear tossed
38.12s - 42.64s |  around the cybersecurity community and usually when I hear that joke it's
42.64s - 47.36s |  actually by folks that don't work specifically in IOT or embedded security
47.36s - 52.24s |  but as someone who actually has a background working in industrial IOT
52.24s - 56.58s |  devices and embedded devices I won't say I'm not salty about it I'll actually put
56.58s - 63.30s |  my hand up and be the first to say that it is a well-deserved joke. So the thing
63.30s - 66.82s |  about that joke is and we can all you know have a laugh at IOT devices and
66.82s - 71.46s |  their lack of security but the reality is if you you know check out and look
71.46s - 75.90s |  at how many estimates for IOT devices there are connected in the world right
75.90s - 80.14s |  now you'll see greater than 15 billion you know estimates that's almost two per
80.14s - 86.18s |  person of IOT devices and in addition to that we're expecting there to be a big
86.22s - 90.14s |  surge of IOT devices because of AI and machine learning how they're going to be
90.14s - 94.82s |  used for edge devices and it's estimated looking at the projections there could
94.82s - 101.14s |  be 30 million by or 30 billion sorry by the end of the decade so that is a lot
101.14s - 105.02s |  of things to secure and these are everywhere so it's not like they're just
105.02s - 109.94s |  in our households from you know smart cameras to even smart toilets these are
109.94s - 114.10s |  also in critical infrastructure they're in our cars they're essentially
114.10s - 120.20s |  everywhere nowadays so one of the things that I kind of thought when I was
120.20s - 124.16s |  starting to get interested in IOT security is there's so many devices and
124.16s - 128.72s |  in addition to that there's this agreed upon kind of thing in the security
128.72s - 133.44s |  community that IOT devices are not secure so I figured there would be a lot
133.44s - 138.56s |  of people doing IOT hacking and the cyber criminals are definitely taking
138.56s - 143.48s |  advantage of this they love finding vulnerabilities in IOT devices and adding
143.48s - 148.04s |  them to their botnets or using them for initial access but my experience was in
148.04s - 151.12s |  the ethical hacking community when I started meeting hackers and things like
151.12s - 155.96s |  that and asking them if they hack IOT devices a lot of times the answer was no
155.96s - 160.20s |  and that was kind of reaffirmed today too I've had a booth here where we've
160.20s - 163.20s |  been doing IOT hacking and I had mostly beginners who had never done it and it
163.20s - 169.20s |  was awesome to teach them that so one of the things that you know I when I ask
169.20s - 173.40s |  people why aren't you doing IOT hacking there's a few misconceptions that I hear
173.40s - 177.84s |  about it and I just want to try and dispel some of those so the very first
177.84s - 182.24s |  one is that it's too expensive so you need to buy expensive gear you need like
182.24s - 186.92s |  you know an oscilloscope or like a microscope or expensive tools to get into
186.92s - 190.72s |  it when you're starting out and this is a reality you're probably going to need
190.72s - 195.60s |  to buy the devices you want to hack on and then addition there was really a
195.60s - 200.32s |  large lack of affordable training when I was looking to learn even you know five
200.32s - 203.96s |  years back it was like five thousand dollars for a course a lot of them were
203.96s - 209.24s |  in person and then the second misconception I hear is that it's very
209.24s - 212.28s |  complicated you need to like have an engineering degree you need to know
212.28s - 217.00s |  about electronics you need about hardware circuits all of that stuff you
217.00s - 220.48s |  need to know about special protocols in addition to just the you know normal
220.48s - 225.76s |  things that you need to know about hacking and in my opinion you know some
225.76s - 228.84s |  of these are true there is some truth to it but I actually think there are ways
228.84s - 234.52s |  that you can actually learn to hack IOT devices commercial IOT devices off the
234.52s - 238.04s |  shelf without spending that much money and there's a lot of great resources to
238.04s - 243.36s |  learn how to do it for free or for very limited amounts of money okay so I've
243.36s - 246.72s |  been chatting for a little bit I just wanted to give a quick intro to who I
246.72s - 252.12s |  am and why I know a little bit about IOT and IOT security so my name again is
252.12s - 257.24s |  Andrew Bellini I go by digital Andrew on the socials my background is actually in
257.36s - 261.60s |  electrical engineering so before I got into cybersecurity I did a lot of work
261.60s - 266.12s |  actually designing embedded devices and industrial IOT devices so that's a
266.12s - 269.72s |  little bit where I learned about it not specifically in security but just
269.72s - 275.12s |  actually you know designing the devices that we use I now work as a content
275.12s - 280.28s |  creator at TCM security so there I am the creator of our IOT hacking course
280.28s - 284.88s |  it's a beginners IOT hacking course and I also created our practical junior IOT
284.92s - 288.72s |  tester certification and if you do want to link up with me you want to copy these
288.72s - 292.60s |  slides you want to see what I'm working on I got lots of free blog resources or
292.60s - 298.65s |  anything like that check out my website so a little bit of motivation for this
298.65s - 303.33s |  talk I have one specific goal and that is to provide you with a methodology
303.33s - 309.29s |  specific tools and knowledge to vine vulnerabilities aka hack in commercial
309.29s - 314.33s |  IOT devices and I have a couple messages here from some of my previous students
314.33s - 317.81s |  just to give you some motivation and also proof that this methodology works
317.81s - 321.57s |  so I had one student he actually just messaged me a couple weeks before Defcon
321.57s - 325.21s |  and I was super excited to see this I didn't know him before but he said I
325.21s - 328.77s |  took I took your course and he had you know chatting with him I he had never
328.77s - 333.33s |  done any IOT hacking he took my suggestion he went and got a cheap smart
333.33s - 337.89s |  camera off Amazon and he actually was able to find three vulnerabilities in it
337.89s - 340.89s |  got in touch with the vendor and he's got three CVS coming so super excited
340.89s - 343.93s |  for him about that and then there's another message this person didn't want
343.93s - 346.89s |  me put their name up but he he took my course as well and then he bought a
346.89s - 351.37s |  cheap router and he found a remote code execution vulnerability in it and I
351.37s - 354.73s |  just was chatting with him about how he could submit that to a CNA because the
354.73s - 360.40s |  vendor didn't want to talk to him about it but how he found a vulnerability so
360.40s - 364.16s |  this chat is for everyone of course if you're here I'm glad you're here if you
364.16s - 369.40s |  are if you're new to IOT or your IOT curious as I say this talk is
369.40s - 374.00s |  specifically catered to people who are new or just curious about IOT and it's
374.00s - 379.48s |  going to assume you have limited or no experience with IOT or embedded systems
379.48s - 383.48s |  just a really quick agenda of what we're in for today we'll start with some
383.48s - 387.64s |  really quickly safety and and legal considerations we'll then talk about
387.64s - 391.88s |  what device you should actually pick if you're getting started on so if you want
391.88s - 394.60s |  to go home and buy something off Amazon what you should look for if you're gonna
394.60s - 398.64s |  go dumpster diving for example we'll then talk about how you can build out an
398.64s - 401.92s |  affordable toolkit and what stuff you should buy or what's up you should avoid
401.92s - 406.00s |  and how to not you know break the bank doing this then I'm going to take a look
406.00s - 410.24s |  at locating using and abusing hardware interfaces we'll then talk about
410.24s - 413.80s |  acquiring firmware and then after that we get our hands on the firmware we'll
413.80s - 417.88s |  talk about analyzing and reversing engineering it so just a really quick
417.88s - 421.00s |  staying out of trouble this is kind of like the golden rule of ethical hacking
421.00s - 425.12s |  in my opinion only test devices that you're authorized to and then this is my
425.12s - 428.96s |  personal suggestion since I am giving a talk about potentially how to go out and
428.96s - 433.72s |  find CVs and IOT devices but I always recommend being ethical and following
433.72s - 438.84s |  responsible disclosure if you do find things unfortunately for a lot of IOT
438.84s - 442.32s |  devices they don't have bug bounty programs but they do have responsible
442.32s - 446.16s |  disclosure so you can't at least report it get some credit and get a CV that way
446.16s - 449.92s |  or something so last one's up to you but you know I would implore you to go that
449.92s - 454.36s |  route if you find something okay so I did want to just give a little chat
454.36s - 458.06s |  about staying safe because sometimes I give workshops or things like that and I
458.06s - 461.42s |  teach people about IOT and hardware hacking and they're a little bit nervous
461.42s - 465.78s |  about opening up a device and working on the hardware of it so the first thing I
465.78s - 471.86s |  will say is IOT hacking is in itself very inherently safe so hardware hacking
471.86s - 476.74s |  on commercial IOT devices and that's really if you just only follow one basic
476.74s - 480.02s |  rule you'll be fine and that rule is that you should never work on anything
480.02s - 483.26s |  high voltage so when you open up the device you're working on it most of
483.26s - 487.30s |  these devices are going to be like 12 volts 9 volts 3.3 volts 5 volts
487.30s - 491.18s |  operating voltage all of those are for the most part safe to work on you
491.18s - 494.42s |  probably won't even feel it if you touch it the voltage from our walls and our
494.42s - 498.02s |  house and stuff that stuff can really hurt you so just stay away from that
498.02s - 502.98s |  stuff just work inside your device you'll be fine never use any damage or
502.98s - 506.30s |  modified power supplies because that's how we can accidentally introduce those
506.30s - 510.34s |  higher voltages into the device damage our device ourselves and then this last
510.34s - 514.58s |  one is more about keeping your devices safe but when I give workshops I see
514.58s - 518.18s |  people doing this all the time this is the most common way to brick or fry
518.18s - 521.72s |  your device but if you have it open and you're working on it then that's not how
521.72s - 525.82s |  the manufacturer intended you to be using it and if you're plugging in clips
525.82s - 529.90s |  or wires or things like that if you have it powered on it's easy to bridge
529.90s - 533.38s |  something and do a short circuit and that's the easiest way that I see people
533.38s - 536.34s |  who are learning fry their device so it's just really good practice if
536.34s - 540.94s |  you're not using it turn it off plug anything in you need then turn it on
540.94s - 543.62s |  when you're done and if you need to unclip it you power it off then you work
543.70s - 547.06s |  on it and it's easy to forget I'm always walking around my workshops warning
547.06s - 550.98s |  people of that last thing I just want to give a really quick shout out to because
550.98s - 555.26s |  people have gotten seriously injured from this or hurt doing this you aren't
555.26s - 557.90s |  really gonna counter these and IOT devices but if you take your hardware
557.90s - 560.58s |  hacking skills that you learn from this to other things I have larger power
560.58s - 564.58s |  supplies is watch out for large capacitors because these can actually
564.58s - 568.90s |  pack a punch as far as the amount of energy they store and also some people
568.90s - 572.86s |  don't realize but when you unplug these devices or capacitors from the wall they
572.86s - 575.94s |  can hold their charge for quite a while so you may think you're safe but they
575.94s - 580.18s |  can zap you this is not common in pretty much all IOT devices but I just say this
580.18s - 583.34s |  because a lot of people have this misconception if it's unplugged it's
583.34s - 588.26s |  safe but if there's large capacitors that's not the case okay so now that
588.26s - 592.02s |  we've got all of the preamble and everything out of the way we can get on
592.02s - 596.18s |  to you know kind of my methodology for how you can go home get a cheap consumer
596.18s - 600.06s |  IOT device and hack it so the first thing to do is actually to pick the
600.06s - 605.34s |  right target if you're learning so I always suggest the cheaper the better
605.34s - 608.78s |  when you're starting to learn and there's a couple reasons for this the
608.78s - 612.38s |  first one is and this isn't always the case but usually you get what you pay
612.38s - 617.78s |  for in terms of security and also hardware security so on cheaper devices
617.78s - 622.10s |  you generally won't run into limitations on the hardware where the debug ports
622.10s - 626.78s |  are locked down or the firmware is encrypted and then the second one which
626.78s - 630.42s |  kind of goes with my second point here is I never hack anything that I don't
630.42s - 634.70s |  mind bricking or destroying and if it's a cheap device then you're not gonna be
634.70s - 638.50s |  as concerned or upset if you fry it and you know I'll raise my hand and say I
638.50s - 642.18s |  still you know fry or brick devices it happens I've been hardware hacking for a
642.18s - 646.86s |  long time it still happens and if you're a follower of Joe Grand for example
646.86s - 650.06s |  probably one of the most famous hardware hackers he gave a talk a few DEF CONs
650.06s - 654.54s |  ago he literally he literally just talked about all of the devices that he
654.54s - 658.50s |  had bricked over the years so it happens to all of us if you're looking
658.50s - 662.02s |  for a specific type of device my suggestion is to go with cheap routers
662.02s - 665.82s |  or cheap smart cameras they're great to start on they usually have
665.82s - 668.90s |  vulnerabilities that you can find and also more importantly they almost
668.90s - 674.58s |  always run embedded Linux which in my opinion is a much easier type of device
674.58s - 678.10s |  to hack on when you're learning than something with a microcontroller like
678.10s - 682.22s |  ESP32 or STM32 that's going to be running RTOS those are a little bit
682.22s - 685.54s |  more advanced or harder when you're getting started and I will give another
685.54s - 690.54s |  shout out to a dumpster diving so on my on this picture here this is one of many
690.54s - 694.46s |  bins I have at my house are just full of old devices and I just kind of put it
694.46s - 698.06s |  out into the universe like my friends and family know that I'm this dude that
698.06s - 701.86s |  likes hacking weird electronic stuff so if they're throwing away their router or
701.86s - 706.50s |  camera then they ask me or I find them in like disposal bins or whatever I
706.50s - 709.54s |  can't resist so it's a great way to learn though because usually these
709.54s - 712.54s |  devices work fine people are just they're obsolete or whatever but they
712.54s - 717.14s |  don't have to worry about breaking them or anything okay so once we've got a
717.14s - 720.34s |  device hopefully it's a smart camera or a router or something we've got to
720.34s - 725.46s |  acquire a little bit of gear to go along with this methodology so I've got a
725.46s - 727.94s |  couple of rules for that the first one is we don't want to break the bank when
727.94s - 730.98s |  we're starting out you might not know if you want to do it or not we don't want
730.98s - 737.16s |  this to be a limitation I also generally finds that gear for IoT hacking follows
737.16s - 741.30s |  the 80-20 rule so if you're not familiar with this with this rule it's
741.30s - 747.12s |  kind of the idea that for any given inputs that 20% of the inputs are
747.12s - 750.96s |  responsible actually for 80% of the outputs and I find that to be true with
750.96s - 754.32s |  IoT hacking tools you need to get a few of them and they'll do most of the
754.32s - 758.12s |  heavy lifting and then you'll need to acquire the more specialized expensive
758.12s - 764.00s |  tools for specific tasks sure at this point everyone's seen a lot of the meme
764.00s - 767.84s |  of this Turkish shooter guy and I just wanted to demonstrate this I was kind of
767.84s - 771.52s |  poking fun last week and like the IoT and hardware hacking community about how
771.52s - 774.88s |  we all like to acquire gear and I'll be the first one to say like I'm addicted
774.88s - 778.64s |  to buying gear I've got all the stuff in the left-hand side of this picture but
778.64s - 781.20s |  really when you're starting out with cheaper devices you can probably get away
781.20s - 788.30s |  with literally two things and spend $10 okay so the first piece of equipment
788.30s - 791.62s |  that you should get if you don't have one already is a digital multimeter this
791.62s - 795.38s |  is like the Swiss RB knife of electronics it can do things like
795.38s - 800.58s |  measuring voltage current resistance do continuity testing mostly we will use
800.58s - 804.98s |  this for verifying voltage levels and also we can actually use it to find a
804.98s - 808.94s |  lot of common debug ports without special equipment we can actually you
808.94s - 813.86s |  know ID those and then do further investigation into those ports you can
813.86s - 818.18s |  literally spend $5 on this this yellow one on here that's $5 I got this off
818.18s - 822.42s |  Aliexpress I've used it in my workshops before I mean I wouldn't use it for
822.42s - 826.02s |  like commercial QA testing or anything but as far as learning IoT hacking
826.02s - 830.38s |  getting started it's not bad I have five to a hundred dollars listed here I
830.38s - 833.46s |  wouldn't recommend spending more than a hundred dollars but you can but your
833.46s - 838.92s |  five dollar one honestly it's not that bad the second piece of equipment you'll
838.92s - 845.32s |  need is a USB to X adapter and by X I mean the protocols that our IoT devices
845.32s - 848.84s |  are going to be talking at the hardware level so these are where those like
848.84s - 854.16s |  debug and test ports come into play the most common ones are UART SPI or so
854.16s - 860.54s |  you'll sometimes you're referred to a SPI I2C JTAG and SWD the most common one
860.54s - 864.64s |  you'll actually see and what we're gonna be focusing on is UART so you can just
864.64s - 868.60s |  go and get this $2 one and that will work for this methodology you get these
868.60s - 872.68s |  off Aliexpress Amazon sometimes come like a pack of four for $10 you get them
872.68s - 877.24s |  $2.50 so if you just want to go cheap route you just buy this $2 one you'll be
877.24s - 881.48s |  fine if you kind of want a future proof and you actually want a tool to work
881.48s - 885.56s |  into I always recommend the Tigard board I really like their board and they have
885.56s - 888.88s |  good training that's free that goes along with how to use it and it's gonna
888.88s - 891.96s |  talk all of these common protocols actually so it'll do UART for you and
891.96s - 897.12s |  then when you know if you need to jump up to something JTAG SWD or I2C
897.12s - 901.48s |  then you can use this as well okay so the last this is the last thing that's
901.48s - 905.02s |  gonna be in our toolkit is some sort of flash programmer you can get these in
905.02s - 909.94s |  all varying different levels but there's a cheap one for $10 and we will
909.94s - 914.34s |  use these to mainly extract the firmware off the device if we can't get it from
914.34s - 919.86s |  other methods so most of the cheap IOT devices I see and why I'm suggesting
919.86s - 925.30s |  these routers and cameras they all use the same like standard SPI flash chip
925.30s - 929.78s |  8-pin so you can use a flash programmer generic one like this to read it if you
929.78s - 932.90s |  did get the Tigard you don't even need to get one of these you can just use the
932.90s - 936.90s |  the SPI connection on that and honestly you might not even need this so it might
936.90s - 940.02s |  mean before you were seeing us we got the firmware from the vendor then you
940.02s - 944.93s |  don't even need a flash programmer you can just download it all right so we got
944.93s - 948.05s |  all our stuff we picked a device we've got our gear we're ready to start
948.05s - 952.17s |  hacking the first thing we're gonna take a look at is abusing debug ports and
952.17s - 958.25s |  hardware interfaces so for the most part IOT and embedded devices they don't have
958.25s - 962.49s |  any keyboard or mouse input they don't have a monitor they just kind of do
962.49s - 965.85s |  something and if they're not doing that thing right then when you're designing
965.85s - 971.33s |  it and as a designer your debug and test interfaces these are like your only link
971.33s - 974.81s |  to that device to see what's going on what's going wrong what's happening
974.81s - 980.21s |  making sure things are going properly so what happens in R&D of the cheap devices
980.21s - 983.89s |  a lot of times is they will use these throughout the R&D design process we'll
983.89s - 986.65s |  get to the end device will be ready to go and they don't want to do another
986.65s - 990.81s |  revision of hardware and things like that or maybe firmware so they'll just
990.81s - 995.25s |  leave these on the board open like they were when they were testing in addition
995.25s - 998.37s |  a lot of times they're actually used in production devices for things like
998.37s - 1003.45s |  debugging doing logging QA testing and possibly even flashing memory or things
1003.45s - 1008.81s |  like that the most two common ones I see are UART and JTAG we're just going to be
1008.81s - 1014.11s |  focusing on UART because on the majority of cheap consumer IOT devices that's the
1014.11s - 1020.09s |  most present one and I almost always see UART that you can use and abuse so this
1020.09s - 1024.05s |  talk is like the no BS no filler version of it so I'm not even going to
1024.05s - 1027.21s |  really teach you about what the UART protocol is only the things that you
1027.21s - 1031.41s |  need to know to hack it it stands for universal asynchronous receiver
1031.41s - 1034.89s |  transmitter that just basically means there's no clock and there's two lines
1034.89s - 1039.89s |  one one for receiving and one for transmitting on it's a very old and
1039.89s - 1043.61s |  common protocol for electrical communication it's a little bit more
1043.61s - 1047.65s |  complicated than this but this the the basics of it is it literally just talks
1047.89s - 1053.49s |  binary with voltage so it sends plus 3.3 volts or 5 volts for one zero volts for
1053.49s - 1057.45s |  a zero and I got a little picture here of a capture if you're curious but
1057.45s - 1062.01s |  that's literally all you need to know about it for the as far as hacking it on
1062.01s - 1067.81s |  it so getting connection to a device as you are if you're doing like a pen test
1067.81s - 1070.93s |  or something that would be a finding but for the most part the manufacturers
1070.93s - 1076.17s |  don't actually care specifically about that however actually getting access to
1076.17s - 1081.17s |  the UART will make it a lot easier for us to be able to find vulnerabilities
1081.17s - 1084.69s |  like something that could be exploited from the web it's gonna make us a lot
1084.69s - 1089.49s |  easier to find those and the reason for that is we can view the devices logging
1089.49s - 1093.73s |  so that's probably the most important thing in embedded devices there's
1093.73s - 1098.21s |  usually not a lot of storage and they'll maybe be almost no actual writable
1098.21s - 1101.73s |  storage that we have so there's no place to store logs so instead we're just
1101.85s - 1107.25s |  going to dump that all out to UART in addition if we are encountering embedded
1107.25s - 1111.01s |  Linux then usually we can actually use the UART connection to get a shell into
1111.01s - 1115.37s |  the device we can do further enumeration that way sometimes we can access the
1115.37s - 1118.45s |  bootloader which is responsible for it actually brings up the device and if we
1118.45s - 1121.45s |  can get into the bootloader we can do things like dump the firmware see
1121.45s - 1125.29s |  environment variables and so yeah getting you art is a great thing
1125.29s - 1129.45s |  especially for the logging you can see in the picture here I'm just looking at
1129.45s - 1132.09s |  some of the boot logs and there's actually quite a bit of detailed
1132.09s - 1139.20s |  versioning information that we can see already so once you start using you art
1139.20s - 1142.56s |  and this happens to me like when I see a board it's very very easy to start
1142.56s - 1147.00s |  picking them out like whenever I see a PCB now just subconsciously I'm like oh
1147.00s - 1151.72s |  that's you are I can see it so I start looking for them and once you start
1151.72s - 1156.08s |  noticing a few characteristics you'll be able to ID them so generally for full
1156.08s - 1160.40s |  duplex you art so this means that you got two devices your IOT device and then
1160.40s - 1163.96s |  maybe your computer that has your adapter they're talking to they're both
1163.96s - 1167.96s |  talking to each other that means there's going to be a transmit line which you'll
1167.96s - 1172.28s |  see abbreviated always as TX or C blind abbreviated as RX and a ground
1172.28s - 1176.16s |  sometimes you'll see a BCC and I'm just calling that out because if you see four
1176.16s - 1179.92s |  pins for our hacking purposes you just ignore the BCC we don't we don't even
1179.92s - 1185.24s |  need to use it so unfortunately they won't always make it as easy like in
1185.24s - 1189.52s |  this example here they've gone so nice as to label them for us and all the
1189.52s - 1192.88s |  hardware hackers but they won't always make it this easy sometimes you'll have
1192.88s - 1198.16s |  test pads like the ones here on this black circle PCB this is a camera that
1198.16s - 1202.28s |  I was hacking and you'll notice there's only two pins together but seeing those
1202.28s - 1205.08s |  two pins together and close to the processor I thought that they might be
1205.08s - 1208.92s |  you art and then I just picked up a ground elsewhere and then we got another
1208.92s - 1213.20s |  router here where they've got a connector here for you art and it's not
1213.20s - 1216.16s |  labeled but you know as soon as you see those pins together like that it's a
1216.16s - 1220.80s |  good indication that it's some sort of test interface so this is where we're
1220.80s - 1225.24s |  gonna pull out our DMM and we can use like our $5 DMM to actually pick up you
1225.24s - 1228.96s |  art so what we're going to do is we're going to take advantage of the fact that
1228.96s - 1233.60s |  you art is extremely chatty on boot up so if you've ever booted up like your
1233.60s - 1237.00s |  Linux computer even or some Windows ones and you see all the stuff come and
1237.00s - 1241.24s |  scrolling through the screen telling you all those boot log information well
1241.24s - 1244.80s |  embedded Linux is the same and that's going to happen on the you art as well
1244.80s - 1248.24s |  and we can take advantage of that so what we can do is use our multimeter
1248.24s - 1252.84s |  put it on the volts DC setting and measure our the pins of interest so if
1252.84s - 1257.52s |  we think there might be a you are pin we'll just measure that from that from
1257.52s - 1261.16s |  that connector whatever it is to ground and then after we're doing that we'll
1261.16s - 1264.04s |  power on the device so I always like to have a power bar in my workstation that
1264.04s - 1267.96s |  has a button it makes it a lot easier and what you're looking for is a
1267.96s - 1271.84s |  fluctuating voltage after that boot up you'll usually be like a couple seconds
1271.84s - 1276.28s |  after take a second for like the initial boot loader to load things up
1276.28s - 1280.40s |  and then you'll start to see a bunch of voltage hopping up and down you won't
1280.40s - 1284.80s |  see it go like 0 to 3.3 volts or 0 to 5 volts because it's going to be too fast
1284.80s - 1288.52s |  for our multimeter to read that so instead what you'll see is more of an
1288.52s - 1292.52s |  average voltage kind of moving around a lot of times these devices operate at
1292.52s - 1296.92s |  3.3 volts so you'll see like 1.5 to 2.7 volts and you'll see that moving up and
1296.92s - 1301.08s |  down so if you see that that's a really indication I should look further at this
1301.08s - 1304.76s |  port it's probably transmitting something if you just power on the
1304.76s - 1308.16s |  device and do this you probably won't see anything because it's not going to
1308.16s - 1311.72s |  be as chatty it'll maybe just send a couple messages and it'll be really hard
1311.72s - 1316.20s |  to even see those blips of voltage so you got to do it right at startup okay
1316.20s - 1319.56s |  so we found this port we've identified it the next thing we're going to do is
1319.56s - 1323.20s |  we can just it's as easy as we can just plug it into our computer basically we
1323.20s - 1327.88s |  use our UART to USB bridge adapter plug that into our computer the only thing
1327.88s - 1331.88s |  you need to keep in mind for it is it's really easy to put like names together
1331.88s - 1336.28s |  so you want to put TX to TX but the way that it works is one device is TX goes
1336.28s - 1339.96s |  to the other ones RX and vice versa so you just need to cross those lines
1339.96s - 1345.04s |  grounds go to ground ignore the VCC you're all good so just for reference I
1345.04s - 1347.64s |  got a little picture here if you're looking at the slides later but that's
1347.64s - 1352.44s |  the pin out that you would usually take so unfortunately sometimes they won't
1352.44s - 1354.96s |  make it that easy they won't put the header pin on there won't be through
1355.00s - 1359.40s |  hole connectors so what do we do in that scenario the best option is to solder so
1359.40s - 1363.36s |  hopefully you're hanging out at the soldering skill station but if not
1363.36s - 1367.40s |  there's there's ways we can get around that so if you are lucky enough to have
1367.40s - 1371.16s |  through-hole connectors like we did I showed in the one router the best way to
1371.16s - 1375.36s |  do that is to actually attach some header pins to it and if you don't have
1375.36s - 1379.32s |  those there's lots of clips clamps adapters and things like that where you
1379.32s - 1383.36s |  can buy more specific to your device Google's your friend here and they're
1383.36s - 1386.60s |  really not that expensive so just go out and take a look at your different
1386.60s - 1390.12s |  options and like just to show you if you don't want to do soldering here's two
1390.12s - 1393.88s |  things I've done in a pinch and shown in classes where you can get away with
1393.88s - 1397.36s |  generally with through-hole connectors they'll actually be like connectivity
1397.36s - 1401.96s |  that goes through the actual pin so if you put a little pressure on what you're
1401.96s - 1405.24s |  putting through it so kind of lean to the left or right that'll be enough to
1405.24s - 1409.36s |  get good contact I did it here with a twist tie or that's some some sticky
1409.36s - 1412.72s |  tack and obviously soldering is your best option but I don't want that to be
1412.72s - 1416.28s |  a barrier to you know hacking IOT if you don't have a soldering iron or to
1416.28s - 1421.08s |  solder so this can be done in a pinch if you're running on a Linux host I mostly
1421.08s - 1424.36s |  just included these commands here for people that are going to be taking these
1424.36s - 1428.80s |  slides afterwards but all we need to do to actually get a shell or connect to
1428.80s - 1433.72s |  the device is we need to just check and see what the device ID is for our USB
1433.72s - 1437.68s |  UART adapter so we can do that with this command and you'll get the device ID
1437.68s - 1442.60s |  back it'll most likely be TTY USB 0 but it could be 1 2 3 and then we can
1442.60s - 1447.04s |  just launch a terminal emulator and use that to get a UART connection when
1447.04s - 1450.28s |  you're starting out I suggest using screen because it's the easiest one
1450.28s - 1454.16s |  there's lots of other ones Pico comm minicom putty if you're on Windows
1454.16s - 1458.00s |  they're all fine but screen in my opinion is the easiest one it requires
1458.00s - 1463.36s |  very little setup the only two arguments you need is that USB device ID that I
1463.36s - 1466.64s |  showed before and then you'll notice the last thing here I've got a number
1466.64s - 1470.80s |  hundred and fifteen thousand two hundred that is the baud rate or speed that the
1470.80s - 1476.40s |  UART is communicating at and since this is no BS no filler talk I'm not even
1476.40s - 1480.96s |  explain what baud rate is on 99% of IOT devices I see it is one hundred and
1480.96s - 1484.12s |  fifteen thousand two hundred so you can just use that if it's not it's probably
1484.12s - 1487.16s |  ninety six hundred and if it's not that you're probably doing something wrong
1487.16s - 1492.64s |  there is also a very common list on Wikipedia you can look out of other ones
1492.64s - 1498.42s |  but it's pretty much going to be one one five two zero zero okay so if
1498.42s - 1500.82s |  everything worked with your connection you got screen running your power on
1500.82s - 1505.26s |  device you should start to actually now see those boot logs that we saw with our
1505.26s - 1510.22s |  multimeter actually start streaming through and do not discount the
1510.22s - 1513.58s |  importance of actually reading through those boot logs and seeing what they are
1513.58s - 1517.02s |  telling you they're gonna give you lots of versioning information that could be
1517.02s - 1520.74s |  enough to even find a vulnerability on its own seeing that it's using you know
1520.74s - 1524.54s |  underlying libraries or things like that that are outdated and someone's already
1524.54s - 1527.74s |  done the legwork and found a vulnerability in those will also give
1527.74s - 1531.10s |  you details in this one for example near the bottom showing all the
1531.10s - 1536.30s |  partition details about the flash EEPROM that's on it and that's gonna make it a
1536.30s - 1541.14s |  lot easier for us later to identify the different parts of the firmware after
1541.14s - 1543.90s |  the boot loader goes through and you know it's done streaming through the
1543.90s - 1547.74s |  text you can hit enter and a lot of times on cheap IOT devices that can be
1547.74s - 1550.50s |  enough to just get a shell they don't lock them down with a password or
1550.50s - 1554.26s |  anything so then we'll be in a root shell generally an embedded Linux
1554.26s - 1557.70s |  everything just runs as root there's no like least privileges or anything you'll
1557.70s - 1561.90s |  just get a root shell again like in the manufacturers are not as concerned about
1561.90s - 1565.82s |  this as being a specific vulnerability so I wouldn't recommend reporting this
1565.82s - 1568.62s |  or anything because they already know about it they just don't necessarily
1568.62s - 1573.18s |  care but we're gonna abuse that to find something they do care about the
1573.18s - 1576.10s |  majority of the routers and smart cameras they're running embedded Linux
1576.10s - 1580.58s |  so that's where this is gonna make it easier to get that shell okay so I
1580.58s - 1584.22s |  always mention this because you know in cybersecurity I feel like we all want to
1584.22s - 1587.86s |  get a shell everyone loves getting shells and sometimes that's like the end
1587.86s - 1591.74s |  all of what we're doing if we're doing like web app or you know other different
1591.74s - 1596.82s |  types of network pen testing but for us actually connecting to the UART it's
1596.82s - 1599.82s |  more important for us to see the logging that's actually what we're more
1599.82s - 1604.02s |  we're more interested in or at least I am so if you don't get a shell that's
1604.02s - 1608.50s |  okay if you're not able to get in that's fine so sometimes there'll be a password
1608.50s - 1612.46s |  if there is there's ways around that we can maybe get the hash from the firmware
1612.46s - 1616.30s |  or Google it but even if you can't get a shell that's okay the way that you are
1616.30s - 1619.62s |  it works is like you don't need to authenticate or log in it's a very like
1619.62s - 1623.94s |  low-level protocol it's just going to stream those logging bits out to you no
1623.94s - 1627.26s |  matter what you don't need to log in or anything like that you can still see the
1627.26s - 1632.98s |  logging unless the device like syncs or tanks the UART which most don't so I
1632.98s - 1635.62s |  got just got some pictures here showing some interesting things I see in logs
1635.62s - 1639.66s |  one of them here is just showing the location of RSA keys as it's setting up
1639.66s - 1644.66s |  DropBear it's common SSH protocol and then the other two ones are interesting
1644.66s - 1648.58s |  logging details about when I was actually interacting with the device and
1648.58s - 1653.42s |  showing what could potentially be command injection or one is just showing
1653.42s - 1658.98s |  how it sets up and saves the pre-shared keys and SSIDs for a router so if you
1658.98s - 1662.14s |  are lucky enough to get a shell I mean I was saying it's not as important but it
1662.14s - 1666.94s |  is always nice to get one we'll be good hackers then and do our enumeration so
1666.94s - 1671.42s |  start poking around best places to actually start looking are the Etsy
1671.42s - 1674.18s |  folders and the bar folders those are probably some of the places where you'll
1674.18s - 1678.98s |  find like interesting configuration details and things like that some some
1678.98s - 1682.82s |  really quick wins are things I look for is their passwords hard-coded keys is
1682.82s - 1686.94s |  their endpoints that maybe they don't want to expose or that we could see
1686.94s - 1690.26s |  that's reaching out into the back end and of course a lot of times you'll have
1690.26s - 1693.82s |  like things like PS or net stat so you can see what processes are running and
1693.82s - 1696.50s |  what network connections are going out so that can give us a little bit of a
1696.50s - 1704.29s |  lay of the land around the device okay so at this point you know we've got our
1704.29s - 1707.01s |  device we've got our equipment we use our equipment to find our debug
1707.01s - 1711.65s |  interface what's the next step that's going to be to get our hands on the
1711.65s - 1715.81s |  firmware and in my opinion this is where my favorite part starts and where we can
1715.81s - 1720.17s |  start having some fun and find some vulnerabilities if you're not familiar
1720.17s - 1723.81s |  with what firmware is this essentially the software that is running on the
1723.81s - 1727.65s |  device and kind of call it firmware and differentiate it from software and that
1727.65s - 1731.41s |  it's kind of designed specifically for that device so that that device can
1731.41s - 1734.89s |  fulfill one function it's not really changing you're not gonna like install
1734.89s - 1738.33s |  any software or anything on your router or smart camera you just get that one
1738.33s - 1743.33s |  piece of firmware in embedded Linux that we're talking about today the firmware
1743.33s - 1747.81s |  is generally comprised of four main parts we've got the bootloader that's
1747.81s - 1751.01s |  responsible for actually like bringing up the device on boot up loading up the
1751.01s - 1754.33s |  kernel we've got then got the Linux kernel itself that's going to be one
1754.33s - 1758.89s |  partition we've then got the root file system so that's actually where all of
1758.89s - 1762.69s |  the interesting stuff is that make the device do what it's gonna do all of the
1762.69s - 1768.77s |  binary scripts configuration documents all that stuff is going to be in the
1768.77s - 1773.13s |  root file system well then possibly also have some sort of partition where we can
1773.13s - 1777.07s |  store a little bit of writable data so we'll generally want to hunt for this as
1777.07s - 1780.65s |  well because that's where you're gonna find things like passwords that users
1780.65s - 1784.09s |  configured or like the maybe pre-shared key for their wireless or all that kind
1784.09s - 1789.49s |  of stuff so a lot of times you'll see that at the end of the flash memory the
1789.49s - 1792.89s |  root file system has the most goodies though by far so that's all we're going
1792.89s - 1796.73s |  to focus on today you can find vulnerabilities in the other places in
1796.73s - 1799.45s |  the bootloader and kernel but when you're starting out we'll just look at
1799.45s - 1802.77s |  the root file system and its contents and that's honestly where you'll find
1802.77s - 1808.57s |  the majority of vulnerabilities anyway so there's three main ways that I
1808.57s - 1811.57s |  usually get my hands on the firmware there are a few other ones that are more
1811.57s - 1818.69s |  complicated but the easiest one is a lot of cheap IOT manufacturers they just
1818.69s - 1823.33s |  put their firmware available on the Internet from the vendor to download the
1823.33s - 1826.53s |  reason for this is that unfortunately they don't put any type of update
1826.53s - 1831.17s |  mechanisms into their device so they kind of pass that responsibility down
1831.17s - 1836.01s |  on to the end-users if there is security patching or things like that to go and
1836.01s - 1840.17s |  hey make sure you go to our website check it every day download the firmware
1840.17s - 1843.45s |  and then put it on the device yourself which I think unfortunately I would say
1843.45s - 1847.97s |  like 99% of users don't do but to fulfill that obligation they put the
1847.97s - 1852.33s |  firmware on their website on the support page and you can just Google and find it
1852.33s - 1855.61s |  and I love that because it's super easy to get our hands on the firmware and if
1855.61s - 1858.85s |  you do that then you can even do IOT hacking for free you don't even need any
1858.85s - 1863.29s |  gear you just download the firmware the second way is if you did get a UART
1863.29s - 1868.45s |  shell I would say like 90% of the devices I see they have TFTP on them so
1868.45s - 1872.61s |  that's Trivial File Transfer Protocol this is there because it's actually
1872.61s - 1876.97s |  baked into the functionality of a lot of those update mechanisms so if you have
1876.97s - 1880.41s |  like a web app or a browser or something and allows you to do a firmware update
1880.41s - 1884.81s |  through that in the back end it uses TFTP but we can you know abuse that or
1884.81s - 1889.45s |  borrow it to set up our own TFTP server and then we can just bring back files of
1889.45s - 1892.53s |  interest or if we're patient enough we can just bring the whole root file system
1892.53s - 1895.85s |  back to our device over that and then we don't even really need to worry about
1895.85s - 1899.69s |  dumping the firmware and then the last one which sometimes you'll need to do is
1899.69s - 1905.85s |  you'll just dump the firmware off of the device so in these cheap commercial IOT
1905.85s - 1911.25s |  devices I'm suggesting getting starting on they almost always use a 8-pin SPI
1911.25s - 1917.85s |  flash chip and these always follow the same pin out and we can use our flash
1917.85s - 1921.65s |  draw or our flash reader that I suggested getting or the TiGuard to
1921.65s - 1924.29s |  really do a really quick read of these and we don't even need to usually take
1924.29s - 1929.85s |  them off of the device you can just read them in device in circuit and the
1929.85s - 1933.53s |  way to do that is I generally recommend using flash ROMs free open source
1933.53s - 1938.49s |  software that's great for interacting with flash chips so again command here
1938.49s - 1942.05s |  for reference if you're just wanting to follow along later but if you get a CH341
1942.05s - 1946.53s |  a programmer which is that $10 one that I recommended from the
1946.53s - 1950.75s |  start then you can just run this command after you put the clip on and it's as
1950.75s - 1954.87s |  easy as that there's also other test clips you can do to use it but it's
1954.87s - 1958.31s |  pretty straightforward it lists the different pins that match the pins on
1958.31s - 1962.91s |  the chip you just Google standard SPI 8-pin flash and you'll see all of the
1962.91s - 1967.07s |  pins there's six of them that you need to use out of the 8 pins just a heads up
1967.07s - 1976.39s |  so if you did get the TiGuard you can do this with the TiGuard okay so we've all
1976.39s - 1980.59s |  this basically everything we've been doing up until this point now has been
1980.59s - 1985.87s |  to set us up for successful reverse engineering of the internals of the
1985.87s - 1992.23s |  device to figure out what's going on and to hopefully find some vulnerabilities
1992.23s - 1996.31s |  so that's what we're going to be taking a look at now and so one thing you can
1996.31s - 2000.55s |  do too if you don't want to spend any money is you just can go and find the
2000.55s - 2005.51s |  firmware for download and then you can do the majority of these steps as well
2005.51s - 2009.87s |  and then you haven't even spent a dollar or you could also try and emulate the
2009.91s - 2012.59s |  firmware as well it's not something we're going into today but I just want
2012.59s - 2015.71s |  to give that a call out like if you can't get your hands on a device you
2015.71s - 2018.79s |  don't want to spend any money you just kind of want to get started you can do
2018.79s - 2022.95s |  it for free just get your firmware try and reverse engineer it and emulation is
2022.95s - 2029.18s |  your friend okay so the first thing we do once we get our hands on the firmware
2029.18s - 2032.98s |  is it's generally going to be in like a kind of like a blob format so generally
2032.98s - 2036.70s |  it's going to be in like a dot bin file or a binary file or maybe a hex file
2036.70s - 2041.66s |  possibly a dot IMG but it's not going to be probably readable for us at that
2041.66s - 2045.74s |  point so we need to go ahead and actually unpack that firmware into the
2045.74s - 2049.22s |  different sections and and files that are actually in there that we'll be able
2049.22s - 2052.82s |  to interact with better so the very first thing we're gonna do is cross our
2052.82s - 2057.14s |  fingers that it's not encrypted so again this is why I'm recommending when you're
2057.14s - 2060.98s |  starting out go for those cheaper devices because most likely they're not
2060.98s - 2065.34s |  going to use encryption for their firmware because it costs money both in
2065.34s - 2069.34s |  software development and R&D but also you're most likely going to need to
2069.34s - 2073.98s |  spend a little bit more on hardware to actually rely on that to handle that
2073.98s - 2079.26s |  decryption at the startup if you do come across encrypted firmware and you're
2079.26s - 2083.66s |  just getting started my suggestion would be just save that device for later down
2083.66s - 2087.62s |  the road it's not like it can't be defeated there's lots of attacks and
2087.62s - 2092.10s |  things like that that we can do to try and defeat the encryption and find the
2092.10s - 2095.14s |  keys when the obviously when it's booting up it's going to need to
2095.14s - 2098.66s |  actually do that decryption and we can possibly read the keys but it's a little
2098.66s - 2101.38s |  bit more of an advanced topic so I'd save that for down the road after you've
2101.38s - 2104.86s |  done a few and go and find another device and see if you can make sure that
2104.86s - 2108.90s |  its device is not encrypted so how do we check if it's encrypted and also how do
2108.90s - 2113.82s |  we get the contents of that we will use a utility called binwalk so there's a
2113.82s - 2117.90s |  bunch of tools to do this and various ones and you can take a manual approach
2117.90s - 2123.82s |  but the easiest way and is to just go ahead and use binwalk if we pass it two
2123.82s - 2128.30s |  options the capital M and the E it will just recursively go through and
2128.30s - 2133.18s |  anything it identifies that it can pick up as a file type that it knows it will
2133.18s - 2138.14s |  try and uncompress that or unzip it or whatever until it gets down to the
2138.14s - 2142.46s |  actual it knows the file types whether that's a binary file shared object XML
2142.46s - 2147.98s |  whatever and the E is telling us to extract it actually so if you just run
2147.98s - 2150.86s |  binwalk without any commands it'll actually just tell you what it sees and
2150.86s - 2154.58s |  then if you pass in the E it'll go ahead and try and actually break those down so
2154.74s - 2159.62s |  awesome tool it does a lot of the legwork for us alternatively we saw that
2159.62s - 2162.74s |  we had those different partitions already actually listed out for us in
2162.74s - 2166.98s |  the bootlog so you can use DD as well if you want a manual approach just to carve
2166.98s - 2170.74s |  it up and sometimes you have to but binwalk is your friend it most it works
2170.74s - 2178.20s |  most of the time okay so this is where the fun starts so now that we've got the
2178.20s - 2183.20s |  firmware we're going to go and actually focus on the root file system and see
2183.20s - 2186.68s |  what we can find so some really low-hanging fruit is just to look for
2186.68s - 2190.56s |  the configuration files and poke through those see if we can find anything that
2190.56s - 2196.16s |  shouldn't be in there so a lot of times when I'm teaching IOT hacking people are
2196.16s - 2199.80s |  surprised to see but the most popular the best tools I think are just some of
2199.80s - 2204.08s |  the really easy basic Linux tools like find strings and grep they go a long way
2204.08s - 2209.88s |  with IOT hacking and we can use finds with the dash name argument and I like
2209.88s - 2215.40s |  to just do like star dot extension so I'll do star dot XML star dot text star
2215.40s - 2219.60s |  dot JSON and I'll just go through that and read through those documents a lot
2219.60s - 2223.04s |  of times see XML and sometimes they have interesting details in there that's some
2223.04s - 2226.92s |  low-hanging fruits we can also use strings so this is a tip that I teach
2226.92s - 2232.48s |  if you use strings with a dash F the dash F tack on it it'll bring back the
2232.48s - 2235.92s |  file name that's attached to that string and then we can run strings over like a
2235.96s - 2240.16s |  whole file system or a whole group of files and if we and then we can pipe
2240.16s - 2245.24s |  that into grep and look for things like password API key all of those things
2245.24s - 2250.08s |  sometimes I'll look for like dot-com for example or various TLDs just to see if
2250.08s - 2254.56s |  we can find any endpoints that can just be an easy win as well using strings and
2254.56s - 2258.48s |  piping into grep it's one of my favorite tricks when IOT hacking is to to do that
2258.48s - 2265.44s |  the next thing we'll take a look at that is like pretty easy because same with
2265.44s - 2269.80s |  the the readable files all of the scripts so a lot of times this is
2269.80s - 2273.92s |  embedded Linux is gonna be bash or sh scripts you don't need to decompile them
2273.92s - 2276.84s |  you can just take a look at them read through them a lot of times the
2276.84s - 2279.96s |  developers will put really nice comments in there telling you what they're doing
2279.96s - 2282.64s |  because they're being good developers and putting comments and things like
2282.64s - 2286.24s |  that it's funny I've seen like even things like people's emails or like you
2286.24s - 2289.04s |  know make if you find a problem with this email me at this email or things
2289.04s - 2293.24s |  like that but the one scripts that I always suggest that you should look at
2293.24s - 2297.20s |  right when you're getting started with a device and looking at it are the RCS
2297.20s - 2303.76s |  scripts so most IOT devices use a tool called busy box which is a way to
2303.76s - 2308.52s |  actually combine all the binaries into one binary to shrink them down and then
2308.52s - 2314.36s |  they use their init process and the way that busy box works is it runs all of
2314.36s - 2319.68s |  the RCS scripts in Etsy slash init dot D so after the boot loaders finished and
2319.68s - 2324.20s |  Linux is done it hands off to the busy box init system and then it calls all of
2324.20s - 2328.08s |  the scripts in there that start with RCS and it does them in alphanumeric order
2328.08s - 2332.92s |  so it'll go like RCS 1 2 or if you have like sometimes you see like 1 and it
2332.92s - 2336.36s |  tells you what they're doing and these scripts are great because they're
2336.36s - 2339.56s |  responsible for actually setting up the device past Linux for what it actually
2339.56s - 2343.60s |  does so if it's a camera or router then it's probably going to you know bring up
2343.60s - 2347.44s |  binaries or things like that to actually do what the device does or sometimes
2347.44s - 2351.56s |  they'll even reach out to like back-end info or cloud infra to let it know it's
2351.56s - 2355.16s |  up or pass back information and again these are human readable like they're
2355.16s - 2359.88s |  just bash scripts so no decompiling no real reverse engineering and another tip
2359.88s - 2363.60s |  too is if you're not familiar with bash like honestly chat GPT is really great
2363.60s - 2367.28s |  at breaking down what bash scripts are so you can just copy and paste these
2367.28s - 2371.24s |  directly as firmware into our friend chat GPT and it can help you out and
2371.24s - 2375.28s |  tell you what's going on as well yeah I frequently don't really find specific
2375.28s - 2377.80s |  vulnerabilities in here sometimes you'll find things that shouldn't be in
2377.80s - 2381.60s |  there but the most of the reason is just to get a lay of the land and it'll tell
2381.60s - 2385.00s |  you about like what's going on what binaries are being executed things like
2385.00s - 2391.86s |  that okay so now we're at in my opinion the most fun part and kind of like
2391.86s - 2395.30s |  everything even the other stuff before that has been leading up to setting
2395.30s - 2400.42s |  ourselves up to be successful at reverse engineering the binaries and libraries
2400.42s - 2404.94s |  that are on the device so this is where you're honestly most likely to find some
2404.98s - 2409.86s |  sort of vulnerability that you're going to report and the one complicated or
2409.86s - 2413.66s |  thing that I see people get stuck with on this is where do we actually start
2413.66s - 2417.78s |  it's quite possible there's dozens to hundreds to maybe a thousand different
2417.78s - 2422.06s |  libraries and binaries on the device it takes a lot of time to reverse
2422.06s - 2428.46s |  engineer and understand these so which one do we pick and how do we start so
2428.46s - 2431.90s |  the easiest way to actually do this is to avoid a needle in a haystack
2431.90s - 2436.02s |  situation is to go with like a forward down approach and this is what I teach
2436.02s - 2440.10s |  or the methodology I teach when people are starting and that is to start with
2440.10s - 2444.42s |  the custom binaries and libraries that are actually unique to the device so a
2444.42s - 2448.10s |  lot of the libraries and binaries are going to be Linux stuff so if you're
2448.10s - 2451.46s |  familiar with using Linux you might be able to just discount quite a few of
2451.46s - 2455.10s |  these but if you're not or sometimes it could be hard to tell especially with
2455.10s - 2459.46s |  libraries did you know are these open source Linux things that do Linux or C
2459.46s - 2462.92s |  stuff or are these ones that the designers of this device have actually
2462.92s - 2467.12s |  created so then we run into the problem is how do we know they're custom and
2467.12s - 2469.64s |  after you start to do this for quite a while you will start to pick out the
2469.64s - 2473.38s |  names and stuff and go like oh yeah that's that's a custom one but if we
2473.38s - 2477.40s |  don't then the thing that I suggest to do is to interact with the device and
2477.40s - 2483.08s |  then follow that logging and trace that logging down to the underlying binaries
2483.08s - 2487.88s |  and functions and this is in my opinion the easiest way when you're starting to
2487.88s - 2493.16s |  actually find vulnerabilities so here in this picture I've got an example so
2493.16s - 2498.68s |  this is a common router here that that I like to hack on and I went to the web
2498.68s - 2501.92s |  browser of it so just like most routers it's got a web browser where you can go
2501.92s - 2509.28s |  on do lots of stuff set the pre-shared key set what type of WPA2 web or
2509.28s - 2512.48s |  whatever you know set all that stuff it's got a bunch of utilities for some
2512.48s - 2516.52s |  reason it's got a ping test thing you can make the router ping other stuff so
2516.52s - 2520.20s |  in this example I'm just playing around with that because I kind of suspected
2520.20s - 2524.68s |  that it might be you know doing bad things when we try and ping stuff and so
2524.68s - 2529.44s |  I wanted to find the underlying binary or function or library that's actually
2529.44s - 2532.96s |  responsible for that so what I do is I just go and play with all the
2532.96s - 2536.92s |  functionality if there's something that you can do on the device to make it do
2536.92s - 2540.08s |  something I do that and I don't specifically do that like trying
2540.08s - 2543.80s |  injections or anything I just when I'm starting out just use the device how
2543.80s - 2548.60s |  it's supposed to be used and I'll take a look at the logging and a lot of times
2548.60s - 2552.52s |  the logging will be very verbose in IOT devices when you're interacting with
2552.52s - 2556.72s |  things and then we can actually trace that logging back then to the underlying
2556.72s - 2560.76s |  binaries or libraries so in this device and actually see this in a decent amount
2560.76s - 2565.08s |  of IOT devices they were nice enough to even just put the the function that's
2565.08s - 2569.96s |  actually calling that is actually being called when you try and run this ping
2569.96s - 2574.76s |  test they put it in square brackets that's their like logging nomenclature
2574.76s - 2578.84s |  or whatever so it was called util underscore exec system so I saw this
2578.84s - 2581.72s |  immediately and if you're familiar with like you know web pen testing or
2581.72s - 2584.96s |  something like that immediately looked like it was making a system call to me
2584.96s - 2588.44s |  and then they put a bunch of details in like they actually give us how the
2588.44s - 2591.72s |  command is being formatted so I didn't get to put the whole thing because I was
2591.72s - 2595.60s |  running out of room but if you can't see it it literally says OAL start ping
2595.60s - 2600.84s |  command is IP ping dash C and it gives the whole details and in that you can
2600.84s - 2604.96s |  actually see the IP address that we put in so it definitely is kind of like
2604.96s - 2607.96s |  giving us a hint that there's possible command injection or something we should
2607.96s - 2614.37s |  look at deeper there okay so now we have an idea that that function that util
2614.37s - 2618.71s |  underscore exec system is of interest to us it could be a potential injection
2618.71s - 2622.75s |  point and what we should do is you know on the past page or like when we're
2622.75s - 2625.47s |  doing that like I will interact with everything I can and take a note of
2625.47s - 2629.87s |  where all the logging is happening what binaries and functions that logging is
2629.87s - 2634.43s |  coming from we'll just go back to our good friend strings piping into grep one
2634.43s - 2639.51s |  of my favorite tools for IOT hacking and we can grep on that function name so a
2639.51s - 2643.31s |  lot of times in less expensive IOT vices again they're making it easier for us
2643.31s - 2646.63s |  they don't strip binaries and things like that so the function names will
2646.63s - 2651.03s |  just end up compile in the compiled binaries and libraries so we can just
2651.03s - 2655.15s |  pipe that into grep and put the function name in so in this example here I did
2655.15s - 2659.23s |  that for util exec system however what if they do strip it well if we just go
2659.23s - 2663.39s |  back one page here you can see the print out here it kind of follows a format it
2663.39s - 2668.39s |  says oh I'll start paying command is and then gives the command so that's a
2668.39s - 2671.35s |  string that's actually in there too and they're probably not going to obfuscate
2671.35s - 2677.31s |  it it's not malware so we can also just pipe common strings that we see so in
2677.31s - 2680.27s |  this example I kind of thought I was using like a print app or sprint app or
2680.27s - 2683.99s |  something like that so we looked for a command is and we get the same hit you
2683.99s - 2688.87s |  can see here that actual string how it is in that binary is percent s command
2688.87s - 2692.45s |  is percent s so it's using that formatting so even if they do strip the
2692.45s - 2695.51s |  function names there's still ways to get around it and find those underlying
2695.51s - 2704.99s |  binaries and libraries okay so now that we've got our function name we know that
2704.99s - 2707.87s |  it's in that so if I just go back and this one for example we see the hit
2707.87s - 2713.45s |  because we use dash F it's in this lib CMM so so that is a custom library that
2713.45s - 2716.81s |  the makers of this router in this example wrote that has the majority of
2716.81s - 2722.57s |  the functionality of that router baked into it we can pop that into Ghidra and
2722.57s - 2728.41s |  start decompiling it so one of the things that I find when I'm teaching IOT
2728.41s - 2731.61s |  hacking or in my workshops is like this is the point where people usually get a
2731.61s - 2735.53s |  little bit overwhelmed if they're not familiar with reverse engineering and it
2735.53s - 2738.81s |  starts to look quite complicated because the output of Ghidra can be very
2738.81s - 2743.49s |  verbose when it decompiles it it is in my opinion a little bit more complex
2743.49s - 2748.21s |  than just looking at regular C code so it can be a little like discouraging and
2748.21s - 2751.69s |  I see some people are like okay I can't do this I'm intimidated by it but I have
2751.69s - 2755.65s |  a few tips that I think can make it a lot easier for you to understand and
2755.65s - 2758.93s |  read the output in here and still find vulnerabilities even if you don't
2758.93s - 2763.57s |  understand what the heck is going on and most of it doesn't make sense so the
2763.57s - 2767.81s |  very first thing I always say and is because people who are in cybersecurity
2767.81s - 2771.21s |  and have had a little bit of an intro to Ghidra or reverse engineering is it's
2771.21s - 2776.21s |  usually looking at malware and this is not malware so with malware usually good
2776.21s - 2779.45s |  malware authors or majority of them are going to try and obfuscate what they're
2779.45s - 2782.49s |  doing make it confusing for reverse engineering they're not going to use
2782.49s - 2785.85s |  print statements if they have strings they're going to obfuscate those strings
2785.85s - 2790.21s |  so they're very hard to see instead for our IOT devices we have developers who
2790.21s - 2795.61s |  are trying to be good helpful developers and write very clean readable code so
2795.61s - 2799.17s |  that it's easy for someone else to pick up after them if someone's reading their
2799.17s - 2802.53s |  code it's going to be testable debuggable doing all those good things
2802.53s - 2808.01s |  that developers do and also in IOT devices we do a lot of printing out to
2808.01s - 2813.33s |  UART to tell what's going on so that we can actually do almost debugging through
2813.33s - 2817.13s |  print statements in a production device which is nice it makes it really easy
2817.13s - 2822.61s |  for us to then go and trace those back so one of the first things that I always
2822.61s - 2826.69s |  suggest with that in mind is to take a look at the print statements and let
2826.69s - 2831.25s |  those guide you to what is going on of course you can't always trust print
2831.25s - 2834.05s |  statements if you're a programmer you know that it's not the best to always
2834.05s - 2836.65s |  trust comments or print statements but when you're getting started reverse
2836.65s - 2840.61s |  engineering I think it's okay just read the print statements the very first one
2840.61s - 2844.13s |  that I have here that's in red it's just actually that print statement that we
2844.13s - 2848.25s |  saw on the logging so it helps us confirm that we're in the right spot and
2848.25s - 2851.21s |  then if you look down at line 32 it might be a little hard to read but
2851.21s - 2855.21s |  essentially what it's saying there is it's just saying system fork failed and
2855.21s - 2858.53s |  this we don't care about that it's not important to us but if you look at the
2858.53s - 2862.89s |  program flow and the if statements well now you know what that program flow does
2862.89s - 2866.97s |  it just checks if a system fork failed because before that it says you know if
2866.97s - 2873.21s |  local 234 equals FFFFF well if I saw that I have no idea what it was is it
2873.21s - 2876.01s |  integral to the thing well if you look at the print statement it tells you
2876.01s - 2879.89s |  exactly what it is you can just ignore that the second thing you can do with
2879.89s - 2883.13s |  print statements that makes your life a lot easier is a lot of times they'll be
2883.13s - 2887.13s |  like print F's or sprint F's and if you're not familiar with how those work
2887.13s - 2892.09s |  essentially we have a slot holder for a variable that we're going to pass into
2892.09s - 2894.73s |  that print statement and then the print statement basically tells you what
2894.73s - 2900.09s |  that's what that variable is so in this top example here we have the percent
2900.09s - 2903.89s |  command is percent and then we have two variables passed in that you know we
2903.89s - 2907.33s |  wouldn't know what they were once param one and once underscore underscore s
2907.33s - 2910.69s |  well if we look and you know we just go back a couple to that print statement
2910.69s - 2914.73s |  well the first one this is that identifier OAL underscore start pin
2914.73s - 2917.73s |  command so you know maybe that's like some sort of identifier and then the
2917.73s - 2922.17s |  second one though now we know of our interest well that's the actual string
2922.17s - 2927.73s |  that we manipulate that we can pass the IP address in and because of that sprint
2927.73s - 2931.25s |  F or that print F function well now we know that underscore underscore s
2931.25s - 2936.13s |  variable we know what it is and that's just through those print commands the
2936.13s - 2939.41s |  next thing I'll call out or that's kind of like the final thing that we've been
2939.41s - 2944.53s |  working towards is to just start getting used to seeing unsafe things being done
2944.53s - 2950.29s |  so that the easiest one to actually find is system command so you can see that's
2950.29s - 2953.89s |  in the second square there we have a system command and if you're not
2953.89s - 2956.49s |  familiar with that when you're programming C essentially that's a way
2956.49s - 2960.81s |  for you to just pass down to Linux to say like hey I want you to run this like
2960.81s - 2964.17s |  shell command so it's essentially the same as if you know you're at the
2964.17s - 2967.85s |  terminal and you type in if you have a shell whatever you pass in the system
2967.85s - 2971.29s |  it's the same way so if you're not already thinking this like this is
2971.29s - 2975.65s |  extremely dangerous thing to do in your programming if you're using user
2975.65s - 2979.01s |  variables and especially if you're not going to be sanitizing those variables
2979.01s - 2983.61s |  so in this one for example this util underscore exec system function that
2983.61s - 2988.09s |  they've written to make it easier to do system calls it does no sanitization or
2988.09s - 2994.53s |  checking however in this example the caller of that that actually initially
2994.53s - 2999.57s |  takes in that IP address well it does do the sanitization but if you look on this
2999.57s - 3005.93s |  device for example there are about 500 calls to this util underscore exec
3005.93s - 3010.25s |  system and the person that wrote that function this util underscore exec
3010.25s - 3014.01s |  system that knows okay I need to sanitize my inputs further down the
3014.01s - 3017.09s |  chain they might not be the same ones writing the code so you can actually see
3017.09s - 3021.93s |  how it can happen to slip through where user supplied input gets into a system
3021.93s - 3026.05s |  call so that's one of the easiest things when you're starting out is to just go
3026.05s - 3030.53s |  interact with the device chase down the inputs that you do because you know and
3030.53s - 3034.73s |  see where do they end up in the code and if they end up in a system call then I
3034.73s - 3037.89s |  really need to look into this deeper and see if there's a way that I can do some
3037.89s - 3043.40s |  sort of command injection so of course what's next after we know this well we
3043.40s - 3047.44s |  keep interacting with the device and tracing the logging back to the binaries
3047.44s - 3050.44s |  or libraries so of course there's other ways to approach this you could just
3050.44s - 3053.40s |  start with the library and look at all the system calls and go backwards but
3053.40s - 3056.32s |  when you're getting started I think it's a lot easier to understand and
3056.32s - 3060.70s |  conceptualize and not get lost in Kedra to try and start at the source which is
3060.70s - 3065.20s |  how we interact with it and we know that there's like an injection point there
3065.20s - 3070.00s |  and then see if that actually filters down to something so don't just use web
3070.00s - 3073.96s |  browsers like a lot of IOT apps they have a mobile or IOT devices they have
3073.96s - 3077.96s |  mobile app so we can go use that mobile app like do everything in the mobile app
3077.96s - 3081.60s |  do all the setup check all of that because it's gonna be like a lot of
3081.60s - 3085.44s |  times one of those lesser used places where there's some obscure setting or
3085.44s - 3089.48s |  something you can set do all of that and see what logging you can get and trace
3089.48s - 3092.88s |  that back and see where it goes like one example I found where I was able to
3092.88s - 3098.04s |  crash a device is it was a camera and if you wanted to pair it to your mobile app
3098.04s - 3101.80s |  you put the QR code up to the camera and you compare it to the mobile app and I
3101.80s - 3105.44s |  was never able to like get any buffer overflow or anything but I was able to
3105.44s - 3110.04s |  crash the camera by doing like a malformed QR code so just be creative if
3110.04s - 3113.72s |  there's cloud like somewhere you can sign up in the cloud and then interact
3113.72s - 3118.08s |  with your device do that like usually there's a free 30 days or something and
3118.08s - 3120.76s |  you know we're not actually pen testing the cloud thing we don't want to be like
3120.76s - 3124.52s |  trying to break that but just interact with it how you're supposed to and see
3124.52s - 3129.28s |  how that filters down into the device and then what we're looking for is when
3129.28s - 3132.60s |  you're starting out there's two main things I suggest to look for so the
3132.60s - 3137.36s |  first one is what we already looked at does it end up in an unvalidated or
3137.36s - 3143.08s |  unsanitized system call and like if you look at this router and go back and look
3143.08s - 3147.64s |  at the CVS for this one I'm showing or lots of IOT devices you'll see lots of
3147.64s - 3151.98s |  command injections being done because in cheap IOT devices they want to save
3151.98s - 3155.36s |  money they don't want to write their own functionality it's way easier to just
3155.36s - 3159.80s |  use the built-in stuff in Linux and just hand it off to a system call so
3159.80s - 3163.28s |  it's not like these don't exist you can definitely find them the second one
3163.28s - 3167.76s |  that's probably a little bit more common but a little bit harder to find and and
3167.76s - 3173.28s |  abuse is if it gets your your input user input gets put into an unsafe C
3173.28s - 3177.44s |  function so there's a few examples of those are mem copy string copy string
3177.44s - 3182.48s |  cat print F that next one supposed to be sprint F get scan F so essentially what
3182.48s - 3185.64s |  these are doing though is they're going to be copying your data into some sort
3185.64s - 3190.08s |  of buffer and again memory is limited on IOT devices so we're always trying to be
3190.08s - 3194.32s |  kind of stingy with our buffers and a lot of times if you're not on if you're
3194.32s - 3198.52s |  not sanitizing or validating those inputs then it can end up in a buffer
3198.52s - 3203.36s |  where we can overflow it and you know at the worst case buffer overflow or maybe
3203.36s - 3207.24s |  just crash the device and have some sort of denial of service so I could give a
3207.24s - 3210.40s |  whole another talk then about where to go from that from here and how to
3210.40s - 3215.32s |  actually then abuse these are actually exploit buffer overflows but if you do
3215.32s - 3219.04s |  get this far and you find this and like you'll be able to maybe crash the device
3219.04s - 3223.52s |  or get some seg faults or something but send me a message or just go out and do
3223.52s - 3227.28s |  some further research and there's a lot of great resources then for how to
3227.28s - 3232.12s |  identify these buffer overflows so that's where I'll end today I just want
3232.12s - 3235.32s |  to wrap up with a thank you thanks everyone for coming I hope you learned
3235.32s - 3239.68s |  something I hope you go home and go buy a cheap IOT device when you get home
3239.68s - 3244.44s |  hack it if you do let me know I love to hear when people hack it and if you want
3244.44s - 3248.64s |  a copy of these slides stay in touch with me link up resources anything you
3248.64s - 3252.68s |  can reach me at andrewbleedy.com thanks everyone