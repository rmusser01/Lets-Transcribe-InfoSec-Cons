{
  "webpage_url": "https://www.youtube.com/watch?v=YtMutNk8RpY",
  "title": "DEF CON 32 - Offensive Security Testing  Safeguarding the Final Frontier - Andrzej Olchawa",
  "description": "Every space mission is underpinned by critical software that spacecraft operators utilize to monitor and command their assets. The Mission Control System serves as the primary interface with a spacecraft, marking it as a crucial component of the ground segment. For decades, these systems were operated exclusively within the confines of mission control rooms, accessible only to a select group of individuals through a limited number of computer workstations. This paradigm has recently shifted, with numerous space organizations enabling their personnel to manage space assets remotely, including from the comfort of their homes. This increased accessibility has rendered space-related systems susceptible to the same security vulnerabilities that affect our daily-use software.\n\nDespite the adoption of newer technology stacks in many mission control systems\u2014either through upgrades or complete replacements\u2014the consideration of security requirements has often been deferred to the final stages of development or overlooked entirely. This negligence presents a significant risk, exposing the space sector to potential exploitation by malicious entities. Like in other technology domains, merely expanding strategies to incorporate security measures, instituting security policies, and integrating new security requirements are positive but insufficient. Despite being developed and tested by extensive teams and presumably adhering to best practices, we have observed firsthand how contemporary mission control systems remain prone to elementary security flaws.\n\nThe most effective strategy to equip space systems with a robust defense against malicious actors involves integrating offensive security testing throughout their development lifecycle.\n\nIn this presentation, we share the results of the security research we have recently conducted on the more established, open-source Mission Control Systems: NASA OpenMCT and YaMCS. We present the details of the vulnerabilities we have discovered in those two systems, and their potential impact on a space mission when they are chained together into one exploit. We conclude by presenting with the audience the lessons learned from those security assessments.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 841,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 3.60s | This text was transcribed using whisper model: large-v2

 Hi everyone. My name is Andy. Uh I'm going to present you with
3.60s - 8.14s |  some uh offensive security testing. Um in this
8.14s - 12.18s |  presentation I will uh briefly introduce you to the uh ground
12.18s - 16.82s |  segment and the software that we use uh on it. Uh I will focus
16.82s - 20.68s |  on one particular software which is the mission control system.
20.68s - 25.52s |  And I will um show you some some uh vulnerabilities which we have
25.52s - 28.76s |  found on those uh software applications and then give you a
28.76s - 34.65s |  couple of demos on uh how we managed to exploit them. So um
34.65s - 38.31s |  ground segment consists of many uh interconnected components uh
38.31s - 44.35s |  or elements. You can see in this orange on this orange part um
44.35s - 48.49s |  where exactly it lies in the in the uh in the mission um in the
48.49s - 52.19s |  space mission. Uh it consists of different elements. Uh the all
52.19s - 55.83s |  those elements uh perform different functions but they all
55.83s - 59.11s |  depend on each other uh either by receiving input from or
59.11s - 62.97s |  sending outputs to other components. However most of
62.97s - 65.75s |  those components they don't require any user interaction and
65.75s - 69.25s |  this is what brings us to the mission control system. Uh which
69.25s - 74.25s |  is the main interface um it is the main interface between the
74.25s - 78.39s |  ground station uh and uh and other components. Uh it is also
78.39s - 83.19s |  it also serves as um primary interface between the uh between
83.19s - 85.89s |  between the spacecraft controllers and um and the
86.25s - 91.25s |  spacecraft itself. Which uh I would argue is the it makes it
91.25s - 94.83s |  the most vulnerable system in the whole ground segment. As uh
94.83s - 97.83s |  as we know the weakest link of every information system is
97.83s - 103.83s |  humans. So for decades uh the space missions were operated
103.83s - 107.93s |  from uh dedicated mission control rooms. Uh accessible
107.93s - 114.27s |  only by uh specific um only by the spacecraft controllers. And
114.29s - 116.93s |  this however has changed recently mainly due to COVID.
116.93s - 122.23s |  Um and the organization started opening up and letting their
122.23s - 126.81s |  users or their uh spacecraft operators to conduct operations
126.81s - 130.97s |  uh remotely. So this of course creates a new attack surface for
130.97s - 134.15s |  uh for the mission control system which is usually uh very
134.15s - 138.75s |  outdated software and vulnerable to typical um typical
138.75s - 141.95s |  vulnerabilities which we have on any other software uh that we
141.97s - 147.47s |  use on a daily basis. So what is being done about it? Um from
147.47s - 150.11s |  the community from the space community perspective obviously
150.11s - 153.81s |  we expand strategies and include um security uh to include
153.81s - 158.69s |  security aspects. We impose uh security policies. And then we
158.69s - 161.99s |  also introduce security requirements to our systems.
161.99s - 166.63s |  Um however I don't think it's gonna be enough at this point.
166.63s - 170.13s |  And as we will see later there is one uh very specific element
170.15s - 174.55s |  that is missing into those um into the actions which is the
174.55s - 182.29s |  offensive security testing. So um every organization uh has a
182.29s - 184.37s |  their own mission control system. They try to develop
184.37s - 188.77s |  their own uh software. Because uh you know what as they say the
188.77s - 194.31s |  space is hard right? So uh they have to do it themselves. So um
194.31s - 197.47s |  some of that software is open source. So what we have done we
197.47s - 199.95s |  decided to have a look at it and see how they perform from the
200.93s - 205.03s |  from the vulnerability standpoint. And here is what we
205.03s - 207.91s |  have found out. Uh for full disclosure all those
207.91s - 211.67s |  vulnerabilities have been already disclosed uh using the
211.67s - 215.71s |  um contacting the vendor and they have been already
215.71s - 223.05s |  addressed and um and all of them have CVE assigned. So on uh NASA
223.05s - 226.05s |  OpenMCT we have found a couple of vulnerabilities such as uh
226.05s - 232.07s |  prototype pollution XSS and CSRF. On the IMCS which is
232.07s - 235.13s |  another mission control system. It is one of the more established
235.13s - 239.71s |  ones. One um we have found uh a few more vulnerabilities such as
239.71s - 243.31s |  directory traversal uh arbitrary file deletion session hijacking
243.31s - 247.95s |  and uh a few XSS vulnerabilities. And then on
247.95s - 252.01s |  NASA AIT core we have found and NASA AIT core is like a
252.01s - 255.95s |  framework to develop ground ground segment software um by
255.95s - 259.99s |  different missions. We have found SQL injection uh a few
259.99s - 264.79s |  local code executions and also um realize that the encryption
264.79s - 268.67s |  and the communication is completely missing. So as you
268.67s - 271.27s |  seen before that most of those vulnerabilities they don't have
271.27s - 275.93s |  that um much of an impact on the mission. However this is where
275.93s - 279.91s |  the training of vulnerabilities come in play. And in case of the
279.91s - 282.95s |  IMCS we decided to combine a directory traversal session
282.95s - 288.65s |  hijacking and XSS. And that led us to quite severe sensitive
288.65s - 292.73s |  information disclosure because now the attackers can when they
292.73s - 294.93s |  trigger when the XSS is triggered the attackers can
294.93s - 298.57s |  actually retrieve any arbitrary file that is stored on the IMCS
298.57s - 304.89s |  server. So uh here is uh let's have a look at typical scenario.
304.89s - 308.59s |  Um so this is like um at the very high level overview of a
308.59s - 311.13s |  space mission. You have a space segment from right to left
311.13s - 314.33s |  you have a space left you have a space segment. There is a
314.33s - 316.71s |  ground station, there is IMCS which is the mission control
316.71s - 321.87s |  system uh in subject that is um that is used by Bob uh to send
321.87s - 324.65s |  telemetry uh send telecoms and receive telemetry from
324.65s - 328.99s |  spacecraft. We also have Alice that is working with Bob and the
328.99s - 332.09s |  whole organization has a publicly facing website. Now we
332.09s - 337.79s |  also have an attacker and that is um that has a C2 server. Now
337.79s - 341.05s |  as it usually goes there is a recon and phishing campaign.
341.05s - 344.33s |  Uh the adversaries learn about Alice from the um public
344.33s - 348.33s |  website. They decide to uh target her with um phishing
348.33s - 354.62s |  campaign. Alice takes the bait uh unfortunately she then clicks
354.62s - 357.86s |  on a link or opens a word document and that deploys the
357.86s - 362.12s |  C2 beacon uh on her workstation. This way uh making her
362.12s - 368.67s |  workstation compromised. Um the attackers now have access to her
368.67s - 373.23s |  workstation. They learn about Bob um from her emails and they
373.23s - 376.91s |  decided to target Bob with uh eternal phishing campaign. They
376.91s - 380.45s |  uh send him an email with uh some payload that would trigger
380.45s - 388.11s |  the XSS and they do it as Alice. So uh Bob trusts Alice. He um
388.11s - 391.95s |  executes the payload that triggers the XSS. That XSS then
391.95s - 395.09s |  uh because there are um there is a session hijacking
395.09s - 399.59s |  vulnerability and the traversal director vulnerability
399.59s - 404.59s |  um that triggers the um this lets the attackers to retrieve
404.59s - 412.97s |  all any arbitrary file on uh on the XSS server. Now if Bob has
412.97s - 415.77s |  access to the internet uh the files can directly be retrieved
415.77s - 420.07s |  and sent to attacker workstation. Otherwise um if
420.07s - 424.05s |  Bob is behind the firewall or is using VPN uh we can use
424.07s - 427.61s |  Alice workstation to um as a proxy and then retrieve the
427.61s - 433.82s |  files using the C2 beacon. So I have prepared uh short demo how
433.82s - 440.30s |  that would look like in practice. So what you will see
440.30s - 443.98s |  here, this is our, this is the exploit we developed. Um it
443.98s - 448.74s |  generates a payload that will end up uh being sent to the to
448.74s - 452.82s |  the Bob and Bob will uh actually use that payload and um
452.82s - 456.48s |  because he thought that it was received from Alice, load it on
456.50s - 463.69s |  the YAMCS and then that will trigger our exploit chain. So
463.69s - 467.93s |  first this exploit generates the payload which is called XSV uh
467.93s - 474.91s |  XSVJS and also starts the HTTP server. Bob is gonna load that
474.91s - 479.37s |  file on the YAMCS server. Imagine that is one of the
479.37s - 487.92s |  telemetry displays that Alice decided to share with him. So he
487.92s - 494.20s |  loads the file and he decides to open it. And that's all he
494.26s - 499.96s |  sees. Now, under the hoods, there was an XSS triggered that
499.96s - 502.60s |  would retrieve the file and then send it back because of the
502.60s - 506.26s |  directed traversal and send the back the back the content to the
506.26s - 511.14s |  HTTP server that was started by um that was started by the
511.14s - 516.54s |  attacker. So here like in any uh any example of for proof of
516.54s - 521.68s |  concept you can see we got the access to XC password file
521.68s - 526.16s |  content. So that's um combining those vulnerabilities is
526.16s - 548.18s |  actually quite easy. So, the whole exploit is easy. So, next
548.18s - 552.14s |  up is the uh vulnerability chain, the the exploit chain uh
552.14s - 556.68s |  for NASA EIT Corp. Um combining one of the local execution uh
556.68s - 559.12s |  code execution and missing missing encryption, we managed
559.12s - 563.02s |  to uh conduct the man in the middle attack and inject our own
563.02s - 569.26s |  payload uh into the into the uh communication um string which
569.26s - 572.20s |  uh which then is triggered on the telemetry client and then
572.20s - 577.84s |  it's executed giving us the reversal. So, I'll quickly
577.84s - 586.66s |  start on the demo and explain what you see. Sir. Like this?
586.66s - 591.73s |  Yup. Okay. Okay. So, basically, what you see here on the left
591.73s - 595.33s |  side, uh you have, on the top left side, you have telemetry
595.33s - 602.47s |  client. On the left, uh bottom side, you have telemetry
602.47s - 607.01s |  simulator that is both are provided by the EIT Corp. On the
607.01s - 610.01s |  right side, you have our exploit on the top and then on the
610.01s - 613.25s |  bottom side, on the right bottom, you have the Nesca's
613.25s - 618.83s |  list that was gonna grab the or is gonna receive the reversal.
618.83s - 624.09s |  So, we start the telemetry client first on the on the left
624.09s - 629.32s |  side. Now, this is what would normally be happening on the
629.32s - 636.59s |  mission control or on the ground station. Then, we start
636.59s - 640.33s |  telemetry uh simulator which will generate some telemetry
640.33s - 646.05s |  packets as if they were coming down from spacecraft. We start
646.05s - 650.01s |  our uh Netcat listener and you can see on the left hand side,
650.01s - 652.19s |  on the left hand side, we already have started receiving
652.19s - 665.80s |  some telemetry from the simulator. Then, we run our
665.80s - 669.50s |  exploit that is conducting the man in the middle attack and
669.50s - 672.70s |  then the first frame. So, we have injected our frame and the
672.70s - 674.66s |  first frame. So, the first frame that is sent from
674.66s - 679.08s |  telemetry simulator to the ground station is called um by
679.08s - 682.10s |  the man in the middle attack. There, we injected our payload
682.10s - 686.32s |  which you can see down here as well and that was actually
686.32s - 690.38s |  executed and it was triggered and it gives us, it gave us the
690.38s - 693.68s |  reversal uh to the telemetry client running on the mission
693.68s - 721.98s |  control. So, that's another proof of concept. Sorry about
721.98s - 733.20s |  that. So, just for reference, we have um this is speed um
733.20s - 737.34s |  between dynamic, static, and dynamic uh analysis which we
737.34s - 741.30s |  have done on those systems. Um it is still important to
741.30s - 743.84s |  conduct static analysis because as you can see, uh the low
743.84s - 746.88s |  hanging fruits and many other vulnerabilities are found uh
746.88s - 750.28s |  using those but they will static analysis will not uh
750.28s - 752.82s |  will will not catch everything. So, you have to conduct the
752.82s - 757.02s |  dynamic analysis and then you have to try to uh conduct
757.08s - 762.18s |  the exploitation phase. Um in case of SCoS 2000, SCoS 2000 is
762.18s - 764.88s |  one of the main mission control systems developed by uh by
764.88s - 768.56s |  European Space Agency. Uh we haven't done any um extensive
768.56s - 771.66s |  analysis on the system, any vulnerability research. We only
771.66s - 776.12s |  run the flow finder on it and using the static code analysis
776.12s - 780.10s |  you can see uh I'm pretty sure that at least one of those uh
780.10s - 783.70s |  almost 2500 buffer overflow uh vulnerabilities would be
783.72s - 791.14s |  exploitable. So, uh in conclusions, um the point I'm
791.14s - 793.54s |  trying to make is that the space applications are still
793.54s - 796.52s |  not properly being tested from the offensive security
796.52s - 801.72s |  standpoint. Um the best way is to uh hire a service to do it
801.72s - 805.92s |  properly or you can also you can also try to do it yourself but
805.92s - 807.70s |  you have to do it and you have to include it in your
807.70s - 812.80s |  frameworks and uh you should do it before uh the adversaries do
812.82s - 817.32s |  it for you. So, as I mentioned before, all that research was
817.32s - 821.32s |  already published. So, here you can find um I guess the slides
821.32s - 824.96s |  will be uh provided afterwards so we can we can have a look at
824.96s - 828.40s |  the publications. Otherwise, if you want the links uh today, you
828.40s - 830.80s |  can hit me up after the after the talk and I'll give it to
830.80s - 837.04s |  you. And that was it. Thank you very much.