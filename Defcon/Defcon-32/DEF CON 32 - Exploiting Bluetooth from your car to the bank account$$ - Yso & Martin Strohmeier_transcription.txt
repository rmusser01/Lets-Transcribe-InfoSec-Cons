{
  "webpage_url": "https://www.youtube.com/watch?v=MS582wba46E",
  "title": "DEF CON 32  - Exploiting Bluetooth from your car to the bank account$$ - Yso & Martin Strohmeier",
  "description": "Over the past decade, infotainment systems experienced a growth in functionality, broader adoption and central incorporation into the vehicle architecture. Due to the ever-growing role of wireless protocols such as Bluetooth and a known lack of patches alongside the difficulty of patch installation, this poses a new attack surface and a genuine threat to the users. At the same time, the tools and methodologies required for testing are scattered across the Internet, absent and need a rigorous setup.\n\nIn this talk, we share a comprehensive framework BlueToolkit to test and replay Bluetooth Classic vulnerabilities. We provide practical information and tips. Additionally, we release new exploits and a privilege escalation attack vector.\n\nWe show how we used the toolkit to find 64 new vulnerabilities in 22 modern cars and the Garmin Flight Stream flight management system used in several aircraft types.\n\nOur work equips Bluetooth hackers with necessary information on novel implementation-specific vulnerabilities that could be used to steal information from target cars, establish MitM position or escalate privileges to hijack victims\u2019 accounts stealthily.\n\nWe believe our research will be beneficial in finding new vulnerabilities and making Bluetooth research more accessible and reproducible.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1226,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.05s - 1.51s | This text was transcribed using whisper model: large-v2

 All right
1.51s - 3.83s |  We'll start sorry for the delay
4.31s - 9.75s |  the main reason being that this work was mostly done by my students and
10.15s - 12.95s |  He couldn't get a visa for the u.s.. So he's not here
13.71s - 15.71s |  We did record a video
16.03s - 19.63s |  We also had a longer version of this whole thing yesterday on main stage
20.67s - 26.07s |  So you can still find this at some point online if you're interested in all of the details
26.51s - 28.51s |  However, since the audio is not working
28.99s - 31.23s |  For the video you will have to do with me
31.23s - 37.71s |  So I'm I can't provide you with all the technical details, but I should be able to to get you through it
37.71s - 39.71s |  And if you have any specific
40.31s - 42.19s |  questions on
42.19s - 49.83s |  Yeah attacks and the toolkit we built and everything I can direct you to my students. So yeah, let's start
51.11s - 53.11s |  It's fine
54.87s - 58.07s |  Who are we so first is that's my students
58.63s - 62.87s |  Vladislav also known as ESO. He's a bug bounty hunter
63.03s - 68.87s |  he did his master in cyber security at ETH Zurich where he came to us and
69.43s - 77.03s |  Asked hey, what could we what cool systems? Could we hack? What do you have for us and ideas for a master thesis?
78.07s - 83.23s |  I said, okay here. My background is all sorts of bug bounty stuff. I
84.23s - 90.75s |  Has super cool skills really the wizard behind all this stuff and he's looking for new opportunities
90.75s - 94.11s |  So if you're convinced by the stuff he built contact him
95.63s - 97.47s |  Who are we who am I
97.47s - 102.11s |  My name is Martin. I'm a security research and a scientist at a Swiss cyber defense campus
102.59s - 105.07s |  the cyber defense campus is the
105.59s - 108.39s |  Procurement arm or part of the procurement arm of the Swiss
109.07s - 112.39s |  Department of Defense I've done a lot of systems work
112.99s - 114.99s |  hacking mostly
115.43s - 117.03s |  transportation systems
117.03s - 120.75s |  Aviation you find a lot of stuff from us in the aerospace village here
121.51s - 124.71s |  We've done space cars trains everything. Basically
125.31s - 132.31s |  I've never looked at Bluetooth before neither had blood but I've done some stuff in cars. For example hacking
132.87s - 136.91s |  Electric charging systems so you can find that under broken wire that fail
139.48s - 142.60s |  So, what's the motivation for this research, why are we doing this?
143.36s - 146.52s |  well, if you're in the procurement arm of
147.20s - 149.80s |  Federal government you buy a lot of stuff
151.04s - 157.36s |  broadly, you can break this up and the pretender stage and in the actual tender where you buy stuff and a post tender stage and
160.12s - 164.92s |  Basically when you do security testing pen testing only after you buy stuff
165.20s - 169.16s |  It's generally too late like there you have these systems you have deployed them
169.76s - 177.48s |  They're insecure that that's very late. So we might still do this and we have a lot of systems where we don't have
177.88s - 179.56s |  these
179.56s - 183.80s |  Processes in place all the systems, but in general we try to be as early as possible
186.08s - 188.80s |  The idea obviously buys a lot of IT systems
188.80s - 192.08s |  but also other systems such as cars which we will get into and
192.60s - 198.40s |  Because we buy a lot of things we have a decent negotiation leverage with the manufacturers
198.40s - 204.60s |  I mean they want to sell us stuff. So they should follow some requirements that we put in tenders
207.28s - 213.52s |  One of the thing we also do is do vulnerability research on standards on systems we've done this a lot on
214.28s - 220.24s |  Aviation and in space, but the problem is if your systems have very long life cycles, even if you can demonstrate
221.08s - 223.64s |  flaws and protocols and standards and
224.44s - 227.52s |  Show that it's unsafe unsecure
228.20s - 233.70s |  Until something is changed and deployed in the long run. It will take up to decades
233.70s - 238.40s |  So that doesn't help us even in our procurement system because there are
238.92s - 242.16s |  Everyone is using the same standards and we don't have any alternatives
243.40s - 245.96s |  This brings me to today's concrete case study
246.96s - 253.76s |  Vehicles and the army and Bluetooth. So we apparently all already heard some Bluetooth insecurities in the previous talk, which is nice
255.92s - 261.64s |  But we are not talking about Bluetooth low-energy we're only talking about standard classic Bluetooth as
262.56s - 264.56s |  alluded DoD buys a lot of stuff
265.12s - 268.84s |  That's probably the first thing you think of when you think of Department of Defense
270.36s - 275.72s |  Luckily these don't have Bluetooth as far as I know most at least the ones I've looked at
276.00s - 278.98s |  But probably that that comes very soon
280.48s - 285.52s |  Boringly, however, we buy mostly box standard run-of-the-mill cars a lot of them and
286.28s - 290.56s |  These all have Bluetooth. You can't really buy a modern car without it
290.56s - 293.88s |  Even if you want it, even if you put that in a tender
294.56s - 300.84s |  You basically nobody would sell you a car or offer you to sell the car without Bluetooth
301.84s - 308.40s |  That brings me to the scope of the present research cars are fairly complex systems so Bluetooth not the only interface
309.16s - 315.40s |  We counted at least 19 interfaces and in those cars from wired or ODB ports
315.72s - 321.92s |  to the key fob if there's an issue with any of them traditionally the only way for the manufacturer to do anything is
322.88s - 326.08s |  to do a recall that's very expensive and
326.92s - 330.20s |  Pretty much only done for really a safety
330.84s - 332.84s |  big safety problems
333.64s - 340.36s |  For security that rarely happens and that leaves us with a very complex attack surface
340.72s - 346.32s |  That is rarely patched when a car has been shipped and is out there
350.06s - 354.78s |  However, despite this and despite Bluetooth being known insecure
355.30s - 358.38s |  This hasn't been really addressed in any larger scale
358.86s - 364.18s |  There have been a couple of papers looking at maybe one single exploit and one single car
364.58s - 370.14s |  but nobody has looked at the whole breadth of Bluetooth exploits that exist out there in
371.54s - 377.18s |  different cars and from different manufacturers and that was the gap that we saw here because there's
377.58s - 380.58s |  An estimated more than 1 billion cars with Bluetooth
381.38s - 383.26s |  Bluetooth classic
383.26s - 386.22s |  pretty much all of new cars have Bluetooth and
387.22s - 389.06s |  It's
389.06s - 393.54s |  Certainly an insecurity that we wanted to examine because no one has done it at scale
394.02s - 399.36s |  So that brings me to the standard Bluetooth
400.04s - 404.96s |  Technology stack Bluetooth as you will be aware as a wireless communication standard
405.28s - 411.20s |  it has a very complex tech stack because you have a lot of shared responsibility and
412.04s - 414.04s |  of course it has
414.64s - 417.00s |  to fulfill a lot of different
418.36s - 421.84s |  Use cases and that makes it very very complex
422.44s - 427.44s |  To fulfill these different use cases Bluetooth has a lot of different profiles
427.44s - 434.40s |  I'm not going through all of them in the interest of time here, but you can choose different profiles for them to make calls
435.24s - 442.00s |  of course to listen to music, but also some profiles can have full access to your SIM card in the car or
442.72s - 444.72s |  extract messages
444.80s - 448.04s |  That's how you can in your car and your car system
448.52s - 451.00s |  Communicate hands-free using your phone
452.92s - 455.56s |  The security models you basically have these four options
456.40s - 462.24s |  To pair to a Bluetooth system with another one our case a car
464.32s - 467.36s |  Depends on the capabilities of the thing you want to pair
468.00s - 473.72s |  You have display. Yes. No, you have something that only has a display but no input you have
474.24s - 481.48s |  Something that has a keyboard but no display and you have even something like headphones that has no input or no output whatsoever
481.48s - 484.24s |  And these all need to be somehow connected
484.76s - 486.76s |  with different means
487.84s - 490.76s |  So that's the Bluetooth security model
492.36s - 498.48s |  It's very binary either you're connected or you're not and if you're connected then we have
499.04s - 500.64s |  access basically
500.64s - 502.64s |  We have classic legacy pairing
503.76s - 506.48s |  There's basically no security in this
507.36s - 510.52s |  We have just works with yeah enables
511.16s - 513.60s |  quite easy man-in-the-middle attacks
515.68s - 517.68s |  We have passkey entry
518.20s - 521.72s |  Which is a bit more secure, but there have been method confusion attacks
522.32s - 524.20s |  shown against this
524.20s - 526.20s |  recently and the only
526.28s - 534.01s |  Known secure option at the moment is numeric comparison. There's prior art, of course
534.41s - 537.93s |  So we went through at the beginning so to check how many
538.65s - 545.45s |  Bluetooth vulnerabilities exploits and attacks are around. So this is we found more than 108
545.97s - 547.97s |  in March and
548.13s - 549.77s |  as of
549.77s - 550.97s |  2022
550.97s - 556.25s |  We found almost 650 CVEs just related to Bluetooth devices
556.77s - 560.77s |  The categories we've been looking at are critical exploits. So
561.33s - 563.33s |  Remote code execution and memory leakage
564.21s - 570.29s |  Man-in-the-middle denial-of-service or chaining attacks, which are not vulnerabilities in and by itself
571.09s - 573.09s |  but they can lead to
573.65s - 575.65s |  further exploitation
575.73s - 577.89s |  If the environment is right
578.45s - 586.30s |  So the goal for our procurement was to build a blue to Bluetooth
586.74s - 590.02s |  test kit for basically all the security and
590.82s - 592.82s |  Vulnerabilities on the market
593.66s - 600.82s |  Because that didn't exist at the moment and it was very difficult to build because there's no database of these
600.82s - 605.18s |  You will have academic papers. You have talks at DEF CON elsewhere
605.26s - 612.66s |  You will have some code released on github. You will have some people who have no code released. You have code that's
613.62s - 614.90s |  Developed on
614.90s - 619.82s |  Obsolete platforms where you can't get the hardware anymore or have to update software
619.82s - 625.22s |  All of these things are big problems and a lot of work to put this into one toolkit
628.30s - 635.42s |  On the so that's the general problem on the testing well Bluetooth testing has some
636.42s - 638.50s |  black box issues, of course
639.58s - 641.90s |  Yeah, kind of false positives false negatives
643.26s - 648.78s |  Automation at least of the denial-of-service stuff can be quite difficult because if
649.62s - 651.82s |  you basically crash the
652.78s - 654.78s |  entertainment system of your car
654.82s - 658.58s |  Or the Bluetooth system of your car and you want to restart the whole thing
658.58s - 663.70s |  we found some cars where you have to get out of the car lock the car and not just and
663.98s - 669.46s |  walk away walk away for 20 minutes because only then the car actually shuts off and restarts and
669.98s - 677.66s |  At that point, yeah, it's quite extensive the time that you need obviously to test several vulnerabilities
680.38s - 687.66s |  No matter we built this toolkit and exists it's has been online on github for a few months now
688.86s - 691.42s |  Link is here will also be on the on the last slide
692.14s - 696.58s |  Goals were collecting all these exploits that we can find and reproduce
697.58s - 699.58s |  44 and all in all
700.50s - 701.86s |  we
701.86s - 703.26s |  try to
703.26s - 709.98s |  Automate as much as possible. But yeah, we have some completely automated stuff some semi automated and somewhere
709.98s - 711.98s |  You have to do something manual
712.42s - 716.72s |  That's just the general
717.56s - 719.92s |  Architecture, so we have some yaml files
720.68s - 727.48s |  If you have new exploits, it's modular. You can add these files to the to the toolkit and
728.88s - 732.84s |  from there you need the basic setup that I will show and
734.28s - 739.92s |  Can go to the car connect to it and see which other vulnerabilities are present
740.64s - 745.40s |  So after building the toolkits
746.04s - 750.36s |  The second part was really let's check a lot of cards as many as we can find
752.12s - 759.40s |  We set up the toolkit as you see here with just any Ubuntu based box and a laptop or VM
759.92s - 761.92s |  Near some cables
762.16s - 765.72s |  For the full toolkit to be useful you will need
767.08s - 768.40s |  for example
768.40s - 775.16s |  Not only but also a Nexus 5 phone fairly old phone is cheap, but maybe not so trivial to get it on the market
775.88s - 776.92s |  because
776.92s - 779.08s |  There some other researchers have built
780.04s - 784.52s |  frameworks where you can really control the the Bluetooth stack in detail and
785.36s - 787.64s |  You can also get the ESP rower kit
789.40s - 793.88s |  If you don't have one of them, you can't test everything but at least partly you can do it
794.68s - 801.28s |  Overall, we found that with all the problems. It takes us one to three hours per car. You need to start the engine
801.80s - 807.12s |  to do most of the tests which can also be a problem if you're testing in garage and
807.96s - 811.40s |  Somewhere underground right? You don't want to run the engine for three hours
812.16s - 814.16s |  That would not be safe
814.80s - 818.48s |  Easier to test for electric cars. That's definitely a bonus
820.40s - 824.92s |  How did we procure cars you see the different manufacturers here
825.56s - 830.16s |  That was our job as I said, we have a lot of different cars manufacturers
830.32s - 836.28s |  So we took all our own cars brought us our army logistics
836.28s - 840.44s |  I took some of our own cars as researchers as our friends
841.04s - 843.04s |  overall 22 different cars
843.96s - 850.92s |  Most of them fully tested for only partially because we had them at the beginning of our research and there were more
851.16s - 853.16s |  exploits coming on later
853.40s - 857.76s |  price range everything from very cheap to fairly up markets and
859.00s - 866.84s |  The manufacturers or the Bluetooth systems at least covering our estimate roughly 60% of the global market by sales
868.04s - 872.00s |  Roughly 12 out of 15 of the top manufacturers selling cars last year
873.04s - 876.72s |  The tests are non-invasive. It's just connecting Bluetooth, basically
878.04s - 883.96s |  So let's get to the results overall took us. Yeah 40 ish hours
885.76s - 887.76s |  We found 73
888.36s - 890.36s |  vulnerabilities in these cars
890.36s - 895.52s |  So remember most of these exploits are known, but they're still all
896.44s - 898.44s |  present in these cars
898.96s - 900.96s |  Not everything can be solved
901.36s - 907.40s |  So we reported everything that was relevant and could be solved to the manufacturers and
909.00s - 911.00s |  Reported them responsibly
911.92s - 913.92s |  This shows part of the reason right
914.60s - 919.56s |  Cars like very much an adoption of standards. There's never the news Bluetooth version
919.56s - 926.04s |  We found that it takes roughly or the median age of a Bluetooth version in the car is seven years behind
926.56s - 928.76s |  the actual release Bluetooth standard
929.76s - 932.96s |  Full results of our car tests. They're also on the github
934.32s - 936.32s |  you see
936.48s - 941.32s |  Different range like, you know, you'd think very new cars should have no to
942.24s - 944.80s |  Fewer vulnerabilities that was true for these two
945.60s - 951.72s |  Not true for many others that were also fairly new from 2022 2023. We found a lot of
953.12s - 955.16s |  Vulnerabilities even critical ones in those
958.80s - 960.36s |  There's
960.36s - 967.40s |  Just another look at this right average number of vulnerabilities per car per manufacturer different
968.04s - 971.56s |  Ones here can focus on critical vulnerabilities
971.88s - 978.00s |  We found them well as you can see here and mostly Renault Opel and and Volkswagen a
978.64s - 980.64s |  few ones
980.68s - 982.68s |  denial-of-service vulnerabilities
983.52s - 987.08s |  prevalent in several manufacturers, but
987.92s - 993.84s |  So we don't have a lot of time you can look up the details for that on on the github we did found
994.24s - 998.08s |  two novel exploits and novel attacks doing our research
999.64s - 1006.12s |  The details on that are really extensively covered in the main stage talk yesterday still
1007.64s - 1010.36s |  Briefly going over it. There's one way
1011.04s - 1014.68s |  You can connect to cars and extract the contacts
1014.68s - 1021.28s |  So if you have a shared threat model, right you rent a car or have one of these
1022.84s - 1024.84s |  car sharing
1025.64s - 1030.96s |  Systems that happen exist in many countries, right? You just rent a car for a couple hours
1031.92s - 1033.96s |  Somebody connected their Bluetooth phone to that
1034.88s - 1038.32s |  the contacts will be saved later on you can go there and
1039.40s - 1042.02s |  Extract the contacts that were on the car
1042.78s - 1044.78s |  So we can see it here on the left
1046.66s - 1048.66s |  Should say
1048.66s - 1050.98s |  No contacts available if you connect with your phone
1051.74s - 1053.74s |  But if you run this new
1054.82s - 1062.54s |  Vulnerability, there's new exploits then you can as you see on the right actually extract the contacts that we had on our phone before
1065.46s - 1067.46s |  The second one is
1068.30s - 1074.66s |  Another way to establish a man-in-the-middle position even with a system that have numeric comparison and
1076.50s - 1078.98s |  I'll get to what that can do for you
1078.98s - 1085.82s |  It's just the proof of concept that it worked with four different cars and Hyundai Renault Audi and BMW
1086.06s - 1088.58s |  It's a so relatively widespread issue
1090.06s - 1092.38s |  What can we do with these things right if you
1092.98s - 1093.82s |  I
1093.82s - 1099.78s |  Wonder man-in-the-middle on Bluetooth and denial of service. How is that a problem? Why do we care?
1100.30s - 1102.78s |  You said cars are very complex systems
1102.78s - 1109.38s |  So one thing is we can obviously do some lateral movement. We can get get in for Bluetooth and get into
1109.90s - 1111.90s |  other systems of the car
1112.78s - 1115.98s |  we can as I said to establish man-in-the-middle positions and
1116.54s - 1121.80s |  Then that's something we discussed extensively yesterday. We can really
1122.38s - 1126.10s |  Get your two-factor tokens if they're sent by SMS
1127.02s - 1129.02s |  or
1129.38s - 1132.06s |  Yeah, get these tokens and then obviously
1132.94s - 1135.18s |  Exploit whatever account two-factor
1135.86s - 1141.34s |  You have set up. So that's quite workable. We've reported this also to the
1142.38s - 1143.58s |  phone manufacturers
1143.58s - 1149.82s |  So Apple and Google there were some difference in opinions whether this is a big problem or not
1150.50s - 1153.58s |  Google did patch it Apple did not patch it
1155.02s - 1158.54s |  You can basically build your own opinion on this
1159.54s - 1166.22s |  Brings me takeaways. I hope you realize much of Bluetooth is fundamentally insecure. This has been well known
1166.22s - 1171.86s |  There's so many exploits for this. This is both in the standards in the protocol and in the implementations
1172.66s - 1174.50s |  even the newest cars
1174.50s - 1176.14s |  new
1176.14s - 1180.78s |  Systems are shipped with protocol level Bluetooth vulnerabilities. We can't really fix this easily
1181.98s - 1183.98s |  You need to securely pair
1184.38s - 1190.54s |  But even that doesn't help because the repairing of the system might also be malicious
1191.54s - 1192.90s |  and
1192.90s - 1200.14s |  We built this toolkit. So if you want to know what your own car how vulnerable that is on the Bluetooth level, please use that
1201.06s - 1204.26s |  If you are a car manufacturer car part manufacturer
1204.46s - 1210.50s |  Please also use it check your security poster with regards to Bluetooth any questions
1211.34s - 1213.34s |  look at the at the github and
1214.18s - 1221.02s |  Come to me afterwards, but also please contact Vlad who did really most of the technical work here. Thank you