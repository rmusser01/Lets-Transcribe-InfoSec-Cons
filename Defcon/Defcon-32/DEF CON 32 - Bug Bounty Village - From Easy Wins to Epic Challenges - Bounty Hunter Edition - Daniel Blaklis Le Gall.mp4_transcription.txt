{
  "webpage_url": "local:1731782025:70c3ae7a:DEF CON 32 - Bug Bounty Village - From Easy Wins to Epic Challenges - Bounty Hunter Edition - Daniel Blaklis Le Gall.mp4",
  "title": "DEF CON 32 - Bug Bounty Village - From Easy Wins to Epic Challenges - Bounty Hunter Edition - Daniel Blaklis Le Gall.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 1.76s | This text was transcribed using whisper model: large-v2

 Good morning, everyone.
1.76s - 6.44s |  Welcome to talk two in the Creator Stage 4.
6.44s - 8.64s |  Apologies to those who are watching online.
8.64s - 11.16s |  We still are having technical difficulties.
11.16s - 14.84s |  And so we only have the slides on the screen.
14.84s - 15.92s |  We are working on it.
15.92s - 19.60s |  Hopefully, we'll have it for the next talk.
19.60s - 24.28s |  But I would like to introduce Blackis on his talk
24.28s - 28.28s |  from Easy Wins to Epic Challenges, the Bounty Hunter
28.28s - 29.44s |  Edition.
29.44s - 38.01s |  You want to go first?
38.01s - 39.01s |  Hey, everyone.
39.01s - 45.05s |  So I present you a bit of my journey in Bug Bounty.
45.05s - 49.45s |  I tried to select some bugs that were quite surprising.
49.45s - 53.33s |  Surprising in the sense of being very easy
53.33s - 55.29s |  or being very difficult.
55.29s - 59.37s |  So I will present a couple of fun bugs.
59.37s - 62.13s |  So a bit about myself.
62.13s - 65.41s |  So I'm doing Bug Bounty for seven years now.
65.49s - 69.49s |  I did a lot of CTFSO for 15 years or something like that.
69.49s - 72.29s |  And in general, I'm working for 18 years now.
72.29s - 76.05s |  So that's quite a long time I'm doing that.
76.05s - 79.93s |  I'm definitely a web application enjoyer.
79.93s - 81.45s |  I love PHP.
81.45s - 83.09s |  Who doesn't?
83.09s - 86.05s |  And I love doing some source code review.
86.05s - 89.97s |  I'm definitely not a recon guy, not doing anything
89.97s - 92.05s |  like reconnaissance or something like that.
92.05s - 95.49s |  I'm just going to main apps and break them
95.49s - 97.61s |  most of the time, at least.
97.61s - 103.89s |  I really love complex chain, complex exploit,
103.89s - 105.53s |  or things like that.
105.53s - 108.53s |  And yeah, in my Bug Bounty journey,
108.53s - 113.41s |  I did something around like $2 million across all platforms.
113.41s - 116.45s |  And I'm also a current ambassador for France.
116.45s - 117.97s |  So yeah, I'm French.
117.97s - 120.45s |  That explains my pretty bad English.
120.45s - 122.53s |  I'm sorry for that.
122.53s - 125.77s |  If something isn't clear, don't hesitate to come later
125.77s - 128.25s |  and just ask me.
128.25s - 133.05s |  So we'll begin with our first customer, Swisscom.
133.05s - 137.53s |  So I will present a couple of bugs I found on them.
137.53s - 142.61s |  Swisscom is the biggest telco provider in Switzerland.
142.61s - 144.77s |  They are doing a lot of things, not only telcos.
144.77s - 147.81s |  They are active pretty much everywhere.
147.85s - 153.69s |  They decided to open a white card Bug Bounty program in 2016.
153.69s - 156.25s |  That was my first Bug Bounty experience.
156.25s - 160.81s |  I started like end of 2016 on them.
160.81s - 163.05s |  That's a pretty good team, to be honest.
163.05s - 163.93s |  They're pretty fair.
163.93s - 167.45s |  They're pretty kind, good communication with them.
167.45s - 171.93s |  They have a very big scope, like millions of IP addresses.
171.93s - 173.69s |  So it's pretty cool.
173.73s - 178.21s |  And I did something around like $500,000 on them.
178.21s - 181.53s |  So yeah, that's quite good.
181.53s - 187.49s |  Definitely, the Bug Bounty, they decided to open definitely
187.49s - 193.73s |  improved their security stuff over time.
193.73s - 197.93s |  And yeah, the bugs I'm presenting now are quite old.
197.93s - 203.21s |  Definitely, they're like pretty much other stuff now.
203.21s - 206.61s |  But still, quite some cool bugs.
206.61s - 210.53s |  If some people are interested by their Bug Bounty programs,
210.53s - 212.33s |  they're outside of any platform.
212.33s - 215.85s |  You can just take a peek of the URL.
215.85s - 219.81s |  Everything is explained there.
219.81s - 222.61s |  So let's talk about first target,
222.61s - 224.37s |  which is Swisscom Cockpit.
224.37s - 226.97s |  That's the mobile phone manager in Swisscom.
226.97s - 230.57s |  That's basically where you can see your subscription
230.73s - 234.17s |  where you can just buy some packs for traveling,
234.17s - 236.41s |  and things like that.
236.41s - 239.33s |  There is a lock-in process on it that is quite particular.
239.33s - 241.81s |  It trusts you sending your phone number,
241.81s - 243.93s |  and you receive an SMS token.
243.93s - 246.29s |  You need also to fill a capture, and you're logged in
246.29s - 249.29s |  if the card is valid, right?
249.29s - 253.85s |  So it definitely manages some serious confidential data,
253.85s - 257.13s |  a lot of PII payments, things like that.
257.13s - 259.21s |  You can see everything that is related
259.21s - 261.73s |  to subscription on there.
261.73s - 265.45s |  So definitely a good target for me.
265.45s - 268.21s |  Also, pretty good stuff for us.
268.21s - 270.29s |  There is a staging instance on the internet
270.29s - 273.81s |  that is publicly available.
273.81s - 276.45s |  At our school, there might be some stuff
276.45s - 278.77s |  that is not published on the production server,
278.77s - 280.97s |  and things like that.
280.97s - 284.69s |  So let's talk about the first bug.
284.69s - 287.41s |  I saw that on the staging instance.
287.41s - 290.69s |  The SMS token is always 1111.
290.69s - 292.49s |  Pretty good.
292.49s - 295.21s |  The problem is the staging log-in doesn't work.
295.21s - 300.09s |  It always throws some internal server error,
300.09s - 302.45s |  so I can't log in with it.
302.45s - 305.97s |  And I was like, yeah, maybe that's the SMS
305.97s - 307.53s |  central repository.
307.53s - 311.49s |  It might be shared with the production system.
311.49s - 314.97s |  So I just try to log in on the production system,
314.97s - 318.93s |  then try to log in on the staging system,
318.93s - 324.25s |  then use 1111 on production system, and I was logged in.
324.25s - 330.33s |  So that was a very simple bug, but definitely a good impact.
330.33s - 332.17s |  So let's see a demo.
332.17s - 336.69s |  If everything is working well, we should be able to see.
336.69s - 341.13s |  Yeah, so I'm just entering a phone number.
341.13s - 344.41s |  Just trying to sign in, doing the same on the staging
344.41s - 350.95s |  instance, and now trying on the prod instance
350.95s - 357.78s |  to just input 1111, filling the CAPTCHA, sign in,
357.78s - 359.02s |  and I'm signed in.
359.02s - 362.22s |  So yeah, pretty easy.
362.22s - 366.78s |  That's not video of the real system.
366.78s - 369.10s |  I reproduced everything locally.
369.10s - 373.58s |  I will share the demos videoed and the instances
373.58s - 375.82s |  a bit later after the talk.
375.82s - 380.10s |  So yeah, this was paid $8,000, which is pretty good
380.10s - 381.70s |  because that was super easy.
381.70s - 385.10s |  But that had a nice impact for them
385.10s - 388.38s |  because I had PII of every customer there,
388.38s - 391.58s |  maybe millions of PII there.
391.58s - 392.82s |  So yeah, pretty good.
395.58s - 402.26s |  Second bug, so as I said, the login process is pretty easy.
402.30s - 405.02s |  You just input your phone number.
405.02s - 406.46s |  You submit.
406.46s - 409.38s |  Then you receive SMS codes that you
409.38s - 411.90s |  need to submit with CAPTCHA.
411.90s - 416.70s |  But the process is also setting you three encrypted cookies.
416.70s - 419.30s |  The first one is a cockpit CAPTCHA text.
419.30s - 422.06s |  It definitely, by the name, I guess,
422.06s - 425.02s |  it definitely manages CAPTCHA texts.
425.02s - 428.54s |  The cockpit MSIS DNT that manage the phone numbers
428.54s - 431.18s |  that you input at the first step.
431.18s - 434.42s |  And the cockpit SMS token key, which I guess
434.42s - 437.46s |  is a pin code that was received by SMS.
437.46s - 442.98s |  So I was like, OK, maybe they are using the same key
442.98s - 444.14s |  for encryption.
444.14s - 449.94s |  So I decided to copy the cockpit SMS token key cookie
449.94s - 453.46s |  into the cockpit CAPTCHA text, reload the page,
453.46s - 457.42s |  and the PII code is just leaked into the CAPTCHA.
457.42s - 458.90s |  So here it is.
458.90s - 463.90s |  That's not very clear, because there is some maybe padding
463.90s - 464.46s |  issue.
464.46s - 469.38s |  But you can see the code there that is 7998.
469.38s - 472.62s |  So that's, once again, an authentication bypass
472.62s - 477.66s |  by leaking the SMS pin token into the CAPTCHA, which
477.66s - 481.18s |  is pretty lame, but pretty good for me.
481.18s - 488.66s |  So let's do a small, if I can move
488.66s - 494.98s |  that, here it is, out of the demo.
494.98s - 499.24s |  So just filling the phone number again,
499.24s - 503.92s |  trying to see the cookies, putting the SMS token key
503.92s - 508.68s |  into the CAPTCHA text cookie, just reloading,
508.68s - 516.88s |  and we get the pin code into the CAPTCHA, which is RKB5T.
516.88s - 518.72s |  That's a pin code I received by SMS.
518.72s - 523.32s |  So I'm, once again, logged in with that.
523.32s - 529.40s |  So pretty cool, but definitely not as serious
529.40s - 532.44s |  as the previous bug, because it was pretty hard
532.44s - 534.12s |  to read the CAPTCHA.
534.12s - 536.52s |  You can't really automate the attack.
536.52s - 539.76s |  So they decided to pay $3,000 for that.
539.76s - 542.40s |  Once again, it was quite an easy bug,
542.40s - 545.56s |  so I can complain on the amount.
545.56s - 548.16s |  So I decided it might be the time
548.16s - 554.60s |  to stop on cockpits, but no, here is a cell bug.
554.60s - 557.44s |  Try to log in, input your phone number,
557.44s - 560.64s |  but at the time you receive the SMS pin code,
560.64s - 564.60s |  just cancel, and authentication successful.
564.60s - 567.36s |  I have no idea why.
567.36s - 572.72s |  I suppose they did something bad by patching some of my bugs.
572.72s - 574.48s |  Yeah, probably a fail.
574.48s - 577.48s |  So they decided to pay $8,000 for that,
577.48s - 579.40s |  because I just canceled the login process
579.40s - 581.12s |  and I was logged in.
581.12s - 583.00s |  I suppose you don't expect a demo for that.
583.00s - 586.24s |  I mean, that's not really needed, I guess.
586.24s - 592.16s |  So for this time, let's really move on to another target.
592.16s - 596.64s |  So Swisscom WorkLink is a Swisscom acquisition
596.64s - 599.32s |  that was a company that just bought.
599.32s - 601.48s |  I decided to have a check.
601.48s - 605.16s |  They were using a completely unknown CMS
605.16s - 608.00s |  called Webplication, something in PHP,
608.00s - 611.28s |  you know, that triggered me always.
611.28s - 616.28s |  So I decided to buy a Webplication license
616.28s - 620.40s |  so I can grab the code and turn that
620.40s - 625.00s |  into some source code review.
625.00s - 629.48s |  Firstly, I saw that the thing is not using SQL at all.
629.48s - 633.44s |  It's only some XML databases and some file system
633.44s - 638.04s |  storage, which is quite not so usual.
638.04s - 643.92s |  So firstly, I saw that they have a general pass-traversal
643.92s - 645.60s |  prevention mechanism.
645.60s - 650.72s |  And in general, they are trying to sanitize every variable
650.72s - 653.28s |  that you can input.
653.28s - 654.88s |  There is an easy bypass, because they
654.88s - 659.12s |  are trying to remove pass-traversal characters.
659.12s - 661.00s |  And later in the process, they're
661.00s - 662.60s |  trying to remove pipes.
662.64s - 667.76s |  So you can just use dot pipe dot pipe slash,
667.76s - 671.48s |  and it will be transformed to dot dot slash.
671.48s - 675.00s |  So there is an easy bypass of the mechanism
675.00s - 676.36s |  to prevent pass-traversal.
676.36s - 681.44s |  So I decided to have a look for some pass-traversal issues.
681.44s - 684.20s |  I have found pretty easily vulnerabilities
684.20s - 687.48s |  that allow me to delete all the files in a directory.
687.48s - 691.60s |  But it wasn't reachable, because it
691.60s - 695.04s |  checked for a specific directory on the app that
695.04s - 696.72s |  was never used anywhere.
696.72s - 701.28s |  So there is no way to create that directory.
701.28s - 706.40s |  But I found an arbitrary directory creation,
706.40s - 709.48s |  which is generally something that is quite useless.
709.48s - 712.96s |  But for that case, it was quite useful for me.
712.96s - 714.80s |  So I created the directory that was
714.80s - 720.16s |  needed to reach the directory empty vulnerability.
720.16s - 720.92s |  So cool.
720.96s - 724.12s |  I can delete files in directories.
724.12s - 726.44s |  But come on, that's not useful.
726.44s - 729.60s |  I'm definitely not wanting to deface a website.
729.60s - 732.36s |  That's definitely not the goal.
732.36s - 736.64s |  So I did a check.
736.64s - 742.64s |  And in the web application slash grid5 directories,
742.64s - 744.44s |  there is a .htaccess file.
744.44s - 746.40s |  That's the only file there.
746.40s - 748.80s |  But in the subdirectories, there is
749.24s - 754.24s |  all the databases, all the XML databases there.
754.24s - 760.00s |  The only mechanism of protection there is a .htaccess file.
760.00s - 763.08s |  So maybe we can just remove the .htaccess file,
763.08s - 767.40s |  so we can access the XML databases then.
767.40s - 769.04s |  For some reason, I don't know why,
769.04s - 773.48s |  but they decided to name all their XML databases
773.48s - 776.92s |  with a .php extension.
776.96s - 780.96s |  That's quite a strange decision.
780.96s - 786.44s |  But I found that the login logs database
786.44s - 789.80s |  is containing the session token for all users there.
789.80s - 792.08s |  So I can just read it.
792.08s - 794.52s |  That's an authentication bypass.
794.52s - 795.72s |  That's a win.
795.72s - 797.88s |  No, it works locally.
797.88s - 799.88s |  It doesn't work remotely.
799.88s - 802.88s |  I have internal server error everywhere.
802.88s - 804.32s |  So I was quite in despair.
804.36s - 805.52s |  I was crying a bit.
808.24s - 814.88s |  So my guess was my work link was using PHP short tags.
814.88s - 819.96s |  So it clashed with XML open tags.
819.96s - 826.88s |  So the system was thinking that the XML file was some PHP.
826.88s - 828.80s |  It broke because of some syntax error,
828.80s - 831.20s |  and so just through internal server error.
831.20s - 833.60s |  So definitely didn't work.
833.60s - 839.36s |  I decided to go and search other vulnerabilities.
839.36s - 842.40s |  I found a pre-auth FC there, but it
842.40s - 844.68s |  failed again for the exact same reason.
844.68s - 847.52s |  So I cried a bit again.
847.52s - 851.72s |  And I found something that was maybe interesting,
851.72s - 852.56s |  but quite lame.
852.56s - 855.04s |  I didn't see the impact at first.
855.04s - 859.28s |  I found an XML injection in the log user database.
859.28s - 860.68s |  So pretty much the same.
860.72s - 866.44s |  It's also a PHP extension in the same directories.
866.44s - 870.64s |  So the injection is on the username,
870.64s - 872.80s |  and that's like the database that
872.80s - 877.72s |  contains if a username is blocked by the system.
877.72s - 881.44s |  So if you're trying to log in with a specific username
881.44s - 884.28s |  more than three times and the login is failed,
884.28s - 887.84s |  you're injected in that specific database.
887.84s - 890.84s |  So there is an XML injection there.
890.84s - 892.72s |  OK, not so useful.
892.72s - 897.04s |  I can block up the entire users maybe, but yeah, quite lame.
897.04s - 901.40s |  So I did have a check on how the XML database are
901.40s - 903.36s |  passed by the application.
903.36s - 909.00s |  I saw that the developers did that quite well.
909.00s - 911.76s |  They decided to add some layers of protection
911.76s - 914.48s |  trying to prevent xinclude by calling
914.48s - 919.64s |  DOM document xinclude function with a false parameter.
919.64s - 921.60s |  No luck for them.
921.60s - 923.12s |  Thanks PHP.
923.12s - 925.04s |  It enabled xinclude instead.
925.04s - 928.40s |  So definitely not what they wanted.
928.40s - 930.48s |  So for those that don't know, xinclude
930.48s - 935.12s |  is an XML feature that allows to include other XML or even
935.12s - 937.52s |  not XML documents into the current one.
937.52s - 944.26s |  So it's exactly like PHP include, but for XML.
944.26s - 950.26s |  So trying to put that username will definitely
950.26s - 955.34s |  add an xinclude directive that will load the login logs
955.34s - 959.78s |  database into the blocked users database.
959.78s - 964.18s |  That's a notation for xinclude directive.
964.18s - 966.38s |  That's a bit complicated.
966.38s - 968.94s |  But yeah, definitely the impact there
968.94s - 974.42s |  is we can just include the entire login logs database
974.42s - 976.22s |  into the blocked user database.
976.22s - 979.58s |  But yeah, xinclude is doing their best
979.58s - 983.98s |  to reformat all the files to be a fully valid XML.
983.98s - 988.54s |  You can't really break the file by using xinclude,
988.54s - 989.46s |  which is quite good.
989.46s - 993.46s |  It's doing automatic correction and things like that.
993.46s - 994.86s |  But what knows?
994.86s - 995.74s |  That's still useless.
995.74s - 997.78s |  I mean, yeah, I can include the database
997.78s - 1002.10s |  into another, but that's quite useless.
1002.10s - 1005.90s |  But I tried to see how the log users feature is working,
1005.90s - 1008.10s |  and I found a blind xpass injection.
1008.10s - 1015.38s |  So in the username, if you inject some xpass notation,
1015.38s - 1018.22s |  you have an injection there.
1018.22s - 1022.86s |  So you can definitely extract the entire log database.
1022.86s - 1026.26s |  And I guess you see what's the interest there.
1026.26s - 1033.42s |  We can inject the content of the database in the log database,
1033.42s - 1035.70s |  and then we can exfiltrate it.
1035.70s - 1042.50s |  So the log database, yes, I would say that.
1042.50s - 1045.90s |  So we can choose a blind xpass injection.
1045.90s - 1051.54s |  We can exfiltrate session token byte by byte per byte.
1051.54s - 1055.14s |  That gave me an intake around the application
1055.14s - 1057.38s |  and that time, in the admin panel,
1057.38s - 1059.78s |  there is a feature to get RCE.
1059.78s - 1062.06s |  So this time is a win.
1062.06s - 1063.70s |  It works remotely.
1063.70s - 1069.90s |  So the chain was log user with xmn injection in the username
1069.90s - 1075.22s |  with the xinclude directive pointing to the xmn logs.
1075.22s - 1079.90s |  Exfiltrate it with xpass injection, get admin session,
1079.90s - 1089.32s |  get RCE, and let's go for a demo.
1089.32s - 1096.43s |  So we can see there on the right that the log database is empty.
1096.43s - 1101.67s |  Now we try to log in with x to see that just the log database
1101.67s - 1106.75s |  is now filled with one entry for the x user.
1106.75s - 1110.23s |  We now try to inject some xml to see if there
1110.23s - 1114.77s |  is an xmn injection there.
1114.77s - 1116.01s |  And yes, it is.
1116.01s - 1123.33s |  There is now a FUBAR attribute in the block entry.
1123.33s - 1125.57s |  So that time, we're using the payload
1125.57s - 1129.09s |  that we saw before with the xinclude directive,
1129.09s - 1139.07s |  trying to include the login logs in the block database.
1139.07s - 1143.03s |  So yeah, I just saw that the login log contains some session
1143.03s - 1144.35s |  stuff there.
1144.35s - 1150.32s |  So we make that user with the payload to be blocked.
1150.32s - 1153.08s |  We can see that the xinclude directive is now
1153.08s - 1156.60s |  there in the file of the blocked database.
1156.60s - 1160.24s |  We make another user, another random user, to be blocked.
1160.24s - 1163.04s |  So the file will be parsed again.
1163.04s - 1166.52s |  And this time, there is the entire login log
1166.52s - 1168.72s |  database in that block database.
1168.72s - 1172.44s |  So this time, it was completely replaced
1172.44s - 1176.56s |  by the original login logs file.
1176.56s - 1179.76s |  So now we can try to use the xpass injection.
1179.76s - 1183.88s |  So we are targeting a log element,
1183.88s - 1186.64s |  trying to infiltrate the session.
1186.64s - 1189.44s |  We're checking if it begins by an l.
1189.44s - 1193.24s |  We know it is because we can see that on the right screen.
1193.24s - 1197.56s |  So if it begins by an l, we should
1197.56s - 1199.96s |  receive that the account is blocked.
1199.96s - 1203.76s |  But if we check if it begins by x,
1203.76s - 1205.32s |  we receive that no user is found.
1205.32s - 1209.24s |  So we have an oracle to leak the characters one by one.
1209.24s - 1213.28s |  So I write a little script.
1213.28s - 1216.28s |  And yeah, it definitely leaks the session token
1216.28s - 1217.32s |  character by character.
1217.32s - 1222.88s |  So yeah, we got an admin account through that
1222.88s - 1225.68s |  and get RC remotely.
1225.68s - 1229.60s |  For that, Swisscom decided to pay me $3,000.
1230.44s - 1238.80s |  $2,500 for the bug, $500 bonus for the nice shell.
1238.80s - 1245.96s |  And also, the editor decided to reward me with $2,000.
1245.96s - 1248.04s |  They didn't have a bug bounty, but they
1248.04s - 1249.68s |  were impressed by the bug.
1249.68s - 1253.40s |  So pretty cool from them.
1253.40s - 1258.24s |  So now let's switch to yet another customer,
1258.24s - 1261.76s |  another Swiss one, so SwissPost.
1261.76s - 1265.44s |  I'm not sure I need to explain what is SwissPost.
1265.44s - 1266.80s |  Pretty standard.
1266.80s - 1268.84s |  They are like the postal office in Switzerland.
1268.84s - 1272.56s |  But they are also a private company
1272.56s - 1274.52s |  doing a lot of different things.
1274.52s - 1279.04s |  And they are involved in a lot of major projects
1279.04s - 1282.72s |  in Switzerland, like e-voting.
1282.72s - 1284.84s |  They're also very active in cybersecurity.
1285.60s - 1291.60s |  Like about a lot of local cybersecurity companies.
1291.60s - 1295.32s |  So they are very active in the cybersecurity stuff
1295.32s - 1296.76s |  in Switzerland.
1296.76s - 1300.96s |  They decided to start a bug bounty in 2019,
1300.96s - 1304.48s |  especially for their e-voting platform.
1304.48s - 1309.00s |  And they decided to add assets over time.
1309.00s - 1310.88s |  So that's a super fair team.
1310.88s - 1313.80s |  They're pretty good, pretty much the same as Swisscom,
1313.80s - 1315.48s |  to be honest.
1315.48s - 1318.68s |  We can have a lot of communication with them.
1318.68s - 1320.08s |  They're pretty good.
1320.08s - 1323.72s |  And yeah, if some people are from the voting village,
1323.72s - 1325.28s |  go on their bug bounty programs.
1325.28s - 1331.24s |  They are paying like $230,000 for a very critical bug there.
1331.24s - 1333.88s |  That's definitely a good program.
1333.88s - 1336.24s |  I'm not a crypto guy, so I'm not going back.
1336.24s - 1338.56s |  Maybe you are.
1338.56s - 1341.32s |  So if you want to have a check, everything
1341.32s - 1343.92s |  is described on their VDP page.
1343.92s - 1344.76s |  So vdp.post.ch.
1348.04s - 1354.36s |  So for the first bug, I will talk about their payment
1354.36s - 1355.60s |  system.
1355.60s - 1360.16s |  So they have their own payment system, completely custom.
1360.16s - 1361.44s |  Everything is quite common.
1361.44s - 1364.24s |  You get some sign requests.
1364.24s - 1365.88s |  There's a lot of different endpoints
1365.88s - 1367.64s |  for failure and success.
1367.68s - 1371.08s |  And also, you can stack money on your accounts,
1371.08s - 1372.56s |  on your postal accounts.
1372.56s - 1375.28s |  You have a balance system, so it's always interesting
1375.28s - 1379.12s |  if we can get infinite money there.
1379.12s - 1382.96s |  I will switch this back because we have some time issue.
1382.96s - 1385.12s |  Let's go on just a good one.
1385.12s - 1391.56s |  So I did find a lot of stuff there, so I was hacking on them.
1391.56s - 1395.52s |  And I was trying to manipulate some payment session there,
1395.52s - 1401.12s |  changing price in a transaction, a lot of things.
1401.12s - 1405.28s |  But a delivery man rang the doorbell in my office,
1405.28s - 1408.08s |  so I need to cut the package, seeing everything.
1408.08s - 1412.20s |  I decided that was the time for a coffee break.
1412.20s - 1415.76s |  And then after maybe 10, 15 minutes, I don't know,
1415.76s - 1417.44s |  got back to my chair.
1417.44s - 1420.92s |  And I had some money coming from nowhere on my account,
1420.92s - 1424.52s |  so I had no idea why.
1424.52s - 1428.96s |  So I decided to replay everything I did.
1428.96s - 1431.80s |  I was like, probably I triggered something,
1431.80s - 1433.88s |  and I didn't even know.
1433.88s - 1438.56s |  So I tried to replay everything, so that failed.
1438.56s - 1440.20s |  No idea what happened.
1440.20s - 1443.84s |  So I did to replay everything, including the coffee break.
1443.84s - 1446.28s |  That was maybe the main point.
1446.28s - 1449.20s |  So I did a coffee break with a colleague,
1449.20s - 1454.56s |  and there was my account was credited again.
1454.56s - 1457.60s |  So I was like, OK, what the fuck?
1457.60s - 1460.04s |  I tested a lot of things.
1460.04s - 1464.88s |  And the real explanation is when you run the transaction,
1464.88s - 1467.84s |  after the transaction is typed out,
1467.84s - 1473.04s |  so you didn't make the payment in the good time frame.
1473.04s - 1476.72s |  It's just considered successful, so probably a bad check
1476.72s - 1478.08s |  of payment states.
1478.08s - 1483.00s |  It default to success instead of defaulting to a failure.
1483.00s - 1489.90s |  So yeah, let's go for a demo.
1489.90s - 1496.55s |  So let's buy a very good crescent, because I'm French.
1496.55s - 1498.91s |  Oh, that's not a good demo.
1498.91s - 1501.55s |  I want a crescent, a bigger one.
1501.55s - 1503.51s |  Let's go for it.
1503.51s - 1504.15s |  Just wait.
1504.15s - 1510.03s |  Just go grab a coffee, maybe.
1510.03s - 1512.47s |  Are you patient enough?
1512.47s - 1515.68s |  Oh, yeah.
1515.68s - 1517.72s |  Joking, it will just last.
1518.00s - 1522.40s |  Yeah, success payments, just by waiting.
1522.40s - 1527.72s |  I mean, pretty good solution to get some money, right?
1527.72s - 1531.32s |  So I was paid $3,000 for that.
1531.32s - 1535.04s |  That's probably the most I get for a coffee break or two.
1535.04s - 1540.12s |  Definitely was quite profitable, right?
1540.12s - 1543.80s |  So let's go to another project of them.
1543.80s - 1550.48s |  They have a subdomain using a very, very unknown CMS.
1550.48s - 1554.48s |  So Peppershop, that's like a Swiss PHP CMS.
1554.48s - 1557.00s |  They also do some manager thing and things like that.
1557.00s - 1559.20s |  I never heard of them.
1559.20s - 1564.52s |  So I decided, once again, to buy a license of the CMS
1564.52s - 1566.36s |  so I get access to the code.
1566.36s - 1571.12s |  Once again, it's PHP, so I'm super interested by that.
1571.16s - 1575.28s |  And I just had a look at the code.
1575.28s - 1579.92s |  Everything was quite, you know, PHP.
1579.92s - 1583.20s |  So I saw that another main feature that
1583.20s - 1587.60s |  is quite interesting is a restart backup thing.
1587.60s - 1591.52s |  It's some, like, custom things.
1591.52s - 1594.44s |  They decided that the delimiter between SQL queries
1594.44s - 1596.68s |  will be that stuff.
1596.68s - 1597.88s |  No idea why.
1597.88s - 1601.64s |  Why don't you use, like, semicolon like everyone do?
1601.64s - 1602.36s |  I don't know.
1602.36s - 1604.32s |  They decided it is.
1604.32s - 1608.12s |  And they also have some features.
1608.12s - 1611.96s |  I don't know why, because I didn't see any occurrences
1611.96s - 1614.88s |  where they are using that, but they do.
1614.88s - 1620.44s |  So if you use the base64 start and the base64 end tags,
1620.44s - 1623.60s |  that would be replaced by a single-quoted string
1623.60s - 1626.96s |  of the base64 decoded string that
1627.04s - 1629.16s |  is between the tag.
1629.16s - 1631.00s |  I don't know why.
1631.00s - 1634.64s |  That's quite a strange feature, to be honest.
1634.64s - 1639.04s |  So the restart backup, the restart feature
1639.04s - 1642.84s |  is using a backup from a local file system.
1642.84s - 1646.20s |  That needs to be generated from the CMS backup feature,
1646.20s - 1651.84s |  so you can't upload anything or something like that.
1651.84s - 1655.48s |  So my goal was, maybe I can inject SQL queries
1655.48s - 1659.08s |  in backup from the front end.
1659.08s - 1664.68s |  The method is exploiting the very strange passing
1664.68s - 1667.92s |  to break SQL contexts.
1667.92s - 1675.68s |  So my idea is, if I use specific separator or tags
1675.68s - 1679.76s |  in some data that is stored in the database,
1679.76s - 1682.28s |  that will be stored in the database,
1682.28s - 1686.12s |  maybe when they will backup and restart again.
1686.12s - 1690.12s |  That would break something if I get some data with those tags,
1690.12s - 1694.56s |  maybe on my profile, on my, I don't know, username, name,
1694.56s - 1697.48s |  other comments, things like that.
1697.48s - 1701.88s |  The first problem is most fields are sanitized by default.
1701.88s - 1706.72s |  That's like a global sanitization
1706.72s - 1709.20s |  that is done on every field.
1709.20s - 1716.32s |  So no new lines, no hash, no special characters in general.
1716.32s - 1719.72s |  The second problem is that if the restart
1719.72s - 1724.60s |  fail on one SQL query, it's like ending the process
1724.60s - 1728.72s |  and not going further in the file.
1728.72s - 1733.00s |  I mean, for the first problem, the solution is quite easy.
1733.00s - 1736.48s |  Most fields are sanitized, but not all.
1736.48s - 1738.24s |  There are exceptions.
1738.24s - 1742.16s |  One of them are comments that are put on the other.
1742.16s - 1747.80s |  So I can definitely reach that field on the front end.
1747.80s - 1753.28s |  And the second problem, we have a separator between queries
1753.28s - 1755.32s |  and a way to inject single code.
1755.32s - 1760.40s |  So that should be possible to get a valid file
1760.40s - 1763.52s |  after injecting things.
1763.52s - 1770.88s |  So let's imagine a valid SQL query in the file formats.
1770.88s - 1774.76s |  So we control fully the values of bmqgen.
1774.76s - 1776.48s |  I have no idea what it means, but that's
1776.48s - 1779.16s |  the name of the database, of the table.
1779.16s - 1781.36s |  I have no idea what it is.
1781.36s - 1783.84s |  So we can control that fully.
1783.84s - 1786.40s |  And you can see the separator at the end.
1786.40s - 1790.12s |  So we're trying to use their base 64 feature
1790.12s - 1791.64s |  to break from single codes.
1791.64s - 1796.08s |  So we're trying to get something like that.
1796.08s - 1799.04s |  That will be transformed to that.
1799.04s - 1803.12s |  So we inject a single code, a parenthesis, a comment.
1803.12s - 1808.12s |  And that is working pretty well, to be honest.
1808.12s - 1813.88s |  So then my goal is to inject new queries in the packet file.
1813.88s - 1820.30s |  So this time, I'm also adding a separator and a new query
1820.30s - 1822.22s |  with a comment at the end.
1822.22s - 1827.30s |  So after being passed by the restart procedure,
1827.30s - 1828.70s |  that will give that.
1828.70s - 1830.74s |  And that's definitely valid.
1830.74s - 1839.26s |  So I was able to just inject an update to an arbitrary table,
1839.26s - 1841.50s |  changing arbitrary column there.
1841.50s - 1844.30s |  Pretty good.
1844.30s - 1849.26s |  So the impact is I can run arbitrary queries
1849.26s - 1850.82s |  on the restart process.
1850.82s - 1853.34s |  If they take a backup and restart,
1853.34s - 1856.18s |  that will run my queries.
1856.18s - 1857.30s |  Pretty good.
1857.30s - 1861.86s |  But the database is obviously that PHP,
1861.86s - 1865.30s |  storing some serialized PHP objects.
1865.30s - 1868.22s |  Because you know, relational databases
1868.22s - 1871.78s |  is done for that, storing full objects.
1871.78s - 1875.78s |  So I found, pretty fastly, a custom gadget
1875.78s - 1878.78s |  that allowed to delete local files.
1878.78s - 1882.46s |  Once again, not the most interesting primitive for us,
1882.46s - 1887.10s |  because that's definitely not a goal to delete files on them.
1887.10s - 1891.66s |  But I saw that the admin authentication mechanism is
1891.66s - 1894.06s |  just .htaccess file.
1894.06s - 1897.14s |  So that's just a basic authentication system.
1897.14s - 1900.34s |  So if we delete the .htaccess file,
1900.34s - 1902.90s |  everyone can go to slash admin.
1902.90s - 1905.14s |  And I mean, just that.
1905.14s - 1906.86s |  There is no authentication besides that.
1906.90s - 1910.06s |  So just like, you need either a valid credential
1910.06s - 1913.18s |  or you need to pipe as a .htaccess.
1913.18s - 1915.74s |  The payload is too big for the screen.
1915.74s - 1917.18s |  I'm sorry.
1917.18s - 1922.51s |  So let's get a demo for this one.
1922.51s - 1928.00s |  Once again, super cross and sharp.
1928.00s - 1935.41s |  So we put the payload in the other commands.
1935.41s - 1936.73s |  You can see the payload there.
1936.73s - 1938.13s |  It's pretty big.
1938.13s - 1941.21s |  It's just trying to update the other table
1941.21s - 1948.89s |  and set a big serialized object in the data of the others.
1948.89s - 1957.57s |  So now, my user have, like, an order with tags,
1957.57s - 1959.53s |  or basic C for tags.
1959.53s - 1962.13s |  So let's go to an administrator account.
1962.13s - 1966.81s |  Let's do a backup.
1966.81s - 1970.35s |  Yeah, that's a fail.
1970.35s - 1971.83s |  Let's go to the backup.
1971.83s - 1977.14s |  Let's log in.
1977.14s - 1978.62s |  So let's do a backup.
1978.62s - 1982.62s |  And now, trying to restore it.
1982.62s - 1985.26s |  Before restoring it, we can see in the order
1985.26s - 1990.58s |  that we have, like, all data that is injected in the order.
1990.58s - 1992.46s |  So now, trying to restore.
1992.46s - 1994.42s |  That's definitely not the same data.
1994.42s - 1998.46s |  We were able to update the order and add, like,
1998.46s - 2000.14s |  a serialized object.
2000.14s - 2002.70s |  So I definitely have a pass traversal to the .htaccess
2002.70s - 2003.70s |  file.
2003.70s - 2006.70s |  So let's go see the order that triggered
2006.70s - 2008.54s |  the serialized objects.
2008.54s - 2010.46s |  And now, we can go to the admin panel.
2010.46s - 2012.94s |  And there is no more authentication on it.
2012.94s - 2017.22s |  So yeah, that definitely deleted the .htaccess.
2017.22s - 2023.74s |  So everyone is admin, which is, to be honest, a bit frightening.
2023.74s - 2026.94s |  Because, like, by exporting that,
2026.94s - 2029.02s |  I gave everyone admin access.
2029.02s - 2030.58s |  Oops.
2030.58s - 2037.82s |  So they paid me $650, which is quite bad.
2037.82s - 2042.66s |  But the real thing is that Swiss Post is not
2042.66s - 2044.42s |  using the backup and restore feature,
2044.42s - 2047.26s |  because they have too much data.
2047.26s - 2051.06s |  And the official backup feature there
2051.06s - 2053.78s |  is just crashing, because there is too much data.
2053.78s - 2057.14s |  You know, like, problem of memory issues
2057.14s - 2058.22s |  and things like that.
2058.22s - 2061.30s |  So that's even fair they decided to pay a bounty for that,
2061.30s - 2063.38s |  because they are, like, no chance
2063.38s - 2066.02s |  they are using the backup and restore features.
2066.02s - 2069.97s |  So yeah, still quite fun.
2069.97s - 2077.05s |  Let's go on another customer, the most known one, Redacted.
2077.05s - 2079.01s |  I wasn't able to name them.
2079.01s - 2083.93s |  So let's consider that.
2083.93s - 2086.73s |  We just put a bit of context.
2086.73s - 2091.65s |  Imagine a PHP CMS, once again, PHP,
2091.65s - 2094.93s |  widely used with a lot of complex code,
2094.93s - 2098.29s |  complex features, and a little blacklist
2098.29s - 2103.89s |  scrutinizing the code at every release, every time.
2103.89s - 2108.37s |  So first bag, there is a new CV there.
2108.37s - 2113.57s |  That's a Prius SE to a SSTI in the wild,
2113.57s - 2116.01s |  like used by a straight actor.
2116.01s - 2121.45s |  So the maintainers decided to make an emergency patch.
2121.45s - 2124.69s |  I decided to reverse it, obviously.
2125.45s - 2130.65s |  There is, like, a double level of templating on the app.
2130.65s - 2133.25s |  And the patch from the maintainers
2133.25s - 2138.33s |  were just a pre-replace to remove the tags just
2138.33s - 2142.33s |  after a single evaluation of the templates.
2142.33s - 2148.69s |  The problem is, maybe someone saw that.
2148.69s - 2149.65s |  You saw that.
2149.65s - 2150.61s |  I know.
2150.61s - 2153.69s |  The regex is not matching new lines.
2153.69s - 2157.57s |  That means that you can just use the original payload,
2157.57s - 2160.77s |  but use a new line before the closing tags.
2160.77s - 2162.61s |  You're bypassing that regex.
2162.61s - 2166.05s |  And that's like a Prius SE again.
2166.05s - 2169.69s |  That was paid $10,000, because, you know,
2169.69s - 2172.49s |  Prius SE are always cool.
2172.49s - 2177.01s |  And small bonus, my colleague also found another bypass.
2177.01s - 2180.21s |  You just had to not close the tags.
2180.21s - 2182.49s |  So that was enough.
2182.53s - 2186.25s |  Templates will contain some tags, ending tags later.
2186.25s - 2190.73s |  So yeah, that's also bypassing it.
2190.73s - 2194.33s |  So as a second bag, and I'm sorry,
2194.33s - 2196.97s |  this one will be quite complex.
2196.97s - 2200.77s |  I will try my best to explain it correctly.
2200.77s - 2203.61s |  But yeah, that's a complex one.
2203.61s - 2210.45s |  So I found a bag that is, to be honest, barely exportable.
2210.49s - 2214.41s |  But it's super fun, technically.
2214.41s - 2218.57s |  So the worst impact to this was Prius SE.
2218.57s - 2222.93s |  But the pre-condition of it make it quite unlikely.
2222.93s - 2225.89s |  But yeah, it's still a fun one.
2225.89s - 2230.25s |  So for the context, that application
2230.25s - 2235.29s |  was using Laminas PHP library for everything
2235.29s - 2238.61s |  that is using, like, emails.
2238.61s - 2242.09s |  Laminas is doing a lot of checks and transformation
2242.09s - 2245.65s |  to be sure that the email is valid and things like that.
2245.65s - 2249.45s |  There is, like, a lot of different libraries there.
2249.45s - 2252.21s |  And on the application we're testing,
2252.21s - 2256.01s |  we have control over a from header
2256.01s - 2260.61s |  that will be used for sending some emails.
2260.61s - 2263.45s |  So that from header will be passed
2263.45s - 2265.73s |  over the fifth argument of mail.
2265.73s - 2270.09s |  For those who know, mail function
2270.09s - 2273.61s |  of a fifth argument that is, like,
2273.61s - 2278.25s |  arguments that will be passed to the sendMail binary.
2278.25s - 2281.05s |  So if that fifth argument is completely
2281.05s - 2283.49s |  controlled by an attacker, you can have, like,
2283.49s - 2287.21s |  argument injection to the sendMail binary.
2287.21s - 2289.97s |  There are, like, known exploit to that.
2289.97s - 2293.93s |  But it definitely depends on the MTA that is used.
2293.93s - 2299.81s |  So every MTA is shipped with different sendMail binaries.
2299.81s - 2306.25s |  So for this talk, we will consider sendMail MTA here.
2306.25s - 2307.97s |  That's, like, a first-prey condition.
2307.97s - 2309.25s |  Why sendMail?
2309.25s - 2310.89s |  Because I'm cheating.
2310.89s - 2311.85s |  That's my bug.
2311.85s - 2315.45s |  I decide whatever is the condition.
2315.45s - 2321.29s |  So that's what I want to be.
2321.29s - 2326.57s |  So the problem is Laminas validating email address.
2326.57s - 2329.65s |  We can't, like, put anything that
2329.65s - 2331.89s |  is not a valid email address.
2331.89s - 2337.21s |  Laminas is supporting a coded string format, so double quotes
2337.21s - 2340.41s |  and pretty much anything, or dot-atom formats.
2340.41s - 2344.01s |  That's, like, the standard email formats.
2344.01s - 2347.65s |  For that, they are using super big regrets.
2347.65s - 2351.13s |  That was super hard to read.
2351.13s - 2355.89s |  And yeah, the thing is they're also
2355.89s - 2360.29s |  using escape shell arg on the email
2360.29s - 2364.49s |  before being used on the mail function.
2364.49s - 2369.93s |  But PHP is automatically applies escape shell
2369.93s - 2372.45s |  command to the entire command when
2372.45s - 2375.29s |  calling mail that will apply escape shell
2375.29s - 2377.29s |  command to sendMail.
2377.29s - 2380.13s |  Double escape means no escape at all,
2380.13s - 2384.81s |  means argument injection, thanks PHP.
2384.81s - 2390.09s |  So another problem is Laminas, or the application,
2390.09s - 2393.61s |  I don't know, is lowercasing your email.
2393.61s - 2397.85s |  And every exploit for sendMail are generally
2397.85s - 2405.01s |  using the C and the X uppercase arguments with very long paths.
2405.01s - 2409.93s |  And the other problem is we are limited to 64 characters
2409.93s - 2411.41s |  for the local path.
2412.41s - 2416.57s |  If you need long paths for two arguments,
2416.57s - 2418.37s |  that's definitely not cool because we
2418.37s - 2421.05s |  are limited in size.
2421.05s - 2421.89s |  Painful.
2421.89s - 2423.97s |  I was a bit in despair.
2423.97s - 2427.89s |  I was pretty sure that it won't be exploitable at all.
2427.89s - 2433.73s |  But yeah, I still decided to make both of testing.
2433.73s - 2437.53s |  I was pretty much like that after a few hours.
2437.57s - 2441.25s |  But at some point, I saw that there
2441.25s - 2447.73s |  was a strange error if my email contains right-angled brackets.
2447.73s - 2451.89s |  So if I put xsx right-angled bracket at black.is,
2451.89s - 2456.77s |  I received by the app invalid domain black.is right bracket.
2456.77s - 2458.29s |  I was like, that's strange.
2458.29s - 2462.01s |  That's definitely not the domain I put in my mail.
2462.01s - 2464.97s |  So I decided to debug a bit the behavior.
2465.01s - 2468.93s |  So Laminas did the validation of the email.
2468.93s - 2473.05s |  Laminas and the app were crafting a full email
2473.05s - 2478.73s |  with headers and the body and put the email in the from header.
2478.73s - 2482.93s |  Then Laminas passed the generated email.
2482.93s - 2486.73s |  Then the app is extracting the sender again from it,
2486.73s - 2490.85s |  validates that it's still a valid email.
2490.85s - 2493.77s |  So painful process.
2493.77s - 2496.81s |  So I was like, OK, but that doesn't explain the error.
2496.81s - 2500.53s |  So that's a traditional from header.
2500.53s - 2504.77s |  So it's just double quotes your name, double quotes,
2504.77s - 2507.89s |  and in brackets, the full email.
2507.89s - 2513.21s |  But when I tried to inject xsx right brackets at black.is,
2513.21s - 2515.77s |  that was like the from that was generated.
2515.77s - 2519.61s |  So we have an injection in the email part.
2519.61s - 2522.85s |  But that's quite useless.
2522.89s - 2526.45s |  In my opinion, there was like no CRLs.
2526.45s - 2530.85s |  There was like protection and mechanism to prevent that.
2530.85s - 2533.81s |  So I was like, OK, that's definitely useless.
2533.81s - 2536.13s |  But I decided to like investigate
2536.13s - 2539.81s |  because that's quite a dirty thing still.
2539.81s - 2546.57s |  So yeah, I read a lot of RFC, a lot of documentation.
2546.57s - 2548.45s |  And I saw there is like something
2548.45s - 2551.45s |  called mymancodedwords.
2551.45s - 2556.81s |  So that's described by the RFC 2047.
2556.81s - 2559.37s |  That's for using special characters
2559.37s - 2563.73s |  in email headers and body.
2563.73s - 2564.57s |  That's the format.
2564.57s - 2570.21s |  So equal thing, interrogation point, charsets, encoding.
2570.21s - 2573.21s |  And then you can use like literal characters
2573.21s - 2577.61s |  using their hexadecimal code with equal thing.
2577.65s - 2582.77s |  So in that case, I'd like generate AAA.
2582.77s - 2588.77s |  So all the characters that is used in the mymancodedwords
2588.77s - 2593.21s |  notation are also valid characters in an email address,
2593.21s - 2598.49s |  at least in the double-cut encoded formats.
2598.49s - 2602.77s |  So I was like, maybe I can inject mymancodedwords
2602.77s - 2605.53s |  in my sender email.
2605.57s - 2609.01s |  So that will be put in the mail headers.
2609.01s - 2612.29s |  And when extracted back by Laminas,
2612.29s - 2614.77s |  it will like pass the mymancodedwords
2614.77s - 2617.05s |  and generate an email that will maybe
2617.05s - 2622.33s |  contain some parameter injection to send mail.
2622.33s - 2628.65s |  So I needed some spaces to like inject another argument
2628.65s - 2630.45s |  to send mail.
2630.45s - 2635.85s |  But equal 20 is forbidden by the specification of the RFC.
2635.85s - 2640.17s |  But I found that underscore is defined as a space by the RFC.
2640.17s - 2645.65s |  So we can just input spaces by using an underscore.
2645.65s - 2646.61s |  Don't ask me why.
2646.61s - 2649.97s |  There's probably a reason for that.
2649.97s - 2655.45s |  So as we saw, the send mail payload
2655.45s - 2660.37s |  is always needing to point to a local configuration file.
2660.37s - 2665.85s |  So we need to have a control of a malicious local file.
2665.85s - 2669.85s |  Fortunately for us, the CMS have a NOS file upload.
2669.85s - 2671.89s |  So we can upload files there.
2671.89s - 2675.65s |  The problem is the upload folder contains underscore.
2675.65s - 2678.57s |  But underscore are replaced by spaces.
2678.57s - 2684.01s |  But we can replace underscore by equal 5f characters.
2684.13s - 2688.05s |  So that's a problem, but not so much.
2688.05s - 2692.65s |  The problem is we need a lot of replacement character.
2692.65s - 2696.21s |  And the size limitation is still 64 characters.
2696.21s - 2699.61s |  And the mymancodedwords increase the size of a string
2699.61s - 2701.61s |  by quite a lot.
2701.61s - 2707.65s |  So let's consider that a webroot is slash app.
2707.65s - 2708.61s |  That's short.
2708.61s - 2710.49s |  That's definitely what I need.
2710.49s - 2713.85s |  So I'm still cheating again.
2714.73s - 2716.57s |  That's another precondition.
2716.57s - 2719.97s |  The first one is you need send mail to be used.
2719.97s - 2723.33s |  And you need a short webroot.
2723.33s - 2728.13s |  So yeah, that's quite some strong precondition.
2728.13s - 2734.93s |  So I knew that send mail payload are using the C and the X
2734.93s - 2735.77s |  arguments.
2735.77s - 2738.13s |  That's definitely too long for us.
2738.13s - 2741.53s |  So I was like, OK, the C arguments
2741.53s - 2745.13s |  is loading arbitrary config file.
2745.13s - 2746.89s |  Maybe that's enough to see.
2746.89s - 2749.49s |  Maybe we don't need the X arguments.
2749.49s - 2751.53s |  So I decided to focus on that and see
2751.53s - 2755.85s |  what is possible to send me a config file.
2755.85s - 2758.41s |  So in the config file, you have the path
2758.41s - 2760.13s |  to the dead letter file.
2760.13s - 2765.69s |  So the dead letter is where it will log incidents
2765.69s - 2767.13s |  in sending emails.
2767.13s - 2773.65s |  So maybe we can patch a file that will be in the webroot.
2773.65s - 2775.81s |  And I have maybe a file write.
2775.81s - 2779.25s |  But we don't control anything in the mail.
2779.25s - 2785.33s |  And there is also a bound second recipient in that config file
2785.33s - 2787.33s |  that will be included in the dead letter
2787.33s - 2790.77s |  because you have an email that is failed.
2790.77s - 2793.77s |  But then it will try to send to that second recipient.
2793.77s - 2796.77s |  And it will write that in the dead letter file.
2796.93s - 2799.65s |  So maybe we can have arbitrary file writes
2799.65s - 2803.41s |  or at least a partial arbitrary file write.
2803.41s - 2805.33s |  But that's PHP.
2805.33s - 2809.21s |  So if I have just a partial file write,
2809.21s - 2814.01s |  that would be enough to get a valid PHP file.
2814.01s - 2818.65s |  So I just sent a default sendMailMTA config
2818.65s - 2824.21s |  and the two options to get arbitrary file write.
2824.21s - 2825.97s |  And that was sufficient.
2825.97s - 2829.01s |  So then I'm sending the mail to not existent at localhost.
2829.01s - 2830.65s |  So it fails.
2830.65s - 2832.29s |  So that will bounce.
2832.29s - 2838.38s |  So that are the configs that I was using.
2838.38s - 2842.66s |  So I decided to have a look at the MyMainCoded world
2842.66s - 2846.82s |  and trying to reduce the size of it.
2846.82s - 2849.10s |  I was able to win some size.
2849.10s - 2851.54s |  You can just empty the charset.
2851.54s - 2856.10s |  There is no need of filling it.
2856.54s - 2858.66s |  We need double quotes on the payloads
2858.66s - 2861.26s |  because the email need to be valid.
2861.26s - 2865.82s |  And you need to use a double-coded format.
2865.82s - 2869.34s |  Don't ask me why, but we needed to end it
2869.34s - 2871.30s |  with two double quotes.
2871.30s - 2872.82s |  I have no idea that's magic.
2872.82s - 2876.14s |  I didn't investigate that.
2876.14s - 2878.82s |  So we can definitely use the uppercase later now
2878.82s - 2883.14s |  because we have the MyMainCoded worlds.
2883.14s - 2888.82s |  So 64 chars is still too short, but with the precondition
2888.82s - 2891.58s |  of having a short web route and everything,
2891.58s - 2897.18s |  that just enter exactly the 64 characters.
2897.18s - 2901.10s |  So it's uppercase.
2901.10s - 2905.22s |  And the final payload was just that.
2905.22s - 2908.22s |  Don't ask me why is that some magic.
2908.22s - 2909.90s |  Definitely some magic payload.
2909.94s - 2913.66s |  I have now a t-shirt, but it's in my hotel room
2913.66s - 2916.46s |  with a payload printed on it.
2916.46s - 2919.34s |  Yeah, that's quite a unusual payload.
2919.34s - 2922.86s |  And it is to pre-host RCE on that app
2922.86s - 2925.50s |  in very specific conditions.
2925.50s - 2928.78s |  Yeah, that was just settings.
2928.78s - 2931.10s |  File re-uploaded into SendMail command,
2931.10s - 2935.50s |  injecting a new config file for SendMail.
2935.50s - 2939.14s |  Get arbitrary writes, some PHP in the web app.
2939.14s - 2940.82s |  Get RCE.
2940.82s - 2942.78s |  Works only on SendMail MTA.
2942.78s - 2947.10s |  Web route being short, so I cheated a bit.
2947.10s - 2950.50s |  But yeah, you need some Einstein's to explain that.
2950.50s - 2953.46s |  So definitely not really expert app in the right,
2953.46s - 2956.78s |  but still was quite fun technically.
2956.78s - 2959.94s |  So let's go for a demo.
2959.94s - 2971.29s |  The last one, once again, is a crossing shop.
2971.29s - 2976.37s |  I'm just uploading the SendMail MTA default config file
2976.37s - 2984.84s |  with just, like, or do two config keys.
2984.84s - 2986.36s |  Yeah, doing the upload manually.
2986.36s - 2994.31s |  Sorry, it takes a bit of time.
2994.31s - 2997.71s |  So yeah, you can see that I'm putting the dead letter
2997.71s - 3002.27s |  in the slash app slash back.php with a double bounce address
3002.27s - 3005.23s |  containing a payload.
3005.23s - 3008.55s |  So yeah, now the config file is uploaded.
3008.55s - 3016.11s |  We can just run the payload in the from email.
3016.11s - 3019.35s |  That's exactly the payload from the slides.
3019.35s - 3023.15s |  We're sending that to a local host address
3023.15s - 3026.15s |  that doesn't exist, so that should draw an error.
3026.15s - 3027.79s |  We see that the page is completely
3027.79s - 3030.79s |  burnt because that generated an error.
3030.79s - 3035.71s |  So now we can go to the slash back.php.
3035.71s - 3037.43s |  We can see the dead letter there.
3037.43s - 3041.95s |  And I did add some back there, and we
3041.95s - 3045.07s |  get arbitrary PHP execution.
3045.07s - 3049.15s |  So definitely quite cool.
3049.15s - 3053.71s |  So that was paid $5,000.
3053.71s - 3058.95s |  Despite the fact that this was hardly exploitable,
3058.95s - 3060.79s |  made me cry a bit.
3060.79s - 3063.19s |  I spent a lot of time on it.
3063.19s - 3068.07s |  So I hope you're brain fried exactly like me.
3068.07s - 3069.83s |  And that's my end word.
3069.83s - 3072.59s |  So thanks for having listened to the end.
3072.59s - 3073.43s |  I hope you had fun.
3073.43s - 3075.19s |  I hope you learned some things.
3075.19s - 3081.47s |  And also, I will maybe soon open a blog with a lot of my bugs.
3081.47s - 3084.19s |  I have like 100 of them.
3084.19s - 3087.03s |  So yeah, follow me on Twitter if you want some news.
3087.03s - 3089.39s |  And thank you.