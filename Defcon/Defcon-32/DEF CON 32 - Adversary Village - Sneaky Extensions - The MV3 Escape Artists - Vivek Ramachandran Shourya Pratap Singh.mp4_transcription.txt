{
  "webpage_url": "local:1731715389:887e62d6:DEF CON 32 - Adversary Village - Sneaky Extensions - The MV3 Escape Artists - Vivek Ramachandran  Shourya Pratap Singh.mp4",
  "title": "DEF CON 32 - Adversary Village - Sneaky Extensions - The MV3 Escape Artists - Vivek Ramachandran  Shourya Pratap Singh.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 2.00s | This text was transcribed using whisper model: large-v2

 Morning everyone.
2.00s - 4.00s |  Thank you so much for coming.
4.00s - 6.00s |  I mean I know this is the very first talk
6.00s - 8.00s |  happening literally in every single
8.00s - 10.00s |  screen out there. So really appreciate you
10.00s - 12.00s |  making it out to ours.
12.00s - 14.00s |  I am Vivek Ramachandran.
14.00s - 16.00s |  I have Shaurya with me.
16.00s - 18.00s |  And we are going to talk about something very interesting.
18.00s - 20.00s |  Sneaky extensions. The MV3
20.00s - 22.00s |  escape artists.
22.00s - 24.00s |  Little bit about me. I have been in
24.00s - 26.00s |  cyber security 20 years.
26.00s - 28.00s |  Very first Defcon 2007
28.00s - 30.00s |  when I spoke. Found multiple vulnerabilities.
30.00s - 32.00s |  Started
32.00s - 34.00s |  multiple cyber security companies.
34.00s - 36.00s |  Now we run Squarex, a browser native
36.00s - 39.98s |  security company.
39.98s - 41.98s |  Hello everyone. I am Shaurya. I work as
41.98s - 43.98s |  a principal software engineer at Squarex.
43.98s - 45.98s |  My work mainly involves
45.98s - 47.98s |  researching extensions, malicious
47.98s - 49.98s |  extensions and working on
49.98s - 53.74s |  methods to actually tackle them.
53.74s - 55.74s |  And we have Sasha from the speaker
55.74s - 57.74s |  ops team.
57.74s - 59.74s |  Okay, so browser extensions.
59.74s - 61.74s |  I think almost everyone
61.74s - 63.74s |  uses it. Anyone here doesn't use browser
63.74s - 65.74s |  extensions? I am guessing maybe in
65.74s - 67.74s |  this audience a few people are skeptical.
67.74s - 69.74s |  But overall
69.74s - 71.74s |  I guess everybody uses browser extensions.
71.74s - 73.74s |  Good convenience feature.
73.74s - 75.74s |  And that is really where
75.74s - 77.74s |  I think our talk is about how easy
77.74s - 79.74s |  it is for a browser extension to
79.74s - 81.74s |  cause back doors.
81.74s - 83.74s |  A lot of attacks within your
83.74s - 85.74s |  organization. And the grand
85.74s - 87.74s |  finale is we will actually show you
87.74s - 89.74s |  a browser extension which we have written
89.74s - 91.74s |  which can steal
91.74s - 93.74s |  live calls on
93.74s - 95.74s |  Google Meet, Zoom and all
95.74s - 97.74s |  of that while the call is happening without
97.74s - 99.74s |  having any indication that
99.74s - 101.74s |  that MITM interception is going
101.74s - 103.74s |  on. So, as
103.74s - 105.74s |  I said, everybody uses extensions, Grammarly,
105.74s - 107.74s |  1Password, some of the more common
107.74s - 109.74s |  ones. And now because of
109.74s - 111.74s |  AI, every second
111.74s - 113.74s |  day you keep hearing about
113.74s - 115.74s |  somebody offering a free extension
115.74s - 117.74s |  which gives you access to
117.74s - 119.74s |  ChatGPT Premium, right?
119.74s - 121.74s |  And then people just go about installing it
121.74s - 123.74s |  thinking they are getting free access
123.74s - 125.74s |  but many of those extensions are
125.74s - 129.34s |  backdoored. Now,
129.34s - 131.34s |  this problem is starting to
131.34s - 133.34s |  compound. So, you know, some statistics
133.34s - 135.34s |  from Forbes where over
135.34s - 137.34s |  280 million installs of
137.34s - 139.34s |  extensions containing malware in
139.34s - 143.07s |  just three years, just
143.07s - 145.07s |  32 of them managed to go ahead
145.07s - 147.07s |  and have a download count of over 75
147.07s - 149.07s |  million. I think a lot of folks
149.07s - 151.07s |  think that the Chrome store
151.07s - 153.07s |  does a lot of analysis but it doesn't.
153.07s - 155.07s |  It's very high level, very basic
155.07s - 157.07s |  sanity checks and nothing more than that.
157.07s - 159.07s |  And that's why this problem is starting
159.07s - 161.07s |  to compound more and more
161.07s - 164.48s |  year over year.
164.48s - 166.48s |  Give it to Shaurya to continue.
168.48s - 170.48s |  So, how many of you
170.48s - 172.48s |  have ever written an extension before?
172.48s - 174.48s |  Can you raise your hand?
174.48s - 176.48s |  Okay. So, I'll just
176.48s - 178.48s |  tell you all a little bit about how
178.48s - 180.48s |  an extension code structure looks
180.48s - 182.48s |  like. This will actually help us
182.48s - 184.48s |  understand how the whole permission model is
184.48s - 186.48s |  and how exactly people
186.48s - 188.48s |  can leverage that against.
188.48s - 190.48s |  So, typically any extension has
190.48s - 192.48s |  these four things. So, they have a manifest
192.48s - 194.48s |  file, then they have a service worker
194.48s - 196.48s |  which runs on the background, and then
196.48s - 198.48s |  they have a content script. So, content script
198.48s - 200.48s |  is basically injected on
200.48s - 202.48s |  whatever webpage you're opening.
202.48s - 204.48s |  Now, what all pages it
204.48s - 206.48s |  is allowed to be present is specified
206.48s - 208.48s |  in the manifest file.
208.48s - 210.48s |  Lastly, some extensions also
210.48s - 212.48s |  have an HTML page. So, let's
212.48s - 214.48s |  say you go ahead and click on an icon,
214.48s - 216.48s |  you can see like a small pop-up will appear.
216.48s - 218.48s |  So, there's actually an HTML page.
218.48s - 220.48s |  Similarly, some extensions can also have
220.48s - 222.48s |  like a separate page which you can
222.48s - 224.48s |  access through your address bar
224.48s - 226.48s |  by chrome-extension
226.48s - 228.48s |  colon slash slash and specifying the
228.48s - 230.48s |  extension ID. So,
230.48s - 232.48s |  this is what a typical
232.48s - 234.48s |  extension structure looks like.
234.48s - 236.48s |  Now, to understand how the whole
236.48s - 238.48s |  permission model works, it's
238.48s - 240.48s |  important to note two things.
240.48s - 242.48s |  The first one is that
242.48s - 244.48s |  in the extension, the
244.48s - 246.48s |  very best thing that has been done
246.48s - 248.48s |  is that you have to specify what
248.48s - 250.48s |  all permissions are required
250.48s - 252.48s |  upfront. So, your
252.48s - 254.48s |  manifest.json file itself
254.48s - 256.48s |  specifies what kind of permissions
256.48s - 258.48s |  your extension is going to ask for.
258.48s - 260.48s |  And this actually helps a lot as well.
260.48s - 262.48s |  Now,
262.48s - 264.48s |  after this, we also have
264.48s - 266.48s |  a small snippet.
266.48s - 268.48s |  This snippet is actually a manifest
268.48s - 270.48s |  file. So, this is how it typically looks like.
270.48s - 272.48s |  If you see on the top, this is where you
272.48s - 274.48s |  specify the manifest version.
274.48s - 276.48s |  So, the current latest version
276.48s - 278.48s |  is version 3.
278.48s - 280.48s |  Now, this has been actually
280.48s - 282.48s |  a very, I would say,
282.48s - 284.48s |  important transition as extensions
284.48s - 286.48s |  are moving from version 2 to version 3
286.48s - 288.48s |  because as you can see here,
288.48s - 290.48s |  earlier, in the permissions,
290.48s - 292.48s |  we had to specify a URL.
292.48s - 294.48s |  Like, on this particular URL, you have
294.48s - 296.48s |  access to. But now, it's much more
296.48s - 298.48s |  clearer. So, it's been broken up into further
298.48s - 300.48s |  keys to bring much more clarity
300.48s - 302.48s |  on how the permission is being handled.
302.48s - 304.48s |  Now, if you look at
304.48s - 306.48s |  the kind of permissions most of the extensions
306.48s - 308.48s |  are asking for, here are some stats.
308.48s - 310.48s |  So, you can see that the third
310.48s - 312.48s |  most is actually all URLs,
312.48s - 314.48s |  which is quite, I would say, dangerous
314.48s - 316.48s |  because most of your extensions
316.48s - 318.48s |  actually have access to
318.48s - 320.48s |  modify any page if they want.
320.48s - 322.48s |  Most people don't even read
322.48s - 324.48s |  what the permission, you know, the
324.48s - 326.48s |  prompt is saying to you.
326.48s - 328.48s |  Now, the second important thing to know
328.48s - 330.48s |  is how the whole process
330.48s - 332.48s |  architecture inside the Chromium works
332.48s - 334.48s |  like. So, in Chromium,
334.48s - 336.48s |  we have a multi-process architecture.
336.48s - 338.48s |  So, we have
338.48s - 340.48s |  separate processes for doing separate
340.48s - 342.48s |  things. For example, you know,
342.48s - 344.48s |  if you have, like, a particular
344.48s - 346.48s |  tab, so whatever you're seeing on the
346.48s - 348.48s |  page is being done through a renderer process.
348.48s - 350.48s |  Similarly, if there's a network call,
350.48s - 352.48s |  it will actually happen through an entirely
352.48s - 354.48s |  different process. So, by having
354.48s - 356.48s |  all these processes separated,
356.48s - 358.48s |  you know, it really helps out
358.48s - 360.48s |  in a security
360.48s - 362.48s |  kind of point. The reason being
362.48s - 364.48s |  that all these are basically
364.48s - 366.48s |  isolated from the
366.48s - 368.48s |  operating system point
368.48s - 370.48s |  of view because these cannot really,
370.48s - 372.48s |  you know, interact at much
372.48s - 374.48s |  other than the IPCs.
374.48s - 376.48s |  Now, there is one more thing which is
376.48s - 378.48s |  quite interesting. So,
378.48s - 380.48s |  every tab that you see is
380.48s - 382.48s |  actually having a different renderer
382.48s - 384.48s |  process, which actually
384.48s - 386.48s |  further isolates them from
386.48s - 388.48s |  interacting with each other. Now,
388.48s - 390.48s |  you must be wondering, you know, what happens
390.48s - 392.48s |  if there's an iframe on the page,
392.48s - 394.48s |  right? So, if a page has an iframe,
394.48s - 396.48s |  it is further put in a
396.48s - 398.48s |  different process. It's actually,
398.48s - 400.48s |  I would say, a very big engineering
400.48s - 402.48s |  milestone because if you simply go
402.48s - 404.48s |  to a webpage and type, you know,
404.48s - 406.48s |  a command F to find a text,
406.48s - 408.48s |  it's actually searching that text across
408.48s - 410.48s |  multiple processes. So, it's quite
410.48s - 412.48s |  an engineering feat, I would say.
412.48s - 414.48s |  There are different terms for this
414.48s - 416.48s |  called a site isolation or site
416.48s - 418.48s |  vision. Now, we'll come back
418.48s - 420.48s |  to how the whole, you know, this
420.48s - 422.48s |  architecture fits in. So, this diagram basically
422.48s - 424.48s |  shows it pretty well. So, all the
424.48s - 426.48s |  components which I showed you earlier, like
426.48s - 428.48s |  extension pages, your content script, this
428.48s - 430.48s |  whole structure looks like.
430.48s - 432.48s |  Now, content scripts
432.48s - 434.48s |  are, I would say, the very first thing
434.48s - 436.48s |  that we all should, you know,
436.48s - 438.48s |  be careful about because
438.48s - 440.48s |  content scripts are injected on the
440.48s - 442.48s |  webpages. Now,
442.48s - 444.48s |  to see it in action, I'll actually show
444.48s - 446.48s |  you a live code right now to see
446.48s - 448.48s |  how exactly content scripts can modify
448.48s - 450.48s |  a given page. So,
450.48s - 452.48s |  it's actually pretty straightforward.
452.48s - 454.48s |  This is a
454.48s - 456.48s |  typical extension. You can
456.48s - 458.48s |  see, like, there's a manifest file.
458.48s - 460.48s |  I'm just naming it test extension for now.
460.48s - 462.48s |  And in this, I'm inserting
462.48s - 464.48s |  a content.js file.
464.48s - 466.48s |  So, if you see here, there's a js file
466.48s - 468.48s |  here, which is simply
468.48s - 470.48s |  just going to write a text on the page.
470.48s - 472.48s |  So, you know, if I go back
472.48s - 474.48s |  to my browser and, let's say, you know,
474.48s - 476.48s |  I try to load this specific extension
476.48s - 482.96s |  and if I disable it,
482.96s - 484.96s |  now, if I try to access a website,
484.96s - 486.96s |  let's say google.com, it loads normally.
486.96s - 488.96s |  But the moment I
488.96s - 490.96s |  basically enable this
490.96s - 492.96s |  test extension and I try to
492.96s - 494.96s |  open google.com, it will
494.96s - 496.96s |  get overwritten by whatever I have specified
496.96s - 498.96s |  on the extension.
498.96s - 500.96s |  Now, this is how basically content script works.
500.96s - 502.96s |  Like, you know, you have a way to inject
502.96s - 504.96s |  something on the webpage.
504.96s - 506.96s |  Now, if you see this specific
506.96s - 508.96s |  extension, there is
508.96s - 510.96s |  no permission key here.
510.96s - 512.96s |  And that's what makes it more dangerous.
512.96s - 514.96s |  Because, you know, I was able to modify a page,
514.96s - 516.96s |  but I'm not actually asking for
516.96s - 518.96s |  explicit permission other than
518.96s - 520.96s |  like in what pages I'm actually
520.96s - 522.96s |  inserting the content script.
522.96s - 524.96s |  So, it's important not just to look at
524.96s - 526.96s |  the permissions key, but also to look at, you know,
526.96s - 528.96s |  in what particular pages the content script is being
528.96s - 530.96s |  injected to.
530.96s - 532.96s |  Now, coming back,
532.96s - 534.96s |  one of the biggest problems that arise
534.96s - 536.96s |  with this is actually remote code execution.
536.96s - 538.96s |  So, let's say, you know, I
538.96s - 540.96s |  allow any of the extension
540.96s - 542.96s |  to be installed on your browser
542.96s - 544.96s |  and later on, I'm sending some code
544.96s - 546.96s |  from my server, which is definitely
546.96s - 548.96s |  unmonitored, and I'm sending that
548.96s - 550.96s |  code to execute on any random webpage.
550.96s - 552.96s |  Now, this is quite dangerous.
552.96s - 554.96s |  So, to avoid this, a lot of changes
554.96s - 556.96s |  were done in the MV3 version itself.
556.96s - 558.96s |  So, we have these functions like eval,
558.96s - 560.96s |  where, you know, you can specify like any
560.96s - 562.96s |  kind of JavaScript code
562.96s - 564.96s |  and it executes on a given page.
564.96s - 566.96s |  So, all these things were banned
566.96s - 568.96s |  in the MV3, at the same time also
568.96s - 570.96s |  enforced to be blocked using the
570.96s - 572.96s |  content security policy that is CSP.
572.96s - 574.96s |  However, there are ways
574.96s - 576.96s |  to bypass this as well.
576.96s - 578.96s |  So, you know, just to give a small
578.96s - 580.96s |  example of this,
580.96s - 582.96s |  if I go back and
582.96s - 584.96s |  look at the very same extension which I just
584.96s - 586.96s |  showed you, and if I try this
586.96s - 588.96s |  with, you know, just an eval.
588.96s - 590.96s |  Now, this is how eval looks like, you know.
590.96s - 592.96s |  You're sending a string and this string
592.96s - 594.96s |  is going to execute on the page.
594.96s - 596.96s |  If I go back to my browser
596.96s - 598.96s |  and I try to, you know, reload my extension
598.96s - 600.96s |  and if I refresh now,
600.96s - 602.96s |  the page will load
602.96s - 604.96s |  normally. Reason being that it
604.96s - 606.96s |  has been blocked because of
606.96s - 608.96s |  the CSP policy.
608.96s - 610.96s |  However,
610.96s - 612.96s |  JavaScript is a funny language.
612.96s - 614.96s |  So, you can actually access the object,
614.96s - 616.96s |  the functions, like normal arrays
616.96s - 618.96s |  or objects as well. So, if I
618.96s - 620.96s |  go down and I write simply something like this,
620.96s - 622.96s |  like, you know, so I specify my
622.96s - 624.96s |  write within the square brackets
624.96s - 626.96s |  and the argument in a
626.96s - 628.96s |  simple string, then it can actually work
628.96s - 630.96s |  as well. So, if I go back
630.96s - 632.96s |  and I, you know, basically try to
632.96s - 634.96s |  refresh my extension, and if
634.96s - 636.96s |  I go back, this will again show me
636.96s - 638.96s |  back hello from extension.
638.96s - 640.96s |  Now, as you can see, all these two things
640.96s - 642.96s |  were simple strings.
642.96s - 644.96s |  And this can actually be leveraged to further
644.96s - 646.96s |  send those strings from an
646.96s - 648.96s |  external server as well.
648.96s - 650.96s |  And this can also be used
650.96s - 652.96s |  to, in fact, you know, change the URL as well.
652.96s - 654.96s |  So, if you see the snippet here, this will
654.96s - 656.96s |  simply change the location of a
656.96s - 658.96s |  extension page.
658.96s - 660.96s |  Now, you know,
660.96s - 662.96s |  the same thing can be extended by connecting
662.96s - 664.96s |  this to a server as well.
664.96s - 666.96s |  So, if you see here, I have a simple
666.96s - 668.96s |  Flask server which just
668.96s - 670.96s |  returns two things. One is a function
670.96s - 672.96s |  name, and the other one is just an argument.
672.96s - 674.96s |  So, if I run this server right now,
674.96s - 680.29s |  so I have my Flask server running,
680.29s - 682.29s |  and
682.29s - 684.29s |  I'll simply go back
684.29s - 686.29s |  and I will load the other extension
686.29s - 688.29s |  which has an integration with this
688.29s - 697.94s |  API. Now, if I try to
697.94s - 699.94s |  access the page,
699.94s - 701.94s |  it still works. And you can see
701.94s - 703.94s |  a hello from server is written there.
703.94s - 705.94s |  Reason being that if you look
705.94s - 707.94s |  at the code of this extension,
707.94s - 709.94s |  it is making an API call,
709.94s - 711.94s |  getting what the function name is, getting
711.94s - 713.94s |  what the argument is, and simply
713.94s - 715.94s |  using it to change the content
715.94s - 720.05s |  of the page.
720.05s - 722.05s |  Okay.
722.05s - 724.05s |  So, I think, you know, given the
724.05s - 726.05s |  talk time is limited, we'll start with some
726.05s - 728.05s |  demo videos as well. I think we have 10 minutes on the clock.
728.05s - 730.05s |  10 minutes? Okay.
730.05s - 732.05s |  Yeah. So,
732.05s - 734.05s |  the very first demo
734.05s - 736.05s |  you want to show is, I mean, there are a bunch of them,
736.05s - 738.05s |  is social engineering
738.05s - 740.05s |  where you could literally, once you
740.05s - 742.05s |  install an extension, it could pretend
742.05s - 744.05s |  to go ahead and, let's say, drop a
744.05s - 746.05s |  Zoom update, right? Because it's so
746.05s - 748.05s |  common that you try to access Zoom and it says,
748.05s - 750.05s |  go update. And Shauri will show you that.
750.05s - 755.31s |  So, we can see here that,
755.31s - 757.31s |  you know, I'm simply opening the Zoom website
757.31s - 759.31s |  and it looks like, you know,
759.31s - 761.31s |  a normal Zoom website, how it's supposed to be.
761.31s - 763.31s |  If I go ahead and enable this
763.31s - 765.31s |  malicious extension, it's simply using
765.31s - 767.31s |  a content script to add another
767.31s - 769.31s |  object on that specific
769.31s - 771.31s |  page which says, hey, there's an update now.
771.31s - 773.31s |  And the moment you click on this,
773.31s - 775.31s |  you download a file. And if you see here,
775.31s - 777.31s |  the download we are triggering is actually
777.31s - 779.31s |  a blog-based download. So, even
779.31s - 781.31s |  if you go to the downloads and you look at the
781.31s - 783.31s |  URL, you will see it as, you know, it's coming
783.31s - 785.31s |  from zoom.us. But actually,
785.31s - 787.31s |  it was shipped with the extension.
787.31s - 790.75s |  Now, if we simply open that
790.75s - 792.75s |  executable, it might affect your computer.
792.75s - 794.75s |  The key thing to realize
794.75s - 796.75s |  over here is, extensions
796.75s - 798.75s |  have the power to run in the context of
798.75s - 800.75s |  whichever page that they're injecting into.
800.75s - 802.75s |  So, if you install a random
802.75s - 804.75s |  extension which says it's a color picker
804.75s - 806.75s |  and then you open zoom.us,
806.75s - 808.75s |  at that point, it can actually
808.75s - 810.75s |  inject into that page and
810.75s - 812.75s |  anything which happens from
812.75s - 814.75s |  the browser's perspective is in the context
814.75s - 816.75s |  of the page. So, if a file download
816.75s - 818.75s |  is triggered, you feel it's probably
818.75s - 820.75s |  from, you know, the actual Zoom website.
820.75s - 822.75s |  Now, one
822.75s - 824.75s |  interesting demo he'll actually show you is
824.75s - 826.75s |  something live.
826.75s - 828.75s |  Okay. And while he's
828.75s - 830.75s |  getting that ready,
830.75s - 832.75s |  imagine you have an extension and now
832.75s - 834.75s |  you're doing a video call, right?
834.75s - 836.75s |  How many of you end up using the browser version
836.75s - 838.75s |  of Zoom and Google
838.75s - 840.75s |  Meets and whatnot? Now, you might
840.75s - 842.75s |  actually imagine that when a
842.75s - 844.75s |  Google Meet call is actually happening,
844.75s - 846.75s |  nothing else can monitor.
846.75s - 848.75s |  So, we'll show you a demo of an extension
848.75s - 850.75s |  which we've created, which
850.75s - 852.75s |  while a live call is happening,
852.75s - 854.75s |  it can go ahead,
854.75s - 856.75s |  do a side monitoring, and
856.75s - 858.75s |  literally get the entire feed
858.75s - 860.75s |  of the call live and send it wherever
860.75s - 862.75s |  with zero indication
862.75s - 864.75s |  in the Google Meet session that something is
864.75s - 866.75s |  intercepting or monitoring this.
866.75s - 868.75s |  So, as you can see here, you know,
868.75s - 870.75s |  I'm basically
870.75s - 874.22s |  gonna open
874.22s - 881.50s |  Google Meet. We hope the
881.50s - 883.50s |  internet connection works or else we'll show
883.50s - 885.50s |  you a very quick video. Okay. We have five minutes on the
885.50s - 887.50s |  clock while he's getting it.
887.50s - 889.50s |  The key thing to realize is
889.50s - 891.50s |  you can actually host
891.50s - 893.50s |  a Chromium extension or an
893.50s - 895.50s |  Edge extension. Much of
895.50s - 897.50s |  the times, there is barely any security
897.50s - 899.50s |  checks which are really happening.
899.50s - 901.50s |  So, if you see a featured extension,
901.50s - 903.50s |  it isn't that, you know, Google's team
903.50s - 905.50s |  has looked at the code, run a bunch of tests.
905.50s - 907.50s |  Unbelievably, even in the
907.50s - 909.50s |  enterprise version, some of the
909.50s - 911.50s |  basic stuff that they end up showing
911.50s - 913.50s |  doesn't really look
913.50s - 915.50s |  at what that code could do.
915.50s - 917.50s |  Now, here's the worst part.
917.50s - 919.50s |  We all fear download and execs, right?
919.50s - 921.50s |  Because you run the stub, get something.
921.50s - 923.50s |  That's something extensions can do right
923.50s - 925.50s |  off the box. Is the extension
925.50s - 927.50s |  just loads, looks innocent,
927.50s - 929.50s |  but it can actually bring back foreign code and run it.
929.50s - 931.50s |  So, if you see here,
931.50s - 933.50s |  we are starting a new Google Meet session.
933.50s - 938.86s |  Now, the malicious extension
938.86s - 940.86s |  is installed. So, we're
940.86s - 942.86s |  going to simply open, you know, another window
942.86s - 944.86s |  and open an extension page to
944.86s - 946.86s |  see what's actually seen. And you can see, like, you know,
946.86s - 948.86s |  the live feed from that particular
948.86s - 950.86s |  Meet page is being transferred to the other page.
950.86s - 952.86s |  And that shows a lot.
952.86s - 954.86s |  Because, you know, having a simple
954.86s - 956.86s |  host permission,
956.86s - 958.86s |  it was not even a specified permission,
958.86s - 960.86s |  you were actually able to steal a live
960.86s - 962.86s |  stream from a given Meet page.
962.86s - 964.86s |  So, the key thing
964.86s - 966.86s |  to realize is, you know, extensions
966.86s - 968.86s |  have superpowers. Just
968.86s - 970.86s |  like, you know, an endpoint security, you end
970.86s - 972.86s |  up installing something in kernel mode and
972.86s - 974.86s |  that has one privilege level above
974.86s - 976.86s |  what user space processes have.
976.86s - 978.86s |  Similarly, extensions are sitting
978.86s - 980.86s |  one level above, you know, the page itself.
980.86s - 982.86s |  Yeah. We'll also look at
982.86s - 984.86s |  just two quick demos right now.
984.86s - 986.86s |  Another one is called silent account
986.86s - 988.86s |  hijacking. So, in this,
988.86s - 990.86s |  what I'm going to do is, I'll simply have
990.86s - 992.86s |  a malicious extension installed
992.86s - 994.86s |  and what it's going to do is that in the
994.86s - 996.86s |  background, it's going to log into your
996.86s - 998.86s |  GitHub account because extensions
998.86s - 1000.86s |  have a highly privileged, so they have
1000.86s - 1002.86s |  access to all HTTP only
1002.86s - 1004.86s |  cookies as well. And if you're
1004.86s - 1006.86s |  doing it from your service worker, that is from your
1006.86s - 1008.86s |  background, you don't even have to ask
1008.86s - 1010.86s |  for explicit permission for accessing cookie
1010.86s - 1012.86s |  as well. If you're simply making a fetch
1012.86s - 1014.86s |  call instead of, you know, just getting the cookie
1014.86s - 1016.86s |  value. So, in this
1016.86s - 1018.86s |  demo,
1018.86s - 1020.86s |  we can see that we have a demo GitHub
1020.86s - 1022.86s |  account and I have a private
1022.86s - 1026.37s |  repo here. In this private
1026.37s - 1028.37s |  repo, if
1028.37s - 1030.37s |  we go to the settings and look at the collaborators,
1030.37s - 1032.37s |  right now, there are
1032.37s - 1034.37s |  no additional collaborators in this repo.
1034.37s - 1036.37s |  Now, what I'll do is,
1036.37s - 1038.37s |  I'll simply go and start
1038.37s - 1041.97s |  the malicious extension. Now,
1041.97s - 1043.97s |  if you see, nothing really
1043.97s - 1045.97s |  happened and for a very small
1045.97s - 1047.97s |  moment, a small tab just opened and
1047.97s - 1049.97s |  closed automatically. Now, if
1049.97s - 1051.97s |  I go back and check that specific
1051.97s - 1053.97s |  repo back again,
1053.97s - 1057.47s |  go to the settings and see who
1057.47s - 1061.01s |  all are the collaborators,
1061.01s - 1063.01s |  then I will see that there's one more
1063.01s - 1065.01s |  collaborator added here now.
1065.01s - 1067.01s |  So, this just shows, you know, how
1067.01s - 1069.01s |  sneaky they can be
1069.01s - 1071.01s |  and they can actually also take over
1071.01s - 1073.01s |  your private repos.
1073.01s - 1075.01s |  And the best way to think about it is, think
1075.01s - 1077.01s |  about any form of browser automation with
1077.01s - 1079.01s |  things like Selenium, which some of you may
1079.01s - 1081.01s |  have done. With an extension, it can
1081.01s - 1083.01s |  just do literally everything in the background,
1083.01s - 1085.01s |  act on your behalf, go
1085.01s - 1087.01s |  through complex workflows,
1087.01s - 1089.01s |  anything the, you know, author would have
1089.01s - 1091.01s |  probably baked into it. And
1091.01s - 1093.01s |  some of these can just download at payloads
1093.01s - 1095.01s |  and happen at runtime. Doesn't
1095.01s - 1097.01s |  need to be at, you know, extension
1097.01s - 1099.01s |  compile or upload time to the Chrome store.
1099.01s - 1101.01s |  Yeah.
1101.01s - 1103.01s |  Now, we look at one more, which is
1103.01s - 1105.01s |  interference with password managers.
1105.01s - 1107.01s |  So, many people often use extensions for,
1107.01s - 1109.01s |  you know, using, saving their password
1109.01s - 1111.01s |  and using them. So, actually,
1111.01s - 1113.01s |  other malicious extensions can interfere with
1113.01s - 1115.01s |  that as well. So, in this
1115.01s - 1117.01s |  example, we can
1117.01s - 1119.01s |  see that a user is using
1119.01s - 1121.01s |  one of the password manager vendors
1121.01s - 1123.01s |  and if you go to, let's say, a
1123.01s - 1125.01s |  random SaaS application where you were already
1125.01s - 1127.01s |  using that specific
1127.01s - 1129.01s |  password manager, we can see
1129.01s - 1131.01s |  that the password manager works and a person
1131.01s - 1133.01s |  is, you know, able to log
1133.01s - 1135.01s |  in normally how it's supposed to be.
1135.01s - 1137.01s |  However, the moment
1137.01s - 1139.01s |  if we go back and enable
1139.01s - 1141.01s |  the malicious extension,
1141.01s - 1143.01s |  what this extension will do is that
1143.01s - 1145.01s |  it will override what the default
1145.01s - 1147.01s |  action of clicking on that icon
1147.01s - 1149.01s |  was. So, if we can see here,
1149.01s - 1151.01s |  it's still the password manager's icon.
1151.01s - 1153.01s |  But the moment I click on this,
1153.01s - 1155.01s |  it will take me to another login
1155.01s - 1157.01s |  page. So, for the test purpose
1157.01s - 1159.01s |  and for demonstration, we have just
1159.01s - 1161.01s |  named our extension with
1161.01s - 1163.01s |  a malware word so that you know that
1163.01s - 1165.01s |  this page is actually, you know, a fake one.
1165.01s - 1167.01s |  But, you know, looking at the URL,
1167.01s - 1169.01s |  you can't really figure that out.
1169.01s - 1171.01s |  So, here, a person will then, you know,
1171.01s - 1173.01s |  think that they might have logged out of their password
1173.01s - 1175.01s |  manager and they will end up
1175.01s - 1177.01s |  ending their credentials. And the moment
1177.01s - 1179.01s |  they do that,
1179.01s - 1181.01s |  they will get phished.
1181.01s - 1183.01s |  So, you've run out of time. I think
1183.01s - 1185.01s |  if you're interested, all the source code,
1185.01s - 1187.01s |  everything we have here, you can go to
1187.01s - 1189.01s |  sqrx.com. We'll
1189.01s - 1191.01s |  put all of that up. We'll also put up a much
1191.01s - 1193.01s |  more detailed video. We only got 20 minutes.
1193.01s - 1195.01s |  We have a lot of research.
1195.01s - 1197.01s |  Now, the key summary
1197.01s - 1199.01s |  is even known extensions
1199.01s - 1201.01s |  on the Chrome store get bought out all the time.
1201.01s - 1203.01s |  And what attackers have started doing
1203.01s - 1205.01s |  is if an extension has 100,000
1205.01s - 1207.01s |  installs, they'll just offer
1207.01s - 1209.01s |  $10,000 to the author and they
1209.01s - 1211.01s |  can transfer over ownership.
1211.01s - 1213.01s |  And that means, you
1213.01s - 1215.01s |  know, extensions you trusted could now
1215.01s - 1217.01s |  automatically be untrusted. And a bunch of
1217.01s - 1219.01s |  other supply chain attacks
1219.01s - 1221.01s |  which can kind of happen in the context of the Chrome
1221.01s - 1223.01s |  store, right? Thank you so much.
1223.01s - 1225.01s |  And, yeah, please visit sqrx.com
1225.01s - 1227.01s |  for more. Thank you.