**Introduction to CI/CD Pipeline Vulnerabilities**

- **CI/CD pipelines**: Tools for building and testing code, automating manual actions
- **GitHub Actions**: Chosen for its vast ecosystem with over four million public pipelines
- **Vulnerability risks**: Pipelines appealing to attackers due to access tokens and **GitHub tokens**

**Command Injection in Pipelines**

- **Command injection**: Vulnerability where unsanitized user input is executed as commands
- **Example**: PHP code executing commands with user-controlled input can be exploited
- **GitHub workflows**: Yaml files that can be triggered by repository events
- **Exploitable scenario**: User input used unsafely in workflows can lead to pipeline compromise

**Custom Actions and Dependencies**

- **Custom actions**: Pre-built logic imported into pipelines, similar to code dependencies
- **Dependency chain**: One vulnerable dependency can affect the entire pipeline
- **GitHub Marketplace**: Ecosystem for sharing custom actions, increasing risk of hidden vulnerabilities

**Exploitation and Discovery Methods**

- **Raven tool**: Open-source project to index and query GitHub workflows and actions
- **Vulnerability discovery**: Thousands of vulnerabilities found using Raven
- **Case study - Bazel**: Critical vulnerability in Google's Bazel project affecting many users

**Demo of Exploitation**

- **Demo setup**: Vulnerable repository and attacker server
- **Attack process**: Malicious issue triggers pipeline, compromising secrets and modifying the repository

**Takeaways and Recommendations**

- **Insecure input**: Avoid using untrusted input directly in scripts
- **Custom actions**: Be cautious about importing logic into pipelines
- **Least privilege principle**: Limit workflow permissions to the minimum necessary

**Conclusion**

- **Raven availability**: Open-source tool available for security research and bug bounties
- **Encouragement for use**: Provided QR code for GitHub repository access