{
  "webpage_url": "https://www.youtube.com/watch?v=es72oviu0Lg",
  "title": "DEF CON 32 - How I  hacked Learning Codes of the key job of a car assembled in my country - D. Erazo",
  "description": "Using hardware hacking techniques, it was possible to detect the use of learning codes instead of rolling codes in a key job of a car widely used in my country. For this purpose, the key job was disassembled and the HS2240 integrated circuit was detected and, using a logic analyzer, the emission of learning codes from the integrated circuit to the radio frequency LED emitter was checked. With the use of HackRF SDR, the learning code is duplicated to be able to open the car N times without needing the original key anymore, which proves that the use of learning codes is very vulnerable, just like fixed codes.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1622,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 1.52s | This text was transcribed using whisper model: large-v2

 Yo, hello.
1.52s - 3.84s |  Yo, my G's.
3.84s - 5.56s |  Welcome to my presentation.
5.56s - 7.96s |  For me, it's a pleasure to stay here.
7.96s - 10.76s |  I'm so happy to share that research.
10.76s - 13.64s |  So I'm going to show how I discovered
13.64s - 16.32s |  that I can unlock tossable cards in my country.
16.32s - 19.76s |  So the principal topic is breaking learning codes.
19.76s - 23.20s |  Please get up your hands if someone
23.20s - 28.50s |  know about learning codes, how to hack learning codes.
28.50s - 30.10s |  Two, two people.
30.10s - 31.02s |  OK.
31.10s - 39.50s |  So right now, I'm going to show who I am.
39.50s - 43.94s |  My official work is a penetration tester.
43.94s - 44.70s |  Why I say that?
44.70s - 47.90s |  Because in South America, we don't
47.90s - 51.02s |  have automatic cybersecurity companies.
51.02s - 54.78s |  So I do the research alone because I
54.78s - 56.70s |  learn card hacking alone.
56.70s - 63.66s |  So in my free time, I do hardware security research.
63.66s - 65.14s |  OK?
65.14s - 67.62s |  I create Reverse Everything, a YouTube channel
67.62s - 70.18s |  where I upload all my research.
70.18s - 74.74s |  So I am 28 years old from Ecuador.
74.74s - 77.38s |  We don't have anything about card hacking security,
77.38s - 78.54s |  nothing about that.
78.54s - 81.86s |  So I do alone.
81.86s - 83.38s |  I'm going to show about introduction
83.38s - 84.78s |  about learning codes.
84.78s - 87.02s |  After that, the hardware hacking.
87.02s - 89.14s |  After that, I'm going to learn how
89.14s - 91.82s |  to set a backdoor in the KLS entry system.
91.82s - 94.14s |  After that, collision progress that
94.14s - 96.98s |  appears if you use learning codes.
96.98s - 99.86s |  And after that, I'm going to show the Auto RAF Killer.
99.86s - 102.86s |  It's the tool that I developed to unlock cards
102.86s - 106.22s |  with fixed learning code and rolling code
106.22s - 108.82s |  using the no attacks.
108.82s - 115.02s |  So I was trying to find KANG injection.
115.02s - 120.34s |  So when I connect my OBD port to the interface OBD2,
120.34s - 124.78s |  I find the KANG ID 545 is the ID that
124.78s - 130.26s |  appears when you unlock or lock the card with the KFOB control.
130.26s - 131.06s |  OK?
131.06s - 135.62s |  So I say, hey, let's go to do the research
135.62s - 139.70s |  about the KLS entry system, the radio frequency system.
139.70s - 142.86s |  So here we have a universal radio hacker.
142.86s - 144.50s |  I record the signal.
144.50s - 147.06s |  This is the signal to unlock the card.
147.06s - 149.86s |  And after that, I proceed to demodulate the signal.
149.86s - 154.14s |  The signal is in 370 megahertz.
154.14s - 157.06s |  I demodulate with ASK modulation.
157.06s - 162.10s |  And I use a symbol per second of 500, OK?
162.14s - 166.46s |  So if you see, we have the unlock signal to,
166.46s - 168.06s |  and after that, the lock signal.
168.06s - 169.62s |  After that, unlock signal.
169.62s - 176.10s |  Again, if we see, we have the first row is a fixed code.
176.10s - 178.30s |  The second row is the same fixed code.
178.30s - 180.10s |  So I say, hey, what the hell is that?
180.10s - 181.78s |  This isn't really code, OK?
181.78s - 186.38s |  So I say, I need to do a deeper research about that.
186.38s - 191.10s |  So the unlock signal in hexadecimal format,
191.10s - 194.18s |  the previously slide is in bit format.
194.18s - 197.46s |  In hexadecimal format is that signal.
197.46s - 204.94s |  So what happen if you see that there is a fixed code that
204.94s - 206.86s |  repeat many times?
206.86s - 210.94s |  And the lock signal is very similar to the unlock signal.
210.94s - 216.14s |  So just the three last hexadecimal digits change.
216.14s - 219.26s |  OK, so I say, hey, let's go to verify the replay attack.
219.26s - 220.94s |  So this is a fixed code.
220.94s - 225.70s |  And right now, I am in the fifth floor in Abandoned Build-It.
225.70s - 227.26s |  And the car is in the first floor.
227.26s - 233.54s |  So this is the first time that I was able to unlock my car.
233.54s - 239.46s |  So let's go to listen the song when the car is unlocked.
239.46s - 252.34s |  So with Universal Radio Hacker, I send the signal.
252.34s - 256.18s |  After that, I send the signal to lock the car.
256.22s - 261.86s |  So I don't know if you listen, but from here, I listen.
261.86s - 264.26s |  So I verify with that replay attack
264.26s - 268.38s |  that my car use something like fixed code.
268.38s - 272.70s |  So I disassembled the K4, and I found a learning code chip.
272.70s - 276.14s |  The learning code chip is HS2240.
276.14s - 279.10s |  If you find that in internet, you
279.10s - 282.78s |  are going to find that this is a learning code chip.
282.78s - 284.58s |  So what the hell is learning code?
284.58s - 286.54s |  Learning code is similar to fixed code.
286.54s - 288.90s |  The difference is in the programmation mode.
288.90s - 293.10s |  In fixed code, you have the code soldered to the board
293.10s - 295.06s |  in the K4, OK?
295.06s - 298.14s |  But in learning code, you have the pin
298.14s - 299.86s |  into the integrated circuit.
299.86s - 302.82s |  So another difference is that when
302.82s - 305.38s |  you are going to program in fixed code,
305.38s - 308.26s |  you don't have to do a programmation.
308.26s - 313.02s |  In learning code, you have the teacher that uses the K4.
313.02s - 316.30s |  The learning code to the microcontroller receiver.
316.30s - 320.26s |  So when the microcontroller receiver
320.26s - 324.06s |  listen the codes to the antenna, microcontroller
324.06s - 326.18s |  save that code in his memory.
326.18s - 330.10s |  And he's able to save up to four different learning codes.
330.10s - 334.90s |  So keep it in mind, because this is useful information
334.90s - 339.82s |  to set up backdoor in a few minutes in the other slides.
339.82s - 342.42s |  So this is a learning code.
342.42s - 346.26s |  Each K4 has a different learning code, OK?
346.26s - 347.22s |  Each K4.
347.22s - 350.02s |  And each card has a different learning code.
350.02s - 353.98s |  And each K4 has a different learning code, OK?
353.98s - 355.30s |  So keep in mind.
355.30s - 358.06s |  So let's go to the hardware hacking.
358.06s - 364.26s |  If you disassemble the vulnerable K4,
364.26s - 369.50s |  we found an oscillator, LR370 megahertz batteries.
369.70s - 371.70s |  We assume two batteries.
371.70s - 373.94s |  We have 6.38 volts.
373.94s - 376.14s |  It's important to do mathematics calculation
376.14s - 379.34s |  to the brute force that I am going to do in a few slides.
379.34s - 382.50s |  After that, we identify the ASK modulation.
382.50s - 386.62s |  Remember that we have to do a modulation to set
386.62s - 389.50s |  to the LED RF transmit.
389.50s - 394.34s |  So the final signal is ascending to the LED RF transmit.
394.34s - 398.62s |  And also, we have here a multimeter to check.
398.62s - 401.26s |  So let's go to the burn the circuit.
401.26s - 403.18s |  We have four inputs.
403.18s - 407.78s |  Remember that the K4 has four buttons.
407.78s - 411.06s |  So each button is related to one.
411.06s - 414.42s |  For example, if I press one button of the four buttons,
414.42s - 416.26s |  I have 1, 0, 0, 0.
416.26s - 419.98s |  If I press the second button, I have 0, 1, 0, 0.
419.98s - 425.94s |  And each signal pass through a pull-down resistor.
425.94s - 429.06s |  So after the pull-down resistor,
429.06s - 432.34s |  enter to the integrated circuit.
432.34s - 436.70s |  So we have four entries, K0, K1, K2, K3.
436.70s - 439.22s |  And the output is through the pin number 3.
439.22s - 442.62s |  So the learning code encoded exits
442.62s - 443.90s |  through the pin number 3.
443.90s - 446.02s |  And in the left, we have the ASK modulation
446.02s - 449.54s |  with capacitors, resistors, inductors, and more.
449.54s - 453.90s |  So the final modulator learning code encoded
453.90s - 457.18s |  go out by the LED.
457.18s - 459.82s |  So keep in mind, because we have four modes.
459.82s - 463.82s |  So how the learning code is formatted is like the frame.
463.82s - 465.54s |  The frame is a preamble.
465.54s - 468.06s |  After that, we have 20-bit code.
468.06s - 470.66s |  After that, we have four bits of the mode.
470.66s - 472.94s |  Remember, each mode is a bottom.
472.94s - 476.06s |  So in 20 bits, we have one million possibility code.
476.06s - 481.18s |  So 2 to power 20 bits, we have one million possibility code.
481.18s - 484.26s |  And in mode, we have four bits.
484.26s - 487.30s |  So here we have the different modes
487.30s - 494.26s |  that are able to enter to the integrated circuit.
494.26s - 498.06s |  So the preamble, here we have the bits of the learning code.
498.06s - 500.02s |  20 bits of learning code, four bits more.
500.02s - 502.50s |  So the preambles, I get 96 bits.
502.50s - 506.22s |  So 96 subtract 20 bits of the learning code
506.22s - 507.62s |  subtracts 40 bits of the mode.
507.62s - 510.78s |  We have 72-bits preamble.
510.78s - 513.26s |  And here we have 96-bit.
513.26s - 518.34s |  But 72-bits of preamble, I don't know, sure.
518.34s - 520.86s |  So that's the reason that I do a hardware
520.86s - 523.34s |  hacking with a logic analyzer.
523.34s - 526.54s |  This is logic analyzer LA5016 that
526.54s - 530.58s |  is able to record up to 500 megahertz.
530.58s - 533.10s |  So here's the connection.
533.10s - 536.30s |  Channel 1 is to the transmit bit, the pin number 3,
536.30s - 540.66s |  ground to ground, and channel 2 into the H input system,
540.66s - 544.46s |  for example, K0, K1, K2, and K3, and a multimeter
544.46s - 550.30s |  to check the voltage pin.
550.30s - 554.54s |  So what we get when we do that, for example,
554.54s - 558.26s |  if we press the first button, the K0,
558.26s - 561.06s |  we have that signal in the transmit pin.
561.06s - 566.82s |  This is the learning code that repeats 25 times.
566.82s - 569.26s |  And after that, we have the preamble of the next signal.
569.34s - 570.86s |  So when we press the button, we have
570.86s - 573.58s |  the pulse in the channel 1.
573.58s - 576.78s |  So the duration of the pulse is the duration
576.78s - 577.86s |  that we press the button.
577.86s - 579.78s |  So if we press the button one more,
579.78s - 583.50s |  we have one more of learning codes, the same learning code.
583.50s - 584.86s |  You understand me?
584.86s - 587.26s |  And the same with K1, the same with K2,
587.26s - 589.54s |  that is the button to unlock the car.
589.54s - 592.58s |  The same with the K3, that is the button to lock the car.
592.58s - 596.10s |  So if we assume what we have, for example,
596.10s - 598.66s |  here is the learning code.
598.66s - 602.42s |  Here is the learning code, 1, 2, 3, 4, and more learning code.
602.42s - 604.42s |  If we do assume to the learning code,
604.42s - 611.82s |  we have a pulse, 0, a pulse with more duration,
611.82s - 613.26s |  and a 0 with less duration.
613.26s - 615.06s |  So I say, hey, what that means?
615.06s - 620.54s |  If I get it when I record the signal with a HAG RF,
620.54s - 623.42s |  I say I get 1, 0, 1, 0.
623.42s - 626.70s |  But how I translate that to 1, 0, 1, 0?
626.70s - 631.34s |  Because here I have a pulse that is longer than that pulse.
631.34s - 635.14s |  And here I have a 0 that is longer than that 0.
635.14s - 637.82s |  So I say, hey, this is encoded.
637.82s - 639.14s |  So this is encoded.
639.14s - 641.94s |  So after reversing the encodification,
641.94s - 644.22s |  after reading a lot of data sheets,
644.22s - 647.50s |  I achieved to discover the encoding to the learning code.
647.50s - 650.34s |  So I get a learning code with logic on the large cell.
650.34s - 656.42s |  So the integrated chip sends a 0 with four bits
656.42s - 660.46s |  and sends a 1 bit with four bits.
660.46s - 662.78s |  So for example, if the integrated code
662.78s - 667.74s |  wants to send 0, it sends 1, 0, 0, 0.
667.74s - 673.30s |  And if the integrated circuit wants to send 1 bit,
673.30s - 675.90s |  the 1 bit is sent to 1, 1, 1, 0.
675.90s - 680.78s |  So for example, here we have 1, 0, 3, 0s.
680.78s - 684.10s |  And also we have here 1, 1, 1, 0.
684.10s - 687.74s |  So here we have a 1, and here we have a 0.
687.74s - 691.78s |  So after that, the preamble is a constant.
691.78s - 697.70s |  The preamble is a constant of the 1 bit and 31 0s.
697.70s - 702.02s |  So that's the reason that when we get that signal with Logic
702.02s - 705.58s |  Analyzer, we have here the preamble 1 bit and 31 0s.
705.58s - 709.34s |  And after that here, for example, we have 0, 1, 0, 1,
709.34s - 711.14s |  1, 0, 0, and so on.
711.14s - 713.90s |  And the mode also is encoded with that codification.
713.90s - 718.10s |  We have here a 1, 0, 0, 0.
718.10s - 719.30s |  OK?
719.30s - 721.86s |  So after that, we have all the information
721.86s - 724.18s |  to encode or decode any signal.
724.18s - 725.74s |  So how I verify that?
725.74s - 727.98s |  Remember that 96 bits.
727.98s - 732.22s |  So if we multiply 20 bits by 4 bits,
732.22s - 738.42s |  and plus 4 bits by 4 bits of the mode, we have 96 bits.
738.42s - 741.88s |  So this is the reason that at the start of the presentation,
741.88s - 744.44s |  we have recorded 96 bits.
744.44s - 745.08s |  OK?
745.08s - 749.72s |  So after that, we have the preamble of the next frame,
749.72s - 751.72s |  of the next learning code.
751.72s - 752.88s |  So why do I do that?
752.88s - 756.48s |  Because I see data sheets that say
756.48s - 759.00s |  me bad information, fake information
759.00s - 761.48s |  for use for us, like hackers.
761.48s - 764.20s |  For example, there are another vulnerable radio frequency
764.20s - 764.68s |  chips.
764.68s - 768.68s |  For example, there are also the HS1527,
769.08s - 778.60s |  24, the HS2241, and more, the HTCP20D, the HTCP20B, and more.
778.60s - 781.44s |  So if you read the data sheet, the data sheet
781.44s - 785.04s |  say something like, hey, it can reduce any code collision
785.04s - 787.24s |  and authorize it code scanning possibility.
787.24s - 790.40s |  So hey, are you sure we are going to probe the opposite?
790.40s - 793.68s |  Because I discovered the encodification,
793.68s - 794.88s |  the encodification, and more.
794.92s - 799.60s |  So I built a genuine radio block that do a brute force attack.
799.60s - 805.20s |  This is the brain of the attack, is that block that I built.
805.20s - 807.40s |  And this is ASK modulation.
807.40s - 809.24s |  We have here our repeating interpolation
809.24s - 811.60s |  to better the signal.
811.60s - 813.76s |  Here we have the carrier signal.
813.76s - 816.00s |  Multiply, we have the modulated signal,
816.00s - 820.48s |  and a trouble to maintain to the symbol rate.
820.48s - 821.00s |  OK?
821.00s - 825.04s |  After that, we send that to the OSMO com scene
825.04s - 828.36s |  that is compatible with our hack LF.
828.36s - 838.12s |  OK, so let's go to see how I am able to unlock the car with
838.12s - 840.68s |  my genuine radio brute force attack.
840.68s - 843.76s |  So the car right now is locked.
843.76s - 854.23s |  I run my genuine radio script, and right now, the car
854.23s - 855.35s |  is unlocked.
855.35s - 855.91s |  So simple.
855.91s - 858.19s |  The brute force is customizable.
858.19s - 863.23s |  You can set parameters, for example,
863.23s - 866.07s |  the delay between each signal.
866.07s - 868.59s |  And after that, I created AutoRefKiller.
868.59s - 871.67s |  It's a tool that I developed to unlock whatever car that
871.67s - 874.67s |  use learning code, fixed code, or rolling code
874.71s - 876.63s |  with roll jam attacks.
876.63s - 880.79s |  So let's go to the city to unlock
880.79s - 882.19s |  hundreds of vulnerable cars.
882.19s - 885.07s |  So here we have the real gangster hacker.
885.07s - 886.75s |  This is a pet black hacker.
886.75s - 889.51s |  Don't use my pet, please.
889.51s - 900.51s |  So here, I show about how I perform in Akia Soluto.
900.51s - 906.55s |  OK, so right now, I run the brute force attacks.
906.55s - 914.55s |  I remember that the brute force attack take one minute,
914.55s - 915.39s |  I guess.
915.39s - 920.59s |  And in one minute, my script was able to unlock the car.
920.59s - 925.15s |  So OK, remember, each car has a different learning code.
925.15s - 931.27s |  And each car is able to save up to four different learning
931.27s - 932.47s |  codes.
932.47s - 936.95s |  OK, so right now, I'm going to check the car is unlocked.
936.95s - 945.91s |  And after I run my script, right now, the script is running.
957.37s - 958.61s |  And let's go to wait.
958.61s - 962.17s |  And in a few minutes, the car will be unlocked.
962.17s - 967.89s |  You know, each signal is sent through each 30 milliseconds.
967.89s - 972.81s |  But you can set that parameter to, I don't know,
972.81s - 974.05s |  60 milliseconds.
974.05s - 976.85s |  If you have more interference, you
976.85s - 980.17s |  are able to send with a more delayed.
980.17s - 986.25s |  OK, right now, we have a Kia Rio.
986.25s - 990.29s |  So it's the same attack, the same attack.
990.29s - 997.05s |  So the Kia Rio, I was able to unlock the car
997.05s - 998.73s |  with two different learning codes.
998.73s - 1003.45s |  Remember, each car had between two learning codes
1003.45s - 1006.01s |  up to four different learning codes.
1006.01s - 1014.24s |  So let's go to see quickly.
1014.24s - 1016.08s |  So we check the car is locked.
1016.08s - 1023.18s |  And after I run my script, I am able to unlock the car.
1023.18s - 1025.54s |  All right, now the car is locked.
1025.54s - 1031.22s |  OK, and final, with another Renault X, I don't know.
1031.22s - 1034.70s |  Remember, there is a possibility that you
1034.70s - 1041.14s |  go to a car keyless entry system.
1041.14s - 1047.14s |  There are a possibility that the car dealership install
1047.14s - 1050.58s |  you a vulnerable keyless entry system with learning code.
1050.62s - 1055.06s |  So I guess that in Renault, I don't see the model.
1055.06s - 1060.18s |  I guess that this is the case.
1060.18s - 1063.06s |  Also, there are vulnerable cars like Kia Picanto
1063.06s - 1066.02s |  and more cars in Ecuador.
1066.02s - 1067.22s |  So I'm from Ecuador.
1067.22s - 1073.85s |  I forget to say that, I guess.
1073.85s - 1081.08s |  So these are real attacks in the streets.
1081.08s - 1084.92s |  Right now, I unlocked the car.
1084.92s - 1087.56s |  So let's go to the next part.
1087.56s - 1090.04s |  Let's go to the setting backdoor in keyless entry system.
1090.04s - 1095.76s |  Remember that how we know that a malicious actor don't
1095.76s - 1099.16s |  send a backdoor into our keyless entry system?
1099.16s - 1100.00s |  We don't know.
1100.00s - 1106.24s |  So there are high probability because in Latin America,
1106.24s - 1109.72s |  in South America, there are something like universal case.
1109.72s - 1112.44s |  Universal case, there is a fogging
1112.44s - 1118.56s |  because uses a key fog of the malicious actor
1118.56s - 1121.40s |  set into the keyless entry system of many cars.
1121.40s - 1123.52s |  So this is where it's rolling code.
1123.52s - 1130.80s |  So 1K unlock N cars because previously, the car
1130.80s - 1134.00s |  was backdoorized.
1134.00s - 1137.16s |  OK, so let's go to backdoor inside a keyless entry system.
1137.16s - 1141.16s |  For that, we have the receiver microcontroller with STM8,
1141.16s - 1144.84s |  the horn, the voltage source to power on the circuit.
1151.15s - 1154.07s |  We don't have sound, but don't worry.
1154.07s - 1160.27s |  Right now, also, we have the hack RF, my SD device,
1160.27s - 1162.55s |  and also the auto RF killer that I
1162.55s - 1166.95s |  created to create a custom signal to create the backdoor.
1166.95s - 1172.55s |  And basically, I put in programmation mode
1172.55s - 1174.83s |  the keyless entry system.
1174.83s - 1177.63s |  We connect the ignition to the voltage
1177.63s - 1179.87s |  and press a button six times.
1179.87s - 1183.99s |  So this is how to backdoorize the keyless entry system.
1183.99s - 1185.95s |  So after the keyless entry system
1185.95s - 1189.15s |  is in learning code programmation mode,
1189.15s - 1194.07s |  I send whatever signal, whatever signal.
1194.07s - 1199.07s |  For example, I put, for example, 1001001 or 001,
1199.75s - 1202.59s |  or 00000001.
1202.59s - 1204.59s |  So this is the backdoor code.
1204.59s - 1208.35s |  So right now, I use my tool.
1208.35s - 1211.19s |  I put the backdoor code right now.
1211.19s - 1222.07s |  And after that, the receiver will save that in his memory.
1222.07s - 1226.23s |  So right now, I connect ignition to the voltage
1226.23s - 1228.31s |  to put in programmation mode.
1228.31s - 1230.79s |  They are sounds.
1230.79s - 1236.15s |  And after that, I send the backdoor code.
1236.15s - 1240.15s |  And finally, I exit the programmation mode.
1240.15s - 1245.55s |  And after that, I am able to unlock the car
1245.55s - 1248.07s |  with my backdoor code, OK?
1248.07s - 1251.99s |  So basically, I am able to unlock
1251.99s - 1268.45s |  that car with my hack RF.
1268.45s - 1271.33s |  So right now, I'm going to send the signal.
1271.37s - 1276.41s |  I am going to unlock the system with the hack RF.
1276.41s - 1280.09s |  So let's go to send the signal with the hack RF.
1282.81s - 1284.37s |  I lock the system.
1284.37s - 1285.73s |  Lock the system.
1285.73s - 1291.05s |  And if you listen, I know that you don't listen right now,
1291.05s - 1293.17s |  but trust me.
1293.17s - 1297.45s |  The system sounds, so the system is unlocked with the backdoor.
1297.45s - 1299.05s |  OK.
1299.05s - 1301.89s |  There are also a collision problem.
1301.89s - 1303.97s |  What means the collision problem?
1303.97s - 1306.93s |  The most integrated chip learning code
1306.93s - 1310.45s |  use the same two to power 20 bits.
1310.45s - 1314.49s |  So the most integrated circuit chips learning code
1314.49s - 1316.21s |  have one million possibility code.
1316.21s - 1323.09s |  So what I mean, for example, if we take the AB1527 chip,
1323.09s - 1326.33s |  there are high probability that that chip have the same learning
1326.33s - 1329.49s |  code that have another chip that use the same range.
1329.49s - 1334.73s |  For example, the HS2240, HS2241, and more.
1334.73s - 1335.65s |  Why I say that?
1335.65s - 1337.65s |  Because just in my country alone,
1337.65s - 1341.53s |  there are tons of cars that use that KLS entry system,
1341.53s - 1343.37s |  vulnerable KLS entry system.
1343.37s - 1348.05s |  So if we join all the cars in one place,
1348.05s - 1350.49s |  all of the cars of the world in one place
1350.49s - 1352.69s |  that use the learning codes, there
1352.69s - 1356.37s |  are high probability that if I take a random KFOB
1356.37s - 1359.25s |  and press the button, there are another cars
1359.25s - 1362.61s |  that will unlock or lock.
1362.61s - 1363.61s |  And why I say that?
1363.61s - 1369.53s |  Because there will come a time where the million codes will
1369.53s - 1373.01s |  be filed all over the world and will be a collision,
1373.01s - 1377.29s |  and no one will figure it out.
1377.29s - 1384.77s |  Or maybe this firewall has already been reached.
1384.77s - 1388.57s |  So that question, I put you in your mind.
1388.57s - 1392.29s |  So for example, my KFOB code unlock my car,
1392.29s - 1395.21s |  or I unlock a garage door in United States
1395.21s - 1399.01s |  because that learning codes also are
1399.01s - 1404.05s |  using in garage door and radio frequency devices protection.
1404.05s - 1407.29s |  So finally, I'm going to exploit everything.
1407.29s - 1415.25s |  This is a tool with 1,300 Python lines code.
1415.25s - 1417.49s |  So the first feature is to brute force learning codes
1417.49s - 1418.61s |  with our database.
1418.61s - 1421.57s |  I created a database that have all codification
1421.57s - 1424.77s |  of the integrated learning code chips.
1424.77s - 1428.73s |  So also, you can discover in backdoor codes in your car
1428.73s - 1430.29s |  running that brute force attack.
1430.29s - 1433.21s |  So for example, if you run and your car
1433.21s - 1435.61s |  was unlocked by another learning code,
1435.61s - 1438.73s |  your car is backdoorized.
1438.73s - 1440.57s |  Another is the brute force attack
1440.57s - 1441.69s |  with arbitrary parameters.
1441.69s - 1447.45s |  For example, if you want to run your chip
1447.45s - 1452.73s |  with custom parameters, you also are able to run that.
1452.73s - 1456.13s |  You also create a backdoor custom code or signal.
1456.13s - 1461.61s |  And also, you are able to perform a replay attack.
1461.61s - 1465.13s |  And finally, a roll jam attack.
1465.13s - 1469.41s |  To do that, you need two SDR device
1469.41s - 1471.85s |  to unlock cars with rolling code.
1471.85s - 1479.81s |  So finally, let's go to see the tool.
1479.81s - 1483.81s |  So I entered the integrated chip name.
1483.81s - 1487.05s |  So the program sent me the information
1487.05s - 1488.61s |  about that integrated chip.
1488.61s - 1492.45s |  So we don't have anything more than put the radio frequency,
1493.21s - 1496.05s |  for example, in this case, 350.
1496.05s - 1497.93s |  And the brute force attack is performing.
1497.93s - 1502.25s |  So we need to wait on nothing more.
1502.25s - 1512.92s |  Also here, we execute a perform brute force attack
1512.92s - 1516.00s |  with 22 bits, not just 20 bits.
1516.00s - 1521.28s |  So you can set whatever number of bits.
1521.28s - 1525.48s |  You enter the start number to brute force attack
1525.48s - 1528.12s |  and the end number to finish the brute force attack,
1528.12s - 1530.24s |  the delays, and more.
1530.24s - 1536.56s |  And after that, I execute the option number four
1536.56s - 1538.24s |  to send a jamming signal.
1538.24s - 1543.52s |  So you also can use that tool to create jamming signals
1543.52s - 1544.88s |  in whatever frequency.
1544.88s - 1548.64s |  And you set the duration of the jamming.
1549.64s - 1560.99s |  And finally, also, we can choose the option number three
1560.99s - 1564.59s |  to record and replay a radio frequency signal to discover
1564.59s - 1569.23s |  your car is vulnerable to fixed code or learning codes.
1569.23s - 1571.91s |  So you set the frequency.
1571.91s - 1576.71s |  You need my script and also the hack RF and nothing more.
1576.71s - 1580.91s |  So you record in 10 seconds the signal.
1580.91s - 1584.79s |  And immediately, in 10 seconds, your signal is replied again.
1594.16s - 1596.76s |  And finally, set a backdoor into the KLS entry system.
1596.76s - 1598.20s |  You set the frequency.
1598.20s - 1602.80s |  And you put the bits, for example, 110, whatever.
1602.80s - 1607.12s |  So the script create the modulation, do everything.
1607.12s - 1613.52s |  So you just need to put the bits and nothing more.
1613.52s - 1614.96s |  So thank you so much.
1614.96s - 1619.90s |  This was breaking learning codes in my country.
1619.90s - 1621.82s |  Thank you so much.