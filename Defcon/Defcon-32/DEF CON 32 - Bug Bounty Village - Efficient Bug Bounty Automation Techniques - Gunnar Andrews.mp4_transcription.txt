{
  "webpage_url": "local:1731781767:f08184cf:DEF CON 32 - Bug Bounty Village - Efficient Bug Bounty Automation Techniques - Gunnar Andrews.mp4",
  "title": "DEF CON 32 - Bug Bounty Village - Efficient Bug Bounty Automation Techniques - Gunnar Andrews.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.11s - 4.99s | This text was transcribed using whisper model: large-v2

 So, this is the efficient bug bounty automation techniques talk.
4.99s - 9.31s |  If that isn't the talk you're here for, you know?
9.31s - 11.51s |  So my name is Gunner Andrews.
11.51s - 14.31s |  I'm an AppSec engineer by day, bug bounty hunter by night.
14.31s - 19.01s |  I do a little bit of content creation on YouTube and Twitch and some other stuff around basically
19.01s - 20.01s |  the same thing.
20.01s - 24.37s |  Bug bounty hunting, recon, tool dev, that kind of thing.
24.37s - 27.17s |  There's three main goals for the talk that I want to go over.
27.17s - 29.43s |  So three basically different parts.
29.43s - 33.59s |  The first one is the idea of resources versus findings.
33.59s - 38.45s |  In bug bounty automation, you can get a lot of data really fast and have zero findings,
38.45s - 40.09s |  which means zero dollars.
40.09s - 44.75s |  So we're going to talk about getting from zero to 100 with as little cost as possible
44.75s - 49.55s |  and scaling up to actually having results that can get you bugs, which means hopefully
49.55s - 50.55s |  money.
50.55s - 52.49s |  The second part is automating collection.
52.49s - 56.93s |  So I'm going to talk about what I personally collect and how I collect it efficiently.
56.93s - 60.77s |  And then the little last portion at the end is going to be kind of a portion on data engineering
60.77s - 66.69s |  for bug bounty automation to hopefully encourage some people to move away from flat text files
66.69s - 70.29s |  as much as bug bounty hunters seem to love those.
70.29s - 75.21s |  So I want to start the talk with this slide because I think it's a weird take for some
75.21s - 76.21s |  automationists.
76.21s - 80.89s |  I basically don't do any brute forcing at all until I have to.
80.89s - 84.59s |  I monitor millions of domains every day.
84.59s - 87.67s |  I found all of them without brute forcing anything.
87.67s - 90.95s |  I monitor a ton of end points, JavaScript files, all that kind of stuff, just like everybody
90.95s - 91.95s |  else does.
91.95s - 93.79s |  I didn't brute force for any of those.
93.79s - 98.45s |  I only brute force something when I absolutely have to because brute forcing is guessing
98.45s - 103.43s |  and nowadays there's just a lot of other techniques to cover before you start guessing.
103.43s - 106.67s |  When you're taking a test, the last thing you do is guess.
106.67s - 109.05s |  When you're totally screwed, then you guess.
109.05s - 114.79s |  So I'm going over all this stuff before you're screwed and you have to guess.
114.79s - 119.19s |  So I'm going to start at the beginning with Apex domains and kind of a warning about Apex
119.19s - 126.07s |  domains because Apex domains are very important in bug bounty, especially for bug bounty automationists.
126.07s - 130.77s |  Seeing that wild card, star.anything.com means that we can hunt on everything.
130.77s - 134.79s |  There's a lot of bug bounty programs that say hunt all of our stuff no matter what.
134.79s - 139.27s |  Just anything that Meta owns or anything that Yahoo owns or anything like that.
139.27s - 144.07s |  So for some programs, the place to start is Apex domains, finding all of the root domains
144.07s - 147.91s |  to then put into automation, finding all of the IP space they own, that kind of stuff.
147.91s - 153.29s |  But specifically for Apex domains, these are some of the sources.
153.29s - 156.47s |  It's not the complete picture, especially if they're cloud friendly, and we'll get into
156.47s - 158.31s |  the cloud stuff later.
158.31s - 162.97s |  There is reverse whizzing, there's ASN, like checking their ASNs against certain ASN sources.
162.97s - 165.91s |  But the thing at the bottom, I'm not going to hit on this for a whole bunch because I
165.91s - 170.47s |  personally don't like automating this a ton.
170.47s - 171.51s |  I do a little bit of it.
171.51s - 175.55s |  I write some scripts to run it, but then I manually look at the output.
175.55s - 181.19s |  Because I found and I have personally been burned multiple times on very big bugs where
181.19s - 187.47s |  I turn in a huge bug, get really excited, and then the domain isn't in scope, right?
187.47s - 190.63s |  Maybe they shared some kind of registrar, they did some kind of thing, and it happened
190.63s - 194.43s |  to slip into my automation because I automated it, and I got burned.
194.43s - 195.79s |  So these are some of the sources.
195.79s - 200.71s |  I put them up there anyway, but as a warning, I personally don't start at Apex domains for
200.71s - 201.71s |  that reason.
201.71s - 207.75s |  It's hard to automatically 100% confirm that it's in scope.
207.75s - 213.19s |  So if you are interested in looking for Apex domains, though, automate it, and we'll talk
213.19s - 216.83s |  about some of this later, but these are some of the things I do.
216.83s - 222.23s |  So nowadays it is very easy for everybody in this room to get a hold of enough hardware
222.23s - 225.99s |  to scan the entire IPv4 IP address space.
225.99s - 228.33s |  You don't need an ASN.
228.33s - 234.09s |  Some companies do run on IPv6 only, but it's very few, to be really honest.
234.09s - 236.93s |  I built some of my own tooling for this.
236.93s - 240.05s |  If you look on my GitHub, one of the tools is called Caduceus.
240.05s - 244.83s |  I like naming all my tools after mythological weapons, you'll see.
244.83s - 245.83s |  But there's some ports there.
245.83s - 250.19s |  I always do port 443, but there's some other ports that will have certificates on them
250.19s - 251.75s |  that are used.
251.75s - 257.01s |  Basically what Caduceus does is it does half the TLS handshake, enough to get the certificate,
257.01s - 260.77s |  and then it pulls any domain names out of the common name and subject alternative name
260.77s - 267.75s |  fields and gives the output with what IP address it found it from and what domains, right?
267.75s - 273.13s |  So you can use this, scan the entire Internet, and I end up with a whole list of domain names
273.13s - 275.29s |  and what IP address I got them from, right?
275.29s - 278.51s |  And we'll talk about this a little bit more later in depth, because this obviously works
278.51s - 282.77s |  for subdomains, too, but the other half of it is reverse DNS lookup.
282.77s - 286.87s |  So I do reverse DNS, which is searching for PTR records, so it basically does the opposite
286.87s - 287.87s |  of DNS, right?
287.87s - 291.71s |  So instead of what IP address does this DNS name resolve to, it's the other way around.
291.71s - 293.99s |  You put an IP address and it gives you DNS names.
293.99s - 295.71s |  I do that using some of those tools.
295.71s - 298.39s |  I prefer ZDNS, but there's a bunch of good tools.
298.39s - 302.19s |  I do that across the whole IPv4 space as well.
302.19s - 305.91s |  And then those scans can also give you Apex domains.
305.91s - 308.79s |  We'll talk about it, because it can give you subdomains, too.
308.79s - 314.11s |  But for Apex domains, I've found a lot of Apex domains just looking around the Internet.
314.11s - 318.35s |  You'll find something that says Yahoo on it that you've never seen before, and then
318.35s - 321.35s |  you can go back and check who it's registered to and all that kind of stuff and confirm
321.35s - 324.99s |  that it does, in fact, belong to Yahoo or whatever company it is, right?
324.99s - 329.83s |  The little tip at the bottom we can mention later, too, but if you are scanning the IPv4
329.83s - 333.23s |  space, a big chunk of that is cloud providers.
333.23s - 340.53s |  If you want to take the time, scanning a cloud provider from the cloud provider is disgustingly
340.53s - 343.37s |  fast compared to everything else.
343.37s - 345.93s |  It might not like it, but it is.
345.93s - 354.49s |  So if you scan U.S. East 1 in AWS from U.S. East 1, you can finish it in, like, a minute.
354.49s - 357.21s |  But I didn't tell you that.
357.21s - 358.21s |  Okay?
358.21s - 364.09s |  So now we're going to start with what actually is just automatically for me is automated.
364.09s - 366.57s |  Everyone likes to start with subdomains, so that's where we're going to start.
366.57s - 369.65s |  It's basically like Pokemon, right?
369.69s - 378.17s |  I full, like, wholeheartedly use passive DNS sources, because if you read the small print
378.17s - 384.97s |  for all these companies, especially the ones that run public DNS servers and big ISPs,
384.97s - 388.05s |  everyone sells their DNS data to someone.
388.05s - 392.89s |  They might say they don't sell it, but then at the end, it's loopholed because they add
392.89s - 397.93s |  their DNS data as part of some other business contract with another company.
397.93s - 401.37s |  So a lot of these companies you've heard of, like VirusTotal, SecurityTrails, and stuff
401.37s - 403.29s |  like that, they do their own internet scanning.
403.29s - 406.85s |  Sure, they might put bots out there and scan the internet and stuff like that, but they
406.85s - 412.41s |  also buy a lot of this data from major DNS providers that are happy to also profit from
412.41s - 413.41s |  it.
413.41s - 415.93s |  So I pay for some.
415.93s - 416.93s |  You don't have to.
416.93s - 419.57s |  I'm not here to tell you to pay for any product, obviously, because I don't work for any of
419.57s - 420.57s |  them.
420.57s - 425.45s |  But I do pay for some of them, because in my opinion, they've been way worth it for me.
425.45s - 430.21s |  I always, always, always tell someone, do not just hook up a tool and use it because
430.21s - 432.05s |  it says it hits that API.
432.05s - 436.09s |  Read the docs, look at the rate limiting, look at the pagination, how many credits you
436.09s - 439.79s |  use per this or that, and just try writing it yourself first.
439.79s - 443.81s |  Because we're going to talk about it right now, but all those tools on the right, everyone
443.81s - 448.29s |  has made all these tools that hit every passive DNS source on the planet, and you can put
448.29s - 451.13s |  in your keys, and that's all great, and they are amazing.
452.13s - 456.57s |  The people that made a mass, they're all amazing.
456.57s - 459.57s |  They've made amazing tools, and they work amazing.
459.57s - 464.21s |  But if you want specific things, I would write your own logic just so you 100% know what's
464.21s - 465.73s |  going on.
465.73s - 471.53s |  One of the reasons for that is because when you audit these tools, they try and make everybody,
471.53s - 475.97s |  all of you in this room, as happy as they can, all at the same time.
475.97s - 479.57s |  And to do that, sometimes you have to cut corners.
479.57s - 484.27s |  Some of those corners are, for instance, failing quietly, right?
484.27s - 486.69s |  So when you audit tools, you'll find something like this.
486.69s - 488.97s |  If anyone recognizes this, this is sub finder.
488.97s - 492.29s |  Again, if someone from project discovery is here, I love you, please talk to me, okay?
492.29s - 493.73s |  I'm sorry.
493.73s - 498.13s |  But you'll notice on, like, the fifth row down, I ran this.
498.13s - 502.17s |  If you run it with a dash stats flag, you'll get this output that will tell you the statistics
502.17s - 503.21s |  of your run.
503.21s - 508.49s |  I ran this against Tesla.com with dash all, meaning use all the sources you possibly can,
508.49s - 510.73s |  which is how a lot of people are encouraged to run it.
510.73s - 514.45s |  You'll notice it took 43 seconds and 43 and a half.
514.45s - 518.13s |  Well, common crawl took 43 and a half seconds.
518.13s - 519.85s |  And how many results did I get?
519.85s - 525.15s |  Negative 70,782, which makes a ton of sense.
525.15s - 529.43s |  So I ran for 43 seconds for an error, basically.
529.43s - 533.21s |  If you look at the next fastest source or the next slowest, it was ten seconds from
533.21s - 539.17s |  security trails or 30 seconds from way back archive that also gave me nothing.
539.17s - 544.17s |  So if I cut out common crawl and way back archive, lose no results, and I would have
544.17s - 548.09s |  ran in about ten seconds, because I think security trails is the next slowest.
548.09s - 551.45s |  So I would have ran in a fourth of the time and gotten the same things, just by paying
551.45s - 556.59s |  attention to what sources I'm using and what they're actually giving me, right?
556.59s - 559.17s |  So back to certificates, okay?
559.17s - 564.45s |  So again, I do IPv4 certificate scanning with Caduceus, which I just talked about.
564.45s - 568.47s |  You get Apex domains from that, but what you really can look for is subdomains.
568.47s - 572.81s |  Those subdomains can be used in a ton of different ways, which I will talk about in a second.
572.81s - 578.05s |  But when we talk about certificates, we cannot not talk about cert.sh and CT logs.
578.05s - 582.41s |  So CT logs are Merkle trees that are public to everybody, and cert.sh was made by some
582.41s - 583.41s |  really smart people.
583.41s - 587.73s |  It ingests those logs and saves them in a database that is queryable.
588.53s - 595.97s |  The problem I found with cert.sh is I want domains before all of you have it.
595.97s - 596.97s |  Sorry.
596.97s - 597.97s |  Right?
597.97s - 603.25s |  Some of the bigger CT logs, cert.sh actually won't have in their database queryable for
603.25s - 604.69s |  up to 48 hours.
604.69s - 607.17s |  Some are instant, some are not.
607.17s - 609.29s |  So what I did is I made my own tool.
609.29s - 610.41s |  It's also in my repo.
610.41s - 613.35s |  It's called Gungnir, also another weapon.
613.35s - 619.05s |  And all it does is it does the same thing that cert.sh does, but I already have databases
619.05s - 620.67s |  and all that other stuff later.
620.67s - 624.25s |  So it's just the Unix philosophy of CT log scraping.
624.25s - 629.99s |  So it just scrapes the CT logs as fast as it can with exponential backoffs in case it
629.99s - 635.29s |  gets rate limited and then it catches back up, and it will give you a domain within seconds
635.29s - 637.29s |  of that certificate getting created.
637.29s - 643.73s |  So if someone creates new site.example.com, it will show up in Gungnir in under 20 seconds.
643.73s - 645.41s |  You'll know instantly.
645.41s - 650.23s |  So if anyone puts a new service online and they want a real certificate behind it that's
650.23s - 655.37s |  backed by a certificate authority, you'll know about it basically the second the certificate's
655.37s - 657.73s |  created, no matter where they put it.
657.73s - 663.17s |  Now again, cert.sh will do that for you, and you can look historically with cert.sh, so
663.17s - 665.49s |  it's still a fantastic tool.
665.49s - 667.93s |  Gungnir is just if you want it, immediately.
667.93s - 669.73s |  So that's what I do.
669.73s - 674.21s |  We'll talk about virtual hosting later, but Caduceus, like I said, Gungnir will give you
674.21s - 677.09s |  certificates but no IP address to what they go with.
677.09s - 680.65s |  Caduceus and the certificate scanning will give me the IP address it came from as well
680.65s - 682.23s |  as all the domains.
682.23s - 683.75s |  So keep that in mind.
683.75s - 685.29s |  These are some other good things that I do.
685.29s - 688.13s |  I automate them, but I don't do them constantly.
688.13s - 692.05s |  Gwen made a very good tool called GitHub subdomains that I think he's actually rewriting.
692.05s - 693.33s |  I've heard.
693.33s - 697.81s |  I've talked about the reverse DNSing, and then I'll do light spidering, as in I'll land
697.81s - 702.49s |  on a page and pull all the second order assets, which costs me nothing and it doesn't get
702.49s - 703.49s |  you banned.
703.49s - 706.89s |  One get request has not gotten me banned yet.
706.89s - 709.05s |  Fingers crossed.
709.05s - 711.67s |  Virtual host scanning, I wanted to release a tool today.
711.67s - 715.61s |  It will be public very soon in my same repo, but I found a bug literally this morning,
715.61s - 717.71s |  which is just terrible.
717.71s - 722.29s |  But it's going to be called Harpy, and basically what it will do is you can take the JSON output
722.29s - 727.13s |  from Caduceus, and you can pipe it right into Harpy, and it will do virtual host scanning
727.13s - 731.81s |  specifically only for that IP address and the domains found on that certificate.
731.81s - 736.93s |  So it's really efficient, and it doesn't do virtual host scanning for a huge list of subdomains
736.93s - 738.97s |  against every single IP address.
738.97s - 744.01s |  It's just what domains actually came from the certificate on that IP address, and I've
744.01s - 747.59s |  already found a lot of nice stuff with it.
747.59s - 751.33s |  So I would encourage you to look at it.
751.37s - 756.17s |  So this is the other big part, is DNS resolution, because if you get stuff from passive DNS,
756.17s - 761.19s |  you are not 100% sure it resolves, right?
761.19s - 766.93s |  So there's an issue if you're going to do very high speed, very consistent resolving,
766.93s - 772.09s |  is a lot of current tooling silently fails, just like I talked about with sub finder,
772.09s - 776.03s |  or it returns surf fails, which if you're not looking for those, it will just drop,
776.03s - 780.03s |  but surf fails can actually, if you guys are into, like, subdomain takeovers and stuff,
780.03s - 781.95s |  those are nice to know about.
781.95s - 786.63s |  If you attempt to resolve one time, like, if you get a domain from one of these APIs
786.63s - 790.67s |  and you try and resolve it once, I promise you, you're missing assets.
790.67s - 795.27s |  I promise you right now, if you don't have a running retry list of I'll try this for
795.27s - 800.21s |  the next five days or something, I promise you, you're missing assets.
800.21s - 805.27s |  So the trickest has a list of trusted resolvers that are public and out there and that kind
805.27s - 807.07s |  of stuff, and I know a lot of people use those.
807.07s - 810.19s |  That's what I started with, but I moved on.
810.19s - 813.67s |  They have rate limits, they have timeouts, and they have a bunch of different issues.
813.67s - 817.01s |  I actually wasn't going to talk about this, but I'll just do it anyway.
817.01s - 823.03s |  So I look for subdomain takeovers personally, not in a bug bounty presence, but in a different
823.03s - 824.83s |  engagement for consulting.
824.83s - 830.99s |  I actually found a whole handful of takeovers that every public resolver on trickest's list
830.99s - 837.03s |  actually says it's a no error, and what we'll talk about next actually gave it a surf fail
837.19s - 840.59s |  it was a surf fail, they were all takeoverable Azure assets.
840.59s - 846.67s |  So I'm not sure why, because I'm not a DNS expert by any means, but the public resolvers,
846.67s - 850.79s |  because they have to be on the edge and all that kind of stuff and very fast, can have
850.79s - 854.15s |  other things behind the scenes that might mess up what you as a bug bounty hunter are
854.15s - 855.95s |  trying to do.
855.95s - 858.79s |  So this is what I did instead.
858.79s - 862.27s |  So there's a tool or a set of tools called PowerDNS.
863.11s - 864.11s |  They have three main tools.
864.11s - 867.19s |  They have an authoritative server, which we don't really care about.
867.19s - 871.91s |  They have a tool called PowerDNS Recursor, which is a recursive DNS resolver we definitely
871.91s - 873.19s |  care about.
873.19s - 878.71s |  And they have a tool called DNSdist, which is just a load balancer for DNS servers.
878.71s - 880.03s |  Sounds pretty nice.
880.03s - 885.87s |  So with very little dev effort, you can create a virtual IP, so all of your cluster has the
885.87s - 892.03s |  same IP using something like KeeplID and using DNSdist and Recursor, which all work together
892.79s - 895.03s |  because they're the same company and it's basically plug and play.
895.03s - 901.63s |  You can make your own DNS resolution cluster that has unlimited rate limits, can be tuned
901.63s - 905.43s |  to your exact needs, whatever caching you want.
905.43s - 908.71s |  Using this, you can attempt to resolve a domain as many times as you want.
908.71s - 910.19s |  You don't hit rate limits.
910.19s - 914.59s |  You can put it into Prometheus or any other kind of monitoring and monitor your own stack
914.59s - 917.85s |  and make sure your stuff is working as you think it's working.
917.85s - 922.01s |  And then to solve the problem of attempting to resolve multiple times, I actually use
922.01s - 923.01s |  caching.
923.01s - 924.01s |  I use Redis.
924.01s - 925.01s |  You can use Memcache.
925.01s - 926.01s |  You can use whatever you want.
926.01s - 929.61s |  Using just sorted sets with timestamps or anything else or the number of retries, whatever
929.61s - 930.89s |  you want to do.
930.89s - 932.03s |  It's lightning fast.
932.03s - 933.53s |  You can pull it automatically.
933.53s - 934.81s |  You're not pulling from a DB.
934.81s - 936.47s |  You don't have to worry about a schema.
936.47s - 939.89s |  You can just keep a running list of these are all the domains I've seen, this is how
939.89s - 943.37s |  many times I've tried it or the last time I've seen it, whatever you want to do.
943.37s - 947.69s |  That kind of stuff is what I do, so I can see when I resolve stuff last, how many times
947.69s - 950.65s |  I've tried it, if it hasn't, that kind of stuff, and it's really fast, right out of
950.65s - 952.11s |  the box.
952.11s - 954.93s |  Those are the records that I look for for bug bounty.
954.93s - 956.57s |  I don't pull them all.
956.57s - 964.45s |  So using this stack, just for reference, I spend about $25 a month on my cluster.
964.45s - 968.93s |  And just two days ago, I was able to ramp it up with no errors and no packet drops to
968.93s - 973.57s |  write about 125,000 queries per second.
973.57s - 981.41s |  So I do a couple hundred million, like 600 to 800 million requests a day to that cluster,
981.41s - 984.05s |  and it works pretty nice.
984.05s - 985.05s |  So port scanning.
985.05s - 987.45s |  Now we're getting into the good stuff, okay?
987.45s - 988.73s |  Kind of.
988.73s - 990.89s |  So there's active and there's passive.
990.89s - 993.27s |  Now I hold an opinion on this.
993.27s - 996.37s |  This is a purely opinion post.
996.37s - 1000.77s |  There are active tools out there, but there is a passive tool that I learned about from
1000.77s - 1006.61s |  Jason Haddix, if he's in this room, but it's called SMAP, and all it does is it takes your
1006.61s - 1010.77s |  Nmap flags, whatever, but it does it all against Shodan.
1010.77s - 1012.69s |  It doesn't actively port scan.
1012.69s - 1016.23s |  So if you want to port scan a bunch of IPs, it actually does it against Shodan.
1016.23s - 1022.09s |  So what I do is I run everything through SMAP with Shodan, and then all the ports that it
1022.09s - 1028.81s |  says are up, I then actively check with mass scan, Naboo, Nmap, whatever you want to use.
1028.81s - 1029.81s |  Way less traffic.
1029.85s - 1034.13s |  I've gotten banned zero times, and SMAP is right a lot of the time, because Shodan is
1034.13s - 1035.33s |  pretty good.
1035.33s - 1039.55s |  So you can still find all those ports on the right with all kinds of juice and all kinds
1039.55s - 1043.77s |  of stuff without scanning every single port on every single IP until you eventually get
1043.77s - 1046.97s |  abuse reports and get banned off of a cloud provider.
1046.97s - 1049.99s |  I've never done that, okay?
1049.99s - 1053.97s |  Web servers and endpoints, same thing scanning the web.
1053.97s - 1058.19s |  So I obviously only do web fingerprinting on stuff that resolved.
1058.19s - 1061.15s |  So again, do DNS resolution first.
1061.15s - 1063.67s |  I'm assuming that's pretty basic, but we're going to start with that.
1063.67s - 1066.51s |  Again, you don't want to get blocked, you don't want to get banned.
1066.51s - 1069.07s |  So slow scanning is an idea.
1069.07s - 1070.11s |  Always watch your user agent.
1070.11s - 1073.67s |  A lot of these tools make their own custom user agents, and they're all blocked, okay?
1073.67s - 1076.67s |  There's probably someone from Akamai or someone else in this room.
1076.67s - 1081.39s |  They block HTTPX, they block all that stuff that come with the custom user agents.
1081.39s - 1087.31s |  Go to Chrome, download Chrome, look in the requests, find the most recent user agent,
1087.43s - 1088.95s |  and just paste that into your tooling.
1088.95s - 1092.23s |  And like once a month, make sure it still matches.
1092.23s - 1094.45s |  You're golden, all right?
1094.45s - 1099.55s |  Some of the other things that we're not supposed to talk about are proxies and lambdas, right?
1099.55s - 1104.87s |  AWS lambda, every time you spin up a lambda, comes with a brand new IP address out of AWS's
1104.87s - 1105.87s |  IP pool.
1105.87s - 1108.71s |  It's a huge IP pool, and each one is new.
1108.71s - 1112.65s |  I know Shubbs has talked about it, I know Shadow Clone has been out there for a ton.
1112.65s - 1118.89s |  If you are going to do high speed scanning on the web, root forcing, directories, whatever
1118.89s - 1122.49s |  it may be, split it up with serverless architecture.
1122.49s - 1123.49s |  It's cheap.
1123.49s - 1124.97s |  I'm not supposed to tell you that.
1124.97s - 1126.33s |  People don't like it.
1126.33s - 1127.33s |  Do it anyway.
1127.33s - 1128.33s |  Okay?
1128.33s - 1129.33s |  This is DEF CON.
1129.33s - 1130.33s |  It's kind of the point.
1130.33s - 1131.33s |  Okay?
1131.33s - 1134.85s |  But on the flip side, one get request gets you a ton of data.
1134.85s - 1140.05s |  Again, it will get you any second order resources, JavaScript files, S3 buckets, whatever it may
1140.05s - 1141.05s |  be.
1141.05s - 1142.97s |  It will get you the title, status code.
1142.97s - 1144.81s |  You'll follow redirects, whatever that may be.
1144.81s - 1146.25s |  You'll get your CSP from it.
1146.25s - 1147.85s |  You'll get a lot of cookies from it.
1147.85s - 1154.49s |  So to be fair, on the flip side, one get request gets you a ton of information, right?
1154.49s - 1158.47s |  So you don't have to scan the web, and I personally don't.
1158.47s - 1164.67s |  Because basically every request you send nowadays, you risk incurring wrath from someone.
1164.67s - 1169.65s |  Especially because bug bounty tests in prod, because we're gangster, all right?
1169.65s - 1174.41s |  So for end points, there are passive sources.
1174.41s - 1175.41s |  Varying results.
1175.41s - 1179.73s |  Obviously, if you hit a brand-new end point from Gungnir or something like that, and you
1179.73s - 1185.21s |  go look for it, there's not going to be anything there.
1185.21s - 1188.17s |  But if you find some old stuff, something might be there.
1188.17s - 1189.17s |  So it's worth looking.
1189.17s - 1190.65s |  Again, it costs you nothing.
1190.65s - 1192.93s |  I have two minutes.
1192.93s - 1193.93s |  Okay.
1193.93s - 1195.29s |  We're going to have to hustle.
1195.29s - 1198.11s |  So spidering and crawling is hard to do.
1198.11s - 1202.11s |  When you kick off spidering, find stuff that looks interesting, headless works best.
1202.11s - 1203.11s |  Okay.
1203.11s - 1204.43s |  Actually, I'm doing pretty good.
1204.43s - 1206.39s |  So this is the data engineering side.
1206.39s - 1212.13s |  So subdomains versus IP addresses, they're both extremely useful for those reasons.
1212.13s - 1213.53s |  So use both.
1213.53s - 1217.35s |  I track subdomains and IPs, and I cross-reference them.
1217.35s - 1218.41s |  Track both.
1218.41s - 1220.99s |  Do not just make subdomains your primary key in a database.
1220.99s - 1222.39s |  Do not just make IPs.
1222.39s - 1223.75s |  Do both, please.
1223.75s - 1225.23s |  For those reasons.
1225.23s - 1226.31s |  Okay?
1226.31s - 1228.59s |  Look into data engineering, please.
1228.59s - 1229.59s |  This is a plug.
1229.59s - 1230.59s |  Okay?
1230.59s - 1234.31s |  There are two books on the right side and a list of topics under them.
1234.31s - 1238.59s |  I highly recommend those are both audio books on Audible.
1238.59s - 1241.47s |  You can listen to them and fall asleep.
1241.47s - 1242.75s |  I've never done it.
1242.75s - 1243.75s |  Right?
1243.75s - 1244.75s |  Read them.
1244.75s - 1245.75s |  Okay?
1245.75s - 1246.75s |  They are boring.
1246.75s - 1247.75s |  They are technical.
1247.75s - 1248.75s |  But it's so good.
1248.75s - 1250.15s |  You're going to end up with so much data.
1250.15s - 1254.63s |  And if you don't use the data or just put it in flat files and Postgres, you're going
1254.63s - 1255.63s |  to regret it.
1255.95s - 1256.95s |  I promise you.
1256.95s - 1257.95s |  Okay?
1257.95s - 1259.63s |  So please take a picture of this slide.
1259.63s - 1261.27s |  More data is more bugs.
1261.27s - 1263.75s |  But only if you use it correctly.
1263.75s - 1265.15s |  Okay?
1265.15s - 1267.59s |  This slide is automation's advantage.
1267.59s - 1269.27s |  Again, we can cruise through this.
1269.27s - 1270.27s |  Take a picture.
1270.27s - 1271.27s |  Whatever.
1271.27s - 1272.67s |  This is what you want out of your automation.
1272.67s - 1276.19s |  This should be your mission statement right here.
1276.19s - 1277.39s |  This is what I do.
1277.39s - 1278.71s |  Feel free to take a picture of it.
1278.71s - 1281.67s |  This is basically my workflow.
1281.67s - 1284.83s |  That's the second page of the workflow.
1285.03s - 1287.71s |  That's a long workflow.
1287.71s - 1292.31s |  The last thing I want to say is the people on this slide right here have been huge with
1292.31s - 1293.83s |  me learning this stuff.
1293.83s - 1295.55s |  And there's so many more people to list.
1295.55s - 1298.47s |  I see some of you out there.
1298.47s - 1302.43s |  But anyone who has interacted with me, thank you so much.
1302.43s - 1305.43s |  These people are people I interact with every day.
1305.43s - 1306.43s |  Find them.
1306.43s - 1307.63s |  Look their names up.
1307.63s - 1309.07s |  Everyone in this space is great.
1309.07s - 1310.79s |  Don't do automation in a vacuum.
1310.79s - 1312.47s |  There's bugs for everybody.
1312.47s - 1313.47s |  Share your stuff.
1313.47s - 1315.07s |  Talk to people.
1315.07s - 1316.87s |  And this is a really crappy slide.
1316.87s - 1319.31s |  If you want to reach out further, that's all I got.
1319.31s - 1320.07s |  I think I made time.