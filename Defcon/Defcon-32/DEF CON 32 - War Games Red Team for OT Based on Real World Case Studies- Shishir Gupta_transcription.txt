{
  "webpage_url": "https://www.youtube.com/watch?v=Utz4o7CJmAU",
  "title": "DEF CON 32 - War Games  Red Team for OT Based on Real World Case Studies- Shishir Gupta",
  "description": "In this talk, Shishir will share some critical insights from performing a decade worth of Red Team (attack simulation) exercises for large-scale industrial operations across the globe.\n\nThe presentation will also cover real-world examples of attack vectors leveraged by Google's Mandiant Red Team while performing offensive security exercises for operational technology and control system environments.\n\nThis talk will cover:\n\nInsights into common TTPs and attack vectors for large-scale industrial networks\nNetwork propagation and mission execution across ICS-OT attack life-cycle\nExamples from real-world case studies of penetrating cyber-physical systems",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1388,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 7.00s | This text was transcribed using whisper model: large-v2

 Hi, everyone. It's really hard to see everyone with this slide.
7.00s - 10.00s |  So if you cannot hear me, just shout out, and I'll try to
10.00s - 14.00s |  adjust the microphone. Can everybody hear me?
14.00s - 17.00s |  Good afternoon, everyone. My name is Shishir, and I'm
17.00s - 20.00s |  here to talk about red team and attack vectors for
20.00s - 23.00s |  operation technology. My objective here is to go
23.00s - 26.00s |  beyond the hypothetical, and I'm here to talk about red
26.00s - 30.00s |  team and attack vectors or real-world examples for some
30.00s - 33.00s |  of our red team exercises for critical infrastructure.
33.00s - 35.00s |  However, before I start, a quick disclaimer.
35.00s - 38.00s |  Even though everything that I present here is based on
38.00s - 41.00s |  real-world case studies, the content itself is highly
41.00s - 46.00s |  redacted to remove any and all identifying information.
46.00s - 48.00s |  Now, we're not here to talk about it myself, but it's
48.00s - 50.00s |  still customary to do a quick introduction.
50.00s - 52.00s |  My name is Shishir. I'm a technical manager at
52.00s - 55.00s |  Mandiant slash Google. I'm part of a dedicated team
55.00s - 58.00s |  at Mandiant that specializes in security services for
58.00s - 61.00s |  operational technology and control systems.
61.00s - 65.00s |  Personally, I've had more than 12 years of experience
65.00s - 68.00s |  performing offensive security work for industrial control
68.00s - 71.00s |  and cyber-physical systems, and in that time, I have been
71.00s - 75.00s |  fortunate to basically dabble with almost every critical
75.00s - 79.00s |  infrastructure sector on the planet, including power,
79.00s - 83.00s |  transport, rail, air traffic control, manufacturing,
83.00s - 87.00s |  wastewater, telco, and even building management systems.
87.00s - 90.00s |  Now, I believe everyone here would already understand
90.00s - 92.00s |  what we mean by operational technology.
92.00s - 95.00s |  That said, I still wanted to take a minute and remind
95.00s - 98.00s |  that operational technology basically deals with systems
98.00s - 102.00s |  and platforms that are used to control and automate
102.00s - 104.00s |  industrial-scale physical processes.
104.00s - 107.00s |  People often tend to silo OT into a specific sector
107.00s - 111.00s |  or industry, but I'd like to remind that OT covers
111.00s - 114.00s |  a wide range of infrastructure, and my talk here
114.00s - 116.00s |  is industry-agnostic.
116.00s - 118.00s |  I'll be covering examples from different verticals,
118.00s - 121.00s |  including power, utilities, transportation, manufacturing,
121.00s - 126.27s |  and even telecommunications.
126.27s - 129.27s |  I would also like to call out that real-world attack
129.27s - 133.27s |  simulations against industrial networks do not involve
133.27s - 137.27s |  just HMIs or PLCs, but in fact, involve the entire
137.27s - 140.27s |  ecosystem, ranging from the enterprise network that
140.27s - 143.27s |  supports OT to level-one devices that control the
143.27s - 145.27s |  physical processes in the field.
145.27s - 148.27s |  One more disclaimer here, offensive security exercises,
148.27s - 150.27s |  such as red teaming and penetration testing,
150.27s - 153.27s |  essentially involve adversarial testing against
153.27s - 156.27s |  cyber-physical systems that can pretty much blow and burn.
156.27s - 160.27s |  Thus, any kind of offensive security testing for OT
160.27s - 163.27s |  should only be performed by trained individuals
163.27s - 167.27s |  after careful consideration of scenarios, hazards,
167.27s - 170.27s |  risks, and pre-approved rules of control engagement.
170.27s - 173.78s |  Now, before we move into the crux of this talk
173.78s - 176.78s |  and talk about attack vectors and case studies for OT,
176.78s - 179.78s |  I'd like to quickly touch upon one more topic,
179.78s - 182.78s |  that is the ICS OT attack life cycle.
182.78s - 186.78s |  Most people in cyber are already aware of attack life cycles,
186.78s - 189.78s |  but when we talk about hacking OT, people often tend
189.78s - 192.78s |  to assume that we are talking about some cool exploit
192.78s - 195.78s |  against an isolated ICS or a control system device,
195.78s - 198.78s |  so I'd like to call out that there is a difference
198.78s - 200.78s |  between hacking an individual control system
200.78s - 204.78s |  and hacking a large-scale industrial OT operation.
204.78s - 208.78s |  Real-world OT attacks are rarely single-step compromises,
208.78s - 211.78s |  often involve a multi-step attack life cycle
211.78s - 213.78s |  covering multiple phases.
213.78s - 217.78s |  From an attacker's perspective, this typically translates
217.78s - 220.78s |  to information gathering, perimeter breach,
220.78s - 222.78s |  privilege escalation, internal reconnaissance,
222.78s - 226.78s |  network propagation, and finally, a precise execution
226.78s - 230.78s |  to achieve a predetermined objective in an OT environment.
230.78s - 233.78s |  The basic idea here is to obtain prior information
233.78s - 234.78s |  about the target system,
234.78s - 237.78s |  breach the protected perimeter of the OT environment,
237.78s - 239.78s |  remain undetected while operating
239.78s - 241.78s |  within the target environment,
241.78s - 243.78s |  and then finally launch a precise attack
243.78s - 245.78s |  to achieve the target objective.
245.78s - 247.78s |  Consequently, if you think about it
247.78s - 248.78s |  from the defender's perspective,
248.78s - 250.78s |  each phase of this attack life cycle presents
250.78s - 253.78s |  an opportunity for detection and mitigation.
253.78s - 254.78s |  Thus, it's important to understand
254.78s - 256.78s |  the ICS OT attack life cycle,
256.78s - 258.78s |  identify security issues before an attacker
258.78s - 260.78s |  has a chance to exploit them,
260.78s - 263.78s |  develop preventive or detective controls for known TTPs,
263.78s - 266.78s |  and mitigate attack vectors across multiple phases
266.78s - 268.78s |  of the attack life cycle.
268.78s - 269.78s |  Now, I don't believe I have the time
269.78s - 271.78s |  to go through each phase of the attack life cycle
271.78s - 272.78s |  in the next 20 minutes,
272.78s - 273.78s |  so for the remaining session,
273.78s - 276.78s |  I'd like to distill the life cycle into four key phases
276.78s - 279.78s |  listed on the lower side of the slide here,
279.78s - 281.78s |  and walk through some real world examples
281.78s - 284.78s |  and case studies for common attack vectors
284.78s - 285.78s |  across the four phases.
287.78s - 289.78s |  The first phase I'd like to cover is initial compromise.
289.78s - 292.78s |  As the name suggests, the objective of this phase
292.78s - 295.78s |  is to gain an initial foothold in the target environment.
295.78s - 297.78s |  In most real world scenarios,
297.78s - 300.78s |  this typically translates to using a social engineering
300.78s - 301.78s |  or spear phishing campaign
301.78s - 304.78s |  to compromise the enterprise side of the organization.
304.78s - 307.78s |  In fact, the majority of the red team exercises for OT
307.78s - 310.78s |  that we perform begin with some form of attempt
310.78s - 312.78s |  to gain access or foothold
312.78s - 314.78s |  on the corporate side of the network.
314.78s - 317.78s |  That said, the initial compromise phase
317.78s - 320.78s |  could also entail other more direct attack vectors
320.78s - 323.78s |  to gain a direct foothold in the OT network.
323.78s - 326.78s |  The list on the slide here lists some examples
326.78s - 328.78s |  like direct connection to ICS on the internet,
328.78s - 330.78s |  supply chain compromise, third party compromise,
330.78s - 333.78s |  hardware implants, and last but not the least,
334.78s - 337.78s |  physical or wireless access to OT systems in the field.
337.78s - 339.78s |  Industrial environments often have
339.78s - 342.78s |  a geographically dispersed field network,
342.78s - 344.78s |  often connected using wireless networks
344.78s - 347.78s |  and thus present a large attack surface for attackers
347.78s - 350.78s |  to gain direct access to OT devices.
350.78s - 352.78s |  The simplest example of such a system here
352.78s - 354.78s |  would be residential smart meters
354.78s - 356.78s |  in advanced metering infrastructure.
356.78s - 359.78s |  So if an attacker, let's say, is able to gain
359.78s - 361.78s |  or manipulate the communication traffic
361.78s - 363.78s |  between the residential smart meter
363.78s - 365.78s |  and a back-office collector,
365.78s - 367.78s |  they could potentially use that as an entry point
367.78s - 370.78s |  into the back-office, back-inherent system.
370.78s - 375.59s |  The first example I have here
375.59s - 377.59s |  is for a communication-based train control system.
377.59s - 380.59s |  In a CVDC network, onboard ECUs in the train
380.59s - 382.59s |  typically connect to the back-office network
382.59s - 384.59s |  through radio-based communications
384.59s - 387.59s |  such as wireless network or cellular network.
387.59s - 390.59s |  In this specific case, we found that a CVDC radio network
390.59s - 392.59s |  was implemented using a hidden
392.59s - 394.59s |  but essentially open SSID,
394.59s - 396.59s |  thus providing an unauthenticated access
396.59s - 399.59s |  to the onboard embedded network on the trains.
399.59s - 401.59s |  The right side of the screen here shows us
401.59s - 403.59s |  using the open wireless network
403.59s - 405.59s |  to connect to a VNC session
405.59s - 408.59s |  on one of the operator displays in the local cab.
408.59s - 410.59s |  Insecure wireless networks are probably
410.59s - 412.59s |  not as common as in the recent past,
412.59s - 415.59s |  but we still find examples of unencrypted protocols
415.59s - 418.59s |  or legacy encryption in older networks.
418.59s - 423.41s |  The next example I have here
423.41s - 425.41s |  is for an unprotected cellular network
425.41s - 427.41s |  for a public transport operator.
427.41s - 429.41s |  In this case, our team was able to use
429.41s - 431.41s |  an arbitrary personal SIM
431.41s - 433.41s |  to connect to the private APN
433.41s - 436.41s |  for the field network and gain direct access
436.41s - 439.41s |  to traffic monitoring cameras across the metropolitan region.
439.41s - 442.41s |  To be clear, this is probably an exception and not the norm
442.41s - 446.41s |  to have an unauthenticated private APN,
446.41s - 448.41s |  but such was the case here,
448.41s - 450.41s |  and it does show an interesting example
450.41s - 453.41s |  of an initial entry point into an OT environment
453.41s - 457.41s |  through an insecure cellular network.
457.41s - 460.41s |  The last example I have here for initial foothold
460.41s - 465.41s |  is an initial compromise point into a telco network.
465.41s - 468.41s |  Modern telco networks are essentially IP-based
468.41s - 471.41s |  and involve an IP-based tunnel between the mobile device
471.41s - 474.41s |  and a gateway node in the core network.
474.41s - 476.41s |  The gateway node forwards the traffic
476.41s - 478.41s |  to the intended destination
478.41s - 480.41s |  through a backbone network,
480.41s - 483.41s |  and it's best practice to basically
483.41s - 485.41s |  have the gateway node
485.41s - 487.41s |  allow only access to the intended networks
487.41s - 489.41s |  and block any or all attempts
489.41s - 492.41s |  to access the private nodes in the operated network.
492.41s - 494.41s |  However, in this case, we found
494.41s - 496.41s |  that we were able to actually use a commercial
496.41s - 499.41s |  off-the-shop SIM for the said operator
499.41s - 502.41s |  to connect to the core nodes in the telco network.
502.41s - 504.41s |  Long story short, we were able to compromise
504.41s - 507.41s |  the core nodes, such as session border controller,
507.41s - 509.41s |  and intercept user traffic,
509.41s - 512.41s |  including SMS and voice call data.
512.41s - 514.41s |  Now, I realize that it's probably not as obvious
514.41s - 515.41s |  from a single screenshot here,
515.41s - 517.41s |  but the picture here on the right-hand side
517.41s - 519.41s |  shows us intercepting an SMS message
519.41s - 523.41s |  from the traffic captured on an SPC controller.
523.41s - 525.41s |  Think about using your personal mobile phone
525.41s - 528.41s |  as an entry point into your telco operator's network
528.41s - 530.41s |  and compromising lawful interception
530.41s - 532.41s |  across the national network.
532.41s - 534.41s |  To be clear, this is also very rare,
534.41s - 536.41s |  but still, it does provide another interesting example
536.41s - 538.41s |  of an initial entry point
538.41s - 542.41s |  into what is essentially an operational network.
542.41s - 545.41s |  The next phase I'd like to cover is internal reconnaissance.
545.41s - 547.41s |  The objective of this phase
547.41s - 550.41s |  is to leverage the foothold gained in the previous phase
550.41s - 553.41s |  to extract specific information about the target system.
553.41s - 555.41s |  This is especially relevant in the context
555.41s - 558.41s |  of initial compromise in the enterprise IT environment.
558.41s - 560.41s |  The enterprise network is important
560.41s - 564.41s |  not only from the perspective of IT-OT network segmentation,
564.41s - 566.41s |  but it is also important
566.41s - 568.41s |  from the perspective of data segmentation.
568.41s - 571.41s |  A typical enterprise network often hosts multiple sources
571.41s - 573.41s |  that can provide an attacker
573.41s - 575.41s |  with critical information about the target asset.
575.41s - 579.41s |  Some examples on the slide here include documentation,
579.41s - 582.41s |  department of file shares, email communications,
582.41s - 584.41s |  development resources, management consoles,
584.41s - 587.41s |  and even key logging and screen monitoring.
587.41s - 589.41s |  Some examples of target information
589.41s - 592.41s |  that an attacker would typically like to retrieve
592.41s - 593.41s |  at this phase of the exercise
593.41s - 596.41s |  include network diagrams, host names, IP addresses,
596.41s - 599.41s |  process documentation, operator manuals,
599.41s - 603.41s |  and even potentially plaintiff's credentials.
603.41s - 607.41s |  This is probably the most boring stage of an attack lifecycle
607.41s - 608.41s |  from an attacker's perspective,
608.41s - 611.41s |  but in my experience, an attacker will spend
611.41s - 614.41s |  the maximum time operating within this stage
614.41s - 617.41s |  because the more information that I can obtain at this stage,
617.41s - 619.41s |  the higher my chances of success
619.41s - 623.41s |  and precise execution in the subsequent stages.
623.41s - 625.41s |  Internal reconnaissance often comes down
625.41s - 627.41s |  to strategic targeting information sources
627.41s - 629.41s |  and key employees that are responsible
629.41s - 633.41s |  for the administration and maintenance of the OT environment.
633.41s - 636.41s |  I realize that the screenshots here on the slide
636.41s - 637.41s |  are highly redacted.
637.41s - 639.41s |  However, they still provide a snippet
639.41s - 642.41s |  of the kind of information that an attacker might target
642.41s - 644.41s |  during internal reconnaissance phase.
644.41s - 647.41s |  Firewall rules, operation guides, department shares,
647.41s - 649.41s |  plaintiff's credentials, password managers,
649.41s - 652.41s |  are all critical information that are typically hosted
652.41s - 654.41s |  in the enterprise side of the environment
654.41s - 657.41s |  but provide invaluable resources of information
657.41s - 659.41s |  for attackers targeting OT networks.
659.41s - 661.41s |  Now, from a defender's perspective,
661.41s - 663.41s |  it is easy to underestimate the value
663.41s - 665.41s |  of the information exfiltrated
665.41s - 667.41s |  during this phase of the attack lifecycle,
667.41s - 669.41s |  and security teams, in my opinion,
669.41s - 671.41s |  often ignore the importance of this phase
671.41s - 674.41s |  from a detection perspective.
674.41s - 677.41s |  In fact, I would argue that this phase
677.41s - 680.41s |  provides the maximum opportunity for detection.
680.41s - 683.41s |  If I, as a defender, can flag indicators of compromise
683.41s - 686.41s |  for internal reconnaissance in my enterprise environment,
686.41s - 688.41s |  I could potentially detect an attacker
692.41s - 695.41s |  before they even have a chance to reach the OT environment.
695.41s - 698.41s |  Now, I'm not going to go into specific case studies
698.41s - 699.41s |  for this phase.
699.41s - 701.41s |  Almost every exercise that we perform
701.41s - 703.41s |  involves some kind of internal reconnaissance,
703.41s - 705.41s |  but I still wanted to cover some examples
705.41s - 708.41s |  of target sources and information sources.
708.41s - 714.84s |  Moving on, initial compromise in internal reconnaissance
714.84s - 716.84s |  is often followed by network propagation.
716.84s - 718.84s |  In the context of a typical attack lifecycle,
718.84s - 720.84s |  this often translates to network propagation
720.84s - 723.84s |  from an initial foothold in the IT network
723.84s - 725.84s |  to the target system in the OT network.
725.84s - 728.84s |  Now, I know that we all expect our OT systems
728.84s - 730.84s |  to be completely isolated in air gap,
730.84s - 731.84s |  using nothing but space.
731.84s - 734.84s |  However, in practice, that is rarely the case
734.84s - 736.84s |  for modern industrial environments.
736.84s - 739.84s |  In an ideal world, I would probably love to see
739.84s - 742.84s |  perfect segmentation using unidirectional gateways.
742.84s - 744.84s |  However, the reality is that we still continue
744.84s - 748.84s |  to find OT environments that lack basic segmentation.
748.84s - 750.84s |  Now, there are probably a million different ways
750.84s - 752.84s |  to hose up segmentation, but some common examples
752.84s - 755.84s |  of insecure segmentation between IT and OT
755.84s - 757.84s |  include lack of properly secure authentication
757.84s - 759.84s |  for remote access, dual home servers
759.84s - 761.84s |  with one leg in IT, one leg in OT,
761.84s - 763.84s |  shared active directory domains
763.84s - 765.84s |  or domain trust between IT and OT,
765.84s - 768.84s |  and exploitable services in OT DMZ.
768.84s - 771.84s |  That said, the most fundamental issue
771.84s - 773.84s |  around IT-OT segmentation is the use
773.84s - 776.84s |  of shared infrastructure and management platforms.
776.84s - 778.84s |  A classic example of that would be
778.84s - 780.84s |  a hypervisor server hosted in the IT environment,
780.84s - 783.84s |  which hosts guest machines for OT network.
783.84s - 785.84s |  So potentially, if I can compromise
785.84s - 787.84s |  the hypervisor server in the IT environment
787.84s - 790.84s |  using active credentials, I could pretty much gain access
790.84s - 792.84s |  to the OT consoles, thus bypassing
792.84s - 794.84s |  the firewall rules between IT and OT.
794.84s - 796.84s |  Like I said, unfortunately, it is very common
796.84s - 798.84s |  to find both physical and logical flaws
798.84s - 800.84s |  in segmentation between IT and OT,
800.84s - 802.84s |  and such issues can often be used
802.84s - 806.84s |  to propagate from the IT network to the OT network.
810.84s - 812.84s |  This slide here shows an example
812.84s - 814.84s |  of installing a key logger
814.84s - 816.84s |  on a compromised engineer desktop
816.84s - 819.84s |  in the IT network to basically obtain
819.84s - 821.84s |  the single-factor authentication credentials
821.84s - 823.84s |  for a remote access point
823.84s - 825.84s |  or a jump-host server in the OT network.
825.84s - 827.84s |  The screenshot on the right-hand side here
827.84s - 831.84s |  shows us basically connecting
831.84s - 833.84s |  to a successful remote desktop connection
833.84s - 836.84s |  to an HMI interface for a subway line
836.84s - 838.84s |  or a subway over line.
838.84s - 845.94s |  This is another interesting example
845.94s - 848.94s |  of compromising remote access credentials
848.94s - 849.94s |  in the corporate network.
849.94s - 852.94s |  However, this time, through direct compromise
852.94s - 854.94s |  of an enterprise password manager
854.94s - 856.94s |  or an enterprise password vault,
856.94s - 858.94s |  which basically stored OT credentials.
858.94s - 860.94s |  Enterprise password management systems
860.94s - 862.94s |  often authenticate to a corporate domain,
862.94s - 864.94s |  so if an attacker is able to compromise
864.94s - 866.94s |  the password, say, for example,
866.94s - 869.94s |  engineering teams, the attacker could gain
869.94s - 871.94s |  credentials for remote access to OT systems.
871.94s - 873.94s |  The screenshot on the right again here
873.94s - 876.94s |  shows a successful remote desktop connection
876.94s - 878.94s |  to an ITS server for a traffic control
878.94s - 880.94s |  or a traffic light monitoring system.
880.94s - 885.02s |  This slide here shows an example
886.02s - 888.02s |  of a segmentation flaw, like I said,
888.02s - 891.02s |  using domain trust between IT and OT.
891.02s - 894.02s |  It is probably not as clear from the screenshot
894.02s - 897.02s |  that I have on the slide here,
897.02s - 900.02s |  but you will find that the IT domain here
900.02s - 903.02s |  is actually superseded as the root domain
903.02s - 905.02s |  for OT domains across multiple DCS.
905.02s - 908.02s |  The end result is that my team was basically
908.02s - 910.02s |  able to use compromised credentials
910.02s - 912.02s |  in the root IT domain to gain access
912.02s - 914.02s |  to child domains for multiple plants
914.02s - 917.02s |  across the globe.
917.02s - 920.02s |  Finally, this is a real world example
920.02s - 922.02s |  of the issue of shared infrastructure
922.02s - 923.02s |  between IT and OT.
923.02s - 926.02s |  The virtualization platform on the left
926.02s - 929.02s |  authenticates to an IT domain,
929.02s - 931.02s |  but hosts guest machines for both
931.02s - 933.02s |  IT and OT environments.
933.02s - 936.02s |  Our team was able to gain administrative access
936.02s - 938.02s |  to the hypervisor management interface
938.02s - 940.02s |  using credentials compromised in the IT domain
940.02s - 943.02s |  and leverage the same to gain access
943.02s - 946.02s |  to the local console on the guest virtual machines
946.02s - 948.02s |  in the OT environment.
948.02s - 950.02s |  The screenshot on the right-hand side here
950.02s - 953.02s |  shows an example of direct console access
953.02s - 955.02s |  to the guest VM for a WSIS server
955.02s - 958.02s |  in the OT network, which hosts software updates
958.02s - 960.02s |  for engineering workstations
960.02s - 964.02s |  in the PCN plant network.
964.02s - 966.02s |  The final attack phase I'd like to cover
966.02s - 968.02s |  is mission execution in OT.
969.02s - 971.02s |  As the name suggests, this is the phase
971.02s - 973.02s |  where we are dealing with core OT
973.02s - 976.02s |  and the attacker will either attempt
976.02s - 978.02s |  to leverage the access that they've already obtained
978.02s - 980.02s |  or launch a pre-built exploit
980.02s - 983.02s |  to achieve the final objective.
983.02s - 985.02s |  As you can imagine, the tactics, techniques,
985.02s - 987.02s |  and procedures that an attacker might use
987.02s - 989.02s |  in this phase would highly depend
989.02s - 991.02s |  on the specific OT system in question
991.02s - 994.02s |  and more importantly, the attacker objective.
994.02s - 997.02s |  For example, there are attacker objectives
997.02s - 1001.02s |  that could potentially be achieved
1001.02s - 1003.02s |  through direct access and direct control
1003.02s - 1007.02s |  of an HMI or simply abusing the built-in features
1007.02s - 1009.02s |  of the target system.
1009.02s - 1012.02s |  While there are some other attack vectors
1012.02s - 1015.02s |  or attacker objectives which might require
1015.02s - 1017.02s |  manipulation of the control logic
1017.02s - 1019.02s |  and input-output signals on the lower-level
1019.02s - 1021.02s |  embedded systems.
1021.02s - 1023.02s |  To be honest, I think we could spend an entire session
1023.02s - 1026.02s |  talking about attack vectors for mission execution in OT,
1026.02s - 1028.02s |  but some common examples in the slide here
1028.02s - 1030.02s |  include remote command execution through HMI interface,
1030.02s - 1032.02s |  manipulation of configuration data
1032.02s - 1034.02s |  for a remote terminal or a PLC,
1034.02s - 1037.02s |  spoof communication for an ICS protocol,
1037.02s - 1039.02s |  and last but not the least, a pre-built exploit
1039.02s - 1041.02s |  to manipulate the process control logic
1041.02s - 1043.02s |  or the process memory and an embedded controller
1043.02s - 1046.02s |  in the OT network.
1046.02s - 1049.02s |  As a general term of rule, it is relatively easier
1049.02s - 1051.02s |  to cause process disruption
1051.02s - 1054.02s |  as compared to process manipulation.
1054.02s - 1057.02s |  ICS systems are built with redundancy, safety,
1057.02s - 1059.02s |  risks, and hazards in mind,
1059.02s - 1062.02s |  and thus high-consequence manipulation
1062.02s - 1065.02s |  often requires prior reverse engineering
1065.02s - 1067.02s |  and exploit development.
1067.02s - 1069.02s |  Some common examples of security issues
1069.02s - 1071.02s |  that we typically find while assessing
1071.02s - 1075.02s |  and building exploits for embedded ICS systems
1075.02s - 1078.02s |  include insecure firmware updates,
1078.02s - 1080.02s |  unpopulated interfaces,
1080.02s - 1082.02s |  hidden backdoors, shared SSH keys
1082.02s - 1084.02s |  between different customers,
1084.02s - 1086.02s |  obviously buffer overflows,
1086.02s - 1088.02s |  and then leftover debug functions
1088.02s - 1090.02s |  from development and testing
1090.02s - 1094.02s |  that have carried over to the production systems.
1094.02s - 1096.02s |  Here I'd like to once more stress
1096.02s - 1099.02s |  that we are essentially dealing with cyber-physical systems
1099.02s - 1102.02s |  and thus any kind of offensive security testing
1102.02s - 1104.02s |  for lower-level ICS devices
1104.02s - 1106.02s |  should only be performed in a non-production
1106.02s - 1111.02s |  or a laboratory environment under controlled conditions.
1111.02s - 1113.02s |  The first example I have here
1113.02s - 1117.02s |  is for a Red Team exercise for a power utility
1117.02s - 1120.02s |  with advanced metering infrastructure.
1120.02s - 1124.02s |  This shows an example of simply using an HMI command
1124.02s - 1126.02s |  to achieve the final objective,
1126.02s - 1129.02s |  that is, remote disconnect of a target smart meter
1129.02s - 1131.02s |  at a specific location.
1131.02s - 1134.02s |  A team was effectively able to breach the external perimeter,
1134.02s - 1136.02s |  gain remote access to the command and control interface
1136.02s - 1138.02s |  for the head-end system,
1138.02s - 1140.02s |  and initiate remote disconnect command
1140.02s - 1143.02s |  for the endpoint mirrors.
1143.02s - 1146.02s |  This slide is another example of mission execution
1146.02s - 1148.02s |  through direct control of HMI.
1148.02s - 1151.02s |  A team was able to gain remote access
1151.02s - 1153.02s |  to the physical access control interface
1153.02s - 1155.02s |  for a building management system,
1155.02s - 1158.02s |  thus obtaining the ability to open doors and turnstiles
1158.02s - 1160.02s |  through a simple click of a button.
1160.02s - 1163.02s |  Unfortunately, I cannot show you the actual pictures here,
1163.02s - 1165.02s |  but effectively we were able to use
1165.02s - 1167.02s |  the command and control interface for the BMS
1167.02s - 1170.02s |  to walk into an operations control center
1170.02s - 1172.02s |  while one of us was actually operating
1172.02s - 1177.02s |  and controlling the doors and turnstiles remotely.
1177.02s - 1180.02s |  This slide shows an example
1180.02s - 1183.02s |  of basically spoofing ICS traffic
1183.02s - 1185.02s |  for a locomotive control system.
1185.02s - 1188.02s |  The screenshot shows us plugging into an onboard Ethernet switch
1188.02s - 1189.02s |  in the locomotive cab
1189.02s - 1192.02s |  and manipulating the speed sensor reading
1192.02s - 1194.02s |  on the operator's screen.
1194.02s - 1197.02s |  The train here obviously is not moving at 80 miles per hour.
1197.02s - 1200.02s |  This is essentially the effect of spoofing canvas traffic
1200.02s - 1202.02s |  to an existing binary on one of the ECUs
1202.02s - 1204.02s |  on the embedded network on the train.
1204.02s - 1207.81s |  Last but not the least,
1207.81s - 1211.81s |  I have here an example of using debug features
1211.81s - 1213.81s |  to manipulate the input-output signals
1213.81s - 1216.81s |  for a light-trail vehicle control system.
1216.81s - 1218.81s |  It's actually quite surprising how many times
1218.81s - 1220.81s |  one might find a debug console
1220.81s - 1222.81s |  enabled in a production environment,
1222.81s - 1224.81s |  and this can often be used to manipulate
1224.81s - 1226.81s |  control signals and input-output signals
1226.81s - 1228.81s |  beyond the intended.
1228.81s - 1230.81s |  The screenshot there on the left
1230.81s - 1232.81s |  basically shows us using a vendor IDE,
1232.81s - 1234.81s |  which I'm not going to name,
1234.81s - 1237.81s |  to basically connect to a live unit on an LRV
1237.81s - 1239.81s |  and using force tables
1239.81s - 1241.81s |  to override input-output signal tags
1241.81s - 1244.81s |  for the vehicle control system.
1244.81s - 1246.81s |  Again, unfortunately, I cannot show the video here,
1246.81s - 1249.81s |  but essentially we were able to access
1249.81s - 1253.81s |  or gain access to an IP-based Ethernet network on the LRV,
1253.81s - 1255.81s |  connect to the vehicle control ECU,
1255.81s - 1257.81s |  and override operator input
1257.81s - 1259.81s |  for doors, throttle, direction,
1259.81s - 1261.81s |  and even emergency braking.
1261.81s - 1263.81s |  Have you ever seen a movie
1263.81s - 1265.81s |  where you see a hacker
1265.81s - 1267.81s |  scribbling on a laptop trying to stop a train?
1267.81s - 1269.81s |  This is exactly that, but much worse,
1269.81s - 1271.81s |  because we were actually able to
1271.81s - 1273.81s |  control the throttle,
1273.81s - 1276.81s |  basically override the dead-man switch,
1276.81s - 1278.81s |  move the train, and disable
1278.81s - 1282.81s |  all and every operator input.
1282.81s - 1284.81s |  I think I've run through 25 minutes,
1284.81s - 1286.81s |  so I realize that I pretty much
1286.81s - 1288.81s |  run through my slides,
1288.81s - 1290.81s |  but I only have 30 minutes,
1290.81s - 1292.81s |  so I hope that I have been able to provide
1292.81s - 1294.81s |  some practical real-world experience
1294.81s - 1296.81s |  or perspective on some common attack vectors
1296.81s - 1298.81s |  that an attacker might use
1298.81s - 1300.81s |  to hack operational technology.
1300.81s - 1302.81s |  But if nothing else,
1302.81s - 1304.81s |  I would like to conclude with four key takeaways
1304.81s - 1306.81s |  from my talk.
1306.81s - 1308.81s |  It is possible to conduct offensive security testing for OT,
1308.81s - 1310.81s |  but such testing should only be performed
1310.81s - 1312.81s |  after careful consideration of
1312.81s - 1314.81s |  risks, hazards, controls,
1314.81s - 1316.81s |  and pre-approved rules of engagement.
1316.81s - 1318.81s |  Real-world OT attacks
1318.81s - 1320.81s |  are rarely single-step compromises
1320.81s - 1322.81s |  and often involve a multi-step attack lifecycle
1322.81s - 1324.81s |  covering multiple phases.
1324.81s - 1326.81s |  It's relatively easier
1326.81s - 1328.81s |  to cause a process disruption
1328.81s - 1330.81s |  as compared to process manipulation.
1330.81s - 1332.81s |  Process disruption can often be achieved
1332.81s - 1334.81s |  through direct abuse of pre-built features
1334.81s - 1336.81s |  of the system,
1336.81s - 1338.81s |  whereas high-consequence manipulation
1338.81s - 1340.81s |  often requires prior reverse engineering
1340.81s - 1342.81s |  and exploit development.
1342.81s - 1344.81s |  Lastly, from a defender's
1344.81s - 1346.81s |  perspective, it is important
1346.81s - 1348.81s |  to understand the ICS-OT attack lifecycle,
1348.81s - 1350.81s |  develop preventive or
1350.81s - 1352.81s |  detective controls for known TTPs,
1352.81s - 1354.81s |  and mitigate attack vectors
1354.81s - 1356.81s |  across different phases of
1356.81s - 1358.81s |  the attack lifecycle.
1358.81s - 1360.81s |  Cool, that's it.
1360.81s - 1362.81s |  That's all I have for you today.
1362.81s - 1364.81s |  I realize it's 3 p.m.
1364.81s - 1366.81s |  on Saturday afternoon in Vegas,
1366.81s - 1368.81s |  so thanks everybody for joining in
1368.81s - 1370.81s |  and listening in.
1370.81s - 1372.81s |  If you have any questions,
1372.81s - 1374.81s |  although I cannot see anybody here,
1374.81s - 1376.81s |  but if you have any questions,
1376.81s - 1378.81s |  you can hit me up face-to-face.
1378.81s - 1380.81s |  If you want to reach out and discuss in more detail,
1380.81s - 1382.81s |  you can reach out to us
1382.81s - 1384.81s |  over email or LinkedIn.