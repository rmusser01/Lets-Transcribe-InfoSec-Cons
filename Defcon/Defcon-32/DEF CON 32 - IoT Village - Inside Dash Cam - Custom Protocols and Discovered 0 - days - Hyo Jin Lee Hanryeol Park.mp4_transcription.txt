{
  "webpage_url": "local:1732053637:5698d7bb:DEF CON 32 - IoT Village - Inside Dash Cam - Custom Protocols and Discovered 0 - days - Hyo Jin Lee  Hanryeol Park.mp4",
  "title": "DEF CON 32 - IoT Village - Inside Dash Cam - Custom Protocols and Discovered 0 - days - Hyo Jin Lee  Hanryeol Park.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 4.76s | This text was transcribed using whisper model: large-v2

 Hello, everyone. Thank you for attending this presentation.
4.76s - 8.48s |  This is my first time presenting in English, so I
8.48s - 11.92s |  appreciate your understanding if there are any mistakes.
11.92s - 17.02s |  Today, we'll discuss the topic Inside Dash Cam.
17.02s - 18.38s |  Thank you.
18.38s - 21.34s |  Before we begin, let's introduce ourselves.
21.34s - 25.50s |  I am Hyojin Lee, and the other speaker is Hanyeol Park.
25.50s - 29.34s |  We are researchers at GN, the XIOT Security Convergence
29.34s - 30.46s |  Company.
30.46s - 33.02s |  We have been conducting research and development
33.02s - 37.14s |  on automated XIRIC firmware SECA solutions,
37.14s - 42.21s |  and are continuously advancing our work.
42.21s - 45.05s |  Our agenda for today is as follows.
45.05s - 48.53s |  First, we'll provide an overview of dash cams,
48.53s - 52.49s |  including market size, reasons for choosing this topic,
52.49s - 55.93s |  and general information about dash cams.
55.93s - 58.37s |  Following that, we'll explain the method
58.37s - 62.98s |  used to analyze dash cams.
63.06s - 66.42s |  And then, we'll describe the features of dash cams
66.42s - 69.46s |  and explore potential zero-day scenarios that
69.46s - 71.82s |  may arise from these features.
71.82s - 75.26s |  Finally, we'll propose future countermeasures
75.26s - 78.74s |  and wrap up the presentation.
78.74s - 82.06s |  Let's begin by providing some preliminary information
82.06s - 85.30s |  about dash cams.
85.30s - 89.50s |  Several dash cam vendors, such as Mobidian, Blackview,
89.50s - 93.78s |  Nextbase, and HL Mando.
93.82s - 98.22s |  The global dash cam market was valued at $4.03 billion
98.22s - 100.26s |  in 2023.
100.26s - 104.90s |  Experts project a compound annual growth rate of 9.6%
104.90s - 108.66s |  from 2024 to 2030.
108.66s - 112.54s |  Unlike in the past, when only SD cards were used,
112.54s - 116.58s |  most modern dash cams now use networks for connectivity
116.58s - 119.98s |  and are controlled via dedicated apps.
119.98s - 122.82s |  This convenience has played a significantly
122.82s - 126.02s |  contributed to the dash cam market's growth.
126.02s - 129.22s |  However, this technological advancement
129.22s - 134.09s |  introduces new security threats.
134.09s - 137.73s |  Despite this, only three CVEs have been reported
137.73s - 140.17s |  in the past three years.
140.17s - 143.25s |  To raise awareness about dash cam security
143.25s - 145.89s |  and contribute to a safer market,
145.89s - 148.61s |  we have chosen this topic.
148.61s - 151.85s |  It looks delicious, right?
151.85s - 156.13s |  We analyzed a total of nine dash cams, four from Korea,
156.13s - 159.53s |  one from China, and four built-in models.
159.53s - 162.73s |  Here are the features we discovered by type.
162.73s - 164.85s |  Korean dash cams generally provide
164.85s - 167.65s |  formula downloads on their official websites
167.65s - 170.33s |  and some offer cloud services.
170.33s - 173.49s |  Chinese dash cam also offers formula downloads
173.49s - 178.29s |  on their official websites, and we found 10 airports open.
178.29s - 180.37s |  Built-in dash cams typically do not
180.37s - 183.85s |  provide formula downloads on their official websites
183.85s - 187.05s |  and use the RTSP protocol.
187.05s - 190.53s |  Many of built-in dash cams are OEM devices,
190.53s - 193.81s |  which means they are manufactured by one company
193.81s - 197.09s |  and sold under another company's brand.
197.09s - 199.73s |  For OEM devices, if a vulnerability
199.73s - 203.17s |  is discovered in one device, it can potentially
203.17s - 206.69s |  affect devices, highlighting the critical importance
206.69s - 211.49s |  of implementing robust security measures.
211.49s - 215.61s |  Dash cam connectivity can be categorized into three types,
215.61s - 218.29s |  connecting via Bluetooth and dash cam Wi-Fi,
218.29s - 220.61s |  connecting through a phone's hotspot,
220.61s - 223.09s |  and communicating via the cloud.
223.09s - 228.73s |  We'll explore these categories in detail on the next slide.
228.73s - 232.65s |  First, the app connects to the dash cam via Bluetooth.
232.65s - 236.21s |  Then the dash cam activates AP mode.
236.21s - 239.21s |  Once the app connects to the dash cam's Wi-Fi,
239.21s - 242.65s |  communication between the app and the dash cam
242.65s - 245.85s |  is established.
245.85s - 247.89s |  By configuring the phone's hotspot
247.89s - 250.97s |  to align with the dash cam's Wi-Fi settings
250.97s - 253.65s |  and activating the hotspot, the dash cam
253.65s - 258.53s |  can establish and communicate through it.
258.53s - 262.13s |  In cloud communication, the dash cam's AP mode
262.13s - 266.85s |  remains activated and no need Bluetooth connection.
266.85s - 269.77s |  Begin by connecting to the dash cam's Wi-Fi,
269.77s - 273.13s |  then translate the router's SSID and password
273.13s - 276.21s |  to connect the dash cam to the internet
276.21s - 279.13s |  and enable cloud functionality.
279.13s - 281.93s |  Communication between the app and the dash cam
281.93s - 285.93s |  is managed through the cloud.
285.93s - 288.89s |  Now let's review the method we employed
288.89s - 293.02s |  to analyze the dash cams.
293.02s - 296.98s |  Before beginning the analysis, it's
296.98s - 299.46s |  essential to obtain the firmware.
299.46s - 303.46s |  This is crucial for tasks such as decompiling code,
303.46s - 308.02s |  analyzing the file system, and understanding the boot logic.
308.02s - 311.94s |  There are four primary methods to obtain firmware.
311.94s - 318.96s |  The first method is to download it from the official website.
318.96s - 321.80s |  The second method involves using debugging ports,
321.80s - 324.76s |  such as UART or JTAG.
324.76s - 328.04s |  During our analysis, we found the UART port
328.04s - 330.28s |  as illustrated in the picture.
330.28s - 336.77s |  Third are connecting cables and access the shell.
336.77s - 339.37s |  Here are the statistics for UART shells
339.37s - 342.01s |  found in the analyzed devices.
342.01s - 345.61s |  Out of nine devices, five had UART shells,
345.61s - 349.65s |  and four of these allowed shell access without a password.
349.65s - 354.83s |  One of these four had a custom shell.
354.83s - 357.49s |  Using the debugging shell obtained earlier,
357.49s - 360.03s |  you can copy the firmware to an SD card,
360.03s - 366.03s |  connect the SD card to a laptop, and extract the firmware.
366.35s - 370.83s |  All the analyzed dash cams have firmware upgrade functionality.
370.83s - 374.71s |  The third method involves analyzing this functionality
374.71s - 378.87s |  to either obtain the firmware download URL or capture package
378.87s - 382.93s |  to get the latest firmware.
382.93s - 386.25s |  The final method involves extracting firmware
386.25s - 388.13s |  from APK files.
388.13s - 391.49s |  Many recent dash cams come with dedicated apps.
391.49s - 394.93s |  By installing the app and accessing the ADB shell,
394.93s - 397.81s |  you can find the firmware-related APK files
397.81s - 400.81s |  in the app's installation directory.
400.81s - 403.73s |  Extracting and decompressing these files
403.73s - 408.42s |  can provide access to the firmware.
408.42s - 410.98s |  Most of the analyzed dash cams allowed
410.98s - 414.78s |  us to obtain firmware from their official websites.
414.78s - 418.26s |  We successfully retrieved firmware for all devices,
418.26s - 422.92s |  and none of the firmware was encrypted.
422.92s - 425.84s |  The next step is to extract the file system
425.84s - 428.16s |  from the obtained firmware.
428.16s - 431.40s |  Tools such as binoc and 7-zip can
431.40s - 437.46s |  be used for this purpose, as illustrated in the picture.
437.46s - 441.62s |  The second step in the analysis process is port scanning.
441.62s - 444.70s |  Using the nmap tool, we can identify open ports
444.70s - 447.18s |  on the dash cam, analyze services,
447.18s - 450.94s |  and discover potential security vulnerabilities.
450.94s - 454.34s |  For instance, if port 21 is open,
454.34s - 457.02s |  we might attempt an FTP connection.
457.02s - 459.94s |  Similarly, if port 80 is open, it
459.94s - 463.58s |  suggests the presence of a web service.
463.58s - 468.18s |  Here are the statistics for open ports on the analyzed devices.
468.18s - 474.30s |  Among the well-known ports, FTP, telnet, DNS, HTTP, RPC,
474.30s - 478.94s |  and RTSP ports were frequently open.
478.94s - 481.46s |  The third step in the analysis process
481.46s - 483.90s |  is analyzing boot logic.
483.90s - 488.58s |  We examine files in etc-init-daemon, etc-rc-local,
488.58s - 491.10s |  and system daemon configuration files
491.10s - 496.18s |  to identify and analyze the scripts executed during boot.
496.18s - 499.98s |  For example, the picture shows the RCS file
499.98s - 504.22s |  in etc-init-daemon, which runs all files starting
504.22s - 507.18s |  with S in etc-init-daemon.
507.18s - 509.94s |  We analyze the code of all S files
509.94s - 513.18s |  to understand the boot logic.
513.18s - 515.58s |  Next, we access the shell obtained
515.58s - 519.34s |  via UART, JTAG, or other vulnerabilities.
519.34s - 523.86s |  By using the ps command, we can identify running processes
523.86s - 528.30s |  and understand how service operations and main binaries.
528.30s - 532.14s |  The nested command helps us identify open ports
532.14s - 535.50s |  and the binaries using those ports.
535.50s - 538.34s |  This information provides valuable insights
538.34s - 541.78s |  into the current state of the system and the services
541.78s - 544.46s |  that are running.
544.46s - 554.08s |  Now, he will discuss the process of debugging the main binary.
554.08s - 556.48s |  Hi, I'm Hanyeol Park.
556.48s - 560.40s |  I'll continue the presentation by discussing the next topic.
560.40s - 563.60s |  For convenience, tools such as GDB and BusyBox
563.60s - 568.92s |  can be stored in the SD card directly for easy access.
568.92s - 572.04s |  We decompiled the main binary and tracked vulnerable functions
572.04s - 576.80s |  such as system, beopen, string copy, get, and scanf
576.80s - 579.40s |  for code analysis.
579.40s - 582.20s |  Using our R&D solution, gIoT, we were
582.20s - 584.60s |  to quickly and easily visualize and analyze
584.60s - 588.32s |  the vulnerabilities.
588.32s - 590.20s |  Using the UART shell, we proceeded
590.20s - 593.76s |  with debugging by utilizing the GDB binary stored
593.76s - 595.64s |  on the SD card.
595.64s - 597.60s |  The example code is a script that
597.60s - 603.36s |  gets the PID of the running main binary and executes GDB.
603.40s - 608.44s |  Running this script connects directly to GDB for debugging.
608.44s - 611.48s |  This allows us to analyze the main binary's behavior
611.48s - 616.63s |  in real time and debug any vulnerabilities.
616.63s - 619.11s |  During debugging, the watchdog timer,
619.11s - 621.83s |  which detects system-only responsiveness,
621.83s - 625.55s |  often caused the device to reboot.
625.55s - 628.27s |  We tried many things, but it was quite challenging
628.27s - 631.52s |  to bypass the watchdog.
631.52s - 633.80s |  Even though we made it, we managed
633.80s - 636.12s |  to crack it in three cases, and we'd
636.12s - 640.54s |  like to share those with you.
640.54s - 644.02s |  In the first case, the initial script executed at boot
644.02s - 647.10s |  contained a function to stop the watchdog.
647.10s - 651.58s |  We used this function to execute the corresponding command.
651.58s - 655.74s |  For instance, writing the value 1A3A to test register
655.74s - 658.82s |  stops the watchdog, allowing us to dynamically debug
658.82s - 664.35s |  the main binary with GDB.
664.35s - 666.15s |  In the second case, we repeatedly
666.19s - 670.47s |  pressed Control-G during boot to interrupt the boot script.
670.47s - 674.11s |  Then we executed the code to disable the watchdog
674.11s - 678.87s |  and resume the script, enabling dynamic debugging
678.87s - 684.01s |  of the binary with GDB.
684.01s - 686.37s |  In the third case, we entered the boot loader
686.37s - 689.45s |  and modified the boot arguments.
689.45s - 692.25s |  By repeatedly pressing ESC and F1,
692.25s - 695.81s |  we accessed the boot loader.
695.81s - 698.37s |  In the boot arguments, we modified the init value
698.49s - 704.93s |  from linux.hash to bin.sh and added the value no watchdog.
704.93s - 708.29s |  After that, we manually executed the initial scripts line
708.29s - 716.56s |  by line and used the GDB to debug the main binary.
716.56s - 719.52s |  Protocol analysis capturing the analyzing communication
719.52s - 722.28s |  packets between the app and the dashcam,
722.28s - 727.36s |  or analyzing APK code and the dashcam binary code.
727.36s - 731.12s |  Among the analyzed devices, six used the custom protocols,
731.12s - 735.20s |  four had web interfaces, two supported cloud services,
735.20s - 739.12s |  and one used encrypted communication.
739.12s - 742.08s |  For encrypted communication, we can use Frida
742.08s - 749.33s |  to hook the app and inspect plain text packets.
749.33s - 753.01s |  Among the analyzed dashcams, here
753.01s - 757.53s |  are the custom protocol formats for four devices.
757.53s - 759.25s |  Custom protocol formats are mainly
759.25s - 762.45s |  divided into HEX and JSON formats.
762.45s - 765.05s |  B-Vendor's request format is in HEX,
765.05s - 767.81s |  consisting of four bytes for dummy data,
767.81s - 770.17s |  two bytes for the command number,
770.17s - 772.53s |  two bytes for command number, and four or more
772.53s - 775.05s |  bytes for the parameters.
775.05s - 778.05s |  In this example, since there are no parameters,
778.05s - 783.05s |  four bytes of data are sent to represent null values.
783.05s - 784.97s |  M-Vendor's request format consists
784.97s - 789.09s |  of four bytes of command number, four bytes for packet length,
789.09s - 791.53s |  four bytes for command number, and four or more
791.57s - 794.29s |  bytes for the parameters.
794.29s - 798.25s |  In this example, the parameter is sent as CMD equals set,
798.25s - 801.70s |  semicolon.
801.70s - 805.22s |  Next, T-Vendor's request format is in JSON
805.22s - 808.78s |  and consists of three keys, a token generated
808.78s - 811.86s |  at the session start, a command number labeled message
811.86s - 817.12s |  underscore ID, and a parameter labeled param.
817.12s - 820.32s |  H-Vendor's request format is similar to T-Vendor's,
820.32s - 823.24s |  but has slight differences.
823.24s - 825.32s |  It consists of a token incremented
825.32s - 829.72s |  by one from the previous request token, a command number
829.72s - 834.72s |  labeled message ID, and a parameter labeled param.
834.72s - 837.80s |  H-Vendor's custom protocol format has a unique structure,
837.80s - 841.80s |  and analyzing these formats helps us understand
841.80s - 845.20s |  the communication content.
845.20s - 850.84s |  Now, we will discuss zero-day scenarios.
850.84s - 853.60s |  Dash cams have the following features.
853.60s - 856.32s |  They use SD cards for video strategy,
856.32s - 858.20s |  and they employ the RTSP protocol
858.20s - 861.88s |  for live view functionality.
861.88s - 866.24s |  They offer settings for Wi-Fi, ADAS, GPS, firmware updates,
866.24s - 870.00s |  and communication via custom protocols.
870.00s - 872.48s |  Let's explore which vulnerabilities
872.48s - 878.58s |  associated with these features in the next slide.
878.58s - 882.14s |  The use of SD card is associated with the shell script
882.14s - 884.50s |  execution vulnerabilities.
884.50s - 887.78s |  Let's explore this scenario.
887.78s - 890.66s |  The boot script includes code that executes test shell
890.66s - 893.78s |  from the SD card path.
893.78s - 897.22s |  An attacker can create a test shell file on the SD card
897.22s - 900.54s |  with a script using a Telethemon binary
900.54s - 903.58s |  to open a Teleth connection.
903.58s - 906.18s |  When the SD card is inserted into the dash cam
906.18s - 908.90s |  and the device is booted, the boot script
908.90s - 911.78s |  learns test shell, which enables Teleth access
911.78s - 916.91s |  and allows the attacker to gain a shell.
916.91s - 920.43s |  The live view feature provided through the RTSP protocol
920.43s - 925.79s |  is associated with the Stack Overflow vulnerabilities.
925.79s - 929.11s |  An attacker crafts an RTSP request for live view
929.11s - 934.31s |  and hooks the app library to modify the RTSP header data.
934.31s - 937.07s |  If the dash cam does not properly check the request
937.07s - 939.99s |  length when receiving data, a Stack Overflow
940.03s - 945.43s |  can occur and potentially altering the PC register.
945.43s - 947.95s |  By gathering gadgets for the Buffer Overflow attack
947.95s - 950.59s |  and performing gadget chaining, the attacker
950.59s - 956.62s |  can exploit this vulnerability to gain a shell.
956.62s - 960.42s |  The settings for Wi-Fi, ADAS, GPS, and other features
960.42s - 965.06s |  can lead to OS command injection vulnerabilities.
965.06s - 968.02s |  When sending device configuration package,
968.02s - 971.70s |  an attacker can manipulate the data using a proxy tool
971.70s - 975.30s |  with backticks and dollar parentheses.
975.30s - 978.18s |  If the dash cam does not validate special characters
978.18s - 982.74s |  and uses this data as parameters for system functions,
982.74s - 985.90s |  OS command injection can occur.
985.90s - 991.69s |  This can allow the attacker to take control of the system.
991.69s - 993.89s |  The feature of app and the dash cam communication
993.89s - 997.29s |  via custom protocols can lead to improper authentication
997.29s - 999.57s |  vulnerabilities.
999.57s - 1002.73s |  Capturing a packet requesting the file list from the app
1002.73s - 1006.33s |  shows the data in hex format.
1006.33s - 1008.01s |  The packet consists of four bytes
1008.01s - 1012.01s |  representing the command number for the file list request,
1012.01s - 1014.57s |  followed by four bytes for the packet length,
1014.57s - 1016.97s |  another four bytes for the command number,
1016.97s - 1019.13s |  and finally four bytes for the parameter,
1019.13s - 1023.42s |  which is null in this case.
1023.42s - 1027.06s |  By replicating the same packet and sending it to the dash cam,
1027.06s - 1033.24s |  the response will yield the file list.
1033.24s - 1036.68s |  After capturing the SD card format packet,
1036.68s - 1041.68s |  you can perform a replay attack to execute the function.
1041.68s - 1043.52s |  Additionally, all functions can be
1043.52s - 1045.80s |  accessed without authentication, and you
1045.80s - 1050.83s |  can try a replay attack.
1050.83s - 1056.61s |  Finally, let's move on to the conclusion.
1056.61s - 1059.13s |  Across the nine analyzed dash cams,
1059.13s - 1064.50s |  we discovered eight types of CWEs.
1064.50s - 1067.94s |  Based on these findings, we have outlined our recommendations
1067.94s - 1069.94s |  and future work.
1069.94s - 1074.18s |  First, we need to remove script execution code.
1074.18s - 1077.42s |  Remove script execution code from the SD card path
1077.42s - 1080.18s |  used for developer testing.
1080.18s - 1084.26s |  Second, enhance communication security.
1084.26s - 1086.86s |  Add authentication and verification processes
1086.86s - 1089.98s |  during communication.
1089.98s - 1092.74s |  Third, input validation.
1092.74s - 1095.26s |  Implement thorough input validation
1095.26s - 1097.74s |  for special characters and the length values
1097.74s - 1103.54s |  to prevent security vulnerabilities.
1103.54s - 1106.02s |  In closing, throughout this presentation,
1106.02s - 1109.82s |  we aim to raise awareness about the potential security threats
1109.82s - 1112.38s |  associated with dash cams.
1112.38s - 1114.50s |  We hope to encourage dash cam manufacturers
1114.50s - 1117.30s |  to develop more secure products, ultimately
1117.30s - 1120.58s |  leading to safer and more reliable devices
1120.58s - 1123.34s |  for consumers.
1123.34s - 1126.94s |  Due to our limited ability to provide prompt answers,
1126.94s - 1130.26s |  we are unable to open the floor for real-time Q&A
1130.26s - 1132.94s |  during this presentation.
1132.94s - 1136.54s |  However, please use the QR code displayed
1136.54s - 1138.82s |  above to contact our company or send
1138.82s - 1141.94s |  an email with your inquiries.
1141.94s - 1144.50s |  We are committed to provide detailed responses
1144.50s - 1149.42s |  to your questions.
1149.42s - 1151.98s |  We extend our gratitude to the IoT Village team
1151.98s - 1155.30s |  for giving us this opportunity to present.
1155.30s - 1158.54s |  Thank you for listening to our presentation.