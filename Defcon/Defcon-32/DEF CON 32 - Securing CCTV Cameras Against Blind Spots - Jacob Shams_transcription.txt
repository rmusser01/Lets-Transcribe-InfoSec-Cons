{
  "webpage_url": "https://www.youtube.com/watch?v=hB6rtwoyyrg",
  "title": "DEF CON 32 - Securing CCTV Cameras Against Blind Spots - Jacob Shams",
  "description": "In recent years, CCTV footage has been integrated in systems to observe areas and detect traversing malicious actors (e.g., criminals, terrorists). However, this footage has \"blind spots\", areas where objects are detected with lower confidence due to their angle/distance from the camera.\n\nIn this talk, we investigate a novel side effect of object detection in CCTV footage; location-based confidence weakness.\n\nWe demonstrate that a pedestrian's position (distance, angle, height) in footage impacts an object detector's confidence.\n\nWe analyze this phenomenon in four lighting conditions (lab, morning, afternoon, night) using five object detectors (YOLOv3, Faster R-CNN, SSD, DiffusionDet, RTMDet).\n\nWe then demonstrate this in footage of pedestrian traffic from three locations (Broadway, Shibuya Crossing, Castro Street), showing they contain \"blind spots\" where pedestrians are detected with low confidence. This persists across various locations, object detectors, and times of day. A malicious actor could take advantage of this to avoid detection.\n\nWe propose TipToe, a novel evasion attack leveraging \"blind spots\" to construct a minimum confidence path between two points in a CCTV-recorded area. We demonstrate its performance on footage of Broadway, Shibuya Crossing, and Castro Street, observed by YOLOv3, Faster R-CNN, SSD, DiffusionDet, and RTMDet.\n\nTipToe reduces max/average confidence by 0.10 and 0.16, respectively, on paths in Shibuya Crossing observed by YOLOv3, with similar performance for other locations and object detectors.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 968,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 3.36s | This text was transcribed using whisper model: large-v2

 and nighttime lighting conditions.
3.36s - 5.92s |  And these are the results for the lab videos
5.92s - 8.04s |  that were analyzed by YOLOv3.
8.04s - 9.68s |  Each circle represents measurements
9.68s - 12.28s |  that were taken from a different height,
12.28s - 14.40s |  with each ring representing a specific distance
14.40s - 18.12s |  from the camera, and each sector representing a different angle.
18.12s - 21.04s |  The green indicates that the average detection confidence
21.04s - 24.32s |  for that position was above 0.8.
24.32s - 26.32s |  And similarly, the yellow represents
26.32s - 29.72s |  that the confidence value was between 0.6 and 0.8,
29.72s - 32.12s |  and the red indicates that the average confidence was
32.12s - 34.52s |  below 0.6.
34.52s - 36.44s |  We found that the position of the person
36.44s - 39.80s |  does affect the confidence level of the object detector,
39.80s - 43.32s |  and can result in a change in confidence of up to 0.7,
43.32s - 47.44s |  depending on the position of the person in the frame.
47.44s - 49.20s |  And here we can see the same measurements
49.20s - 51.32s |  in tables for the other videos.
51.32s - 53.20s |  Each table represents a different set
53.20s - 56.16s |  of videos taken in a different lighting condition,
56.16s - 58.32s |  with each row representing a different distance
58.32s - 60.40s |  and height configuration, and each column
60.44s - 63.48s |  representing a different angle that the person stood at.
63.48s - 65.24s |  The green, yellow, and red are the same as
65.24s - 67.00s |  on the previous slide.
67.00s - 69.68s |  And we have found that across all the various lighting
69.68s - 73.08s |  conditions, the same position-dependent behavior
73.08s - 75.00s |  in the object detector, with a confidence
75.00s - 80.08s |  range of approximately 0.7 in the different videos.
80.08s - 82.00s |  In addition, we found the same behavior
82.00s - 84.96s |  in FasterR-CNN, with a confidence range
84.96s - 88.88s |  difference of between 0.35 and 0.45,
88.88s - 92.48s |  depending on the lighting conditions.
92.48s - 94.80s |  So to conclude this analysis, we found
94.80s - 96.76s |  that the confidence of an object detector
96.76s - 99.12s |  is dependent on the person's distance, angle,
99.12s - 100.92s |  and height from the camera.
100.92s - 102.64s |  In addition, since object detectors
102.64s - 104.68s |  have a minimum confidence threshold,
104.68s - 107.64s |  if a person's position results in a confidence measurement
107.64s - 109.80s |  below this threshold, then in theory,
109.80s - 113.81s |  the person would be able to avoid detection.
113.81s - 116.37s |  In addition, as part of this analysis,
116.37s - 120.13s |  I also analyzed the effect of the camera quality
120.13s - 122.33s |  on the results.
122.33s - 126.33s |  And I did this by downgrading the original 1080p footage
126.33s - 130.21s |  to 720p, as well as 480p.
130.21s - 134.13s |  And we have found that the same behavior persists
134.13s - 138.17s |  across the 720p footage, as well as the 480p footage.
138.17s - 144.41s |  The confidence range is between 0.7 on the 720p footage,
144.41s - 150.05s |  and between 0.6 on the 480p footage.
150.05s - 152.29s |  So in conclusion, the camera quality
152.29s - 154.65s |  does not impact the presence of this behavior,
154.65s - 156.81s |  and indicates that the varying confidence behavior
156.81s - 161.64s |  is independent of the quality of the camera.
161.64s - 165.32s |  Now, I'll review the second analysis that we performed.
165.32s - 167.48s |  We analyzed the previously demonstrated
167.48s - 169.96s |  position-based confidence in areas
169.96s - 172.36s |  of significant pedestrian traffic.
172.36s - 174.96s |  And this was done by utilizing public footage
174.96s - 179.48s |  from three global locations, such as Shibuya Crossing
179.48s - 182.92s |  in Tokyo, from a 24-hour period.
182.92s - 185.84s |  We took this 24 hours of footage and divided it
185.84s - 188.48s |  into six consecutive four-hour videos
188.48s - 191.40s |  in order to analyze varying times of day and lighting
191.40s - 193.36s |  conditions.
193.36s - 195.36s |  The objective of this analysis was
195.36s - 197.60s |  to determine the average confidence of an object
197.60s - 200.92s |  detector over time, as a function of the location
200.92s - 202.88s |  in an observed area.
202.88s - 206.04s |  For each video, we fed one frame every two seconds
206.04s - 208.40s |  to an object detector, and then calculated
208.40s - 211.12s |  for each pixel in the frame the average confidence
211.12s - 217.14s |  of person bounding boxes that landed on the pixel.
217.14s - 220.66s |  I repeated this with five different object detectors,
220.66s - 223.86s |  as well as three videos from three locations
223.86s - 227.38s |  around the world, using Shibuya Crossing, Broadway,
227.38s - 230.22s |  as well as Castro Street in San Francisco.
230.22s - 232.62s |  And due to time constraints, I'll only present the results
232.62s - 237.10s |  from YOLOv3 and FasterRCNN.
237.10s - 239.66s |  So these are the results for this analysis.
239.66s - 241.58s |  Each of the six rectangles represents
241.58s - 244.74s |  a different video from a specific global location
244.74s - 246.98s |  and records for each pixel on the screen
246.98s - 249.62s |  the average confidence of person bounding boxes
249.62s - 251.82s |  that landed on the pixel.
251.82s - 253.86s |  The green indicates higher confidence,
253.86s - 256.82s |  and the red indicates lower confidence.
256.82s - 259.94s |  We found that in each video, the average confidence
259.94s - 263.42s |  of detections varies according to the location in the frame,
263.42s - 268.58s |  with average confidence varying between 0.25 and 0.92,
268.58s - 272.34s |  depending on the time of day and the location in the video.
272.34s - 275.26s |  In addition, this varying confidence behavior
275.26s - 278.30s |  persists across various lighting conditions.
278.30s - 281.26s |  For example, in the Shibuya Crossing footage,
281.26s - 283.30s |  there is a pole close to the camera,
283.30s - 285.46s |  positioned at the left third of the bottom half
285.46s - 286.82s |  of each rectangle.
286.82s - 289.98s |  We believe that this pole reduces detection confidence
289.98s - 292.34s |  in the area around the pole by obscuring people
292.34s - 294.42s |  that stand behind the pole.
294.42s - 297.02s |  And its location can be easily visualized,
297.02s - 299.62s |  just based off of the lower confidence measurements
299.62s - 302.98s |  of the area around the pole.
302.98s - 305.10s |  Also, we found similar results in footage
305.10s - 307.82s |  from Broadway and Castro Street,
307.82s - 313.49s |  as well as footage that was observed by FastRawCNN.
313.49s - 316.81s |  So, in conclusion, the confidence of an object detector
316.81s - 318.61s |  when detecting a person is dependent
318.61s - 320.85s |  on the location of the person in the frame,
320.85s - 323.41s |  with some areas demonstrating stronger confidence
323.41s - 326.33s |  and some areas demonstrating weaker confidence.
326.33s - 328.41s |  These stronger and weaker detection areas
328.89s - 330.81s |  can be visualized in a heat map,
330.81s - 333.65s |  which indicates the object detector's performance
333.65s - 335.33s |  on the given area.
335.33s - 337.45s |  In addition, these findings are independent
337.45s - 339.69s |  of location and object detection model.
341.53s - 344.25s |  Now, I'll present our novel evasion attack
344.25s - 345.89s |  that we call Tiptoe.
345.89s - 347.81s |  We found, in our previous analysis,
347.81s - 350.41s |  that it's possible to discern knowledge
350.41s - 352.89s |  of varying object detector confidence
352.89s - 355.37s |  based on a person's distance, angle, height,
355.37s - 357.37s |  and location in a camera frame.
357.37s - 358.93s |  Using these insights,
358.93s - 361.73s |  we want to construct a path across the scene
361.73s - 364.53s |  with minimal or no detection from an object detector.
366.13s - 368.05s |  So, before getting into the methodology,
368.05s - 371.49s |  I'll define a few terms, as well as the problem space.
371.49s - 374.13s |  First, a scene is a physical area
374.13s - 377.05s |  that is observed by footage fed to an object detector.
377.93s - 380.81s |  The scene is stationary and does not change.
380.81s - 383.33s |  Second, a confidence heat map records
383.33s - 385.25s |  for each pixel in the scene
385.29s - 387.41s |  the average confidence of bounding boxes
387.41s - 389.81s |  that land on the pixel over time.
389.81s - 392.01s |  And similarly, a detection heat map
392.01s - 394.93s |  records for each pixel the number of bounding boxes
394.93s - 396.93s |  that landed on a given pixel over time.
398.81s - 402.21s |  The Tiptoe attack leverages the varying confidence levels
402.21s - 404.05s |  recorded in the confidence heat map,
404.05s - 406.85s |  which records in cell IJ the average confidence
406.85s - 409.81s |  of bounding boxes that landed on pixel IJ
409.81s - 410.97s |  in the observed scene.
411.97s - 415.53s |  We reduce our objective of finding a path across the scene
415.53s - 417.93s |  into a graph-based problem.
417.93s - 420.41s |  Initially, we have the confidence heat map,
420.41s - 421.89s |  which represents the average confidence
421.89s - 425.89s |  of each area of the scene in a matrix-based pixel format.
425.89s - 427.93s |  We then reduce the pixel-based heat map
427.93s - 430.41s |  into a graph-based problem space.
430.41s - 432.85s |  Each pixel is represented by a node in the graph
432.85s - 435.29s |  with two-way edges to its cardinal neighbors.
437.01s - 438.77s |  The weight value of each node
439.45s - 441.17s |  is the average confidence measurement
441.17s - 445.82s |  stored in the confidence heat map.
445.82s - 448.90s |  This reduces our problem of finding an optimal path
448.90s - 451.94s |  between two locations in a pixel-based scene
451.94s - 456.30s |  into a graph-based optimal path problem between two nodes.
456.30s - 457.90s |  In order to avoid detection,
457.90s - 459.22s |  the attacker will want to reduce
459.22s - 461.82s |  both the maximum confidence of the path nodes
461.82s - 464.42s |  as well as the average confidence of the path nodes.
465.66s - 468.24s |  Now, we'll review the threat model.
468.24s - 470.26s |  The attacker wants to construct a path
470.90s - 471.98s |  between two points in a scene
471.98s - 475.22s |  that is observed by an AI-based pedestrian detector,
475.22s - 476.74s |  such that they can cross the scene
476.74s - 479.30s |  with either minimal or no detection.
479.30s - 481.46s |  They have access to a confidence heat map
481.46s - 484.06s |  and detection heat map in order to understand
484.06s - 487.26s |  the location-based behavior of the pedestrian tracker
487.26s - 488.66s |  for the given scene.
489.54s - 491.34s |  On the other hand, they don't have access
491.34s - 494.30s |  to any adversarial perturbation methods
494.30s - 496.06s |  that would allow them to print a pattern
496.06s - 498.86s |  enabling detection avoidance.
498.86s - 500.82s |  In addition, they don't have access
500.82s - 503.70s |  to machinery like infrared light or lasers
503.70s - 505.30s |  that would directly influence
505.30s - 508.54s |  the object detector's behavior.
508.54s - 511.18s |  The only factor that the attacker has under their control
511.18s - 516.45s |  is the path that the evading person takes through the scene.
516.45s - 519.49s |  Now, I'll present the methodology of Tiptoe.
519.49s - 522.67s |  Tiptoe is a modified version of Dijkstra's algorithm
522.67s - 524.99s |  where an optimal path between two nodes
524.99s - 527.17s |  is the path that crosses the lowest possible
527.17s - 529.43s |  maximum confidence node.
529.43s - 531.97s |  Since each path has at least one node
531.97s - 535.43s |  with the highest weight or confidence on the path,
535.43s - 539.15s |  we use Tiptoe to find the path with the lowest such node.
539.15s - 542.87s |  This guarantees that any other path through the scene
542.87s - 546.29s |  contains a node with either equal or greater confidence
546.29s - 548.39s |  than the path that is uncovered by Tiptoe.
549.39s - 551.79s |  In this example, the lowest cost path
551.79s - 555.11s |  from the start to the end node is through the top node,
555.11s - 556.33s |  which is the path that will be returned
556.33s - 557.89s |  by Dijkstra's algorithm.
557.89s - 560.41s |  This gives you a total path cost of 20
560.41s - 563.51s |  with maximum and average node costs of 20 as well.
564.89s - 567.65s |  On the other hand, we want Tiptoe to find the path
567.65s - 569.37s |  with the minimum max node,
569.37s - 571.25s |  which in this case is through the middle nodes,
571.25s - 573.41s |  since the max node crossed on that path
573.41s - 575.45s |  has a cost of 10.
575.45s - 578.05s |  And every other path between the start and end node
578.05s - 581.33s |  must pass through a node with at least a cost of 10.
581.33s - 584.03s |  This gives us a more expensive total cost of 50,
584.03s - 586.89s |  but a lower max cost and average cost of 10.
586.89s - 589.13s |  This would be useful for if an attacker
589.13s - 591.45s |  is trying to stay below a detection threshold
591.45s - 593.55s |  while traversing a path through the scene.
594.99s - 597.25s |  The inputs to Tiptoe are the confidence
597.25s - 598.53s |  and detection heat maps,
598.53s - 601.33s |  as well as the starting and ending coordinates.
601.33s - 603.99s |  We perform Dijkstra according to a modified
603.99s - 605.97s |  weight node update function.
605.97s - 607.65s |  The highlighted calculation records
607.65s - 609.29s |  for each point in the scene,
609.29s - 611.63s |  the minimum max confidence that is crossed
611.63s - 613.51s |  in order to get to that point.
613.51s - 617.31s |  This contrasts with Dijkstra's weight node update function,
617.31s - 621.43s |  which minimizes the total path cost to a given point.
621.43s - 624.31s |  This calculation allows us at the end of running the attack
624.31s - 626.59s |  to find the highest confidence value
626.59s - 629.85s |  that must be crossed in order to get to each point.
629.85s - 632.11s |  We can then iteratively print the optimal path
632.11s - 633.79s |  in a similar way to Dijkstra,
633.79s - 634.91s |  by starting from the end node
634.91s - 637.07s |  and working backwards to the starting node.
638.47s - 640.15s |  So to evaluate Tiptoe,
640.15s - 642.63s |  we utilize the confidence and detection heat maps
642.63s - 644.59s |  that we generated from pedestrian traffic
644.59s - 646.67s |  in our previous analysis.
646.67s - 648.25s |  For each confidence heat map,
648.25s - 651.93s |  we chose 10 random start points and 10 random end points,
651.93s - 656.61s |  giving us 100 possible start and path combinations.
656.61s - 658.55s |  We calculated for each heat map,
658.55s - 660.07s |  the average max confidence
660.07s - 661.91s |  and average per step confidence
661.91s - 664.63s |  of the paths that were generated by Tiptoe.
664.63s - 666.35s |  We then compared these results
666.35s - 668.55s |  to direct Manhattan distance paths,
668.55s - 672.75s |  as well as random length paths between each pair of nodes.
672.75s - 675.23s |  We repeated this evaluation
675.23s - 677.27s |  with the five previously mentioned models
677.27s - 679.91s |  and three previously mentioned locations.
679.91s - 681.11s |  And I'll be presenting the results
681.11s - 683.23s |  for YOLOv3 and FastRAR-CNN.
684.43s - 686.87s |  We found that Tiptoe reduces both
686.87s - 688.83s |  the max confidence of paths,
688.83s - 690.39s |  as well as the average confidence,
690.39s - 694.15s |  compared to direct and random paths through the scene.
694.15s - 695.87s |  These confidences are reduced
695.87s - 699.27s |  by up to 0.1 and 0.16, respectively,
699.27s - 702.79s |  on paths in Shibuya Crossing, observed by YOLOv3,
702.79s - 706.05s |  with similar performance for other locations,
706.05s - 707.89s |  as well as other object detectors.
709.39s - 711.47s |  So we conclude in this evaluation
711.47s - 713.31s |  that Tiptoe reduces both the max
713.31s - 716.23s |  and average confidence of a path across the scene
716.23s - 720.13s |  by up to 16% and 27%, respectively.
720.13s - 721.69s |  Therefore, it's possible for an attacker
721.69s - 724.03s |  to manipulate an object detector's confidence
724.07s - 726.67s |  by leveraging the location of a person in the scene.
727.99s - 731.33s |  So finally, to conclude what was presented today,
731.33s - 733.45s |  we first found that object detectors
733.45s - 735.47s |  are sensitive to a person's position,
735.47s - 739.57s |  or in other words, distance, angle, and height in the frame.
739.57s - 742.43s |  This is reflected in the varying confidence levels
742.43s - 744.99s |  of object detectors when given footage
744.99s - 747.67s |  of the same person in different positions
747.67s - 750.03s |  and is independent of model architecture,
750.03s - 752.53s |  video quality, and lighting conditions.
753.53s - 756.29s |  In addition, this behavior is present
756.29s - 758.17s |  in varying detection confidence
758.17s - 760.41s |  of pedestrian traffic in public areas,
760.41s - 761.89s |  depending on the location in the frame
761.89s - 763.53s |  that the pedestrian is walking.
763.53s - 766.05s |  This is reflected in the varying average confidence
766.05s - 767.77s |  in different areas of the scene.
767.77s - 769.41s |  And we can view these areas in a heat map
769.41s - 771.45s |  of stronger and weaker detection areas.
771.45s - 773.41s |  And finally, we leveraged these findings
773.41s - 774.93s |  in the Tiptoe evasion attack
774.93s - 776.85s |  in order to construct minimum confidence paths
776.85s - 779.73s |  to a scene, significantly lowering the max confidence
779.73s - 782.57s |  and average confidence of paths to a scene
782.57s - 784.45s |  over direct and random paths.
786.05s - 787.73s |  So thank you all for coming.
787.73s - 789.53s |  I hope you enjoyed my talk.
789.53s - 798.12s |  And I'm happy to answer any questions.
798.12s - 799.36s |  Any questions?
799.36s - 800.56s |  Are you taking questions?
800.56s - 801.40s |  Okay.
801.40s - 803.72s |  Yeah, I don't know if they have questions.
803.72s - 805.40s |  Anyone have a question?
805.40s - 806.80s |  Yes, sir.
806.80s - 809.04s |  I think there's a microphone.
809.04s - 809.88s |  Microphone?
809.88s - 810.76s |  There's the microphone.
810.76s - 811.76s |  Microphone's there.
812.76s - 813.60s |  You get this out.
813.60s - 814.44s |  Okay.
815.44s - 816.28s |  Slide 22.
833.31s - 834.47s |  Here we go, slide 22.
839.03s - 841.44s |  No.
842.36s - 843.72s |  Yeah, no, it's no problem.
844.64s - 846.20s |  No, actually, you make a good point.
846.20s - 850.88s |  The exact behavior or the exact confidence levels
850.88s - 855.20s |  was different between different camera qualities.
855.20s - 857.52s |  However, what we wanted to make note of
857.52s - 860.04s |  was that regardless of the camera quality,
860.04s - 863.48s |  there were positions with weaker confidence
863.48s - 867.28s |  than versus other positions.
911.01s - 913.45s |  Well, I think it's a scenario
913.45s - 918.45s |  where behind the scenes, the attacker would have
920.13s - 925.13s |  a certain level of technological access to the cameras.
925.25s - 927.13s |  However, on the scene itself,
927.13s - 930.13s |  we didn't want the attacker to have any patterns
930.13s - 933.53s |  that would seem suspicious or any machinery
933.53s - 941.32s |  like aiming lasers at the camera.
943.16s - 945.28s |  We're gonna have to wrap up the questions,
945.28s - 950.28s |  but he's gonna step out back right over here for questions.
950.28s - 954.12s |  If you are leaving, please exit out the back.
954.12s - 958.00s |  We enter from the right side of me and exit out the back.
958.00s - 959.00s |  But if you have questions,
959.00s - 960.56s |  you'll be able to take it over here.
960.56s - 961.56s |  Thank you very much.
961.56s - 963.12s |  Great job.
963.12s - 965.52s |  Hey, I got something for you.
965.52s - 966.36s |  Thank you.