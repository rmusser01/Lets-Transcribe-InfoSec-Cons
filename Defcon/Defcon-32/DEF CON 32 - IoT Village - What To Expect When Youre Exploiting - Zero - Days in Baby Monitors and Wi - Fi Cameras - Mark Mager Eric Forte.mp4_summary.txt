## Introduction
- **Speaker(s)**: Mark Mager, Eric Forte
- **Affiliation**: Elastic
- **Talk Title**: What to Expect When You're Exploiting Zero-Days in Baby Monitors and Wi-Fi Cameras
- **Event**: DEF CON 32

## Talk Overview
- **Topic**: Exploiting vulnerabilities in Wi-Fi cameras and baby monitors
- **Objective**: To demonstrate common attack vectors and vulnerabilities in these devices

## Wi-Fi Cameras and Baby Monitors
- **Market Presence**: Almost 125 million households worldwide have these devices installed
- **Affordability**: Cheap ($10) and easily accessible on Amazon
- **Functionality**: Basic operations like pan, tilt, zoom, and motion detection
- **Security Concerns**: Privacy invasion, spying, and reconnaissance by malicious actors

## Attack Surface Breakdown
- **Common Attack Vectors**: Leaked credentials and cloud vulnerabilities
- **Focus Areas**: Vulnerabilities in cloud platforms, applications, and camera hardware

## Lab Setup
- **Hardware**: Mobile hotspot, camera, Windows and Linux operating systems, Raspberry Pi, USB Wi-Fi NIC, etc.
- **Software**: Wireshark, Android Studio, Elastic Stack, decompiling tools, etc.
- **Hardware Tools**: iFixit teardown tools, USB TTY connector, GrapeFET1 logic analyzer, etc.

## Remote and Local Reconnaissance
- **Initial Attacks**: Limited success due to locked-down attack surface
- **Network Traffic Analysis**: Encrypted web sockets, difficulty in performing man-in-the-middle attacks
- **App Analysis**: Likely obfuscated with ProGuard, challenging to debug

## Communication Lines
- **Three Lines of Communication**: Mobile app to cloud, mobile app to camera, and camera to cloud/mobile app
- **Physical Device Security**: Exposed reset button and SD card slot, no verification after reset

## Hardware Reconnaissance
- **Chip Analysis**: Express T31 SoC with MIPS and RISC-V processors, I2C and UART buses, secure boot, and hardware watchdog
- **UART Discovery**: Potential UART access port found, used logic analyzer to confirm UART signals
- **Root Access**: Booted into single-user mode and obtained root shell for further exploration

## Establishing Persistence
- **Read-Only File System**: Modified fstab to create tmpfs partitions for read-write access
- **Password Cracking**: Pulled Etsy password hash for potential cracking
- **Firmware Extraction**: Used binwalk to extract firmware over the serial connection

## Cloud Application Analysis
- **Windows App**: Compatible with all WANsview devices, generates less network traffic, and has verbose debug log files
- **Account Credentials**: Logged in clear text, a significant vulnerability
- **Device Configuration**: Device ID transmitted from the application to the cloud, allowing potential access to other devices
- **Fetch Infos Request**: Revealed sensitive data like firmware version, SSID, MAC address, and geolocation data

## Exploiting Device Configuration
- **Naive Approach**: Replaced device ID in the request to access other devices
- **Dynamic Analysis**: Set a breakpoint before the post request, swapped device IDs, and resumed execution
- **Result**: Successfully accessed a device not associated with the account

## Peer-to-Peer (P2P) Protocol
- **Discovery**: References to P2P and PPPPP in the WANsview Cloud binary and DLLs
- **Dissector**: Used a dissector to interpret UDP traffic as P2P messaging sequences
- **P2P Protocol Details**: Used by many IoT devices, circumvents restrictive network configurations, and enables remote access

## Advanced Access and Exploitation
- **Live Log Output**: Accessed log output over serial connection for immediate feedback on control flow
- **Kernel Watchdog**: Prevented long-term debugging by triggering a reboot when specific processes were killed
- **Defeating the Watchdog**: Used the 'magic close' feature to disable the watchdog by writing a specific character to dev watchdog
- **Debugger Setup**: Compiled binaries compatible with the camera's architecture and set up GDB server for debugging
- **Overwriting Watchdog Functions**: Overwrote watchdog functions in memory with no-ops to prevent reboots

## Peer-to-Peer Client Development
- **Objective**: Build a client to connect directly to the camera and issue commands
- **Discovery Process**: Sent a hello message, queried for a device ID, and established a peer-to-peer connection
- **Serial Number Overwrite**: Overwrote the serial number in the INI file with arbitrary values, effectively bricking the camera
- **Result**: The camera sent garbage cURL requests and was unable to connect to the AJ Cloud infrastructure

## Affected Devices and Vendors
- **Affected Devices**: WANsview, GALIU, SONATO, and Felimi cameras, pet feeders, light bulbs, and other IoT devices
- **Root Cause**: All affected vendors used AJ Cloud's device firmware and infrastructure

## What Vendors Did Right
- **Certificate-Based Authentication**: Made man-in-the-middle attacks more difficult
- **Signed and Obfuscated APKs**: Added a layer of protection
- **Read-Only Operating System**: Attempted to restrict modifications, but could be bypassed with physical access

## What Vendors Did Wrong
- **Unauthenticated Cloud Access**: Allowed unauthorized access to devices and data
- **Verbose Debugging**: Logged sensitive information in the Windows app
- **Vulnerable P2P Access**: Enabled potential attacks
- **No Secure Boot**: Despite SoC support, secure boot was not enabled
- **Physical Access Vulnerabilities**: Exposed reset button and SD card slot

## Mitigations and Recommendations
- **Network Segmentation**: Isolate these devices from the rest of the network to minimize risk
- **Restrict Inbound/Outbound Comms**: Block all unnecessary traffic to and from these devices
- **Alternative Operating System**: Flash the devices with a more secure OS like OpenIPC
- **Tools and Future Research**: Tools and further research opportunities will be shared on GitHub

## Conclusion
- **Speaker Bios**: Mark Mager and Eric Forte are security researchers at Elastic with backgrounds in malware research, reverse engineering, and IoT systems.