{
  "webpage_url": "https://www.youtube.com/watch?v=MrNmdtkH3YY",
  "title": "DEF CON 32 - From Easy Wins to Epic Challenges: Bounty Hunter Edition - Daniel Blaklis Le Gall",
  "description": "Step into the mind of a bug bounty hunter as I take you on a journey through my own adventures in vulnerability hunting. In this presentation, I\u2019ll share some of the most intriguing bugs I've discovered, from the shockingly/stupidly simple to the mind-bendingly complex.\n\nWe'll start with the surprising simplicity of some bugs, but as the hunt isn\u2019t always so simple, I\u2019ll also reveal some complex bug chains that required advanced knowledge, lot of work and probably some hacker's intuition to know it was worth pushing further.\n\nIf you want to know how a coffee break gave me the opportunity to get infinite money, or how a vulnerable CAPTCHA helped me to break the encryption of a sensitive application - you're in the right place!",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 3095,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 7.52s | This text was transcribed using whisper model: large-v2

 Good morning, everyone. Welcome to talk two in the creator stage four. Apologies to those who are
7.52s - 12.80s |  watching online. We still are having technical difficulties. And so, we only have the slides
13.44s - 17.44s |  on the screen. We are working on it. Hopefully we'll have it for the next talk.
19.52s - 26.48s |  But I would like to introduce Blackis on his talk from easy wins to epic challenges,
27.12s - 30.16s |  the bounty hunter edition. Everyone rolls.
38.02s - 46.10s |  Hey, everyone. So, I present you a bit of my journey in bug bounty. I tried to select
46.98s - 53.30s |  some bugs that were quite surprising. Surprising in the sense of being very easy
53.30s - 62.42s |  or being very difficult. So, I will present a couple of fun bugs. So, a bit about myself. So,
62.42s - 68.82s |  I'm doing bug bounty for seven years now. I did a lot of CTFSO for 15 years or something like that.
69.38s - 74.90s |  And in general, I'm hacking for 18 years now. So, that's quite a long time I'm doing that.
76.02s - 86.98s |  I'm definitely a web application enjoyer. I love PHP. And I love doing review. I'm definitely
86.98s - 92.58s |  not a recon guy. Not doing anything like reconnaissance or something like that. I'm just
92.58s - 101.30s |  going to main apps and break them. Most of the time at least. I really love like complex chain,
102.74s - 109.94s |  complex exploit or things like that. And yeah, in my bug bounty journey, I did something around
109.94s - 116.98s |  like 2 million dollars across all platforms. And I'm also an ambassador for France. So, yeah,
116.98s - 123.78s |  I'm French. That explains my pretty bad English. I'm sorry for that. If something isn't clear,
123.78s - 131.78s |  don't hesitate to come later and just ask me. So, we'll begin with first customer Swisscom.
131.94s - 139.94s |  Swisscom. So, I represent a couple of bug I found on them. Um, Swisscom, uh, is the biggest
139.94s - 145.62s |  provider in Switzerland. They are doing a lot of things. Not only telcos, they are active
145.62s - 153.70s |  pretty much everywhere. Uh, they decided to open a white card bug bounty program in uh, 2016.
153.70s - 161.30s |  That was my first bug bounty experience. I started like end of 2016 on them. And that's a
161.30s - 165.46s |  pretty good team to be honest. Uh, they're pretty fair. They're pretty kind. Good
165.46s - 172.34s |  communication with them. Uh, they have a very big scope like millions of IP addresses. So, it's
172.34s - 179.98s |  pretty cool. And I did something around like 500,000 dollars on them. So, yeah, that's quite
179.98s - 187.48s |  good. Um, definitely the bug bounty, uh, they decided to open, uh, definitely, definitely
187.48s - 195.48s |  improved their security, uh, their security stuff over time. And, yeah, the bugs I'm
195.48s - 203.48s |  presenting now are quite old. Uh, definitely they're like pretty much uh, other stuff now. But
203.48s - 209.92s |  still quite some cool bugs. So, if some people here are interested by uh, their bug bounty
209.92s - 216.44s |  programs, they're outside of any platform, you can just take a peek of the URL. Everything is
216.92s - 224.34s |  uh, explained there. So, let's talk about uh, first target which is Swisscom Cockpit. Uh,
224.34s - 228.84s |  that's a mobile phone manager in Swisscom. That's basically where you can see your
228.84s - 234.62s |  subscription, subscription and where you can just buy some packs for traveling and things
234.62s - 240.46s |  like that. Uh, there is lock in process on it that is quite particular. It's just you uh,
240.46s - 245.70s |  sending your phone number and you receive a SMS token. You need also to fill a capture and
245.70s - 252.66s |  you log in if the card is uh, valid rights. So, it definitely manage uh, some serious uh,
252.66s - 258.64s |  confidential data, a lot of PII payments, things like that. Uh, you can see everything that is
258.64s - 264.64s |  related to Swisscom subscription on there. So, definitely a good target for me. Also, uh, pretty
267.14s - 272.22s |  good stuff for us. There is a staging instance on the internet that is like publicly
272.24s - 277.88s |  available. I was cool as there might be some uh, stuff that is not published on the
277.88s - 282.88s |  production server and things like that. So, let's talk about the first bug. Uh, I saw that on
285.66s - 290.66s |  the staging instance. The SMS token is always 1111. Pretty good. Uh, the problem is the
293.70s - 300.34s |  staging login doesn't work. It uh, it always true, throw some uh, internal server error. So,
300.36s - 307.70s |  I can't log in with it. And I was like, yeah, maybe that's uh, the SMS central repository. It
307.70s - 313.48s |  might be like shared uh, with the production system. So, I just try to log in on the
313.48s - 318.48s |  production system. Then try to log in on the staging system. Then use 1111 on production
321.52s - 326.52s |  system and I was logged in. So, that was a very simple uh, bug but definitely a good impact.
330.36s - 335.36s |  So, let's see a demo. If everything is working well, we should be able to see. Yeah. So, I'm
337.64s - 342.64s |  just entering a phone number. Just trying to sign in. Doing the same on the staging instance
348.81s - 353.81s |  and uh, trying on the prod instance to just input 1111. Filling the captcha. Sign in and I'm
358.26s - 363.26s |  signed in. So, yeah. Pretty easy. Uh, that's not video of the internet. So, let's see a
365.54s - 371.84s |  real system. I will produce everything locally. I will share the demo, uh, the demos videoed
371.84s - 376.84s |  and the instances uh, a bit later after the talk. So, yeah. This was paid $8000 which is
379.62s - 385.48s |  pretty good because that was super easy. But that uh, uh, nice impact for them because I
385.48s - 392.50s |  have like PII of every customer there. Uh, maybe millions of uh, PII there. So, yeah, pretty
392.54s - 397.54s |  good. Uh, second bug. So, as I said, the login process is uh, pretty easy. You just input uh,
403.68s - 410.12s |  your phone number. You submit. Then uh, you receive uh, SMS codes that you need to submit
410.12s - 417.06s |  with uh, captcha. But the process is also setting you uh, three encrypted cookies. The first
417.06s - 423.10s |  one is a cockpit captcha text. Uh, it definitely by the name I guess, it definitely manages
423.10s - 429.64s |  captcha text. Uh, the cockpit MSISDN key that manage the phone numbers that you input at the
429.64s - 436.32s |  first step. And the cockpit SMS token key which I guess is a pin code that was received by
436.32s - 443.32s |  SMS. So, I was like, okay maybe they are using like the same tree, the same key for
443.36s - 448.36s |  encryption. So, I decided to like copy the cockpit SMS token key cookie into the cockpit
450.76s - 455.76s |  captcha text. Reload the page and the pin code is just leaked into the captcha. So, here it is.
458.84s - 465.34s |  That's not very clear because there is some uh, maybe uh, padding issue. But you can see
465.34s - 470.34s |  the, the code there that is 7998. So, that's once again an authentication bypass by
470.70s - 475.70s |  leaking uh, the SMS pin token into the captcha which is like pretty lame but pretty good for me.
481.12s - 486.12s |  So, let's do a small, if I can move that. Here it is. Out of the demo. So, just filling the
486.12s - 491.12s |  phone number again. Trying to see the cookies. Putting the SMS token key into the captcha
504.72s - 509.72s |  text uh, cookie. Just reloading. And we get uh, the pin code into the captcha which is uh,
510.72s - 515.72s |  RK, RRKB5T. That's a pin code I received by SMS. So, I'm once again logged in with that. So,
525.36s - 532.04s |  pretty cool but definitely uh, not as serious as the previous bug but because it was pretty
532.04s - 537.28s |  hard to see, to read the captcha. You can't really automate the attack. So, they decided to
537.30s - 542.30s |  pay 3,000 dollars for that. Once again, it was quite an easy bug. So, I can complain uh, on the
544.98s - 549.98s |  amount. So, I decided it might be the time to stop on cockpits. But no, here is uh, is uh,
552.56s - 557.56s |  self bug. Uh, try to log in. Input your phone number but at the time you receive the SMS pin
559.86s - 564.86s |  code, just cancel and authentication successful. I have no idea why. I, I don't know why
567.36s - 573.64s |  but I suppose they did something bad by patching uh, some of my bugs. Uh, yeah, probably a
573.64s - 579.42s |  fail. So, they decided to pay uh, 8,000 for that because I just cancelled the log in process
579.42s - 584.22s |  and I was logged in. Uh, I suppose you don't expect a demo for that. I mean, that's not
584.22s - 589.22s |  really needed I guess. So, for this time, let's really move on to another target. So, uh,
589.38s - 594.38s |  Swisscom WorkLink uh, is a Swisscom acquisition that was like a company that just bought. Uh,
599.72s - 604.72s |  decided to have a check. They were using uh, completely unknown CMS called weblication.
606.86s - 611.86s |  Something in PHP you know that trigger me always. Uh, so I decided to uh, buy a weblication
612.48s - 617.48s |  license. Uh, so I can grab the code and turn that into like some source code review. Uh,
625.00s - 632.00s |  firstly I saw that the thing is not using SQL at all. Uh, it's only some uh, XML databases
632.00s - 637.00s |  and some uh, file system storage which is quite not so usual. So, firstly I saw that uh,
637.36s - 642.36s |  they have a general pass traversal prevention mechanism and in general uh, they are trying
647.40s - 654.40s |  like to sanitize every uh, every variables that you can input. There is an easy bypass
654.40s - 660.40s |  because they are like uh, trying to remove uh, pass traversal characters and later in the
660.40s - 666.82s |  process they're trying to remove pipes. So, you can just like uh, use uh, dot pipe dot
667.64s - 672.54s |  pipe slash and it will be transformed to pipe uh, to dot dot slash. So, there is like an easy
672.54s - 678.58s |  bypass of the uh, mechanism to prevent pass traversal. So, I decided to have a look for some
678.58s - 685.22s |  pass traversal issues. Uh, I found pretty easily uh, vulnerabilities that allow me to delete
685.22s - 692.22s |  all the files uh, in a directory but uh, it wasn't uh, reachable but because it checked for
692.26s - 698.60s |  specific directory on the app that was never used anywhere so there is no way to create that
698.60s - 703.60s |  uh, directory. But I found uh, an arbitrary directory creation which is generally
707.68s - 713.84s |  something that is quite useless but for that case it was quite useful for me so I created the
713.84s - 718.86s |  directory that was needed uh, to reach the directory empty vulnerability. Uh, so cool. I can
719.20s - 724.20s |  delete files in directories uh, but come on that's not useful. I'm definitely not wanting to
728.34s - 733.34s |  deface a website that's definitely not the goal. So, uh, I did a I I other check and uh, in the
738.32s - 745.32s |  weblication slash grid uh, five directories there is a dot htaccess files that's the only file
745.52s - 752.52s |  there. But in the sub directories there is like all the databases uh, all the XML databases
752.52s - 757.54s |  there. Uh, the only uh, mechanism of protection there is a dot htaccess file so maybe we can
760.84s - 765.84s |  just remove the dot htaccess file so we can access the XML databases then. For some reason I
768.40s - 773.00s |  don't know why but I decided that to uh, name all the XML databases with uh, dot php
774.00s - 779.00s |  extension. That's quite a strange uh, decision but I found that uh, the logs uh, the login
784.38s - 790.38s |  logs uh, that uh, database is containing uh, the session token for all users there so I can
790.38s - 795.38s |  just win it. That's an authentication bypass that's a win. No, it works locally, it doesn't
796.28s - 801.28s |  work remotely. I have like uh, internal server error everywhere so I was quite in
803.82s - 808.82s |  despair, I was crying a bit. Um, so my guess was uh, my uh, so work link was using uh, php
813.90s - 818.90s |  short tags so uh, it clashed with uh, XML open tags so the the system was uh, thinking that
819.90s - 824.90s |  the XML file was some php, it broke because of some syntax error and so just through
830.20s - 835.20s |  internal server error so definitely didn't work. I decided to go and say search uh, other
837.78s - 842.78s |  vulnerabilities. I found a pre-auth sc there but it failed again for the exact same reason so
842.96s - 847.96s |  I cried a bit again. And I found something that was maybe interesting but quite lame, I
852.64s - 857.64s |  didn't see the impact at first. I found an XML injection in the log user database. Uh, so
859.84s - 864.84s |  pretty much the same, it's also uh, php extension uh, in the same directories. So uh, the the
865.84s - 870.84s |  injection is on the user name and that's like the database that contains uh, if a user name is
875.42s - 881.62s |  uh, blocked by the system. So if you're trying to log in uh, with a specific user name more
881.62s - 888.46s |  than 3 times and the login is failed, you're like injected in that uh, specific database. So
888.46s - 893.46s |  there is a XML injection there. Okay, not so useful, I can block up entire users maybe but
895.14s - 902.00s |  yeah, quite lame. So, I did have a check on how uh, the XML database are passed by the
902.00s - 907.02s |  application. Uh, I saw that uh, the developers uh, did that quite well. They decided to add
909.92s - 915.82s |  some layers of protection uh, trying to prevent xinclude by calling dumb document uh,
915.82s - 920.82s |  xinclude function with a false parameter. No luck for them, uh, thanks php. Uh, it enabled
921.58s - 926.58s |  xinclude instead. So, definitely not what they wanted. Uh, so for those that don't know
929.86s - 936.86s |  xinclude is a XML feature that allow to include other XML or even not XML documents into the
936.86s - 943.97s |  current one. So that's like, exactly like php include but for XML. So, trying to put uh, that
944.97s - 949.97s |  user name will definitely uh, add a xinclude directive that will load uh, the login logs
955.33s - 962.21s |  database into the uh, blocked users database. Uh, that's, that's a notation for xinclude
962.21s - 967.21s |  directive. Uh, that's a bit complicated but yeah, definitely the impact there is like we can
968.17s - 973.17s |  just include the entire uh, login logs database into the blocked user database. But, uh yeah,
977.91s - 983.35s |  xinclude is doing their best to like reformat all the file to be a fully valid XML. You can
983.35s - 990.05s |  break, you can't really break uh, the file by using xinclude which is quite good. It's doing
990.05s - 995.99s |  like automatic correction and things like that. But, but no, that's still useless. I mean
996.01s - 1001.01s |  yeah, I can include the database into another but that's quite useless. But, I try to see all
1003.81s - 1010.09s |  the log users feature is working and I found a blind xpass injection so in the user name is
1010.09s - 1015.09s |  you, if you can, if you inject uh, some xpass uh, notation you have uh, an injection there.
1018.07s - 1023.07s |  So, you can definitely extract the entire log, log database and I guess you see uh, what the
1023.23s - 1028.23s |  interest there. We can uh, inject uh, the content of other database uh, in, in the log
1032.37s - 1037.37s |  database and then we can like exfiltrate it. So, the log database uh, yes, I, I, I would
1040.57s - 1045.57s |  say that. But, uh, so we can choose a blind xpass injection, we can exfiltrate session token
1046.09s - 1051.09s |  byte by a byte per bytes. That gave me admin takeover on the application and that time in the
1056.57s - 1061.57s |  admin panel there is like feature to get RC. So, this time is a win. It works remotely. So,
1065.57s - 1071.81s |  the chain was log user with uh, xm injection in the user name with xinclude directive
1071.83s - 1076.83s |  pointing to the xml logs. Exfiltrate it with xpass injection, get admin session, get RC
1081.33s - 1093.34s |  and let, let's go for a demo. So, we can see there on the right that the blog database is
1093.34s - 1100.10s |  empty. Now, we try to log in with x uh, to see that just the blog database is now filled
1102.34s - 1107.34s |  with uh, one and three for the x uh, x uh, user. We now try to inject some xmlogs and
1109.18s - 1117.20s |  xml to see if there is a xm injection there. And yes, it is. There is now a foobar
1117.20s - 1122.20s |  attribute uh, in the, in the block uh, block uh, entry. So, that time we're using the
1125.00s - 1131.42s |  payloads that uh, we saw before with the xinclude directive trying to include uh, the
1131.42s - 1139.39s |  login logs uh, in the, in the blog database. So, yeah, I just saw that the login log
1139.39s - 1144.39s |  contains some uh, session stuff there. So, we make that user with the payload to be
1147.53s - 1155.42s |  blocked. We can see that to xinclude directive is now there in the file of the blocked uh,
1155.42s - 1161.62s |  database. We make uh, another user, another random user to be blocked so the file will be
1161.62s - 1168.24s |  parsed again and this time there is like the entire login log database in that blog
1168.24s - 1173.24s |  database. So, this time it was completely replaced uh, by the, by the original login logs
1175.74s - 1180.74s |  file. So, now we can try to use uh, the xpass injection. So, we are like targeting uh, a log
1182.92s - 1188.42s |  element, trying to infiltrate the session. We're checking, we're checking if it begins by
1188.42s - 1193.42s |  a L. We know it is because we can see that on the right screen. So, if it begins by a L, we
1194.42s - 1199.42s |  should receive that the account is blocked. But if we check uh, if it begin by a X, we
1203.92s - 1209.22s |  receive that no user is found. So, we have an oracle to leak uh, the characters one by one.
1209.22s - 1214.24s |  So, I write a little script and yeah, it definitely leaks the session token character by
1216.80s - 1221.80s |  character. So, yeah, we got it. We got an admin account to that and yet, uh, the
1223.94s - 1227.58s |  admin account is still there. So, we can use it remotely. For that, uh, Swisscom decided to
1227.58s - 1232.58s |  pay me $3,000. So, uh, $2,500 for the bug. Uh, $500 uh, for the um, for uh, bonus for the
1237.66s - 1242.66s |  nice shell and also the editor decided to uh, reward me for with uh, $2,000. They didn't
1246.46s - 1251.20s |  have a bug bounty but they were like impressed by the bug. So, pretty cool for them, for,
1251.22s - 1256.22s |  for them. So, now let's switch to yet another customer. Uh, another Swiss one. Uh, so
1260.10s - 1265.10s |  Swisspost. I'm not sure I need to explain what is Swisspost. Pretty standard, they are like
1267.34s - 1273.74s |  the postal office in Switzerland but they are also a private company uh, doing a lot of
1273.74s - 1280.28s |  different things and they are like involved in a lot of uh, major projects in Switzerland like
1280.30s - 1286.74s |  e-voting. Uh, they decide, they, they are also very active in cyber security. They like about a
1286.74s - 1293.48s |  lot of local uh, cyber security, security companies. So, so they are like very active in the
1293.48s - 1298.48s |  cyber security uh, stuff in Switzerland. They decided to start a bug bounty in 2019 uh,
1300.92s - 1305.92s |  especially for their e-voting platform. Uh, and they decided to add uh, assets uh, over time.
1306.64s - 1311.64s |  So, that's a super fair team, they're pretty good. Pretty much the same as Swisscom to be
1313.98s - 1318.98s |  honest. Uh, we can have a lot of uh, communication with them, they're pretty good. And yeah, if
1321.32s - 1325.76s |  some people are from the voting village uh, go on their bug bounty programs, they are paying
1325.76s - 1330.76s |  like uh, $230K for a very critical bug there. That's definitely a good program. I'm not a
1331.48s - 1336.48s |  crypto guy so I'm not going back. Maybe you are. So, if you want to have a check, uh,
1340.92s - 1345.92s |  everything is described on their VDP page. So, vdp.post.ch. So, uh, for, for the first bug
1351.80s - 1358.54s |  I will talk about their uh, payment system. So, they have like their own payment system uh,
1358.58s - 1364.56s |  completely custom. Uh, everything is quite common. You get some sign requests. Uh, there's a
1364.56s - 1370.46s |  lot of different endpoints for failure and success and uh, also you can stack money on your
1370.46s - 1375.50s |  account, on your postal account. You have a balance system so it's always interesting if we
1375.50s - 1380.50s |  can get like infinite money there. I will switch this back because we have some time issue.
1380.84s - 1385.84s |  Let's go on the second one. So, I did find a lot of uh, stuff there so I was uh, hacking on
1390.64s - 1397.28s |  them and I was trying to manipulate some payment session there. Uh, changing price in a
1397.28s - 1404.06s |  trans- transaction. Uh, a lot of things but uh, a delivery man rang the doorbell in my
1404.06s - 1410.14s |  office so I need to cut the package, sing everything. I decided that was the time for
1410.14s - 1415.14s |  coffee break and then after maybe 10, 15 minutes, I don't know, got back to my chair and I had
1418.58s - 1423.58s |  some money coming from nowhere on my account so I had no idea why. So, I decided to replay
1428.12s - 1434.30s |  everything I did. I was like probably I triggered something and I didn't even know. So, I
1434.32s - 1441.20s |  tried to replay everything. So, that failed. No idea what happened. So, I did to replay
1441.20s - 1447.84s |  everything including the coffee break. That was maybe the main point. So, I did a coffee break
1447.84s - 1452.84s |  with a colleague and there was my account was credited again. So, I was like okay, what the
1457.22s - 1463.76s |  fact? I did, I tested a lot of things and the real explanation is uh, when you run the
1464.48s - 1470.86s |  transaction, after the transaction is timed out. So, you didn't uh, make the payment uh, in
1470.86s - 1477.26s |  the good time frame. It just considered successful. So, probably a bad check of payment
1477.26s - 1482.26s |  states. It default to success instead of defaulting to uh, a failure. So, yeah. Let's go
1485.28s - 1492.46s |  for a demo. So, let's buy a very good croissant because I'm French. Ah, that's not a good
1492.84s - 1500.33s |  demo. That was a croissant, a bigger one. Let's go for it. Just wait. Just go grab a coffee
1505.31s - 1515.75s |  maybe. Are you patient enough? Oh yeah. Uh, joking it will just last. Yeah, success
1518.39s - 1526.54s |  payments just by waiting. I mean, pretty cool. Uh, pretty cool solution to get some money
1526.58s - 1533.58s |  right? So, I was paid uh, $3,000 for that. Uh, that's probably the most I get for like a
1533.58s - 1538.60s |  coffee break or two. Definitely was quite profitable right? So, let's go to another project
1542.60s - 1547.60s |  of them. Uh, they have like a sub-domain uh, using a very, very unknown uh, CMS. So,
1548.44s - 1553.44s |  paper shop that's like a Swiss page PCMS. They also do some manager thing and things like
1556.68s - 1561.68s |  that. I never heard of them. So, I decided once again to buy a license uh, of the CMS so I
1564.82s - 1569.82s |  get access to the code. Once again it's PHP so I'm super interested by that. And I just had a
1570.82s - 1575.82s |  look at the code. Everything was quite, you know, PHP. Uh, so I saw that uh, another main
1581.76s - 1586.76s |  feature uh, that is quite interesting is a restore backup thing. Uh, it's some like custom
1590.64s - 1595.64s |  things. They decided that the delimiter between SQL queries will be that stuff. No idea why.
1595.84s - 1600.84s |  Why don't use like semicolon like everyone do? I don't know. They decided it is. And they also
1605.24s - 1612.18s |  have uh, some features I never, I don't know why because I didn't see any occurrences where
1612.18s - 1617.18s |  they are using that but they do. So, if you use uh, the base64 start and the base64 end tags,
1618.14s - 1623.14s |  that will be replaced by a single coded string of uh, the base64 decoded string that is
1627.14s - 1632.16s |  between the tag. I don't know why. I, I, that's quite a strange feature to be honest. So, uh,
1635.68s - 1642.56s |  the restore backup, uh, the restore uh, feature is using uh, backup from a local file system.
1642.58s - 1648.68s |  Uh, that needs to be generated from the CMS backup feature. So, uh, you can't upload
1648.68s - 1653.70s |  anything or something like that. So, my goal was maybe I can inject SQL queries and backup from
1656.56s - 1661.56s |  the front end. Uh, the method is exploiting the very like strange passing to break SQL
1665.50s - 1670.50s |  contexts. So, my idea is uh, if I use like so specific uh, separate methods, uh, to
1672.58s - 1677.58s |  separate uh, uh, like tags in some data uh, that is stored in the database uh, so uh, that will
1680.12s - 1687.06s |  be stored in the database. Uh, maybe when they will backup and restore again, that will break
1687.06s - 1693.10s |  something if I get some data with those tags. Uh, maybe on my profile, on my, I don't know,
1693.10s - 1700.10s |  username, name, other comments or things like that. The first problem is uh, most fields are
1700.12s - 1705.12s |  sanitized by default. That's like a global sanitize, uh, sanitization that is done on every
1707.88s - 1712.90s |  field. Uh, so no, no new lines, no hash, no special characters in general. Uh, the second
1717.10s - 1722.10s |  problem is that if the restore fail on one SQL query, it's like ending the process and not
1722.98s - 1727.98s |  going further in the file. I mean, for the first problem, the solution is quite easy. Most uh,
1734.52s - 1739.86s |  field are sanitized but not all. They are like exception. One of them are like uh,
1739.86s - 1744.86s |  comments that are put on the other so I can definitely reach that field uh, on the front end.
1745.56s - 1750.56s |  And the second uh, problem, we have like a separator between queries and way to inject single
1754.88s - 1759.88s |  code. So that should be possible uh, to get like a valid file after injecting things. So let's
1764.58s - 1769.58s |  imagine uh, uh, a valid SQL query in the file formats. So we control fully the values of
1769.58s - 1774.58s |  Bemerkugin. I have no idea what it means but that's the name of the database of the uh,
1778.66s - 1785.42s |  table. I have no idea what it is. So we can control that fully and you can see the separator at
1785.42s - 1792.14s |  the end. So we're trying to use their base 64 feature to break from single codes. So we're
1792.14s - 1797.14s |  trying to get something like that. That will be transformed to that. So we inject the
1799.78s - 1804.78s |  single code, a parenthesis, a comment and that is working pretty well to be honest. So then my goal
1809.52s - 1814.52s |  is to inject new queries in the packet file. So this time I'm also adding uh, a separator and a
1818.46s - 1823.46s |  new uh, query with a comment at the end. So after being uh, uh, passed by the restart
1824.46s - 1829.46s |  procedure that will give that. And that's definitely valid. So I was able to uh, just
1833.66s - 1838.66s |  inject uh, an update to uh, an arbitrary table changing arbitrary column there. Pretty good.
1842.80s - 1847.80s |  Um, so the impact is I can run arbitrary queries on the restart process if they take a backup
1848.06s - 1853.06s |  and restart that will run my queries. Pretty good. But uh, the database is obviously that
1860.44s - 1865.44s |  PHP uh, storing some serialized uh, PHP objects because you know, relational databases is
1868.44s - 1873.44s |  done for that, storing full objects. So I found uh, pretty fastly a custom gadget uh, that
1873.80s - 1878.80s |  allow to delete local files. Once again, not the most interesting primitive for us because
1882.88s - 1889.88s |  that's definitely not a goal to delete uh, files on them. But I saw that uh, the admin
1889.88s - 1895.92s |  authentication mechanism is just uh, dot htaccess file so that just a basic authentication
1895.92s - 1900.92s |  system. So if we delete the dot htaccess file, uh, everyone can go to slash admin and uh,
1903.66s - 1909.10s |  admin, just that. There's no authentication besides that. So just like, you need either
1909.10s - 1915.68s |  valid credential or you need to pipe as a dot htaccess. The payload is too big for the screen,
1915.68s - 1922.53s |  I'm sorry. So let's get a demo for this one. Once again, super cross and sharp. So we put
1929.15s - 1938.31s |  the payload uh, in the other commands. You can see the payload there, it's pretty big. It
1938.33s - 1943.33s |  just uh, trying to update the other table and set uh, a big uh, serialized uh, object in the
1945.61s - 1950.61s |  data of the others. So now my user have uh, like another ways uh, or uh, or tags uh, or
1957.65s - 1962.65s |  by basic C for tags. So let's go to an administrator account, let's do a backup. Yeah,
1962.87s - 1971.77s |  that's a fail. Let's go to the backup, let's log in. So let's do a backup and now trying to
1979.92s - 1984.92s |  restore it. Not, not, before restoring it, we can see in the order that uh, we have like
1987.76s - 1993.40s |  old data that is injected uh, in the order. So now trying to restore, that's definitely not
1993.40s - 1998.40s |  the same data. We were able to update the order and add like a serialized object that they
2000.80s - 2006.84s |  have a pass traversal to the htaccess file. So let's go see the order that triggered uh, the
2006.84s - 2011.98s |  serialized objects and now we can go to the admin panel and there is no more authentication
2011.98s - 2016.98s |  on it. So yeah, that definitely deleted uh, the htaccess so everyone is admin which is uh, to
2021.12s - 2026.12s |  be honest a bit uh, frightening because like by exploiting that I gave everyone admin
2026.40s - 2031.40s |  access. Oops. So they pay me uh, six and, six hundred fifty dollars which is quite bad but uh,
2039.18s - 2045.58s |  the real uh, thing is that Swiss Post is not using the backup and restore feature because they
2045.58s - 2050.58s |  have too much data and the official backup feature there is just crashing because there is too
2050.76s - 2055.76s |  much data. You know like, problem of memory issues and things like that. So that's even
2058.66s - 2064.00s |  fair they decided to pay a bounty for that because they are like, no chance they are using
2064.00s - 2070.44s |  the backup and restore features. So yeah, still quite firm. Let's go on another customer, the
2073.18s - 2078.18s |  most known one, Redacted. Uh, I wasn't able to name them so let's consider that Redacted
2082.86s - 2087.86s |  uh, we just put a bit of context. Imagine a PHP CMS, once again PHP, widely used uh, with a
2093.26s - 2100.28s |  lot of complex code, complex features and a little blacklist criticizing the code at every
2100.28s - 2105.28s |  release, every time. So, first bag, there is a new CV there uh, that's a Prius SE to a SSTI
2105.98s - 2110.98s |  in the wild, like used by a straight actor. So the maintainers decided to make an emergency
2119.06s - 2124.06s |  patch. I decided to reverse it, obviously. Uh, so uh, there is like a double level of
2127.40s - 2132.40s |  templating uh, on the app and the patch from uh, the maintainers were just a break replace to
2135.44s - 2140.44s |  uh, remove uh, the tags just after a single evaluation of the templates. Uh, the problem is
2144.18s - 2150.94s |  maybe someone saw that? You saw that, I know. The regex is not matching new lines. Uh, that
2153.92s - 2160.82s |  means that you can just use the original payload but use a new line before the closing tags,
2160.82s - 2165.82s |  you're bypassing that regex and that's like a Prius SE again. That was paid a bounty for
2167.06s - 2172.06s |  uh, $10,000 because you know, Prius SE are always cool. And small bonus, my colleague uh,
2175.30s - 2180.30s |  also found another bypass, you just had to not close the tags. So, that was enough. Uh,
2182.58s - 2187.58s |  templates uh, will contain some tags, ending tags later. So, yeah, that's also bypass it.
2190.78s - 2195.78s |  So, and there's a second bag and I'm sorry this one will be quite complex. Uh, the
2197.66s - 2202.66s |  I will try my best to explain it uh, correctly but yeah, that's a complex one. So, I found a
2205.66s - 2210.66s |  bag uh, that is to be honest barely exportable but it's super fun technically. So, the worst
2215.38s - 2220.38s |  impact uh, to it was uh, Prius SE but uh, the precondition of it make it quite unlikely but
2221.26s - 2226.26s |  yeah, it's still a fun one. So, for the context uh, that application uh, was using
2231.34s - 2236.34s |  Laminas PHP library to for everything that is using like emails. Laminas is doing a lot of
2240.08s - 2245.94s |  checks and transformation to be sure that the email is valid and things like that. There's
2245.98s - 2252.16s |  like a lot of different label uh, libraries there. And on the application we're testing uh,
2252.16s - 2257.16s |  we have uh, control over a from header that will be uh, used for sending some emails. So,
2261.50s - 2266.50s |  that from header will be passed uh, over the fifth argument of mail for those who know uh,
2268.60s - 2275.08s |  mail function uh, of a fifth argument that is like arguments that will be passed to the
2275.12s - 2280.12s |  send mail uh, binary. So, if that fifth argument is uh, completely controlled by an attacker,
2282.50s - 2287.50s |  you can have like argument injection to the send mail binary. There are like known exploit to
2289.10s - 2294.10s |  that uh, but it definitely depends on the MTA that is used. So, uh, every MTA is shipped with
2297.84s - 2302.84s |  different send mail binaries. So, for this uh, talk, we will consider uh, send mail MTA
2305.48s - 2311.46s |  here. That's like a first priority condition. Why send mail? Because I'm cheating. That's my
2311.46s - 2316.46s |  bug. I decide whatever is the condition. So, that's what uh, I want to be. So, uh, the
2322.94s - 2327.94s |  problem is Laminas validating email address. We can't like put anything that is not a valid
2328.38s - 2333.38s |  email address. Uh, Laminas is supporting uh, cutted string uh, format. So, uh, double quotes
2337.12s - 2342.12s |  and pretty much anything. Uh, dot atom format that's like the standard uh, email format. Uh,
2343.96s - 2348.96s |  for that they are using super big regex. Uh, that was super hard to read. And yeah, the thing
2349.70s - 2354.70s |  is uh, they are also using uh, escape shell lag uh, on the email before being used on the uh,
2362.34s - 2367.34s |  mail function. But uh, PHP is automatically applies escape shell command to the entire
2370.74s - 2377.26s |  command uh, when calling mail uh, that will apply escape shell command to send mail. Uh,
2377.32s - 2382.32s |  double escape means uh, no escape at all. Means argument injection, thanks PHP. So, I
2386.64s - 2392.48s |  know the problem is uh, Laminas also application I don't know is uh, lower casing
2392.48s - 2397.48s |  email and every exploit for uh, send mail are generally using uh, the C and the X
2401.18s - 2406.18s |  uppercase arguments with very long pass. And the other problem is we are limited to
2408.96s - 2415.50s |  64 characters for the local path and definitely if you need like long pass uh, for two
2415.50s - 2420.50s |  arguments that's definitely not cool because we are like limited in size. Painful, I was like a
2422.88s - 2427.88s |  bit in despair I was pretty sure that won't be exploitable at all but yeah, I still decided to
2431.12s - 2436.12s |  make like both of testing. I was pretty much like that after a few years. But at some point
2439.46s - 2444.46s |  I saw that uh, there was like a stranger if my email contains uh, uh, right angle brackets.
2447.60s - 2454.30s |  So, if I put XSX uh, right angle bracket at black dot east I received by the app invalid
2454.30s - 2459.32s |  domain black dot east right bracket. I was like such, such strange that's definitely not
2459.32s - 2464.32s |  the domain I put in my mail. So, I decided to debug the behavior so Laminas uh, did uh, the
2464.98s - 2469.98s |  validation of the email. Laminas and the app uh, were crafting a full email with headers and
2473.82s - 2478.82s |  the body and put the email in the from uh, header. Then uh, Laminas passed the generated
2481.60s - 2486.60s |  email. Then the app is extracting the sender again from it. Validates that it's still a
2487.42s - 2492.42s |  valid email. So, painful process. So, I was like okay but that doesn't explain the error. So,
2498.14s - 2503.14s |  that's a traditional from header so it's just uh, double quotes your name, double quotes and in
2505.38s - 2510.38s |  brackets uh, the full email. But when I tried to inject XXX right brackets at black dot east
2511.00s - 2516.00s |  that was like the from that was generated. So, we have like an injection in the email
2518.74s - 2523.74s |  part but that's quite useless in my opinion. Uh, there was like no CRLF, there was like
2527.08s - 2532.08s |  protection and mechanism to prevent that. So, I was like okay that's definitely useless.
2533.76s - 2538.76s |  But I decided to like investigate because that's quite a dirty thing still. So, yeah.
2541.20s - 2546.20s |  I read uh, a lot of RFC, a lot of documentation and I saw there's like something called uh,
2549.14s - 2554.14s |  my man coded words. So, uh, that's described by the uh, the RFC 2047. That's for using
2558.22s - 2563.22s |  special characters in uh, email headers and body. That's a format so uh, it was seen uh,
2563.94s - 2568.94s |  integration point, cassettes, encoding and then you can use like uh, little characters using
2573.48s - 2578.48s |  their hexadecimal code uh, with uh, equal thing. So, in that case I'd like generate AAA.
2582.78s - 2587.78s |  So, all the characters that is used uh, in the MIME uncoded words notation are also valid
2588.66s - 2593.66s |  characters in an email address. At least uh, in the double uh, double code encoded
2596.60s - 2601.60s |  formats. So, I was like maybe I can inject MIME uncoded words in my uh, sender email.
2605.54s - 2610.54s |  So, uh, that will be put in the mail headers and when extracted back by Laminas, it will like
2610.88s - 2615.88s |  pass the MIME uncoded words and generate an email that will maybe contain uh, some uh,
2618.98s - 2623.98s |  parameter injection to send mail. So, uh, I needed uh, some spaces to like inject another
2628.16s - 2633.16s |  argument to send mail. Uh, but uh, equal 20 is forbidden by the specification of the RFC but I
2633.96s - 2638.96s |  found that uh, underscore is defined as a space by the RFC. So, we can uh, just input uh,
2643.40s - 2648.40s |  spaces by using an underscore. Don't ask me why, there's probably a reason for that. So, as we
2651.08s - 2656.08s |  saw uh, the send mail uh, send mail payload is always uh, needing to point to a local
2657.08s - 2662.08s |  configuration file. So, we need to have uh, a control of a malicious local file.
2665.92s - 2672.06s |  Fortunately for us, the CMS have uh, a NOS file upload so we can upload files there. The
2672.06s - 2677.46s |  problem is uh, the upload folder contains underscore but underscore are replaced by
2677.46s - 2682.46s |  spaces but we can replace uh, underscore by uh, equal five F characters. So, that's a
2683.28s - 2688.28s |  problem but not so much. The problem is uh, we need a lot of replacement character and the
2692.96s - 2699.20s |  size limitation is still 64 characters and the mime encoded words uh, increase the size of a
2699.20s - 2704.20s |  string by quite a lot. So, let's consider that uh, a web root is uh, slash app. That's
2704.28s - 2709.28s |  short, that's definitely what I need. So, I'm still uh, cheating again. So, uh, that's
2715.02s - 2721.60s |  another preconditions. The first one is you need send mail to be used and you need uh, a
2721.60s - 2726.60s |  short uh, web root. So, yeah, that's quite some strong precondition. So, I knew that send
2727.34s - 2732.34s |  mail payload are using uh, the C and the X uh, arguments. That's definitely too long for us.
2738.12s - 2743.12s |  So, I was like, okay, uh, the C arguments is uh, loading arbitrary config file. Maybe
2745.56s - 2750.86s |  that's enough to SE, maybe we don't need the uh, X arguments. So, I decided to focus on
2750.86s - 2757.60s |  that and see what is possible to uh, send mail config file. So, in the config file you have
2757.60s - 2763.10s |  like the path to the dead letter file. So, the dead letter is like where it, with, it will
2763.10s - 2768.12s |  log uh, like incidents in sending emails. So, maybe we can like uh, pat uh, a file that will
2771.92s - 2776.92s |  be in the web roots and have maybe a file write but we don't control anything in the mail. And
2777.32s - 2782.32s |  there is also uh, uh, bound second recipient in that config file that will be included in the
2786.66s - 2792.14s |  dead letter because that will like, you have an email that is failed but then it will try to
2792.14s - 2797.74s |  send to that second recipient and it will write that in the dead letter file. So, maybe we can
2797.74s - 2802.74s |  have arbitrary file writes or at least uh, partial arbitrary file write but that's PHP so if
2803.74s - 2808.74s |  I have just uh, a partial file write that would be enough to get a valid PHP file. So, I just
2815.02s - 2820.02s |  sent uh, a default send mail MTA config and uh, the two uh, option uh, to get arbitrary file
2823.82s - 2828.50s |  write and that's, that was sufficient. So, then I'm sending the mail to not existent at
2828.52s - 2835.24s |  localhost so it fails. So, that will bounce. So, that uh, the, the, the config that I was
2835.24s - 2841.97s |  using. So, I decided to have a look at the MyMainCoded world and trying to like reduce the
2844.43s - 2849.45s |  size of it. Uh, I was able to win some size like you can just empty the car set. There is no
2852.05s - 2857.05s |  need of uh, filling it. Uh, don't uh, we get, we need double cuts on the payload because uh,
2857.41s - 2862.41s |  the email need to be, need to be valid and you need to use a double cutted uh, format. Don't
2866.09s - 2872.13s |  ask me why but we need, we needed to end it with uh, two double cuts. I have no idea that's
2872.13s - 2878.79s |  magic. I didn't investigate it that. So, we can definitely use the uppercase later now
2878.79s - 2883.79s |  because we have the MyMainCoded worlds. Uh, so, 64 cars is still too short but uh, we
2887.17s - 2892.17s |  with the precondition of having a short web route and everything that just enter exactly uh,
2895.55s - 2900.55s |  the, the 64 characters. So, it uh, uppercase and the final payload was just that. Don't ask
2905.79s - 2910.79s |  me why is that some magic. Uh, definitely some magic payload. I have now a t-shirt but it's
2910.81s - 2915.81s |  my, in my hotel room with a payload printed on it. Uh, yeah, that's quite a universal
2918.71s - 2923.71s |  payload and it is to create RCE on that app in very specific conditions. So, yeah, that was
2926.35s - 2933.13s |  just uh, settings uh, file re-uploaded in the send mail command injecting a new uh, config
2933.13s - 2938.13s |  file for send mail. Get arbitrary write some PHP in the web app. Get RCE. Uh, yeah, that's
2940.83s - 2945.83s |  works only on send mail MTA. Web route being short so I cheated a bit. But, yeah, you need
2948.43s - 2953.11s |  some high end stuff to exploit that. So, definitely not uh, not really exported in the
2953.11s - 2958.11s |  right but still was quite fun technically. So, let's go for a demo. The last one. Once
2963.87s - 2973.86s |  again, the crossing shop. I'm just uploading uh, the send mail MTA default config file
2974.26s - 2979.26s |  with just like or do 2 config keys. Yeah, doing the upload manually. Sorry, it takes a bit of
2987.48s - 2999.61s |  time. So, yeah, you can see that I'm putting the dead letter in the slash app slash back
2999.61s - 3004.61s |  dot dot PHP with a double bounce address containing the payload. So, yeah, now the config
3007.53s - 3012.53s |  file is uploaded. We can just run the payload in the from uh, uh, uh, uh, uh, uh, uh,
3013.69s - 3018.69s |  in the from email. That's exactly the payload from the, the slides. We're sending that to uh, a
3022.13s - 3027.23s |  local host address that doesn't exist so that should draw, draw an error. We see that the page
3027.23s - 3032.25s |  is completed bank because that's generated an error. So, now we can go to uh, the slash back
3034.41s - 3039.41s |  dot dot PHP. We can see the dead letter there and I did add some back dot there and we get
3040.33s - 3045.33s |  arbitrary PHP uh, execution. So, definitely quite cool. So, that was paid 5,000 uh, dollars
3053.71s - 3058.71s |  despite the fact that this was uh, hardly exploitable. Uh, made me cry a bit. I spent a lot
3061.89s - 3066.89s |  of time on it. So, I hope your brain fried exactly uh, like me. And that's my end word.
3069.79s - 3074.17s |  So, uh, thanks for having listened to the end. I hope you had fun. I hope you learned some
3074.17s - 3079.17s |  things and also I will maybe soon open a blog uh, a blog with a lot of my bugs. There's like
3082.71s - 3087.71s |  hundred of them. So, yeah, follow me on Twitter if you want some news and thank you.