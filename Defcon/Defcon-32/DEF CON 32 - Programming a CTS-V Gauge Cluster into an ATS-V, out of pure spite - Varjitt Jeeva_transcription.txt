{
  "webpage_url": "https://www.youtube.com/watch?v=hnUG3hB0qVI",
  "title": "DEF CON 32 - Programming a CTS-V Gauge Cluster into an ATS-V, out of pure spite - Varjitt Jeeva",
  "description": "Some cars are over-engineered, some are too basic, and some check every box except one. I did that research over months when trying to buy a new car, and landed on a 6MT Cadillac ATS-V while only wanting and dealing with Japanese cars, specifically Lexus/Toyota. The one thing it was missing was a digital gauge cluster, and programmers were asking $350, so I set off to figure it out myself. I then dove deep into GM electronics and programming, found a smart dude who initially cracked it all for free to spite all the money-grabbing gatekeepers, then became a hyprocrite, backtracking asking thousands to reveal his learnings. This presentation will go over how I programmed that cluster, posted everything on Github, out of spite.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 916,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 6.32s | This text was transcribed using whisper model: large-v2

 All righty, it's about 4.30 so I'll start. Hi everyone, my name is Varjit Jiva and I'm going
6.32s - 11.20s |  to talk to you guys about how I got annoyed with a bunch of paywalls while I was trying to program
11.20s - 17.52s |  my digital gauge cluster into my Cadillac ATS-V, figured it out, put it up on GitHub and helped a
17.52s - 23.04s |  bunch of people. So I have 35 slides and 25 minutes so we're going to get going. So the
23.04s - 27.52s |  overview for this talk, I'm going to introduce myself on the project, what project points made
27.52s - 32.72s |  this possible, how the hell I figured it out, the high-level process results, and the future
32.72s - 38.72s |  of GM programming and open source. So an introduction to myself, I'm just a software
38.72s - 44.08s |  engineer but I'm into cars. I grew up in the Fast and Furious era so I was into Japanese cars for a
44.08s - 49.92s |  long time and I somehow ended up buying a Cadillac ATS-V earlier this year. It was a six-speed manual
49.92s - 54.72s |  with 400 wheel horsepower and I love that thing. I fall more in love with it every single day
54.72s - 60.56s |  but I almost didn't buy it. Why? Because it came with a gauge cluster on the left. It's needles.
60.56s - 67.12s |  2016 to 2019 this car was made and GM shipped it with needles. The rest of the fleet that they had
67.12s - 71.52s |  had digital gauge clusters with the fancy stuff you see on the right but for my car they never
71.52s - 76.96s |  made it. But I bit the bullet and bought the car because it turns out people were selling
76.96s - 82.88s |  programming services to retrofit a digital gauge cluster into my car. So when I went into that
82.88s - 88.48s |  there was one dude that was like, oh pay me 350 bucks then you can do it. And this was
88.48s - 92.72s |  the only guy doing it for a long time. Then some other dude showed up from the shadows of Facebook
92.72s - 98.48s |  marketplace. It was like $250. I was like, huh? How did this guy figure it out? And then I look
98.48s - 103.84s |  a little bit further, there's another guy on the Corvette forum that put a 2021 digital gauge
103.84s - 109.68s |  cluster into his 2019 C7 Corvette. And I was like, huh? If those two people can figure it out
109.68s - 114.00s |  then I should be able to. And then there's a couple of people selling courses and weird tools
114.00s - 118.40s |  and all these sketchy websites. I don't want to pay any of these people any money. I just want
118.40s - 123.84s |  to figure it out. I didn't want to go bankrupt in the process too. So what project points actually
123.84s - 130.56s |  made this possible? So first the 12.3 inch gauge cluster I'm talking about, the fully digital one
130.56s - 136.16s |  was available in a whole bunch of Cadillac models of the same year, but with different views and
136.16s - 140.80s |  stuff like that. They just didn't ship it with my car. On top of that, the plug that was on the
140.80s - 146.00s |  back of this thing was the same thing as my car. So that was already a good indication. Then the
146.00s - 152.48s |  view that I want to see on this 12.3 inch cluster was the same thing that was available on a Cadillac
152.48s - 158.08s |  CTS Vsport, which was the same engines, 3.6 liter twin turbo with the gauges and everything. It's
158.08s - 164.08s |  got what I needed. And then turns out that between the needle gauge cluster and the 12.3 inch digital
164.08s - 169.92s |  one, the total set of configuration flags was the exact same between the two. So basically what I'm
169.92s - 174.72s |  saying is this gauge cluster could have fit my car the whole time, but GM just decided to not
174.72s - 179.84s |  ship it. So that's why this programming became a thing. And here's how I figured it out. And here's
179.84s - 187.20s |  the funny thing. I've added a counter into these slides where people sell courses and tools on how
187.20s - 192.16s |  to do this stuff. And that total ran out to over a thousand dollars just to do this one thing.
192.16s - 196.08s |  So I'll show you through these slides, how much you get to save by just listening to the
196.08s - 202.24s |  presentation. So from the beginning, let's say you're me, you have this car and you want to
202.24s - 207.12s |  retrofit this cluster into that. So the programming advertisement, they'll tell you, get any of the
207.12s - 211.52s |  12.3 inch clusters from any of the car, any of the Cadillac cars from the same year. And then
211.52s - 216.64s |  we'll program it to show the V cluster on there and what the correct red line and all this stuff.
216.64s - 223.36s |  I was like, huh, interesting. So can I retrofit this from another car? Did they make all this
223.36s - 227.12s |  custom? No, there's no way they made the graphics and stuff like that themselves.
227.12s - 234.48s |  But was there a car that had the same basically engine and stuff that could show the right view?
234.48s - 239.52s |  It was like, yeah, it was the Cadillac CTS Vsport. So I just had to get a 12.3 inch cluster,
239.52s - 245.20s |  doesn't matter from what car, show that specific car's view and then put it into my car.
246.16s - 253.12s |  So how do I make my cluster look like the one from the target vehicle? So I ended up buying a
253.12s - 260.64s |  cluster from a 2017 Escalade and I had to make it show the view for the 2017 Cadillac CTS Vsport.
261.20s - 265.92s |  So the first thing I did with this cluster was pop the back of it. If you see the middle chip
265.92s - 270.32s |  right there, the middle to the little bit to the right, there's a silver one. That's a Texas
270.48s - 275.20s |  Instruments ARM CPU. It was Linux-based basically. So I'm looking at PNG files,
275.20s - 279.36s |  whatever, all those graphics. So it's pretty straightforward, I guess, at that point.
279.36s - 284.48s |  But the next three questions I had at this point were, one, can this cluster connect to my car?
284.48s - 288.80s |  Two, are the right files on there? Do I have to somehow patch them to get the right
289.44s - 293.60s |  gauge cluster to show up? And three, how do I configure the cluster to work with my car,
293.60s - 300.72s |  with my specific feature set and stuff? So those three questions actually relate to the
300.72s - 307.92s |  three steps of CAN bus module programming in GM. First, you have to configure authentication,
307.92s - 313.04s |  then programming for the general purpose firmware, software, whatever, and the setup
313.04s - 321.92s |  and configuration to set the config flags according to what your car has. So the first thing,
321.92s - 326.32s |  can I just plug and play this cluster? No. The first thing that you have to do is actually make
326.32s - 330.64s |  sure that the cluster can authenticate with the rest of the CAN bus. And it does that with two
330.64s - 335.28s |  specific pieces of information, which is the VIN number and the security pin, which is derived from
335.28s - 341.20s |  the VIN number. So all I had to do was program those onto the cluster. But how do you do that?
341.20s - 345.76s |  I looked in the back of the thing. And if anyone in here has ever touched a gauge cluster before,
345.76s - 350.64s |  usually this kind of information is stored on an EEPROM chip. So I already had one of the best
350.64s - 356.64s |  things, I think, in this market is a CH341A EEPROM programmer, which is like $5 on AliExpress.
356.64s - 362.24s |  And it turns out that the chip that was holding this was an I2C24C16. People were selling this
362.24s - 368.24s |  a tool that can do this programming for $100. I figured it out for $5 and I read the chip.
368.24s - 372.16s |  So what I did was I read it immediately. I didn't even have to repin it. Just read the chip,
372.16s - 378.72s |  dumped it. And it turns out that in plain text, the first 17 digits was the VIN number. And there's
378.80s - 383.36s |  a auspicious four digits right under, which is the security pin. All I did was set those to my
383.36s - 390.80s |  values for my car and immediately it worked. The first thing this picture shows is that
390.80s - 394.48s |  the cluster works with my car. It's pulling values and stuff, but it's just not showing
394.48s - 400.00s |  the right thing. And I know this worked because you could see that the mileage for the vehicle
400.00s - 405.52s |  actually showed up there. In GM, the mileage for the car is actually not stored in the gauge cluster
405.52s - 410.72s |  like other cars. It's actually stored in the body control module. And if your module face
410.72s - 415.28s |  will authenticate with that module because of the mismatch of the VIN and pin, then that mileage
415.28s - 421.60s |  will actually show up as dash, dash, dash. So I know I got this right because I got the odometer
421.60s - 426.40s |  to show up actually. So cool. I got it to connect to the car. Now, how do I make sure the right
426.40s - 430.72s |  files and the graphics are on there? So now I'll talk a little bit about how GM programming
430.72s - 436.00s |  actually works with the dealer software called SPS2. I don't exactly remember what the acronym
436.00s - 440.48s |  means, but that's basically the dealer software like any other car. You get that, you get a
440.48s - 446.56s |  subscription with the VIN number for your car, $45 for two years, not expensive. Then you get
446.56s - 452.08s |  the dealer cable, $186, not a big deal either. So the programming step, what this does is that
452.08s - 458.64s |  it loads the firmware, all the software, whatever it needs just to run the general purpose of this
458.64s - 465.12s |  module. So there's even a step before this, because in the world of GM programming, people
465.12s - 470.32s |  can actually check what files are going to be loaded by the software into the modules before,
470.32s - 475.12s |  ahead of time. And surprisingly, there was a light version of this running on the internet,
475.12s - 480.64s |  open to the public, which is called, which is hosted by Opal. Turns out that GM has been selling
480.64s - 484.96s |  their Canva system to a whole bunch of other manufacturers. One of them being Opal, Skoda,
484.96s - 490.08s |  I think. And then I think a Chinese manufacturer, I don't remember. But it turns out I used this
490.08s - 495.92s |  website just to check what programming files are going to be loaded into this module. And I did
495.92s - 501.76s |  that by taking the VIN number from my donor Escalade cluster. I took the VIN number from a
501.76s - 509.28s |  target car, which is the Cadillac CTS-V Sport. And I just ran the programming steps to just see
511.20s - 514.32s |  what VIN number was going to come out. These numbers are actually called calibration numbers.
515.20s - 520.32s |  It's a unique identifier in the GM world where they say this has this specific set of files in it.
520.32s - 525.44s |  That turns out though, that the number is the exact same in both of these cars. That means that
525.44s - 531.28s |  my Escalade cluster already had the views that I needed for a CTS-V, which is a sports car. It
531.28s - 536.56s |  was already on all these cars. I just had to be able to reveal it. And how do I do that?
536.56s - 542.88s |  That gets to step number three, the setup and configuration of GM programming. So now I have
542.88s - 547.92s |  to actually get set the configuration values according to what I need. So a couple of slides
547.92s - 553.92s |  here. This is actually some screen caps from when you actually go to get SPS-2 from ACDelco. You go
553.92s - 559.20s |  to this website here, you sign up for your VIN number, you download the thing. It's a Java-based
559.92s - 565.20s |  program. And you go into here, then you see right there, instrument cluster. You go to set up a
565.20s - 572.00s |  configuration, just run that. And it does a two-step process where it pulls the files from the
572.00s - 579.20s |  GM servers, stores it on your computer, and then programs it against your car. And turns out that
579.20s - 585.52s |  they dump all these files to your local C drive. So a couple of bonus slides here where you can
585.52s - 594.00s |  save some money. $450. This one was $450, which is ridiculous. This is how to grab any BIN file
594.00s - 600.00s |  or config files from SPS-2 for any vehicle. All you have to do is buy the VIN number for the car
600.00s - 604.72s |  that you don't have in front of you. And then you just have to connect to your car, even though it
604.72s - 609.68s |  doesn't have the right VIN number. And then just download and then run the programming for whatever
609.68s - 614.48s |  you need for whatever module. It'll save the files to your computer. And then as soon as it's done
614.48s - 619.04s |  downloading, yank the cable from your car. That's it. That's all I did to pull out these files from
619.04s - 624.96s |  the car. And the thing is, people were advertising emulators online for this. This would have costed
624.96s - 630.48s |  $450 just to do this when there was an override button right in front of you with a screen cap.
631.44s - 636.56s |  And also those emulators get you banned from the GM servers. So instead of paying $450,
636.56s - 643.04s |  you press an override button, which is ridiculous. Then another bonus slide, how to grab the security
643.04s - 650.08s |  pin for a VIN number from a car for a VIN number from GM. So what you do here is that you actually
650.08s - 655.36s |  run a dummy configuration that's just kind of safe because it only sets configuration flags in
655.36s - 661.44s |  your module. All I did was run that with a vehicle that I don't own. Well, I don't have access to it
661.44s - 666.00s |  really. And then just running against my car, it'll just fail to authenticate with the module
666.00s - 670.00s |  inside the car. So then it'll just bomb out, doesn't do anything. And then you go check
670.00s - 675.84s |  inside the C drive over here. And there's a file right here called SPS tool bridge, tool bridge
675.92s - 680.24s |  log, right? There's the VIN number that I was attempted and the security pin that was right
680.24s - 686.00s |  there. So right then and there, you get it for free. Well, almost for free. There's also VIN
686.00s - 690.16s |  to pin services that you could buy online for $50 from some random website, or you can get it from
690.16s - 697.68s |  GM directly using this method. Now, before I can explain what I did for the configuration flags,
697.68s - 704.32s |  I have to explain two things, what a build code and RPO code is. So in those local files I was
704.32s - 709.84s |  talking about earlier, there's a build code, a build record at BLD, which has your VIN number,
709.84s - 714.64s |  chassis code, and then a bunch of things called RPO codes. These are build codes or like option
714.64s - 719.04s |  codes for stuffing your car. Like, oh, if you have a digital cluster or this fancy suspension,
719.04s - 724.32s |  whatever, then there's an S3 file right there where ACDelco publishes every single RPO code
724.32s - 728.56s |  that they've ever made for GM. And you can just look it up there. And the next file that was
728.56s - 735.04s |  inside the C drive was an XML file that says something quite interesting. It turns out it is
735.04s - 743.04s |  a logical mapping of P underscore whatever flag that says, set this flag to this value based on
743.04s - 749.28s |  the existence of this RPO code and this chassis code in the car. So I look through this and I
749.28s - 756.80s |  knew that I wanted to get the gauge cluster from a CTS Vsport, which has the chassis code of 6AL69
756.80s - 764.24s |  right there and the engine code. And turns out that right here, PDDH variant gets set to the
764.24s - 773.36s |  value of 6 to get the V fancy graphic out. So all I did was edit this file to include my car,
773.36s - 780.88s |  which is a 6AE47 chassis code with an engine code of LF4. I left the UDV in there and then edited my
780.88s - 786.08s |  build record to have a UDV, which is for the 12.3 inch cluster. UDD is for the needle one,
786.08s - 790.00s |  whatever. I just changed it just so that everything that all the flights that get
790.00s - 795.52s |  enabled by this XML file will be for my car. So it fully works. And then as soon as I did that,
795.52s - 801.04s |  saw this, ran to my car. Oh yeah, by the way, this would have cost an extra $350. We're at $950
801.04s - 806.88s |  right now already. Ran to my car. Press the configuration file or press the configuration
806.88s - 811.92s |  function. Turns out that also the cache files on here are not checksum. You could just edit the
811.92s - 818.48s |  files and GM will just detect the existence of the files, not even check anything else. You click,
818.48s - 822.40s |  it'll just run with the files on your disk and then that's it. So I managed to click programs
822.40s - 827.12s |  to this thing for free without paying anyone anything, which is fucking awesome. So tying
827.12s - 831.20s |  this all together, high level process. There's a list of requirements right here. I'm not going
831.20s - 837.36s |  to read this all out to you guys. High level programming steps. It's just setting up your
837.36s - 842.64s |  windows laptop, then running a cluster configuration with your OEM cluster just to
842.64s - 849.36s |  get the RPO codes and the XML files out. Then you edit the EEPROM on the cluster, which I explained
849.36s - 853.92s |  earlier, then also edit the cache files locally and then just run the configuration again. And
853.92s - 861.92s |  that's it. So the future of GM programming in open source. I posted this right away on GitHub
861.92s - 865.68s |  and I posted it right away in the Cadillac forum. So a few people actually got to use this and fix
865.68s - 871.12s |  their own problems, which was really nice. But the crazy thing is I don't understand how I had
871.12s - 875.44s |  to spend a thousand dollars just to figure this out. And thank God I did not pay any of that money
875.44s - 880.72s |  because for how complicated this process was, it really wasn't that complicated. Most of this stuff
880.72s - 886.72s |  was just open to the public, open on your laptop, open on the internet. It didn't really make sense.
886.72s - 893.44s |  So I hope that with this, that more people get into modifying their GM cars to do cool stuff
893.44s - 898.80s |  like this without having to pay $350 and stuff like that to do this stuff. So I really hope that
898.80s - 904.72s |  this helps maybe a couple of people. A big shout out to the DEF CON conference and the Car Hacking
904.72s - 909.76s |  Village for selecting my talk. This is actually my first DEF CON ever. So being up on the stage
909.76s - 913.36s |  is crazy. So thank you guys so much. And yeah.