{
  "webpage_url": "local:1731783156:232a40a1:DEF CON 32 - Bug Bounty Village - Leveraging AI for Smarter Bug Bounties - Diego Jurado  Joel Niemand Sec Noguera.mp4",
  "title": "DEF CON 32 - Bug Bounty Village - Leveraging AI for Smarter Bug Bounties - Diego Jurado  Joel Niemand Sec Noguera.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 2.48s | This text was transcribed using whisper model: large-v2

 So welcome, everyone, to our talk,
2.48s - 4.88s |  Leveraging AI for Smarter Bug Bounties.
4.88s - 7.60s |  First of all, thank you to DEF CON and the Bug Bounty
7.60s - 10.84s |  Village for giving us this space to discuss
10.84s - 15.16s |  how AIs can improve and change the security field
15.16s - 17.36s |  and the bug bounty space.
17.36s - 21.28s |  We're going to be discussing how AIs can improve our daily job
21.28s - 23.48s |  and help us work on what we want,
23.48s - 27.92s |  and also let the AI take care of other stuff.
27.92s - 29.80s |  So his name is Diego Jurado.
29.80s - 31.44s |  I'm Joel Noguera.
31.44s - 34.28s |  We are both security researchers at Expo.
34.28s - 36.16s |  For those that doesn't know us, we
36.16s - 40.64s |  have been quite a while in the bug bounty scene.
40.64s - 43.04s |  And apart from that, we have been also
43.04s - 46.40s |  working for several years in some
46.40s - 49.04s |  of well-known companies in the security industry
49.04s - 53.57s |  as security researchers and testers.
53.57s - 56.81s |  So let's start from the very beginning.
56.81s - 60.17s |  When we started this three months ago,
60.17s - 63.77s |  we started looking that there may, in the recent years,
63.77s - 67.09s |  we have seen a lot of research being published
67.09s - 69.17s |  about people hacking AIs, right?
69.17s - 72.25s |  Like people doing research about publishing
72.25s - 75.81s |  how to force the AI to do unexpected things,
75.81s - 77.93s |  to leak information, et cetera.
77.93s - 80.17s |  However, there is one particular realm
80.17s - 82.61s |  that remains unclear regarding AIs,
82.61s - 86.77s |  and is how AIs could be used in a more offensive way.
86.77s - 90.05s |  In other words, would be the AI hacking for us,
90.05s - 94.01s |  and taking care of some stuff that we could do.
94.01s - 97.65s |  So we have been just, we started three months ago.
97.65s - 100.37s |  And we don't know where the limit is for this technology.
100.37s - 104.01s |  But we wanted to show you one quick example of the things
104.01s - 108.63s |  that an AI agent could do on our field.
108.63s - 111.19s |  So first of all, we are going to be
111.19s - 113.19s |  talking about different questions, interesting
113.19s - 116.91s |  questions that we have been encounter
116.91s - 118.87s |  while doing this journey.
118.87s - 120.75s |  And this is one of the first one.
120.79s - 123.67s |  And it's how can AIs mimic human bounty hunters?
123.67s - 126.79s |  But in order to understand what a bounty hunter,
126.79s - 128.79s |  what human bounty hunter means,
128.79s - 131.79s |  we need to first understand what it is, right, for us.
131.79s - 135.07s |  So human have several skills and capabilities
135.07s - 137.27s |  that we hardly seen on the tools
137.27s - 139.71s |  that we use in our daily job.
139.71s - 143.55s |  And some of them are intuition, creativity,
143.55s - 145.71s |  decision making based on the experience
145.71s - 147.35s |  that we have collected before.
147.35s - 150.67s |  For example, if we learn something doing bounties,
150.67s - 152.75s |  this is something that we are going to apply in the future
152.75s - 156.19s |  to keep improving and getting better results.
156.19s - 159.87s |  So let's try to answer this question with a demo.
159.87s - 164.83s |  In this case, we are going to see our agent exploiting
164.83s - 170.03s |  a JWT Python implementation for this particular CVE.
170.03s - 172.23s |  During the video, you are going to see
172.23s - 174.99s |  the AI interacting with the web application,
174.99s - 178.71s |  performing executing commands, processing the outputs,
178.71s - 181.75s |  taking decisions, and creating goals and learnings
181.75s - 184.67s |  based on what it sees and learns during the process.
184.67s - 188.03s |  All what it takes for this is just a small description or goal
188.03s - 194.18s |  and the target that we want to test.
194.18s - 196.66s |  So I'm going to pause a little bit here
196.66s - 198.78s |  just to show you a little bit the interface
198.78s - 201.46s |  because it's the first time you are seeing this.
201.46s - 205.06s |  So on the first part, you're going to see
205.06s - 207.42s |  what we give to the AI,
207.42s - 210.78s |  just that we want to exploit that CVE and the target.
210.78s - 214.02s |  Then you can see the things that the AI is processing,
214.02s - 218.26s |  analyzing the decisions and learning that it's taking.
218.26s - 221.66s |  Then you can see the commands and the output
221.66s - 224.10s |  and the goals that the AI is generating all by itself.
224.10s - 227.14s |  We have no influence on that.
227.14s - 230.18s |  So first of all, we start with the basic recon
230.18s - 232.46s |  and recognize that there is a register endpoint.
232.46s - 236.38s |  So it decides to attempt to register a user.
236.38s - 239.78s |  And in this case, it tries to use a content type JSON,
239.78s - 242.18s |  which is grown and expected for the website.
242.18s - 244.50s |  So learns that based on the response
244.50s - 247.90s |  and decides to change that to use the correct content type.
247.90s - 249.94s |  In this case, we're testing a new user.
249.94s - 250.86s |  And here on the bottom,
250.86s - 254.82s |  you can see that the agent is logging in
254.82s - 257.70s |  and saving the cookies on a cookie jar
257.70s - 262.03s |  to use it later during the whole thing.
262.03s - 264.03s |  Once login, it detects on the response
264.03s - 266.31s |  that it has a JWT token.
266.31s - 270.23s |  So immediately binds this to the goal that we have provided
270.23s - 271.83s |  and decides to go to the internet
271.83s - 275.03s |  to look for some public information and public exploits.
275.03s - 276.31s |  Try NIST and GitHub,
276.31s - 278.91s |  and in GitHub, it finds one match
278.91s - 280.95s |  that is a possible proof of concept.
280.95s - 283.43s |  So it decides to download the proof of concept
284.39s - 287.71s |  and you can see that it's going to expose,
287.71s - 289.75s |  no, it's going to cut the readme file.
289.75s - 291.19s |  This is something that we always do, right?
291.19s - 293.59s |  We want to understand how this exploit works
293.59s - 296.43s |  and we need to learn how to use it.
296.43s - 298.35s |  So it's going to try to grab the token
298.91s - 301.27s |  and run the exploit, but it makes a mistake.
301.27s - 303.19s |  It's running in an incorrect path.
303.19s - 304.19s |  Who hasn't been there, right?
304.19s - 306.87s |  Like running an incorrect path for an exploit.
306.87s - 309.43s |  So now that it learns, we define where it is,
309.43s - 311.19s |  it runs again everything
311.19s - 313.51s |  and it finds that there is one missing dependency.
313.51s - 316.11s |  So it goes ahead and installs the dependency
316.11s - 318.11s |  and run again the exploit,
318.11s - 320.83s |  changing the claim username to admin.
320.83s - 323.99s |  This is a small detail that we're going to talk later.
323.99s - 326.15s |  Then it start trying to,
326.15s - 328.31s |  the different payloads that it's getting from the exploit
329.15s - 329.99s |  against the whole application,
329.99s - 332.27s |  changing from logging to registration
332.27s - 335.03s |  to see where this exploit works or not.
335.03s - 337.55s |  And at some point this work on the root page.
337.55s - 341.23s |  So the AI realizes that this has been logged
341.23s - 344.15s |  as the admin user and successfully retrieved the flag
344.15s - 349.96s |  from the challenge that we have proposed.
349.96s - 356.56s |  So, thank you.
356.56s - 358.24s |  So during this video,
358.24s - 361.08s |  we have seen some of the things that we mentioned before
361.08s - 364.56s |  about humans and tools that we use every day.
364.56s - 366.16s |  We have seen some creativity,
366.16s - 367.32s |  learning from mistakes,
367.32s - 369.72s |  like identifying the incorrect path
369.72s - 374.72s |  and taking a decision to decide where to execute the exploit.
375.00s - 376.16s |  But most important,
376.16s - 378.16s |  we have seen the capability of the AI
378.16s - 380.40s |  to adapt into different situations.
380.40s - 383.28s |  We have seen the AI registering a user,
383.28s - 384.68s |  changing the content type to adapt
384.68s - 386.36s |  to what the application expects,
386.36s - 389.32s |  using the credentials that just created,
389.32s - 392.88s |  and then interacting with authenticating endpoints
392.88s - 395.52s |  based on all the things that have learned.
395.52s - 398.60s |  And something that really is interesting is,
398.60s - 400.04s |  for example, things that we do
400.04s - 402.76s |  like cutting the README for an exploit,
402.76s - 405.20s |  reading the Python code to understand how it works.
405.20s - 407.40s |  There are probably simple things for us,
407.40s - 408.64s |  but when we talk about something
408.64s - 410.64s |  that is going on all by itself
410.64s - 411.96s |  and it's reading the code
411.96s - 414.20s |  and understanding the input, the output,
414.20s - 415.96s |  and also the claims that we need to modify
415.96s - 420.12s |  from the JWT token, it's super interesting.
420.12s - 422.76s |  And most interesting probably is that
423.64s - 424.48s |  if you are familiar with DCP,
424.48s - 426.44s |  there is no Nuclei template for this.
426.44s - 427.56s |  And if you wonder why,
427.56s - 430.00s |  it's probably because you first need a valid token,
430.00s - 432.84s |  which would mean you have to register, sign in,
432.84s - 434.04s |  and retrieve that token.
434.04s - 435.68s |  Automating, automatizing that
435.68s - 438.32s |  for every existing application on the internet
438.32s - 439.88s |  will be quite a challenge.
439.88s - 442.08s |  In this case, the AI take care of all that
442.08s - 444.24s |  and make progress on that goal.
445.72s - 448.56s |  So in order to understand how we got here,
448.56s - 450.16s |  we have to first understand
450.16s - 452.56s |  where we were three months ago when we started.
453.68s - 456.72s |  We start looking for different papers,
456.72s - 459.68s |  white papers that were trying to use agents
459.68s - 461.60s |  as in a more offensive way.
461.60s - 464.28s |  We find a few of them, not many,
464.28s - 466.48s |  but when we start looking at the results,
466.48s - 471.48s |  we, oh sorry, and they all have different approaches.
471.64s - 474.08s |  One super common was the human in the loop,
474.08s - 477.48s |  that is the human providing real-time feedback to the AI
477.48s - 479.12s |  in order to improve the results.
479.12s - 481.04s |  Other have full automated agents,
481.04s - 482.08s |  like the one you are seeing.
482.08s - 484.88s |  Other have super specific agents
484.88s - 489.04s |  where they were in charge of different tasks.
489.04s - 491.76s |  And some of them were trying to explain non-vulnerabilities
491.76s - 496.02s |  or other type of CTF challenges.
496.02s - 497.50s |  When we start looking at the results,
497.50s - 499.10s |  for example, for this paper,
499.10s - 501.62s |  actually one of the authors of this paper,
501.62s - 504.74s |  Brendan Dolan-Gavitt is one of our colleagues at Expo.
505.86s - 508.94s |  On this paper, they were trying to use LM agents
508.94s - 510.66s |  to solve CTF challenges.
510.66s - 512.38s |  If you see in the categories,
512.38s - 514.98s |  they attempt to work with all of them,
514.98s - 517.26s |  but they probably, if we pay attention to the web one,
517.26s - 519.62s |  which is the probably most interesting
519.62s - 521.74s |  for us as bounty hunters,
521.74s - 524.06s |  the results are not that promising, right?
524.06s - 526.66s |  It's 16% just for one model.
526.66s - 531.02s |  So we keep digging into the different papers
531.02s - 535.50s |  and we found another one that had more promising results.
535.50s - 538.70s |  In this case, they were trying to use LM agents
539.46s - 541.22s |  to exploit one-day vulnerabilities.
541.22s - 543.98s |  And when we look there, we see an 87%
543.98s - 546.46s |  and that's quite exciting and promising.
546.46s - 551.14s |  But when we start reading the results and the details,
551.14s - 553.46s |  we see that if you remove the CV description
553.46s - 555.14s |  that you provide to the model,
555.14s - 558.38s |  that 87% drops dramatically to a 7%.
558.38s - 564.26s |  So again, the results weren't that promising in this case.
564.26s - 567.02s |  So as a conclusion from the state of art,
567.02s - 568.86s |  the results weren't good at all
568.86s - 570.66s |  for models at three months ago.
571.50s - 573.94s |  All the cases weren't complex enough.
573.94s - 576.18s |  For example, they were based on particular cases
576.18s - 578.70s |  like the exploit being just one, two lines,
578.70s - 582.98s |  or just requiring two requests to forcibly exploit it.
582.98s - 585.50s |  And something that they have in common
585.50s - 587.26s |  is that they were all limited.
587.26s - 590.58s |  For example, this last paper only have 15 CVs
590.58s - 591.58s |  on their paper.
591.58s - 595.14s |  So when you try to scale this to the real world,
595.14s - 598.38s |  you don't know how this is going to be expanded, right?
598.90s - 604.15s |  So we wanted to change things and scale things up.
604.15s - 605.39s |  Okay.
605.39s - 609.43s |  So now let's talk about the approach that we had at Expo.
609.43s - 612.43s |  As Joel was saying, we wanted to scale things up.
612.43s - 614.19s |  So the first thing that we did
614.19s - 616.83s |  was starting collecting thousands of benchmarks
616.83s - 619.51s |  from different CTF competitions.
620.63s - 622.99s |  We also partnered with some companies that you may know,
622.99s - 624.79s |  like Postfigure and Pendester Labs.
624.79s - 627.15s |  So they provided to us all the exercises
627.15s - 628.51s |  that they have online,
628.51s - 630.71s |  and we added to our benchmarks.
631.55s - 634.27s |  Also, we wanted to collect the most interesting
634.27s - 636.75s |  and realistic challenges that we can find.
636.75s - 639.51s |  And of course, with a great focus in web applications.
641.03s - 641.87s |  Also, apart from that,
641.87s - 644.87s |  we had to categorize all the challenges
644.87s - 648.59s |  depending on the level of difficulty from easy to hard.
648.59s - 651.59s |  And we also, something that was really important for us,
651.59s - 653.83s |  we created a fully autonomous agent,
653.83s - 656.91s |  which is connected to an attack machine.
656.91s - 659.23s |  And this attack machine not only contains
659.23s - 660.75s |  a lot of pen testing tools,
660.75s - 663.19s |  but we also added some tools that we use
663.19s - 665.35s |  on our daily basis for bug bounty,
665.35s - 667.47s |  as we have a lot of experience using them.
668.63s - 670.47s |  And apart from that,
670.47s - 672.83s |  one thing that is also very important,
672.83s - 676.27s |  we wanted to analyze the performance of our solvers.
676.27s - 678.43s |  So for that, we created an exclusive set
678.43s - 681.43s |  of more than 100 novel benchmarks.
681.43s - 684.19s |  These benchmarks are used for validation.
684.19s - 686.47s |  And as we are completely sure that the solution
686.51s - 689.15s |  is not part of any training data set,
690.07s - 695.78s |  we can also evaluate how the AI is performing.
695.78s - 696.90s |  And here are the results
696.90s - 699.70s |  that we got after three months of work.
699.70s - 700.54s |  As you can see,
700.54s - 703.70s |  Expo was able to solve 75% of the challenges
703.70s - 705.58s |  from Perseverance Labs,
705.58s - 708.62s |  72 of the challenges from Pen Tester Lab,
708.62s - 710.86s |  and all of that without any human interaction.
710.86s - 713.38s |  So all the exercises that we were able to solve
713.38s - 715.90s |  were completely solved by the AI.
716.78s - 718.70s |  Also something really important,
718.70s - 721.62s |  talking again about the novel benchmarks,
721.62s - 724.30s |  we were able to solve 85% of those.
724.30s - 726.30s |  We tried to create these challenges
726.30s - 728.34s |  as more representative as possible.
728.34s - 729.70s |  And now we are going to see
729.70s - 733.81s |  how these challenges were created.
733.81s - 735.93s |  So here you have a tree map
735.93s - 738.21s |  with a distribution of some vulnerabilities
738.21s - 741.17s |  that we added to our benchmarks.
741.17s - 742.01s |  As you can see,
742.01s - 744.77s |  we tried to be as more realistic as possible,
744.77s - 746.25s |  trying to follow a distribution
746.25s - 748.33s |  similar to what we see in bug bounties.
750.05s - 751.17s |  So you can see here
751.17s - 753.81s |  we have cross-site scripting and IDORS,
753.81s - 756.81s |  which probably are one of the most common issues
756.81s - 758.21s |  and vulnerabilities that we see
758.21s - 759.29s |  when doing bug bounties
759.29s - 761.21s |  and especially in life hacking events.
761.21s - 762.69s |  But we also have some vulnerabilities
762.69s - 764.81s |  like server-side rigorous forgery,
764.81s - 766.13s |  common injections,
766.13s - 767.53s |  privileged escalation,
767.53s - 768.57s |  and also some CVEs.
768.57s - 771.41s |  So we tried to follow a very good distribution
771.41s - 772.57s |  to cover all the areas
772.57s - 774.89s |  and all the vulnerability types.
775.17s - 777.69s |  Also, just in case someone is interested,
777.69s - 780.33s |  we are going to share all the benchmarks that we have.
780.33s - 783.01s |  So we are planning to publish them in a few weeks,
783.01s - 785.17s |  just in case you want to test them
785.17s - 787.73s |  against your own agents.
787.73s - 790.85s |  So just keep an eye to all the social media and website
790.85s - 794.74s |  as we will be sharing those over there.
794.74s - 796.90s |  And here we have some statistics
796.90s - 800.70s |  about the success rate that we have
800.70s - 802.26s |  depending on the category.
802.26s - 804.10s |  We tried to follow a similar category
804.10s - 805.78s |  to what we have in OWASP,
805.78s - 807.66s |  which is a reference for all of us
807.66s - 810.54s |  that we are doing web pentesting.
810.54s - 811.98s |  And as you can see here,
811.98s - 813.38s |  for some kind of categories,
813.38s - 816.50s |  the AI was performing better than others.
816.50s - 817.46s |  So let's say for example,
817.46s - 818.82s |  for broken authentication,
818.82s - 821.22s |  we can see that OAuth and SAML
821.22s - 824.10s |  were performing not that well than in other examples.
824.10s - 825.94s |  This is something that we will be talking later,
825.94s - 830.02s |  but we are trying to increase this success rate.
830.02s - 830.86s |  But for example,
830.86s - 831.94s |  for broken authentication,
831.94s - 834.06s |  we have a very good success.
834.06s - 837.50s |  And again, we are failing in CCRF tokens,
837.50s - 839.74s |  in CCRF issues.
840.62s - 843.22s |  And we have some examples of injection vulnerabilities,
843.22s - 844.98s |  which of course you all may know.
844.98s - 847.58s |  Again, we are failing in dumb XSS.
847.58s - 849.06s |  This is basically because at the beginning
849.06s - 851.50s |  when we started doing our agent,
851.50s - 853.54s |  we were missing like an embedded browser.
853.54s - 857.10s |  So the agent was not able to exploit some issues
857.10s - 859.62s |  that requires exploiting something in the browser
859.62s - 860.46s |  or in client side.
860.46s - 862.38s |  So this is something that we have improved now.
862.42s - 864.82s |  And I think we will be talking later about this.
866.22s - 868.30s |  And then finally, some misconfiguration issues
868.30s - 871.94s |  that as you can see here in the cache poisoning in course,
871.94s - 873.94s |  is something that we still need to improve.
873.94s - 875.66s |  I was really impressed about the blind XSS
875.66s - 877.94s |  because it's not something really easy
877.94s - 881.26s |  and we had like a very success rate.
881.26s - 883.98s |  And then talking about the success versus difficulty,
884.86s - 887.10s |  we can see that we perform really well
887.10s - 889.50s |  for easy and medium vulnerabilities.
889.50s - 893.18s |  We have almost 90% from all the benchmarks
893.18s - 894.30s |  that we are talking now.
894.30s - 897.22s |  Just to clarify, these statistics
897.22s - 899.30s |  belongs to Porzweiger, Pentester Lab
899.30s - 902.18s |  and our own validation challenges.
902.18s - 903.58s |  We also have some other benchmarks
903.58s - 905.70s |  that we use for training and that all,
905.70s - 908.18s |  but here we are only including those three
908.18s - 909.50s |  that we were talking before.
909.50s - 912.62s |  And then for hard vulnerabilities,
912.62s - 914.94s |  we can see that we have 40%.
914.94s - 917.74s |  So yeah, of course we are going to try to improve that.
918.74s - 921.66s |  And now here you can see some examples
921.66s - 926.30s |  about some vulnerability types that you can see there.
926.30s - 928.66s |  And we have one question for all of you.
928.66s - 931.22s |  So for those examples that you can see here,
932.18s - 934.86s |  I would like to ask you if you think that there is any case
934.86s - 937.26s |  that the AI was not able to solve.
937.26s - 941.58s |  So somebody has any idea, any number?
943.18s - 944.66s |  I will give you some seconds
944.66s - 946.66s |  so that you can read all of them.
948.50s - 949.70s |  Which one?
949.70s - 950.90s |  Seven?
950.90s - 951.74s |  Okay, yeah.
951.74s - 955.58s |  So this was a tricky question because in the end,
955.58s - 957.42s |  the AI was able to solve all of them.
959.74s - 961.82s |  You can see that in our website,
961.82s - 963.90s |  we have already shared some of those examples.
963.90s - 967.54s |  For example, the Node.js one, the first one, the IDLE.
967.54s - 969.74s |  But now we don't have time to see all of them,
969.74s - 972.82s |  but we want to show you three of them.
972.82s - 976.90s |  So we are going to start with the reflected XSS.
976.90s - 979.34s |  So for the people that like exploiting this issue,
979.34s - 980.90s |  you will like this example.
982.18s - 985.10s |  In this example, the goal is to exploit an XSS.
986.10s - 989.54s |  We have some sort of several filtering in place.
989.54s - 991.70s |  So you will see the AI trying to train
991.70s - 993.06s |  some default payloads.
993.06s - 994.74s |  Then you will see that it tries to use
994.74s - 996.54s |  some kind of encodings.
996.54s - 1000.06s |  And finally, after realizing how is the way to exploit it,
1000.06s - 1004.30s |  he managed to exploit it using HTML entity encoding.
1004.30s - 1006.54s |  So let's go to the example.
1007.34s - 1010.14s |  Yeah, let me update this.
1010.14s - 1014.46s |  Okay, so here you have an example of our agent working.
1014.46s - 1016.02s |  So this is basically how it looks
1016.02s - 1020.54s |  when we try to provide a challenge with a description
1020.54s - 1023.42s |  and we just say, okay, go ahead and hack it.
1023.42s - 1027.54s |  So let's go up to see to the very beginning what we have.
1027.54s - 1030.18s |  As Joel was mentioning before,
1030.18s - 1031.66s |  we have the description of the challenge.
1031.66s - 1033.78s |  In this case, we are only providing the goal
1033.78s - 1038.18s |  to execute an XSS with the string XSS in capital letters.
1038.18s - 1040.02s |  And we have also information about the target
1040.02s - 1041.78s |  that we want to exploit.
1041.78s - 1043.90s |  So if we go a bit down,
1043.90s - 1046.50s |  you can see that first it starts accessing
1046.50s - 1048.10s |  to the web application.
1048.10s - 1051.54s |  It finds an endpoint, which is XSS 20,
1051.54s - 1053.86s |  and then realizes that there is a potential
1053.86s - 1054.94s |  vulnerable parameter.
1054.94s - 1058.78s |  So now it starts trying with a typical payload
1058.78s - 1060.90s |  and it realizes that it fails
1060.90s - 1062.90s |  because it's getting a four or five error.
1062.90s - 1066.38s |  This is because it's trying to perform a POST request.
1066.38s - 1068.82s |  If we go a bit up to the previous output,
1068.82s - 1071.82s |  you can see that there is a form which has no action.
1071.82s - 1075.50s |  So first it will try it with a POST request
1075.50s - 1077.50s |  and then realizes that it's doing bad
1077.50s - 1080.46s |  and change to GET and tries again with the same payload.
1081.42s - 1083.18s |  So if we go a bit down,
1083.18s - 1085.26s |  we can see that the first thing that the AI does
1085.26s - 1087.26s |  is identify that there is one character
1087.26s - 1088.46s |  which is being blocked.
1088.46s - 1090.46s |  So this is something really important,
1090.46s - 1092.90s |  especially when we want to phase,
1092.90s - 1094.90s |  for example, by passing a WAF or something like that.
1094.90s - 1096.94s |  We want to know what characters have been filtered.
1096.94s - 1099.90s |  So this is something that the agent is realizing by itself
1099.90s - 1101.74s |  and it's really interesting.
1101.74s - 1104.42s |  Then here is something that is really important.
1104.42s - 1109.42s |  It fails while trying to craft a request within a space.
1109.42s - 1112.34s |  So it realizes that the current request is bad form.
1112.34s - 1114.94s |  So then changes, tries to encode the payload
1114.94s - 1117.26s |  and tries again, which is something that maybe
1117.62s - 1121.38s |  we can see when we are trying to do a bounty.
1121.38s - 1124.82s |  And then let's see, let's go a bit down.
1124.82s - 1128.26s |  Here you can see that after trying a couple of payloads,
1128.26s - 1130.86s |  it realizes that it's not able to find a good solution.
1130.86s - 1133.26s |  So it tries to change from context.
1133.26s - 1136.14s |  At this point, tries to analyze again the application,
1136.14s - 1138.58s |  but then it sees that there is nothing interesting
1138.58s - 1139.46s |  apart from that.
1139.46s - 1143.22s |  So again, gets the initial goal to exploit the XSS
1143.22s - 1146.38s |  and goes again to try and exploit with different payloads.
1147.30s - 1151.78s |  Again, if we go a bit down, we can see that again,
1151.78s - 1155.18s |  changes from the initial goal and start trying to see
1155.18s - 1157.02s |  if it can fuzz the application,
1157.02s - 1159.34s |  trying to do some brute force and trying to see
1159.34s - 1161.34s |  if it can find any additional endpoint
1161.34s - 1162.58s |  that might be vulnerable.
1163.46s - 1166.50s |  Again, it says, okay, this is not the way to go.
1166.50s - 1168.98s |  So start again with another payloads.
1168.98s - 1171.14s |  And there's one point when it realizes
1171.14s - 1173.94s |  that he's able to bypass the filters
1173.94s - 1175.94s |  by using HTML entity encoding
1175.94s - 1178.30s |  with JavaScript string manipulation.
1178.30s - 1180.62s |  And then after a few attempts,
1180.62s - 1183.26s |  it managed to get a payload that is working.
1183.26s - 1185.82s |  You can see all the encoded output.
1185.82s - 1189.22s |  And if we go to the response, we can see the alert
1189.22s - 1192.50s |  and the flag of the challenge who has been retrieved.
1193.98s - 1198.01s |  So yeah, that was our first example.
1198.01s - 1202.80s |  Thank you.
1202.80s - 1204.16s |  If we go to the next one,
1204.16s - 1208.00s |  here we have an image uploader vulnerability.
1208.00s - 1209.40s |  We know that we have some extensions
1209.40s - 1211.80s |  that are being filtered by the application.
1211.80s - 1214.60s |  So one thing that is really interesting in this example
1214.60s - 1217.92s |  is that Expo has to deal with some CSRF token
1217.92s - 1218.76s |  and session cookies.
1218.76s - 1220.60s |  You will see that it struggles with that
1220.60s - 1223.44s |  because it's something that we have to do manually.
1223.44s - 1226.32s |  So after that, he managed to login in the application,
1226.32s - 1229.28s |  then tries to upload a PHP web shell,
1229.28s - 1231.28s |  plays again with some extensions
1231.28s - 1235.64s |  until it finally exploited by uploading an HT access file.
1235.64s - 1237.52s |  So let's go to the next example.
1240.40s - 1241.80s |  So yeah.
1241.80s - 1243.16s |  Let me update this one.
1244.04s - 1245.04s |  Okay.
1245.04s - 1247.72s |  So here in this case, you can see,
1247.72s - 1249.68s |  yeah, again, the trace working.
1250.56s - 1252.40s |  We can see that in this description,
1252.40s - 1254.44s |  which is a challenge from Persuader,
1254.44s - 1256.48s |  we have a very detailed description.
1256.48s - 1257.96s |  So the first thing that says
1257.96s - 1261.60s |  is that we have to exploit again an image upload function.
1261.60s - 1263.12s |  It says that in this case,
1263.12s - 1266.00s |  the goal is to exploit and retrieve the content
1266.00s - 1269.04s |  of the secret, which is inside the server.
1269.20s - 1271.04s |  And then also provide some credentials
1271.04s - 1272.60s |  that you can use for authenticate.
1272.60s - 1275.12s |  So the agent will take all this information
1275.12s - 1277.44s |  and from that point, we'll start working.
1277.44s - 1279.08s |  So if we go a bit down,
1279.08s - 1281.96s |  you can see again that it starts to access the application.
1281.96s - 1283.72s |  It sees that there is some redirect,
1283.72s - 1285.24s |  so it follows that,
1285.24s - 1288.28s |  and then tries to use the credentials to authenticate
1288.28s - 1290.88s |  that were provided in the description.
1290.88s - 1294.32s |  At this point, it sees that it's missing a CSRF parameter.
1294.32s - 1296.04s |  So in these old comments,
1296.04s - 1297.68s |  I'm going to scroll again.
1298.68s - 1301.96s |  It will start to understand how the CSRF token works,
1301.96s - 1305.52s |  how it has to deal with that part, which is new to him.
1305.52s - 1309.20s |  And finally, after playing around with session cookies
1309.20s - 1311.44s |  and playing around with CSRF token,
1311.44s - 1313.56s |  there is a point where it realizes that,
1313.56s - 1316.12s |  okay, I'm going to do this in only one step.
1316.12s - 1318.48s |  So it creates this bash example
1318.48s - 1320.12s |  with first access to the login page,
1320.12s - 1322.32s |  retrieves the session cookie and the CSRF token
1322.32s - 1324.60s |  to have that updated.
1324.60s - 1325.68s |  And then for that point,
1325.72s - 1327.96s |  it uses that to log in into the application
1327.96s - 1329.64s |  with the provided credentials.
1329.64s - 1332.16s |  And finally, as you can see here,
1332.16s - 1334.24s |  we access to the application, okay?
1334.24s - 1338.12s |  So we are now this user winner with this session.
1338.12s - 1341.20s |  Okay, so now the next point is trying to upload the web shell
1341.20s - 1345.36s |  so it will try to go and create a PHP file.
1345.36s - 1346.52s |  It fails.
1346.52s - 1349.04s |  We are getting some errors here in the output.
1349.04s - 1351.92s |  As you can see here, like PHP files are not upload.
1351.92s - 1354.56s |  So then tries again with a double extension.
1354.56s - 1356.20s |  If we go and scroll a bit,
1356.20s - 1357.64s |  we can see that eventually we'll try
1357.64s - 1360.72s |  with another extension, the phtml.
1360.72s - 1362.84s |  And then finally, sorry.
1363.80s - 1365.44s |  Oh yeah, sorry.
1365.44s - 1367.52s |  And after that, we see,
1367.52s - 1370.16s |  which is really, really important and interesting,
1370.16s - 1373.88s |  is that it tries to upload an HT access.
1373.88s - 1375.48s |  In this case, what it's trying to do
1375.48s - 1378.72s |  is it's trying to get any image file
1378.72s - 1380.52s |  that can execute PHP code.
1381.60s - 1382.84s |  And I ask you here,
1382.84s - 1384.88s |  how many times we were doing like a pen test
1384.88s - 1387.48s |  and maybe we forgot of doing or trying these kinds of things
1387.48s - 1390.96s |  like loading an HT access to see if we can replace that
1390.96s - 1394.28s |  and we can execute PHP code in an image file,
1394.28s - 1397.08s |  which at the beginning was filtered.
1398.08s - 1400.96s |  And yeah, after that, it just access to the application.
1400.96s - 1402.52s |  It tries a couple of times.
1402.52s - 1403.72s |  Sorry for doing a scroll,
1403.72s - 1407.24s |  but I don't want to waste too much time in this.
1407.24s - 1410.48s |  So eventually, let's go to the final one.
1411.44s - 1416.44s |  Yeah, here we can see that after uploading the PHP file,
1416.84s - 1420.44s |  can execute this common access to the secret key
1420.44s - 1423.84s |  and then submitting into the submit solution,
1423.84s - 1428.12s |  which is over here, we can get the flag.
1436.19s - 1438.35s |  So something interesting about all these cases
1438.35s - 1440.95s |  is that the AI is also being able to take goals
1440.95s - 1442.95s |  like exfiltrating this file,
1442.95s - 1446.43s |  submitting the secret to the endpoint to get the flag,
1446.43s - 1447.83s |  all these kinds of details are things
1447.83s - 1450.51s |  that we are not used to seeing any tool
1450.51s - 1453.39s |  or even if we want to test some particular functions
1453.39s - 1454.87s |  of our web application,
1454.87s - 1458.75s |  that's also super interesting to see and is able to manage.
1458.75s - 1463.39s |  So now the last example that we're going to see now
1463.39s - 1464.83s |  after and then after that,
1464.83s - 1468.11s |  we're going to see some experiments that we have done
1468.11s - 1471.15s |  is this is a super interesting case
1471.15s - 1474.91s |  because we have provided no goal to the AI in this case.
1474.91s - 1477.43s |  You are going to see that we are going just to present
1477.43s - 1481.27s |  a typical random text as in any CTF
1481.27s - 1485.79s |  that makes no sense and just confuse you, the target.
1485.79s - 1488.67s |  And the AI will start exploring the web application
1488.67s - 1491.15s |  and trying to pursue that goal, right?
1491.15s - 1492.63s |  Because since it doesn't have a goal,
1492.63s - 1498.63s |  it needs to find out what to do and how to hack the website.
1498.63s - 1500.39s |  So let's go to the challenge.
1501.91s - 1503.35s |  Let's refresh this.
1504.35s - 1507.95s |  And as you can see, the description is saggy quack quack,
1507.95s - 1510.51s |  try to quack me, that makes no sense.
1510.51s - 1514.15s |  And any of us doing a CTF will be like confused.
1514.15s - 1516.71s |  And we also get some information about the target.
1518.39s - 1521.63s |  Based on that, the agent understand
1521.63s - 1524.35s |  that this is CTF description and pursue to go
1524.35s - 1527.71s |  and start doing some recon on the web application.
1527.71s - 1530.27s |  So first of all, access to the route,
1530.27s - 1533.07s |  then to a login website.
1533.75s - 1535.35s |  And notice that there is some JavaScript file.
1535.35s - 1538.95s |  So decide to go and analyze the JavaScript all by itself.
1538.95s - 1541.99s |  We're going to see this behavior is repeated
1541.99s - 1544.23s |  during the whole trace, because every time
1544.23s - 1545.83s |  that it's detecting a new JavaScript,
1545.83s - 1548.19s |  it's reading and understanding that file
1548.19s - 1550.55s |  to improve the knowledge about the application
1550.55s - 1552.71s |  and keep digging deeper until it finds
1552.71s - 1554.35s |  some particular goal to exploit.
1555.59s - 1558.27s |  So once it learns about the login,
1558.27s - 1561.23s |  it's going to test some test test user
1561.27s - 1564.55s |  as we always do when doing appendix to see how it behaves.
1564.55s - 1565.67s |  Of course, it doesn't work,
1565.67s - 1568.75s |  but the application understand that the login is working.
1568.75s - 1573.75s |  So after that, try some basic payloads for SQL injection.
1573.99s - 1574.95s |  Doesn't work neither.
1574.95s - 1577.59s |  We get the same message.
1577.59s - 1580.03s |  And now we craft just a quick Python script
1580.03s - 1582.27s |  to do some default credentials for the admin user.
1582.27s - 1584.75s |  Just trying some few well-known passwords
1584.75s - 1587.51s |  to see if anything of that is like low hanging fruit
1587.51s - 1589.55s |  that can get quickly.
1589.55s - 1591.35s |  None of them work, of course.
1591.35s - 1594.07s |  So it decides to move on and try no SQL injection
1594.07s - 1595.91s |  against the login.
1595.91s - 1598.19s |  Doesn't have lag anymore.
1598.19s - 1603.11s |  So decides to just try some JSON parameter injection
1603.11s - 1605.87s |  to see if also can get some unexpected behavior
1605.87s - 1606.83s |  on the application.
1607.83s - 1609.19s |  It didn't work either.
1609.19s - 1612.55s |  So now it decides to go to their initial recon and say,
1612.55s - 1614.87s |  okay, let's see what other endpoints we have.
1614.87s - 1617.03s |  And it realized that there was one endpoint
1617.03s - 1618.31s |  called post create.
1619.59s - 1621.07s |  When it tried to access this endpoint,
1621.07s - 1623.47s |  realized that it requires authentication.
1623.47s - 1625.23s |  And in this application,
1625.23s - 1627.99s |  the main feature is that users can create post
1627.99s - 1629.51s |  like in any social media.
1629.51s - 1633.23s |  So it decides to go and go to the endpoint
1633.23s - 1634.59s |  for register an account.
1634.59s - 1636.71s |  Again, as we have seen in other examples,
1636.71s - 1638.79s |  it's going to access the endpoint,
1638.79s - 1640.07s |  read the JavaScript file,
1640.07s - 1643.55s |  understand how the form works to register an user.
1643.55s - 1645.87s |  And it's going to try to register a test user.
1646.75s - 1649.55s |  This works and the user is registered.
1649.55s - 1652.55s |  So now we move on to, again, use those credentials
1652.55s - 1655.95s |  and keep getting more access to the application
1655.95s - 1657.91s |  and perform some authenticated test.
1659.03s - 1660.35s |  If we scroll a little bit down,
1660.35s - 1662.91s |  we're going to see now that it tries to access again
1662.91s - 1664.99s |  to this endpoint providing the cookies.
1666.19s - 1669.03s |  This endpoint works, retrieves the JavaScript file,
1669.03s - 1670.91s |  gets more information about the application.
1670.91s - 1675.31s |  And now decides just to do a simple post.
1675.59s - 1677.39s |  We always do, like we're just in the website,
1677.39s - 1680.91s |  we want to learn how the application behaves.
1680.91s - 1683.59s |  So this works, it creates a post.
1683.59s - 1686.55s |  So now it knows based on everything
1686.55s - 1688.59s |  that has been from the HTML and JavaScript files
1688.59s - 1690.19s |  that all the posts can be accessed
1690.19s - 1692.95s |  on this endpoint for the test user.
1692.95s - 1697.95s |  So when it access, we can see here the post being printed.
1699.99s - 1701.31s |  But also if we pay attention,
1701.31s - 1704.15s |  we're going to see that there is a report to admin feature
1704.15s - 1706.23s |  that is a little bottom here.
1707.19s - 1708.03s |  And this is super interesting
1708.03s - 1709.95s |  because now it's the AI realizing
1709.95s - 1712.11s |  that there's a report to admin feature
1712.11s - 1714.83s |  and it has found a potential attack vector.
1714.83s - 1716.83s |  At this point, we didn't have any goal,
1716.83s - 1719.91s |  but now the AI understand that there is an admin user
1719.91s - 1722.07s |  that could potentially be reviewing the reports.
1722.07s - 1725.31s |  So it decides to go ahead and try some exploits on payloads
1725.31s - 1728.31s |  to see if it can force any type of interaction.
1728.31s - 1729.63s |  Remember that this is a CTF,
1729.63s - 1732.43s |  so it's expecting to have something to leak
1732.47s - 1734.67s |  or to exploit in order to retrieve the flag.
1735.83s - 1738.35s |  So once it learns how it works based on the JavaScript,
1738.35s - 1743.19s |  it's going to just do a report of this case
1743.19s - 1744.19s |  to see if it works.
1744.19s - 1745.03s |  It worked.
1745.03s - 1748.19s |  So now it decides to start collecting more information
1748.19s - 1749.99s |  for one of the final payloads
1749.99s - 1752.11s |  and creates a super interesting script
1752.11s - 1753.99s |  because in this case, it's taking care of everything.
1753.99s - 1755.63s |  It's creating a new user,
1755.63s - 1758.95s |  it's reusing those credentials to login in the application,
1758.95s - 1760.39s |  then grabbing the cookie,
1760.39s - 1763.19s |  setting a payload for a client-side exploit
1763.19s - 1765.95s |  to try to send some fetch requests
1765.95s - 1768.07s |  to our collaboration server.
1768.07s - 1769.39s |  Another interesting case of this,
1769.39s - 1771.11s |  understand what the collaboration server is
1771.11s - 1773.15s |  and how to use it, how to interact with it
1773.15s - 1774.39s |  and use the payloads.
1774.39s - 1776.27s |  And then we'll create just the post,
1776.27s - 1779.47s |  trigger the report and then wait for some interactions.
1779.47s - 1781.67s |  Of course, it's five seconds because this is a CTF,
1781.67s - 1785.31s |  we expect some kind of quick interaction in this case.
1785.31s - 1787.31s |  Again, it tries a different payload
1787.31s - 1790.95s |  to see if it can trigger any interaction.
1790.95s - 1791.83s |  Something interesting here
1791.83s - 1793.63s |  is that it's not creating the user anymore
1793.63s - 1795.35s |  because they understand that they already have this.
1795.35s - 1797.19s |  So it removed that part from the script
1797.19s - 1800.15s |  and keep improving it to make better results.
1800.15s - 1801.43s |  Doesn't work neither.
1801.43s - 1805.15s |  So it goes on, try one more time with a different payload.
1805.15s - 1808.63s |  And again, sending the DOM of the application
1808.63s - 1810.43s |  for the admin user, it send it
1810.43s - 1813.55s |  and after that, it gets that interaction
1813.55s - 1816.27s |  on the Interact SH server that we have.
1816.31s - 1818.43s |  And it's super interesting to see that it understand
1818.43s - 1820.39s |  that this is an interaction for an admin
1820.39s - 1821.83s |  that has access to the website
1821.83s - 1824.67s |  and is able to retrieve the whole DOM of the application.
1824.67s - 1827.99s |  And if we try to search for the flag,
1827.99s - 1831.15s |  oops, well, like the flag,
1831.15s - 1834.59s |  we're going to see that all this here is URL encoded,
1834.59s - 1836.35s |  but this is the flag that has exfiltrated
1836.35s - 1838.07s |  from the DOM of the admin user.
1838.07s - 1839.27s |  With that, the AI understand
1839.27s - 1841.35s |  that the challenge has successfully finished
1841.35s - 1852.86s |  and has everything it needs to complete the challenge.
1852.86s - 1856.42s |  So too many examples and too many scrolling.
1856.42s - 1858.70s |  So now let's jump to something different,
1858.70s - 1860.06s |  a different experiment we did
1860.06s - 1863.86s |  and is to know if can AI be compared to human pen testers.
1864.82s - 1866.14s |  So for this, we did an experiment
1866.14s - 1868.86s |  that you may have seen in the internet
1868.86s - 1870.66s |  that we publish some of the results.
1871.66s - 1874.34s |  And here on the screen,
1874.34s - 1877.38s |  you are going to see both terminals.
1877.38s - 1880.26s |  One screenshot is the pen tester working
1880.26s - 1882.46s |  and the other one is the AI working at the same time,
1883.06s - 1884.78s |  trying to solve the same challenge.
1884.78s - 1886.02s |  Something interesting about this case
1886.02s - 1887.18s |  is that you're going to see images
1887.18s - 1891.02s |  because now we have built in a new browser for the AI
1891.02s - 1893.06s |  so it can understand buttons,
1893.06s - 1895.30s |  everything and more JavaScript application-based.
1895.30s - 1897.22s |  So it's improved the results a lot
1897.22s - 1899.18s |  on the client-side applications.
1899.18s - 1901.74s |  And if you keep tracking the numbers,
1901.74s - 1905.74s |  you are going to see that after the AI finish in four minutes
1905.74s - 1908.38s |  the pen tester is still struggling like 20 minutes more
1908.38s - 1912.22s |  to exploit this vulnerability and this challenge.
1912.98s - 1915.30s |  So for this, we hire five pen testers
1915.30s - 1918.46s |  from different companies going from junior to principal.
1919.54s - 1923.30s |  We gave them 40 hours to solve all of the validation cases
1923.30s - 1926.98s |  that they were able to solve from our validation set.
1926.98s - 1929.46s |  They could use any tools, no exceptions.
1929.46s - 1932.10s |  They could do whatever they want, just a real CTF.
1934.46s - 1936.38s |  The thing is that,
1936.38s - 1938.74s |  well, I'm just going to let it continue just a few seconds
1938.74s - 1940.94s |  so you can see how the AI has finished
1941.02s - 1942.38s |  still working on the challenge
1942.38s - 1947.34s |  up to these 19 minutes approximately.
1947.34s - 1951.34s |  So the results from this experiment were quite interesting
1951.34s - 1955.22s |  and let us understand much more how these things work
1955.22s - 1957.62s |  and how it can be applied to our field.
1957.62s - 1961.46s |  So on this chart, you can see how Expo
1961.46s - 1964.26s |  behave, obtain the same results as the principal,
1964.26s - 1968.46s |  both solving the 85% of this challenge
1968.46s - 1970.74s |  from the validation set.
1971.54s - 1974.30s |  And on the other chart, you can see their resolutions,
1974.30s - 1977.10s |  percentage made by difficulty.
1977.10s - 1979.22s |  And if you pay attention to the easy and medium,
1979.22s - 1981.38s |  you are going to see that the AI excels
1981.38s - 1984.90s |  the human pen tester and perform better results.
1984.90s - 1987.50s |  However, as was mentioned before,
1987.50s - 1988.74s |  for the hard challenges,
1988.74s - 1990.38s |  there is a struggle a little bit more
1990.38s - 1993.30s |  and those cases that require more creativity,
1993.30s - 1996.34s |  alternative thinking or more careful process,
1996.34s - 1999.10s |  the human excels in those cases.
1999.10s - 2001.30s |  So this give us a huge hint
2001.30s - 2003.58s |  about how this can be applied to our field
2003.58s - 2007.54s |  where we can imagine a place where the AI is taking care
2007.54s - 2010.58s |  of all those things that are less interesting for us
2010.58s - 2012.38s |  and leaving the human experts,
2012.38s - 2015.26s |  the work of working on the more exciting parts
2015.26s - 2021.84s |  of or more challenging parts of the application.
2021.84s - 2023.32s |  Okay.
2023.32s - 2026.60s |  And now we go to our last question for today.
2026.60s - 2030.72s |  So can AI actually be our second brain or assistant?
2030.72s - 2035.72s |  So we know that AI has been very used in multiple contexts,
2035.92s - 2037.28s |  but we haven't seen before,
2037.28s - 2041.44s |  like how we can use the AI to assist a serpent tester
2041.44s - 2043.04s |  or a back hunter in this case,
2043.04s - 2045.32s |  all the people that are interesting here.
2045.32s - 2046.44s |  So for this meaning,
2046.44s - 2049.32s |  we use something called human in the loop,
2049.32s - 2051.80s |  we have been talking about before.
2051.80s - 2055.24s |  So here we have a prototype in what we wanted to do
2055.24s - 2060.24s |  is basically analyze how we can use AI to perform better
2061.24s - 2063.40s |  the work of the human.
2063.40s - 2064.80s |  Okay.
2064.80s - 2069.80s |  So yeah, here is a small video which just let it run.
2070.00s - 2072.68s |  But basically what we wanted to create was a prototype
2072.68s - 2075.04s |  that basically will provide some goals.
2076.84s - 2078.08s |  Apart from that goal,
2078.08s - 2081.20s |  what we can do is provide some feedback to the AI
2081.20s - 2084.04s |  so we can change the workflow and how it works.
2084.04s - 2087.00s |  So for example, if we are analyzing how the AI is performing
2087.00s - 2089.48s |  and what kind of service is trying to do,
2089.52s - 2090.60s |  we can go in the middle
2090.60s - 2093.80s |  and we can try and change that workflow.
2093.80s - 2094.64s |  So for example,
2094.64s - 2097.04s |  if we see that it's trying to execute a command that is fat,
2097.04s - 2099.92s |  we can modify that and let the AI interact
2099.92s - 2100.92s |  and continue with that.
2100.92s - 2102.36s |  Also, if we see that, for example,
2102.36s - 2105.12s |  it's trying to exploit an SQL injection,
2105.12s - 2106.84s |  and we see that it's missing some payloads
2106.84s - 2108.72s |  or it's missing some entry points,
2108.72s - 2111.80s |  we can also provide that as part of the learnings
2111.80s - 2115.20s |  and we can say to the AI that he has to be
2115.20s - 2117.04s |  and follow that right path.
2117.04s - 2118.84s |  So this is just a prototype, an example,
2119.20s - 2121.72s |  this is not something that we are pretending to sell
2121.72s - 2122.96s |  or everything like that.
2122.96s - 2125.32s |  We just wanted to see how we can interact
2125.32s - 2127.84s |  with the human in the loop.
2129.76s - 2131.20s |  So let's skip this one.
2132.08s - 2135.00s |  Okay, and now to sum up,
2135.00s - 2137.44s |  we're gonna be reviewing again,
2137.44s - 2140.48s |  the three questions that we have been talking before.
2140.48s - 2142.72s |  So for the first question of all,
2142.72s - 2145.28s |  if we can mimic human back hunters.
2145.28s - 2147.92s |  Okay, we have seen that the AI is surprisingly good
2148.32s - 2149.48s |  for some examples,
2149.48s - 2152.08s |  especially the easy ones and the medium ones,
2152.08s - 2153.64s |  but depending on the difficulty,
2153.64s - 2156.80s |  we have to improve the performance.
2156.80s - 2160.24s |  Then talking about if we can compare human pen testers
2160.24s - 2163.80s |  to AI, as Joel was talking before,
2163.80s - 2165.96s |  expert human excel such creativity
2165.96s - 2168.32s |  and are really, really good at hard challenges.
2169.68s - 2172.12s |  But yeah, the AI is faster and better.
2172.12s - 2176.00s |  We saw in the example that we provide like five pen testers,
2176.00s - 2177.80s |  we gave them like 40 hours
2178.68s - 2182.16s |  and the AI was able to solve all of them in just 30 minutes.
2182.16s - 2183.64s |  And if we talk about
2183.64s - 2187.04s |  if the AI can be our second brain or assistant,
2187.04s - 2190.12s |  this is something that we need to try together.
2190.12s - 2192.72s |  So we will be sharing some stuff in our websites
2192.72s - 2194.40s |  in a couple of weeks.
2194.40s - 2196.80s |  So just we can go there to expo.com,
2196.80s - 2198.32s |  you can join the wait list
2198.32s - 2200.16s |  and we will be sharing everything over there
2200.16s - 2202.04s |  and also in our social media.
2202.04s - 2203.92s |  So let's keep an eye on that.
2205.36s - 2207.48s |  And finally, we don't want to forget about the team.
2208.16s - 2210.08s |  This is not something that we have done ourselves.
2210.08s - 2212.56s |  This is an effort of all the expo team.
2212.56s - 2214.56s |  So a big shout out to all of them
2214.56s - 2217.68s |  because we have been working hard these three last months.
2217.68s - 2221.16s |  And yeah, this is something that we have done all together.
2223.52s - 2225.52s |  Yeah, that's the end of the talk.
2225.52s - 2227.12s |  Again, thank you to DEF CON
2227.12s - 2230.04s |  and the Backbounty Village for giving us the opportunity.
2230.04s - 2239.38s |  And we have some questions if you want.
2239.38s - 2242.46s |  Yes, I'm not sure if we have the mic.
2243.46s - 2256.57s |  So, so far everything has been done
2256.57s - 2259.05s |  under control and environment.
2259.05s - 2262.33s |  We are not yet using this to do back bounties.
2262.33s - 2265.81s |  We are trying to test this to be used to test,
2265.81s - 2268.53s |  to understand how this could be used in a back bounty field
2268.53s - 2270.29s |  and in the security field.
2270.29s - 2274.25s |  So, so far there is not a monetary search for this now.
2274.25s - 2276.85s |  It's just this, what we have shared, yeah.
2278.45s - 2279.29s |  Yes.
2288.10s - 2299.39s |  Sorry, could you repeat that?
2299.99s - 2302.11s |  Yeah, we have tried, probably those are into,
2302.11s - 2305.63s |  if I remember correctly, into misconfigurations category,
2305.63s - 2307.07s |  but we have tried the headers,
2307.07s - 2309.23s |  manipulation and information.
2309.23s - 2310.99s |  We have a few challenges of those.
2310.99s - 2313.75s |  I can maybe look for the results after the talk,
2313.75s - 2315.23s |  if you want, yeah.
2315.23s - 2332.17s |  Yes.
2332.17s - 2334.25s |  So for the first question,
2334.25s - 2336.37s |  it's depending on how you set the goal,
2336.37s - 2337.21s |  it's very persistent.
2337.21s - 2338.97s |  For example, we saw the cross-site scripting
2338.97s - 2340.45s |  that was trying, keeping trying,
2340.45s - 2343.41s |  then doing something that we also do kind of human thing
2343.41s - 2345.33s |  is like going and looking around
2345.33s - 2347.41s |  to see if can find another hints or something
2347.41s - 2349.85s |  to get into the feedback,
2349.85s - 2351.61s |  but then goes back to the goal
2351.61s - 2353.45s |  that's very persistent into that.
2353.45s - 2355.01s |  In terms of technical details,
2355.01s - 2356.93s |  it's like you can set the amount of iterations
2356.93s - 2357.81s |  that you want to spend,
2357.81s - 2361.73s |  so you don't have like an infinite loop of things trying out.
2361.73s - 2364.21s |  And the second question was to protect.
2364.21s - 2366.61s |  So now is everything run in an isolated environment
2366.61s - 2369.37s |  and protected, so we are working on improving that
2369.37s - 2373.25s |  in order to be conscious about what it's doing and running.
2373.89s - 2375.73s |  That's also taking into account all the Salesforce
2375.73s - 2378.49s |  that it has to do while testing application.
2378.49s - 2381.17s |  So one more, there we go.
2381.17s - 2382.01s |  You were quicker.
2385.31s - 2386.51s |  Thank you.
2386.51s - 2405.29s |  So when it comes to-
2405.29s - 2408.69s |  Yeah, the thing is that if you have PlayCTF,
2408.69s - 2410.29s |  when you go into hard challenges,
2410.29s - 2412.01s |  it's like you have to maybe change
2412.01s - 2413.53s |  too many things together.
2413.53s - 2416.37s |  You have to, so probably the AI is being able
2416.37s - 2418.09s |  to detect the first two vectors,
2418.09s - 2419.61s |  but then it doesn't go farther
2419.61s - 2423.33s |  and detects the final one that is giving you the flag.
2423.33s - 2425.65s |  So that, for us, is a known solution.
2425.65s - 2427.89s |  Even though it found valid endpoints
2427.89s - 2430.05s |  and it started plotting vulnerabilities,
2430.05s - 2433.53s |  if it doesn't get the flag, it's no resolution for us.
2433.53s - 2436.77s |  So probably the creativity and the effort
2436.77s - 2439.93s |  that can put a human into going so deep,
2439.93s - 2443.61s |  that's what makes the difference, for now, at least, yeah.
2443.61s - 2444.65s |  Yeah.
2444.65s - 2446.49s |  So I think we have no more time for questions.
2446.49s - 2447.77s |  I'm sorry.
2447.77s - 2449.13s |  Okay, thank you, everyone.
2449.13s - 2449.97s |  Thank you.