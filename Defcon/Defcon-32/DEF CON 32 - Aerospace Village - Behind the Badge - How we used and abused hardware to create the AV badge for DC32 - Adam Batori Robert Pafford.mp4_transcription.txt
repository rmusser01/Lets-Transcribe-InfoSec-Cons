{
  "webpage_url": "local:1731741395:28df618c:DEF CON 32 - Aerospace Village - Behind the Badge - How we used and abused hardware to create the AV badge for DC32 - Adam Batori  Robert Pafford.mp4",
  "title": "DEF CON 32 - Aerospace Village - Behind the Badge - How we used and abused hardware to create the AV badge for DC32 - Adam Batori  Robert Pafford.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 2.72s | This text was transcribed using whisper model: large-v2

 All right, thank you, everyone, for coming out.
2.72s - 4.28s |  And apologies, there's a little delay
4.28s - 6.40s |  as it happens with these things.
6.40s - 9.28s |  But we're going to go pretty fast.
9.28s - 12.20s |  We have a lot to go over, thanks in no part
12.20s - 18.24s |  to our Silicon vendors, our supply chain, our DHL.
18.24s - 20.44s |  But yeah, we're excited to talk about behind the badge
20.44s - 22.92s |  and a little on how we use and abuse hardware
22.92s - 26.20s |  to create the ADS-B receiver on a badge for the aerospace
26.20s - 27.08s |  missions here.
27.08s - 28.12s |  My name is Adam Latorre.
28.12s - 30.00s |  This is Robert Baffert.
30.00s - 32.64s |  And let's get into it.
32.64s - 36.68s |  So we start off with some theory and some practice.
36.68s - 45.14s |  But the theory of the badge is when, yeah,
45.14s - 47.14s |  the idea we have for the badge is actually
47.14s - 49.56s |  one that the Aerospace Village has had kind of in the back
49.56s - 51.74s |  pocket for a while, which is, wouldn't it
51.74s - 55.22s |  be super cool to do an ADS-B receiver on a badge,
55.22s - 59.02s |  fully integrated and able to run without needing a network
59.02s - 61.90s |  connection from a service like FlightAware
61.90s - 65.02s |  or anything that feeds community crowdsource ADS-B.
65.02s - 67.46s |  So for those of you that might not be aware,
67.46s - 71.78s |  ADS-B, or Automatic Dependent Surveillance Broadcast,
71.78s - 74.02s |  is a protocol.
74.02s - 76.62s |  It's a type of signal that's a very important aspect
76.62s - 78.22s |  of aviation safety.
78.22s - 80.26s |  It is transmitted between airplanes,
80.26s - 82.14s |  between ground stations, and in some cases
82.14s - 86.94s |  even with satellites that can transmit
86.94s - 90.30s |  a whole host of messages between different stations.
90.30s - 92.06s |  The most relevant for us are things
92.06s - 96.30s |  like call signs, flight numbers, ICAO addresses, altitude,
96.30s - 99.22s |  headings, so information about planes
99.22s - 101.98s |  that you can see flying overhead.
101.98s - 106.94s |  And while it's intended uses for safety and air traffic control,
106.94s - 110.14s |  a common hobbyist and enthusiast use case
110.14s - 113.02s |  is that it's just cool to be able to see
113.02s - 116.02s |  a map of all the planes and aircraft around you overhead
116.02s - 117.78s |  and be able to see what flight number it is,
117.78s - 120.58s |  it's heading, where it's going, flight plans.
120.58s - 123.78s |  And ADS-B itself can exist over multiple types of data links.
123.78s - 127.70s |  But when we say ADS-B, the most common physical medium
127.70s - 131.54s |  that it's sent over is the MODIS downlink at 1090 megahertz.
131.54s - 133.94s |  And if you want more information on ADS-B,
133.94s - 138.66s |  what it's used for, talk to the Aerospace Militia.
138.66s - 142.06s |  But where we come in as hardware design and badge designers
142.06s - 144.34s |  is how do we actually, we have the signal,
144.34s - 145.46s |  we know what we want to receive,
145.46s - 148.42s |  but how do we actually implement and make a badge
148.42s - 151.06s |  that can receive this signal?
151.06s - 154.18s |  So the most common enthusiast receivers
154.18s - 156.42s |  utilize SDRs, or software-defined radios,
156.42s - 158.14s |  like the RTL-SDR.
158.14s - 160.50s |  And because this was designed a long time ago,
160.50s - 162.90s |  the protocol and the modulation is actually fairly simple
162.90s - 164.74s |  to demodulate and decode.
164.74s - 166.74s |  It's on-off keyed, which is effectively
166.74s - 168.26s |  digital amplitude modulation.
168.26s - 169.42s |  It's either on or off.
169.42s - 173.66s |  You're either getting RF or you are not on the 1090 megahertz.
173.66s - 175.98s |  And the data bits themselves are Manchester encoded,
175.98s - 179.06s |  meaning that the data exists in the transitions between 1
179.06s - 181.66s |  and 0 or 0 and 1.
181.66s - 183.62s |  Now, to do this on a badge, if you
183.62s - 187.34s |  want to do a so-called real SDR receiver,
187.34s - 189.42s |  the chips that are required for that is expensive.
189.42s - 192.82s |  They are very high-end RF chipsets.
192.82s - 197.34s |  And it's way too expensive to put on a badge.
197.34s - 202.58s |  Think of something like a HAPRF, for example, as a proper SDR.
202.58s - 207.58s |  The SDRs, like the RTL-SDR, uses a DVB-T,
207.58s - 211.26s |  which is a digital terrestrial broadcast television.
211.26s - 213.66s |  And they overdrive those chips to run faster
213.66s - 215.70s |  than they're intended to, which lets
215.70s - 217.78s |  you get into that 1090 megahertz band
217.78s - 220.98s |  and then receive it and decode it in software.
220.98s - 222.82s |  One of the issues that we found when
222.82s - 225.02s |  we started looking into using one of these DVB-T tuner
225.02s - 230.58s |  chips ourselves, though, is that they are very power-hungry,
230.58s - 234.82s |  especially when being overdriven to hit the 1090
234.82s - 235.94s |  megahertz band.
235.94s - 239.02s |  And in addition to just getting really, really hot,
239.02s - 243.06s |  the battery life of the badge would be next to zero.
243.06s - 245.30s |  So we had to come up with a new way to do it.
245.30s - 247.34s |  And the third major way of receiving
247.34s - 250.06s |  ADS-B is the log-amp architecture.
250.06s - 252.94s |  This uses a very fast RF power level meter,
252.94s - 255.46s |  which converts the logarithmic received RF power
255.46s - 257.66s |  into a linear output voltage.
257.66s - 262.38s |  And in this mode, it can act as an envelope detector
262.38s - 264.46s |  when filtered with some very tight 1090
264.46s - 266.10s |  megahertz saw filters.
266.10s - 271.06s |  So the way that the architecture, the receive chain
271.06s - 277.06s |  works, is that you get the entire RF spectrum coming
277.06s - 278.42s |  in through your antenna.
278.42s - 281.34s |  That gets amplified and filtered and amplified and filtered
281.34s - 284.90s |  again through very tight 1090 megahertz bandpass filters.
284.90s - 287.70s |  So we can extract only the very specific slice
287.70s - 291.50s |  of the spectrum that is centered at 1090 megahertz.
291.50s - 294.74s |  And then because the signal that we are trying to demodulate
294.74s - 297.42s |  is just on and off, the RF power meter
297.42s - 300.42s |  will let us know, is it seeing no RF,
300.42s - 302.26s |  or is it seeing more RF?
302.26s - 306.86s |  And that lets us turn the 1090 megahertz ADS-B packets
306.86s - 314.58s |  in the air into a 2 megahertz baseband level output.
314.58s - 320.06s |  And we actually used an amplifier and anti-aliasing
320.06s - 322.86s |  filter chip from a composite video signal,
322.86s - 326.66s |  from a composite video receiver, because it is very cheap.
326.66s - 330.18s |  If you want to use, if you want to buy an eighth order
330.18s - 334.62s |  Butterworth filter with multiple channels and power amplifiers
334.62s - 336.58s |  and clamp diodes, well, analog devices
336.58s - 338.66s |  would love to charge you a lot of money for that.
338.66s - 340.82s |  But if you want the, if you want,
340.82s - 342.86s |  no one uses composite video anymore, right?
342.86s - 345.26s |  But if you want this composite video amplifier
345.26s - 347.98s |  with an eighth order Butterworth filter encoded,
347.98s - 351.02s |  filter implemented into it, and multiple chains,
351.02s - 353.50s |  and an amplifier, well, please take it.
353.50s - 357.22s |  Like, who uses composite video?
357.22s - 359.70s |  But the last step in this process
359.70s - 362.38s |  is digitizing the signal itself.
362.38s - 364.66s |  We, again, the common way of doing
364.66s - 367.34s |  it is to put it into a fast analog to digital converter,
367.34s - 368.38s |  an ADC.
368.38s - 374.62s |  But again, high performance RF intended ADCs are expensive.
374.62s - 378.22s |  And when trying to optimize design,
378.22s - 382.24s |  the best chip is no chip.
382.24s - 384.84s |  So the SoC that we're using for the main Linux components
384.84s - 386.92s |  of Badge is the Allwinner T113.
386.92s - 389.60s |  It has dual Cortex-A7s, and we'll
389.60s - 392.00s |  get into some more of the specs a little bit later.
392.00s - 394.60s |  But it doesn't have any fast ADCs on board,
394.60s - 398.80s |  at least nothing that's actually fast enough to demodulate ADS-B.
398.80s - 402.72s |  Well, it is intended, actually, for automotive video
402.72s - 404.04s |  applications.
404.04s - 406.88s |  So it has multiple video inputs and outputs.
406.88s - 411.32s |  And one of the supported video input modes is composite video.
411.32s - 414.04s |  Well, if you know your composite video trivia,
414.04s - 417.88s |  the baseband signal has frequency components
417.88s - 421.40s |  that require at least a 27-megasample ADC.
421.40s - 423.60s |  And sure enough, if you look at the block diagram we have
423.60s - 428.28s |  in our data sheet, it says that on the left side,
428.28s - 431.28s |  next to the PGA, is an ADC block,
431.28s - 434.04s |  because you must have a fast ADC to be
434.04s - 438.37s |  able to digitize composite video.
438.37s - 442.33s |  And it's a fast ADC, but if you actually go back,
442.33s - 445.21s |  you can see the ADC is not isolated.
445.21s - 448.05s |  It's wrapped inside a bunch of filters.
448.05s - 449.29s |  You have the PGA.
449.29s - 451.65s |  You have all the hardware blocks that
451.65s - 454.01s |  are designed to demodulate composite video.
454.01s - 456.69s |  So you don't get raw samples from the ADC.
456.69s - 458.65s |  You get pixels, basically.
458.65s - 459.77s |  So it tries to find a lock.
460.73s - 462.37s |  It tries to find V-sync.
462.37s - 466.25s |  It has built-in filters to do color correction,
466.25s - 470.81s |  which means that as it stands, it could not receive ADSB.
470.81s - 473.01s |  It couldn't actually get you samples,
473.01s - 474.85s |  because it would just always say, oh, I can't find a signal.
474.85s - 478.25s |  I can't see a video signal, and just do nothing.
478.25s - 480.65s |  But the ADC itself is in the silicon.
480.65s - 483.21s |  And as we like to say, we paid for the whole silicon,
483.21s - 485.53s |  and we want to use the whole silicon.
485.53s - 488.05s |  And well, we had to do some reverse engineering
488.05s - 491.57s |  on how to be able to disable these filters.
491.57s - 495.21s |  And we were able to discover certain undocumented registers
495.21s - 498.65s |  that some undocumented registers in the all-owner chip
498.65s - 501.85s |  itself that let you put it into this special manufacturing
501.85s - 502.85s |  test mode.
502.85s - 505.21s |  See, making fast ADCs, the reason
505.21s - 508.05s |  it's expensive and isolation is that it's
508.05s - 509.85s |  kind of hard to fabricate and then verify
509.85s - 511.61s |  the harmonic performance of.
511.61s - 515.13s |  So the silicon manufacturer will put in these modes
515.13s - 519.41s |  that let you basically bypass out the actual video,
519.41s - 522.01s |  the H-sync, B-sync blocks, because those probably work.
522.01s - 524.37s |  But the ADC itself can then be isolated
524.37s - 526.65s |  in the special test mode, which can get you
526.65s - 528.33s |  the true raw samples out.
528.33s - 530.17s |  And then when you have the true raw samples,
530.17s - 531.85s |  you can verify the performance.
531.85s - 533.65s |  So that's exactly what we want, to be
533.65s - 537.37s |  able to abuse this as a standalone, straightforward
537.37s - 538.97s |  ADC.
538.97s - 542.17s |  And that's exactly what we did.
542.17s - 544.33s |  We did some reverse engineering.
544.33s - 545.77s |  We found the registers.
545.77s - 547.61s |  And when we put it into this test mode,
547.61s - 550.09s |  as you can see from the trace, that
550.09s - 555.49s |  is pulled from a badge with the RF front end attached.
555.49s - 559.73s |  That is the ADS-B preamble and the start of a data packet
559.73s - 564.01s |  being received as raw samples from the onboard ADC.
564.01s - 566.45s |  And actually, I will go back.
566.45s - 571.33s |  You see the preamble pattern, the 101101.
571.33s - 574.29s |  And that's exactly what we're seeing on the output of our ADC.
574.85s - 576.61s |  And this was our proof of concept
576.61s - 578.81s |  to say that, OK, we can actually do this.
578.81s - 582.41s |  We can get away with not using any external ADC or SDR
582.41s - 584.17s |  chips or really anything intended
584.17s - 588.13s |  to be used in this way, except the saw filters,
588.13s - 594.82s |  and do it fully integrated on just the core Linux SoC.
594.82s - 597.90s |  Now, as I said, the specs of the badge
597.90s - 600.18s |  itself, outside of just the RF, we
600.18s - 603.22s |  are running full mainline Linux 6.6.
603.22s - 606.14s |  We thought it'd be really cool to bring, basically,
606.14s - 607.94s |  a Linux death kit on a board.
607.94s - 612.98s |  And since we have the power of our SoC to do the RF decoding,
612.98s - 614.70s |  and we have to write a bunch of software
614.70s - 615.78s |  to manage the Wi-Fi and everything,
615.78s - 617.24s |  we're like, hey, instead of writing
617.24s - 620.14s |  all the drivers ourselves, mainline Linux is out there,
620.14s - 620.82s |  and it's great.
620.82s - 622.38s |  Let's use it.
622.38s - 625.34s |  Our display is a 40 by 40 circular display,
625.34s - 628.06s |  which we got custom manufactured for us.
628.06s - 632.14s |  The two, yes, a lot of people actually
632.14s - 636.90s |  thought it's not a smartwatch screen.
636.90s - 638.86s |  We actually don't really know where it's from,
638.86s - 642.66s |  but when our display manufacturer said, hey, guys,
642.66s - 644.98s |  we have these cool, we have the circular displays
644.98s - 648.18s |  you're talking about, and this 2.7 inch form factor,
648.18s - 648.94s |  what do you think?
648.94s - 650.70s |  We're like, this is perfect.
650.70s - 651.94s |  It looks like a radar scope.
651.94s - 653.18s |  It looks like an oscilloscope.
653.18s - 655.10s |  Let's go.
655.10s - 659.02s |  Outside of the ADC, on the core T113 SoC itself,
659.02s - 663.10s |  we have the dual core A7s running at 1.2 gigahertz each,
663.10s - 666.06s |  and that's the application processor
666.06s - 667.90s |  cluster that is running Linux.
667.90s - 670.30s |  And then another bonus that we got on our silicon
670.30s - 673.82s |  is the HiFi 4 DSP, which we'll talk about a little bit more
673.82s - 677.66s |  in a few slides, but that's a DSP core that's
677.66s - 682.02s |  designed to be an audio code processor that we are, again,
682.02s - 684.90s |  reprogramming outside the manufacturer's use case
684.90s - 687.50s |  to actually do the demodulation, Manchester decode,
687.50s - 691.30s |  and ADS-B bit slicing.
691.30s - 696.06s |  In the package, we have embedded 128 megs of DDR3 SD-RAM,
696.06s - 697.74s |  8 gigabytes of VMMC onboard storage,
697.74s - 701.82s |  and some other RF implementations.
701.82s - 704.78s |  We have GPS and Wi-Fi, because why not?
704.78s - 705.98s |  We're already going all out.
705.98s - 710.22s |  We're already doing full custom RF and printed PCB antennas,
710.22s - 711.66s |  like, let's go for broke.
711.66s - 712.74s |  Let's add GPS.
712.74s - 715.46s |  Let's add Wi-Fi.
715.46s - 719.06s |  So that's all, yeah, that's all in theory.
719.06s - 722.34s |  Before that, I think there's a badge giveaway that's
722.34s - 724.18s |  going to go.
724.18s - 724.90s |  I'll keep going.
724.90s - 725.54s |  OK.
725.54s - 727.86s |  OK.
727.86s - 730.86s |  So now this is all what we had in theory.
730.86s - 732.74s |  This is what came up with the designs,
732.74s - 735.62s |  and then we get it manufactured by our manufacturer.
735.62s - 737.82s |  And then they come back, and now we actually
737.82s - 741.82s |  get to implement it and go through all the crazy systems
741.82s - 743.46s |  and actually do the reverse engineering
743.46s - 744.96s |  and make sure that we can actually
744.96s - 748.66s |  get this ADS-B receiver running inside of this badge.
748.66s - 750.32s |  So you'd think the most challenging part
750.32s - 751.94s |  of this whole design process would
751.94s - 756.30s |  be the fully custom ADS-B receiver running with an ADC
756.30s - 758.42s |  in an undocumented test mode and then piping it
758.42s - 759.98s |  into an audio DSP, which was never
759.98s - 763.46s |  designed with the goal of actually doing ADS-B decoding.
763.46s - 765.34s |  But that was actually the easiest part.
765.34s - 767.14s |  We had the RF.
767.14s - 770.42s |  Adam, being a mad lad, made a full zero
770.42s - 773.86s |  to tri-band microwave RF in just four months.
773.86s - 775.22s |  This is his first RF project.
778.86s - 780.86s |  And then the TV decoder code, we got
780.86s - 782.58s |  it working after a night of debugging,
782.58s - 785.18s |  and we actually had a cool oscilloscope mode
785.18s - 787.78s |  that we could actually read directly from the ADC
787.78s - 789.94s |  in and get it plotted on our screen.
789.94s - 793.26s |  And then we got the DSP code execution in a week,
793.26s - 795.54s |  and then after that, we did a week for Linux kernel dev
795.54s - 798.10s |  and then a week for algorithms, and we got ADS-B.
798.10s - 799.62s |  That was the easy part.
799.62s - 801.46s |  It was everything else that should have just
801.46s - 804.42s |  worked that didn't, mainly which, if any of you guys
804.42s - 806.06s |  have ever worked with USB-C before,
806.06s - 808.78s |  can probably understand why it's USB-C.
808.78s - 812.34s |  And then, of course, the AXP2585 battery management chip,
812.34s - 814.42s |  which we will go into more detail later
814.42s - 817.86s |  about the whole experience with that.
817.86s - 821.06s |  So before we get into the more challenging parts,
821.06s - 825.78s |  here's a quick guide on running code on your HiFi4 DSP.
825.78s - 830.34s |  So the Allwinner T113, it has a HiFi4 DSP,
830.34s - 832.78s |  and they advertise it as, oh, you have a third core.
832.78s - 834.74s |  But what they don't tell you is that they only
834.74s - 837.46s |  give you the firmware as a blob that gets loaded in,
837.46s - 838.94s |  and it's only for audio processing
838.94s - 841.26s |  because it has an audio out, and it does all the codecs
841.26s - 842.58s |  with that.
842.58s - 844.54s |  And the mainline kernel doesn't even have,
844.54s - 846.94s |  it doesn't even touch the DSP.
846.94s - 848.86s |  But it is its own CPU core.
848.86s - 851.86s |  It can be programmed, and if you find the right resources,
851.86s - 853.50s |  you can actually program it.
853.50s - 856.54s |  Because we're doing all of these ADS-B processing,
856.54s - 858.46s |  we want to try and get the maximum performance
858.46s - 860.14s |  to get as high speed out as possible
860.14s - 862.06s |  so we can increase the sample rate and have
862.06s - 863.46s |  better performance.
863.46s - 866.38s |  So we wanted to do the full SIMD vectorization
866.38s - 870.54s |  and actually use the real HiFi4 toolchain from the vendor
870.54s - 872.46s |  rather than using a lot of the open source ones
872.46s - 876.02s |  you might find with ESP32 running with GCC.
876.02s - 879.86s |  So if you find the Extensa toolchain, which needs to,
879.86s - 881.82s |  then you need to, you get the Extensa toolchain
881.82s - 883.62s |  compiler with the vendor tools.
883.62s - 887.50s |  But you also need to actually get the custom vendor IP
887.50s - 890.18s |  block, which was used to generate that exact silicon.
890.18s - 892.14s |  The great part about HiFi4 is it can
892.14s - 895.34s |  be exactly customized to the exact chip you want to build.
895.34s - 898.26s |  So if you want to have all of these advanced vector units,
898.26s - 899.22s |  you can add them in.
899.22s - 900.38s |  If not, you can remove them.
900.38s - 902.26s |  You can have however many registers you want.
902.26s - 904.30s |  And it's all configurable to the silicon vendor.
904.30s - 905.92s |  But that means that the compiler needs
905.92s - 907.58s |  to know what it has available.
907.58s - 909.54s |  And the way they do that is a full blob,
909.54s - 912.26s |  which has full Verilog for the chip that actually gets
912.26s - 914.74s |  produced as just a giant zip file.
914.74s - 916.36s |  And you load it all into the toolchain.
916.36s - 918.94s |  And it figures out how to program for your chip.
918.94s - 920.54s |  So once you find that, then you have
920.54s - 923.22s |  to compare that with the exact version of the Extensa
923.22s - 925.86s |  toolchain that it was built with.
925.86s - 928.54s |  And then you have to locate all the drivers from Allwinner
928.54s - 931.12s |  and source them and gather them up to actually do the interrupt
931.12s - 932.94s |  controller, timers, mailbox.
932.94s - 935.66s |  And then you just download the FreeRTOS port from GitHub.
935.66s - 937.22s |  And you combine them all together.
937.22s - 938.18s |  And you can actually get actually
938.18s - 940.14s |  one of the most stable development environments
940.14s - 942.06s |  we've had on this entire badge, where you just
942.06s - 943.18s |  run Extend to Explore.
943.18s - 944.18s |  And it just works.
944.18s - 946.90s |  So that's kind of the process for getting DSP.
949.90s - 953.46s |  And now, actually, for Linux on the badge,
953.46s - 955.70s |  again, we mentioned we're using mainline Linux.
955.70s - 958.10s |  And that actually drastically sped up the dev time,
958.10s - 961.30s |  where a lot of the drivers came pre-baked.
961.30s - 963.46s |  You just have to configure them correctly.
963.46s - 964.78s |  It just works.
964.78s - 967.34s |  But you have to figure out how to configure it.
967.34s - 969.88s |  So a lot of the time, it's finding magical incantations
969.88s - 972.82s |  and device trees that you forget to set that cause it to panic,
972.82s - 973.50s |  all of that.
973.50s - 975.34s |  And then if you put all the things together
975.34s - 977.70s |  and you figure out that it should be working but it's not,
977.70s - 978.50s |  then it's a bug.
978.50s - 980.70s |  And then you spend three weeks doing advanced kernel debugging
980.70s - 983.54s |  figuring out why your display is not working.
983.54s - 986.22s |  Speaking of which, display trivia.
986.22s - 986.90s |  Take a guess.
986.90s - 989.18s |  Which of these four options caused the artifacting
989.18s - 990.70s |  of the clock being messed up, you
990.70s - 993.06s |  have too large of a back porch, there
993.06s - 994.58s |  is an unknown silicon bug that only
994.58s - 996.90s |  happens when the Linux driver sets an undocumented bit,
996.98s - 999.66s |  which just happens to exist in a sister chip
999.66s - 1001.54s |  but is not on our system on chip.
1001.54s - 1003.14s |  Or the display controller registers
1003.14s - 1004.94s |  were initialized in the wrong order,
1004.94s - 1008.78s |  but they never tell you the right order.
1008.78s - 1011.10s |  The answer is E. You didn't seat the cable properly
1011.10s - 1013.70s |  when you're trying to solve all the other previous ones
1013.70s - 1016.18s |  and you're trying to debug the issue above.
1016.18s - 1019.42s |  This is the silicon bug.
1019.42s - 1021.38s |  So this was just a fun thing, and we
1021.38s - 1024.10s |  spent three weeks trying to solve this silicon bug right
1024.10s - 1027.02s |  here, where actually the display would turn green.
1027.02s - 1031.02s |  And it was because the driver for the sister chip
1031.02s - 1032.82s |  had a bit which they were setting,
1032.82s - 1036.10s |  but it caused this chip to glitch in a weird way,
1036.10s - 1039.38s |  causing the MSB of that green channel to be set high.
1039.38s - 1041.02s |  But it only occurred on this one.
1041.02s - 1043.74s |  And you have to go through all 10,000 lines of the display
1043.74s - 1045.46s |  driver and find the exact line you
1045.46s - 1048.74s |  have to comment out which caused the display not to turn green.
1048.74s - 1051.14s |  But if you do that, then you have a working screen.
1051.82s - 1054.02s |  Let's see.
1054.02s - 1057.18s |  So here's a continuation of the meme.
1057.18s - 1060.22s |  The AXP2585 has been the thing that
1060.22s - 1061.82s |  has been battling us and fighting us
1061.82s - 1062.82s |  for the entire badge.
1065.34s - 1069.14s |  So this chip, it's just a USB-C negotiator, battery charger,
1069.14s - 1070.22s |  BME all-in-one.
1070.22s - 1071.64s |  It's actually a very unique chip,
1071.64s - 1073.82s |  because there's not that many that do all of these.
1073.82s - 1075.40s |  A lot of the time, you have to get several chips
1075.40s - 1076.78s |  and stitch them together.
1076.78s - 1077.94s |  So there's no firmware.
1077.94s - 1083.26s |  It's not like some embedded 8051 core or all that.
1083.26s - 1087.50s |  It's just basic I2C registers you need to configure.
1087.50s - 1089.12s |  How difficult could it be to program?
1089.12s - 1092.42s |  It's just flip-flops, right?
1092.42s - 1096.58s |  There were several bugs that we found in the AXP2585.
1096.58s - 1098.62s |  And all of them battled us throughout development.
1098.62s - 1101.14s |  From the first bring up, we've had battery detection,
1101.14s - 1103.42s |  which says it should try and detect if there's a battery
1103.42s - 1106.22s |  and not try and charge it if it doesn't see one.
1106.22s - 1108.82s |  But they say it should always try and do that by default.
1108.82s - 1110.86s |  But all of the chips we get actually are cleared,
1110.86s - 1112.36s |  and they assume a battery is present,
1112.36s - 1115.06s |  causing weird instability until you program it
1115.06s - 1116.98s |  in the bootloader and in Linux.
1116.98s - 1118.62s |  There's also fun things where, if you
1118.62s - 1120.54s |  get power or any sort of hardware glitches,
1120.54s - 1123.70s |  it causes very undefined results in the silicon,
1123.70s - 1127.74s |  where certain registers stop working or things stop writing.
1127.74s - 1129.62s |  There's also the joys of USB Type-C,
1129.62s - 1131.92s |  where we learned that, if you plug it into certain model
1131.92s - 1134.70s |  MacBooks, instead of the MacBook charging the badge,
1134.70s - 1139.50s |  the badge will try to charge the MacBook, which does not work.
1139.50s - 1141.54s |  And there's also the biggest thing
1141.54s - 1143.54s |  that actually delayed us a lot right at DEF CON
1143.54s - 1144.96s |  when we were trying to solve this.
1144.96s - 1146.90s |  And we spent a big part of the time
1146.90s - 1149.54s |  when we were trying to get things ready trying to debug
1149.54s - 1152.58s |  why the actual IRQ pin to interrupt the Linux kernel
1152.58s - 1156.78s |  and say data is available actually not going low.
1156.78s - 1159.46s |  And this was all due to a certain manufacturing issue.
1159.46s - 1162.86s |  It was not actually a bug in the chip or a configuration issue.
1162.86s - 1165.66s |  But one of the pins was not soldered correctly
1165.66s - 1167.22s |  by the board manufacturer.
1167.22s - 1169.42s |  It passed all visual inspection.
1169.42s - 1172.30s |  But one of the ground pins was not soldered well enough.
1172.30s - 1174.50s |  And it got just enough of a ground pin connection
1174.50s - 1178.50s |  through the other ground pad that it worked enough, but not
1178.50s - 1181.66s |  enough to have a bunch of weird glitches and voltage dropping
1181.66s - 1183.54s |  out and weird chip instability.
1183.54s - 1187.10s |  So we have probably this AXP2585.
1187.10s - 1190.02s |  It's a great chip for the cost and everything.
1190.02s - 1192.06s |  But the true cost for this chip is really
1192.06s - 1194.90s |  in the development hours of all these bugs trying
1194.90s - 1198.54s |  to solve the USB-C issues and bring up and try and figure out
1198.54s - 1200.42s |  why the chip isn't booting.
1200.42s - 1203.34s |  But if we wrangled it enough to actually get the badge running
1203.34s - 1205.38s |  and we have a stable system, just
1205.38s - 1207.38s |  make sure you have a battery in when booting up
1207.38s - 1210.02s |  because BMU gremlins will come up without it
1210.02s - 1211.22s |  because of instabilities.
1211.22s - 1214.14s |  So yeah.
1214.14s - 1216.06s |  Yeah, that's it.
1216.06s - 1217.70s |  So yeah.
1217.70s - 1218.20s |  All right.
1223.06s - 1224.06s |  All right.
1224.06s - 1226.54s |  So yeah, thank you so much for joining us for this overview.
1226.54s - 1228.90s |  I know it's, as you can see, we've
1228.90s - 1232.02s |  been battling gremlins for untold amount of time.
1232.02s - 1233.56s |  So everything is a little bit rushed.
1233.56s - 1236.62s |  But we have zero minutes.
1236.62s - 1238.86s |  So if you have any questions, we will
1238.86s - 1242.54s |  be more than happy to chat after either here at the village.
1242.54s - 1244.06s |  Basically, you can come find us.
1244.06s - 1245.74s |  We'd love to chat some more.
1245.74s - 1249.50s |  And yeah, if you have a badge out there,
1249.50s - 1253.02s |  tag us on the Aerospace Village Twitter.
1253.02s - 1254.86s |  We'd love to see where they travel to
1254.86s - 1256.54s |  and what planes they're picking up.
1256.54s - 1260.10s |  And with that, thank you.