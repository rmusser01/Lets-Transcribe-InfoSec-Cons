{
  "webpage_url": "https://www.youtube.com/watch?v=JL7a_oLoXHY",
  "title": "DEF CON 32 - Exploiting Bluetooth from your car to the bank account  - Vladyslav Zubkov, Martin Str",
  "description": "Over the past decade, infotainment systems experienced a growth in functionality, broader adoption and central incorporation into the vehicle architecture. Due to the ever-growing role of wireless protocols such as Bluetooth and a known lack of patches alongside the difficulty of patch installation, this poses a new attack surface and a genuine threat to the users. At the same time, the tools and methodologies required for testing are scattered across the Internet, absent and need a rigorous setup.\n\nIn this talk, we share a comprehensive framework BlueToolkit to test and replay Bluetooth Classic vulnerabilities. We provide practical information and tips. Additionally, we release new exploits and a privilege escalation attack vector.\n\nWe show how we used the toolkit to find 64 new vulnerabilities in 22 modern cars and the Garmin Flight Stream flight management system used in several aircraft types.\n\nOur work equips Bluetooth hackers with necessary information on novel implementation-specific vulnerabilities that could be used to steal information from target cars, establish MitM position or escalate privileges to hijack victims\u2019 accounts stealthily.\n\nWe believe our research will be beneficial in finding new vulnerabilities and making Bluetooth research more accessible and reproducible.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2899,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.40s - 5.52s | This text was transcribed using whisper model: large-v2

 All right. Yeah, the problem of the end of the day apparently the good stuff is empty
7.12s - 9.12s |  But it's all right
9.80s - 14.48s |  Hello, welcome to our talk exploiting Bluetooth from your card to the bank account
15.64s - 22.22s |  To get this out of the way first the main speaker sadly cannot be here tonight. He didn't receive a visa in time
22.72s - 28.32s |  We still don't have to do without him, but the second part of the video with all the technical details
29.32s - 31.58s |  Of the talk will be given by a video
32.00s - 35.04s |  So if you have questions at the end afterwards
35.04s - 39.28s |  I'll do my best to answer an online or offline or connect you with blood
39.92s - 43.20s |  Who's the main wizard behind this talk really?
46.36s - 55.89s |  To prove this I'll let the flood introduce himself and I hope this works
55.89s - 86.53s |  Do we have sound do we have any sound otherwise I can introduce him but
137.12s - 271.20s |  See you recording, my name is Vladislav, but some of you might know me as wise and sweets
271.20s - 276.52s |  I'm a bug bounty hunter and primarily focus on web mobile and infrastructure when it comes to pen testing
276.52s - 282.32s |  I also focus on quarter views and development of the tools and frameworks. I'm currently open to the new opportunities
282.32s - 284.80s |  So feel free to reach out. I also have additional
285.68s - 291.88s |  certifications awards and masters, but the most important fact is that I have never attacked booties or cars before and
292.40s - 297.24s |  I apply some of the book bounty hunting techniques to it and got some interesting results for you
297.72s - 305.83s |  All right. Yeah, sorry for this. Apparently this was the first talk today with audio
306.39s - 311.08s |  So let's move on
312.24s - 314.60s |  After blood introduced himself, who am I?
315.08s - 321.24s |  My name is Martin. I'm a security researcher and a scientist at Swiss cyber defense campus, which is the
322.04s - 324.52s |  procurement agency of the Swiss military
325.12s - 327.12s |  Have a background in wireless security
327.44s - 333.36s |  Been publishing and all the major academic system security conference and I've been leading
333.92s - 340.12s |  Research efforts not just on cars, but on all of all sorts of transportation security
341.00s - 347.80s |  At our campus that includes aviation, so I've just done a talk at the aerospace village
348.72s - 352.88s |  So you can always check that out, but also space cars and trains. I
353.60s - 356.08s |  Have never looked at Bluetooth before this work
356.60s - 362.64s |  But we've done work on cars so you can also check out broken wire that fail where we've hacked
363.24s - 365.24s |  electric charging processes
365.56s - 369.45s |  so let me first introduce you to the
370.33s - 371.89s |  Motivation for this research
371.89s - 379.01s |  One of our main jobs at the campus is to support procurement for the Swiss military and for the federal government
379.13s - 385.01s |  So we want to really make sure that the government and the military buy secure systems
385.65s - 392.57s |  As you can imagine the DoD buys quite a lot of IT systems, but also other systems such as cars
393.57s - 399.49s |  If you buy that in high volume you have quite decent negotiation leverage with manufacturers
400.17s - 405.25s |  In general public procurement if you don't know it's done with tenders. You can basically
405.89s - 409.93s |  Broadly divide it into a pretender stage then the actual tender
410.57s - 418.53s |  Contract and the time after actually having procured the systems and even received and deployed the systems
419.49s - 424.69s |  Doing simple pen testing after you have bought these things
425.21s - 427.17s |  That's often too late for us
427.17s - 434.41s |  The leverage you have in negotiations. It's partly gone and the systems. They're already in operation
434.41s - 440.09s |  I mean at that point you run insecure systems, so that's not ideal
440.65s - 444.49s |  Something else we do is we do a lot of research on standards
445.81s - 447.81s |  that works
447.97s - 454.61s |  If you look at aviation for example you find a lot of flaws and in principle you can
455.61s - 461.49s |  Try to change that in the long run the problem is most of these areas have very long life cycles
461.53s - 466.77s |  So even if you find and demonstrate major flaws and protocols and technologies being used there
467.29s - 473.73s |  It will take decades until that is being changed in practice so again not too helpful
474.57s - 476.57s |  for our case here
476.93s - 482.77s |  So what do we want to concretely do here to to support our procurement
484.45s - 488.65s |  We want to do concrete vulnerability research as early as possible
489.41s - 493.25s |  We want to really help shape the security requirements doing
493.89s - 498.81s |  Doing the process and in the final tenders to do that we work with the manufacturers
498.81s - 504.37s |  But we also use support from academia in Switzerland and outside to bring everyone together
504.77s - 511.57s |  To make the systems more secure and not just do this for us, but for everyone so concretely if we do research
511.57s - 516.17s |  We follow a responsible disclosure process where the manufacturers if you find anything
516.97s - 521.01s |  We publish at conferences also come to hacker cons now
521.45s - 525.41s |  And we also release our code wherever possible just as in this case
527.46s - 533.14s |  that brings me then to today's concrete case study vehicles and the army and Bluetooth as
534.14s - 541.54s |  Alluded earlier the DoD buys a lot of vehicles not just these that you can see here probably the ones you think of first
543.94s - 550.10s |  Luckily these don't have Bluetooth or at least I think I mean I haven't checked all of them
550.10s - 555.42s |  You don't really know that might exist these days as well, but in general they don't
557.14s - 559.14s |  But honestly
559.30s - 565.94s |  Boringly by far the most vehicles being procured by our DoD are box standard
566.14s - 568.38s |  run-of-the-mill civilian cars and
568.90s - 576.62s |  They all have Bluetooth you basically cannot buy a car without it even if you want it so even we can't get that without
578.14s - 581.30s |  That brings me of the scope of this research now
582.30s - 589.38s |  Bluetooth of course is not the only interface you find in the car cars are super complex systems
590.58s - 592.58s |  when doing accounts
593.58s - 597.34s |  We found at least 19 interfaces in modern cars
597.86s - 604.62s |  From wired or we deport to the key fob if there's an issue with any of these interfaces we use systems
605.26s - 610.78s |  The only way and the only way traditionally for a manufacturer to do anything and to deal with it
611.30s - 615.38s |  In that car and that model is to do a recall and recalls
616.10s - 619.26s |  typically for safety problems, they're expensive and
620.26s - 626.46s |  Rarely done really just for very important safety problem for security
627.34s - 628.82s |  reasons
628.82s - 630.82s |  This rarely happens to be honest
631.50s - 635.50s |  So that leaves us with a very complex attack surface
636.26s - 644.34s |  Much of which actually has been discussed at Defqon also at the car hacking village. They specialize in that of course, but
645.42s - 652.30s |  Just an illustration here. Don't have to check all of this, but it's a very big complex surf cars
652.62s - 654.62s |  Attack surface you have in modern cars
656.46s - 659.94s |  So why are we looking now specifically at Bluetooth? Well?
660.86s - 662.54s |  most importantly
662.54s - 664.54s |  nobody had done it yet, so
664.94s - 668.46s |  There's a lot of Bluetooth research of course, but nobody has really checked
669.34s - 676.58s |  on a large scale all the exploits that exist in Bluetooth with a reasonable amount of cars
677.18s - 680.86s |  So that sort of Bluetooth security cars hasn't been addressed
681.62s - 685.94s |  That felt to us like an oversight not not just from the procurement perspective
685.94s - 693.66s |  But over 1 billion cars have Bluetooth and as mentioned you can't do anything about that if you buy a new car
694.02s - 699.38s |  that overall makes the research very impactful not just for us, but really for anyone with a car and
700.86s - 702.86s |  We're very happy also with the outcomes
703.66s - 705.66s |  That we had from this research
705.74s - 710.54s |  which was led by by Vlad who will now present the technical details and
711.46s - 716.82s |  I will come back afterwards for any questions or any information
729.32s - 733.60s |  Bluetooth is a short-range wireless communication standard and it is not a specific protocol
733.60s - 739.84s |  But multiple different protocols that work on top of each other and that are maintained by different entities. Due to this complexity
739.84s - 746.16s |  There are different errors and misunderstandings that arise and these are the primary source of the vulnerabilities that we keep finding
746.28s - 751.44s |  We're only going to talk about the Bluetooth classic here. We are not going to talk about the Bluetooth technology at all
751.60s - 757.76s |  So what you have to remember about the Bluetooth is that it is a transport plus additional functionality on top of it
757.76s - 761.44s |  And when I refer to the functionality I refer to the Bluetooth profiles
761.64s - 768.36s |  That allow you to make calls, stream audio, share context messages and even have the whole internet stack on top of the Bluetooth
768.72s - 773.52s |  So Bluetooth is rich in the functionality and we have to secure it and for that we have pairing
773.68s - 779.32s |  When it comes to pairing it depends on the capabilities of the device and the security options
779.44s - 785.28s |  So when it comes to the capabilities themselves, they depend on the input and output capabilities of the device
785.40s - 789.28s |  So if the device has both of them, then we call such device display
789.28s - 789.68s |  Yes, no
789.68s - 795.52s |  If the device has only output capabilities, then we call such device display only. When it comes to the
795.92s - 797.92s |  devices that only has input capabilities
797.92s - 803.84s |  We call such devices keyword-only devices and when the device doesn't have any of the capabilities
803.92s - 807.72s |  So we call such devices no-input, no-output capability device
808.28s - 813.36s |  We can also summarize the security model of the Bluetooth as everything or nothing as pass-pairing
813.48s - 815.48s |  We can access almost all
815.80s - 821.48s |  Functionality that is available to us on the target device without any further authorization in most of the cases
822.08s - 828.32s |  That's why we have to be sure and confident in the pairing process and for that we have different pairing modes
828.72s - 832.04s |  So when the one of the devices doesn't have doesn't support
832.72s - 834.72s |  security options then
834.76s - 840.08s |  for example, it doesn't have simple security pairing or and secure connections then
841.08s - 843.12s |  Legacy pairing is used and from its name
843.12s - 847.60s |  You can ensure that it's legacy and ideally shouldn't be used at all. To give you some reasons
847.60s - 850.36s |  it's vulnerable to the non-pairing text attacks and also
851.32s - 853.32s |  the
853.76s - 859.32s |  The link, the security of the link depends on the four-digit pin which you can easily boot for us
859.64s - 862.68s |  So then when it comes to devices that
863.36s - 869.52s |  Doesn't have input capabilities. If one of the devices doesn't have input capabilities, then just work-pairing mode is used
870.28s - 876.44s |  and for this pairing mode, there are no guarantees that you're actually pairing with the device that you want to pair with and
877.28s - 883.40s |  That's why it is intrinsically vulnerable to the middle attacks. When it comes to the pass-key entry
883.40s - 889.56s |  It was recently discovered that it's vulnerable to the message confusion when the middle attack which is not
890.08s - 892.08s |  Remediated yet in the latest
892.32s - 895.12s |  Bluetooth version might be there for a few years at least
895.80s - 898.56s |  So it leaves us with only one pairing mode
898.56s - 904.80s |  Which is actually secure and this is an American version. It is executed only for the devices that have this way
904.80s - 908.60s |  There's no capabilities and they both want to pair with each other
909.60s - 916.88s |  then when it comes to when we are pass-pairing most of the firmwares or all of the firmwares do not differentiate between the
917.16s - 921.72s |  pairing modes used so whether or not you use the secure pairing mode or not and
922.76s - 924.44s |  that means that
924.44s - 928.60s |  Legacy pairing is the same as an American version at least in the eyes of the firmware
929.16s - 934.88s |  So Bluetooth has been there for more than 23 years and we have found that there are more than 108 different attacks
934.96s - 938.44s |  from the Bluetooth standards themselves as of March 2024
938.72s - 945.48s |  also, SANS provided statistics that there are approximately 650 different CVEs related to the Bluetooth devices as of
945.84s - 950.60s |  2022 and even more right now. So for the presentation
950.64s - 956.08s |  We are going to differentiate between four different categories of the exploits
956.12s - 962.88s |  So when I refer to the critical exploits, I refer to the remote code execution, memory leakage, information leakage, but
963.48s - 964.64s |  then
964.64s - 968.88s |  In the middle, the nano-source categories are actually self-explanatory while
970.72s - 972.72s |  while the chaining category
973.44s - 974.84s |  describes
974.84s - 979.48s |  not specifically vulnerabilities or exploits, but rather weaknesses that
980.28s - 982.28s |  one can use to
983.32s - 987.00s |  to make the attacks possible or they actually allow
988.00s - 991.08s |  or make some of the attacks to be executed easily
991.80s - 993.80s |  We actually tried
993.88s - 995.88s |  even though there are
996.12s - 998.84s |  sorry, even though these have been there for
999.64s - 1001.64s |  22 years and been subject to the
1002.04s - 1005.76s |  extensive security research, there are still charges involved into testing it
1005.92s - 1011.04s |  So it's like the common database of Bluetooth vulnerabilities, it's like the framework for testing it and
1012.84s - 1019.68s |  In general the attacks are being shared, but the proof-of-concepts are not and if they are shared, they are generally shared on the
1020.56s - 1022.56s |  sites that are not
1022.56s - 1024.36s |  quite well indexed
1024.36s - 1029.12s |  So it's quite challenging to find such proof-of-concept and if you find the proof-of-concept
1029.12s - 1032.40s |  there is also, there is a high chance that the
1032.96s - 1039.04s |  proof-of-concept will be based on the old hardware that you can't buy anymore and this also applies to the recently
1039.68s - 1041.60s |  recently publicized
1041.60s - 1046.24s |  exploits, for example, it's hard-to-mainstream. When it comes to testing, there are intrinsic
1046.80s - 1052.56s |  false positives and false negatives when you test in the black box fashion for the nano-source based attacks
1053.36s - 1055.36s |  and then it's a bit tricky to
1056.88s - 1061.84s |  It's a bit tricky to automate the nano-source attacks in some cases, especially for some of the devices
1062.40s - 1064.40s |  because
1064.40s - 1066.88s |  the nano-source attacks are quite powerful in these
1067.44s - 1069.20s |  cases and
1069.20s - 1071.20s |  it requires rebooting the device
1071.76s - 1073.76s |  but it's quite difficult to do, for example
1075.44s - 1082.00s |  In case of the cars, in some cases it requires to wait for 10, 20 or 30 minutes. So it's a bit tricky
1083.04s - 1087.52s |  we try to solve some of these problems and that's why we come up and
1088.48s - 1094.64s |  open-source the framework for vulnerability testing framework for Blizzard Classic. I can access and redevelop 44 different exploits
1095.12s - 1096.88s |  also, the main goal is
1096.88s - 1098.88s |  reproducibility of the
1099.20s - 1105.12s |  past and future research. There is also a balance between automation, semi-automation and manual tests. So
1106.08s - 1108.64s |  even though the attacker side is automated, the
1110.08s - 1112.56s |  victim side is not, it's infeasible to do so
1112.64s - 1117.28s |  So you still have to do some of the manual actions, for example on the infotainment screen
1117.76s - 1120.96s |  I also evaluated half of the exploits on the non-vulnerable devices
1121.28s - 1128.88s |  while for the other half I ensured that the exploits write to some of the payloads, but as there were no vulnerable devices for them
1129.84s - 1137.12s |  we used them as is, but still these exploits found the real vulnerabilities in the cars, so
1138.40s - 1140.40s |  I'm quite confident in them
1140.56s - 1143.04s |  The talk itself works pretty straightforward, the
1143.92s - 1146.72s |  test executes the command, then the engine loads the
1147.26s - 1148.48s |  predefined
1148.48s - 1156.24s |  exploit profile, then checks for the variability and availability of the target device without requiring any interactions from the tester, then executes the
1156.54s - 1162.00s |  exploit and after that, depending on the exploit type, it either compares the value
1162.56s - 1167.68s |  or it checks the variability and availability of the target device once again. After that
1168.24s - 1170.24s |  the toolkit reports back to the tester
1170.96s - 1172.96s |  So I used this
1172.96s - 1178.24s |  toolkit to attack different cars and decided it was pretty minimalistic, a computer-based laptop, or
1178.64s - 1181.20s |  we could have used the virtual machine, USB cables,
1182.80s - 1185.68s |  development board and Nexus 5 phone for
1186.72s - 1193.36s |  denial-of-service attacks and internal war attacks, then I spent approximately one to three hours per car
1193.68s - 1197.68s |  There's different issues arose and for some of the cars, especially the
1198.72s - 1200.72s |  internal combustion cars, you have to
1202.16s - 1206.72s |  test them outside as they require the engine to be started to access the infotainment system
1207.20s - 1209.44s |  and because of that you have to test them outside
1210.64s - 1215.60s |  If you can connect to the infotainment system and observe the logs, please do that as it would help to
1216.16s - 1219.70s |  remediate some of the false positives and false negatives
1220.58s - 1226.52s |  So all of the cars were provided by SAP Defense Campus Army Logistics and some were provided by friends and acquaintances
1227.14s - 1229.38s |  In total we had 22 cars, only
1230.50s - 1236.58s |  four were partially tested. You might think that the sample size is quite small, but it is the biggest out there
1237.54s - 1238.58s |  and
1238.58s - 1241.06s |  we tried to focus on different categories of the cars
1242.50s - 1243.92s |  of the cars
1243.92s - 1250.40s |  monetary-wise and also focusing on the top manufacturers, so that we would have a notion
1250.80s - 1255.12s |  of the state-of-the-art blitzer security in the automotive industry
1255.84s - 1262.08s |  And finally, all the blitzer tests are non-invasive, so we didn't have any problems with the
1262.64s - 1264.64s |  cars afterwards
1264.72s - 1270.90s |  I spent approximately 40 hours throughout a few weeks and found 73 different vulnerabilities
1271.62s - 1276.26s |  Some issues were not reportable because they are inherent issues and
1277.22s - 1279.88s |  that's why I was able to report only 64 vulnerabilities
1280.74s - 1288.10s |  All the vulnerabilities that were reported were reported responsibly and all manufacturers and vendors had time to fix them
1288.58s - 1291.38s |  But you already guessed that not all of them did that
1291.94s - 1297.30s |  But we still are releasing as there have been more time. They had a lot of time to do so
1298.10s - 1300.10s |  so
1300.10s - 1307.46s |  Generally, the first thing that I wanted to share is that the cars are generally lagging in adoption of the newest blitzer standards
1307.70s - 1311.86s |  so for example, you wanted to buy a 2023 car, you would expect that the
1312.50s - 1319.08s |  Hardware used in it would be rather recent. But in fact, what you get is the blitzer's version from 2014
1319.62s - 1321.94s |  And the difference is nine years in this case
1322.42s - 1326.10s |  And on average it's seven years and mean is also seven years
1326.74s - 1332.66s |  So in the time frame of nine years, there have been a lot of research done into the business
1333.06s - 1339.06s |  So there are more than 10 different attacks on the car specification itself, which also affects your
1339.62s - 1340.90s |  business version
1340.90s - 1342.90s |  and that's why you have to
1343.14s - 1347.94s |  You're in risk. You're in risk because there are existing vulnerabilities that could be
1349.30s - 1350.88s |  could be
1350.88s - 1352.66s |  exploited in your car
1352.66s - 1357.14s |  First you might think that you can remediate them with the firmware update. Here's the first problem
1357.86s - 1363.94s |  most of the cars still don't provide the firmware updates and the second problem is that you cannot remediate the
1365.86s - 1372.02s |  Force specification attacks with the firmware updates as they generally require the fixing the standards first
1372.34s - 1379.46s |  The standards level first then a few years would pass as the new hardware will be developed and be available on the market
1379.86s - 1381.86s |  after that you'll be able to
1382.18s - 1383.46s |  actually
1383.46s - 1386.66s |  swap the hardware in your car for the newest
1387.06s - 1392.42s |  But no one is going to do that for you and manufacturers most likely won't be doing that and it is required
1392.82s - 1398.98s |  Because you can change the blitzer's version only by swapping the hardware. You cannot do that in the firmware
1400.02s - 1402.12s |  So we've been testing for the known vulnerabilities
1402.66s - 1404.66s |  And we actually expected that
1405.22s - 1407.22s |  we won't find
1407.22s - 1413.40s |  Non-vulnerabilities in the cars produced in 2022 and 23. That was that were our expectations
1413.94s - 1415.94s |  But in fact, we still
1416.02s - 1422.36s |  We still found a lot of cars that had them and for example Tesla cars. They had a specific man-in-the-middle
1423.36s - 1426.66s |  Vulnerability that also should in theory exist in other models
1427.54s - 1429.54s |  You can check it for yourself
1429.54s - 1434.68s |  but the most interesting view is actually on the average number of vulnerabilities found per car and manufacturer
1435.40s - 1436.28s |  as
1436.28s - 1437.80s |  you can you can
1437.80s - 1442.30s |  See here the differences between between them and also the similarities
1442.84s - 1447.96s |  So when it comes to the critical vulnerabilities, there were only three manufacturers that had them
1449.22s - 1451.22s |  Renault and Volkswagen
1451.80s - 1456.28s |  So these vulnerabilities were rather old and they could have been fixed with the firmware update
1456.36s - 1459.96s |  But there were no firmware updates for these vulnerabilities for these cars
1460.84s - 1464.60s |  Then the when it comes to the denial of service and man-in-the-middle attacks
1465.48s - 1467.48s |  you have to notice that
1468.20s - 1475.56s |  If one of the manufacturer doesn't have man-in-the-middle attacks, they would generally have denial of service attacks or vice versa
1475.96s - 1476.92s |  so
1476.92s - 1479.88s |  These types are omnipresent and they can be swapped
1479.96s - 1484.12s |  So they both of them can be used to establish the man-in-the-middle position
1484.20s - 1490.68s |  So you can use both denial of service attacks and man-in-the-middle attacks to aid you in establishing the man-in-the-middle position
1491.24s - 1495.80s |  So this knowledge would be very helpful in the future. So try to remember it
1496.52s - 1502.04s |  And as we've been talking for an hour vulnerabilities, you already guessed that we found some new ones
1502.84s - 1505.56s |  especially some new attacks actually
1506.36s - 1509.40s |  So the first attack is the contact distractor attack here
1509.56s - 1511.56s |  The victim
1511.62s - 1517.80s |  Establishes the bluetooth connection with the car then shares the contacts via phonebook exit profile and leaves the car
1518.20s - 1521.32s |  without impairing the phone for example, which is by
1523.40s - 1528.12s |  For example by switching off the bluetooth or just walking away then we will be able to
1529.56s - 1535.08s |  spoof the MAC address to the MAC address of the victim establish the bluetooth connection and extract the contacts
1535.48s - 1537.48s |  But it would have been an ideal case
1537.64s - 1545.24s |  But unfortunately, we cannot do that because both the attacker and the car execute run the phonebook exit profile client
1546.44s - 1548.84s |  client service and only the servicers can
1549.56s - 1553.72s |  Serve the contacts. So this specific attack applies in the car sharing context
1554.36s - 1557.80s |  And due to that fact, we have to get into the car
1558.28s - 1560.12s |  We do not need to start the car
1560.12s - 1564.68s |  We just need to access the infotainment system and it is accessible without the starting the engine
1565.16s - 1567.80s |  So we would be able to we would have to
1568.36s - 1574.60s |  Search for the password number on the infotainment screen then and if the car is vulnerable, it would show us the contacts
1575.80s - 1578.28s |  So here you can see that we connect it to the Renault car
1578.52s - 1581.48s |  We do not have any contacts on the left
1581.72s - 1587.40s |  But when we switch to the dial pad and search for the part of the number then the contacts are shown to us
1588.36s - 1593.64s |  The second attack is very similar to the no-input no-output mini-middle attack with some caveats that
1594.20s - 1598.52s |  that apply to the automotive industry
1599.32s - 1600.28s |  so
1600.28s - 1602.28s |  some of the cars actually deny
1602.42s - 1607.08s |  connections or pairing to be initiated from the no-input no-output capability devices
1607.72s - 1609.72s |  but there are also the cars that
1610.04s - 1612.36s |  allow the connection to be initiated from the
1613.32s - 1615.32s |  user smartphone and also from the car
1615.48s - 1616.44s |  So
1616.44s - 1618.04s |  in case the
1618.04s - 1619.88s |  Connection is being initiated from the car
1619.88s - 1625.48s |  There are some cars that actually forget that they deny access to the no-input no-output capability devices
1625.80s - 1629.08s |  and thus it might be possible to get the connections from the car to the
1629.88s - 1630.92s |  attacker
1630.92s - 1635.48s |  For example by self-determining or pre-committing or using the other
1636.36s - 1639.48s |  other techniques so that we might be able to
1640.28s - 1642.28s |  get the middle position
1642.60s - 1644.04s |  So the third
1644.04s - 1647.88s |  Attack is actually the attack on the numerical person man-in-the-middle
1648.20s - 1651.64s |  This is insecure numerical person man-in-the-middle attack in this case
1652.60s - 1653.96s |  the it is
1653.96s - 1655.96s |  mutation specific attack so
1656.92s - 1658.92s |  In this case the car is either
1659.40s - 1665.32s |  either has the design problem or they have a state problem in case of the state we'd have to
1666.04s - 1668.04s |  Check the connection
1668.12s - 1674.20s |  With different capabilities while for the design we'd have to just observe the pairing process
1674.60s - 1678.44s |  so in case the car is vulnerable, it wouldn't need any confirmation of the
1679.00s - 1683.88s |  Pairing on the infotainment screen or it show no-input no-output like confirmation without
1684.28s - 1687.96s |  Showing the pairing number or it will show you static number across different
1688.52s - 1690.36s |  pairing attempts
1690.36s - 1693.40s |  So due to this fact we have all the pieces to
1693.88s - 1697.64s |  Establish the man-in-the-middle position or just the connection to the car
1698.76s - 1702.44s |  So to give you some of the examples in case of the other cars
1702.68s - 1708.60s |  they show you the pairing number they show you the button to cancel the connection the pairing or the connection and
1709.24s - 1713.32s |  but they show you the button to accept the pairing and this is
1714.12s - 1717.56s |  a problem because the call logic is on the attacker side
1717.96s - 1721.40s |  In case of the other cars they show you no-input no-output like confirmation window
1721.40s - 1725.80s |  They don't show you the pairing number and if you click accept the pairing would be done
1726.52s - 1728.36s |  after that, they will show you the
1728.36s - 1733.16s |  Window with the pairing number and the button to cancel pairing so unpair
1733.80s - 1735.80s |  but in this case, there are two
1736.28s - 1740.44s |  Two possibilities. So in case of the first one the if the user
1741.00s - 1743.96s |  Clicks yes or pair on their phone. Yes, then
1745.40s - 1751.24s |  On their phone first then we'll be able to we might be able to get the man-in-the-middle position
1751.56s - 1757.96s |  If they don't then they might spot the attack and then and ask them to have five to ten seconds to execute it
1758.44s - 1763.56s |  When it comes to the BMW cars, they had a state problem. Some of them still might have
1764.76s - 1771.24s |  But it should be fixed in the newer versions in the newer former versions. So in this case you can force the
1773.88s - 1774.76s |  You can
1774.76s - 1776.92s |  force the state problem by using
1777.72s - 1784.76s |  The capabilities other than display yes no and it will show you the specific number that you get you see in the screen
1785.96s - 1791.56s |  After that, you'll be able to establish the man-in-the-middle position or just the connection to the user or to the car
1791.96s - 1798.68s |  In case of the Renault cars, they didn't give you give the user any control whatsoever. So anyone could connect to it
1799.48s - 1803.42s |  So you've seen that I found many different vulnerabilities in the car specifically
1803.96s - 1805.96s |  primarily denial of service attacks and
1806.60s - 1811.48s |  Man-in-the-middle attacks, but you still might have a question. What can we do with them?
1812.04s - 1814.44s |  And this is what we are going to explore now
1815.00s - 1820.04s |  So first thing we can we have to establish the man-in-the-middle position and for that we have three different options
1820.36s - 1827.16s |  First one is to do selective jamming in case of this active jamming is relatively difficult to do but it's still possible
1827.48s - 1829.48s |  so in this case, we would have to
1829.72s - 1835.88s |  To spoof the MAC address of the car and then selectively jam it after that we might be able to get the
1837.32s - 1841.40s |  Connection the request or pairing request from the user or do it vice versa
1842.12s - 1845.00s |  The second option is to use denial of service attacks and deny
1846.76s - 1854.28s |  Resource to the car and then spoof the MAC address again and get the connection from the user or vice versa
1855.00s - 1857.96s |  The third option is actually to work with different MAC addresses
1858.04s - 1863.48s |  but the same names as those the car and the user would expect so in this case if we connect to the
1863.88s - 1865.88s |  car, we would have the
1866.12s - 1871.08s |  name of a user and if we connect to the user we would have the name of the car so that
1872.12s - 1874.60s |  The user would be lured into pairing
1875.72s - 1879.40s |  you might actually have a question or a problem with discovering the
1879.88s - 1881.08s |  um
1881.08s - 1887.88s |  MAC addresses you might think it is difficult, but in fact, it's rather easy and became easy as of recently
1888.12s - 1892.76s |  so for example, you have at least two options. The first option is to simply listen for the
1894.36s - 1897.00s |  For the MAC addresses for discoverable MAC addresses with your
1897.56s - 1901.72s |  Laptop hardware you would be able to find only discoverable MAC addresses
1901.96s - 1908.84s |  So the sample size won't be big but it might be enough for the attacks and the second
1909.40s - 1915.96s |  Option is to use BlueSquid's attack to actually get the MAC address almost all MAC addresses are in the BlueSquid's classic space
1916.36s - 1922.04s |  With the help of EuroSRP and Ubuntu, so it's approximately two thousand dollars worth of the equipment
1922.84s - 1924.84s |  so with that you'll be able to
1925.16s - 1929.72s |  discover the MAC addresses that are in non-discoverable mode for
1930.60s - 1932.92s |  Almost all the attacks that we are going to show you
1933.56s - 1935.56s |  so then
1935.56s - 1937.16s |  with this specific
1937.16s - 1941.80s |  Part you'll be able to get your first click or the first seamless click and
1942.92s - 1944.92s |  After that, you might have a question
1945.16s - 1947.88s |  What can we do with the menu middle position?
1948.04s - 1953.24s |  So in this case, we would have to escape the Bluetooth sandbox because we're in so to say
1953.64s - 1955.64s |  Bluetooth sandbox says we cannot
1955.86s - 1957.64s |  execute the code
1957.64s - 1964.04s |  We cannot execute arbitrary code on this other device and because of that we'd have to switch to the phones
1964.68s - 1967.48s |  Rather than and look for the functionality that we can exploit
1967.80s - 1973.32s |  So in this case generally phones have the phone functionality. They allow you to make calls play
1974.20s - 1979.72s |  music or stream audio without any authorization while when it comes to sharing contacts and messages
1980.04s - 1983.96s |  They require the authorization in some cases. Then they also allow you to
1985.24s - 1991.16s |  Emulate the SIM card of the victim or user and get access to the SMS messages and phone calls
1992.20s - 1993.80s |  while this
1993.88s - 1995.48s |  might seem
1995.48s - 1999.24s |  Very interesting the specific semi-access profile. This is actually
1999.78s - 2004.04s |  Deprecated and it's only available on the android devices and has a lot of warnings
2004.68s - 2006.28s |  it's not like
2006.28s - 2009.72s |  Users users would not dismiss the warnings, but still
2010.36s - 2014.28s |  It's only available on the android device. And in fact, the most interesting ones
2014.84s - 2019.48s |  Is the message access profile which allows you to extract different messages
2019.48s - 2025.98s |  For example SMS messages and emails in case of the emails. It's only available according to the specification
2026.52s - 2031.48s |  I haven't been able to find any implementation that actually worked with the emails
2031.96s - 2032.84s |  so
2032.84s - 2037.24s |  You might you might find that might not i'm not sure in case of the emails
2037.24s - 2039.80s |  but what I know for the fact is that you can
2040.28s - 2046.60s |  Extract the SMS messages that were ever delivered to the phone and also you can send the SMS messages
2047.08s - 2050.28s |  So additionally the user experience is very helpful as
2051.40s - 2055.96s |  on the iOS devices this specific functionality is called notifications file on the
2056.68s - 2063.00s |  Android devices. It's called messages. So there is no mention mentioning of SMS messages at all
2064.20s - 2067.26s |  So we come to the generic attack that you can execute
2067.72s - 2071.74s |  And the first thing that you need is the man in the position which requires
2072.30s - 2076.78s |  Which required one click from the user and then you will be able to ask for the messenger exit profile
2077.58s - 2081.26s |  Access we should require another click from the user once granted
2081.66s - 2086.78s |  You would be able to instruct the user's phone to send the SMS message or call a specific number that you control
2087.02s - 2091.90s |  So that you will be able to link the phone number to yourself and then use it
2092.86s - 2094.86s |  in the open source intelligence for
2095.08s - 2097.42s |  automatic flow so that you will be able to discover the
2098.38s - 2102.46s |  Login names or email addresses or just use the phone number
2103.42s - 2105.42s |  directly on the services
2105.58s - 2107.58s |  of interest and then
2108.06s - 2113.66s |  Trigger the SMS based OTP for the accounts that are associated with the victim's phone number
2114.22s - 2117.74s |  Then the OTP would be delivered to the victim's phone which we can
2118.22s - 2125.18s |  Always retrieve as we have the messenger profile access and then relay back to the backend and hijack the accounts
2125.98s - 2130.38s |  If this sounds all quite complicated and unlikely to you, I actually have some good news
2130.70s - 2135.10s |  So first we do not need to have the manual position at all. We just need the
2135.72s - 2137.42s |  connection to the phone
2137.42s - 2144.62s |  secondly, we can link the phone numbers while accessing the metadata of the SMS messages that were previously delivered and
2145.10s - 2149.10s |  I guess almost all of us have some SMS messages that were delivered to the
2149.98s - 2151.98s |  phone numbers that we use
2152.06s - 2158.62s |  Then we can also look for the content into the contents of the SMS messages and look for the emails and the login names
2158.94s - 2164.86s |  or alternatively, we could use the phone number in the or the data that we found in the
2165.50s - 2169.82s |  open source intelligence for then finally, we do not need to have the
2170.46s - 2173.44s |  We do not need to ask for the messenger profile authorization
2174.14s - 2181.74s |  For some of the phones, especially 2022 and older phones, but also this applies to the latest phones as well
2182.14s - 2186.46s |  So this is a one-to-two-click generic cloud takeover attack
2188.14s - 2191.34s |  With this attack we can bypass MFA we can
2193.26s - 2198.78s |  We can hijack accounts for the service that primarily rely on the SMS-based OTPs, for example meta services
2199.42s - 2202.06s |  and but the most interesting services that we
2202.78s - 2204.30s |  want to hijack or
2204.30s - 2211.44s |  Potential perpetrators we want to hijack are the ones that for which we can trigger the SMS-based OTP by knowing some information
2211.76s - 2213.44s |  in most of the cases, it's
2213.44s - 2215.44s |  knowing the email address or the
2216.08s - 2217.28s |  login name
2217.28s - 2220.64s |  so by knowing this information you would be able to
2221.20s - 2225.52s |  Trigger the SMS-based OTP and to know this get to know this information
2225.60s - 2232.32s |  You can use the open source intelligence form then you'll be able to hijack paypal coinbase google account in cases the
2232.96s - 2236.48s |  User is not logged in into the google account on the android phone
2237.12s - 2241.92s |  Then you would be also able to for example hijack the apps to control the vehicles
2243.28s - 2245.84s |  But for some of these services, it's rather difficult to do
2246.24s - 2253.12s |  So in case of the apple id you have to resort to phishing only as the victim is constantly notified and it's infeasible to you
2253.84s - 2259.20s |  The recovery in the timely fashion then when it comes to the google account if the user is logged in
2260.96s - 2264.56s |  On the android device then we would have to know the
2264.96s - 2267.92s |  Browser type and operating system type
2268.64s - 2271.04s |  Type so that we can forge it and as we'll be
2271.60s - 2278.40s |  Close to the victim and have similar IP and location we'll be able to bypass all the checks done by google and hijack the account
2278.96s - 2280.64s |  To give you some examples
2280.64s - 2286.32s |  We would first start with the android phone in this case. This is a samsung s23 for which I did the attack
2286.80s - 2291.94s |  So almost all of the android phones are actually always bearable and discoverable
2292.34s - 2293.22s |  um
2293.22s - 2295.86s |  So you can execute the attack at any time you want
2296.42s - 2301.38s |  And once we try to connect and pair the we can force the notebook
2302.58s - 2307.38s |  confirmation window that wouldn't show any pairing numbers to compare and thus the user would be
2309.22s - 2315.46s |  See only the specific device wants to pair with them and the buttons to pair or cancel
2315.94s - 2317.94s |  so in this case, it's
2317.94s - 2322.26s |  The art of choosing the names to lure the victim into pairing or
2323.94s - 2330.34s |  For that we can use we can do the targeted attacks to observe the victim or just use the most common ones
2330.90s - 2335.86s |  And try to pair randomly after that we can ask for the master extra profile
2336.90s - 2341.72s |  Access and in most of the cases, it is a typical workflow for the carsons
2342.26s - 2347.62s |  Smart smart watches and speakers. So if you forge the name for these devices, you would be
2348.66s - 2350.66s |  more likely to get the
2351.22s - 2355.46s |  Message access if the victim is more or less cautious
2356.10s - 2357.30s |  but
2357.30s - 2359.70s |  I guess most of the users are not
2360.26s - 2362.50s |  so they would probably run the
2363.46s - 2366.66s |  Access once granted you'll be able to execute the attack
2366.66s - 2370.58s |  So get the phone number first the sms based otp on this specific site
2370.90s - 2376.50s |  Then extract the otp enter the otp change the password and log out the user from all of the sessions
2377.22s - 2384.42s |  For the samsung account and I was able to log out the user from their old phone and completely hijack the samsung account
2385.62s - 2392.58s |  So this is a two-click generic attack and also who was working on the patch show hardening for the android devices
2392.90s - 2394.90s |  while samsung patched this
2395.70s - 2400.10s |  Their part in the samsung account service in june 24
2400.90s - 2404.36s |  They actually said that they fixed the vulnerability in november 2023
2405.22s - 2410.02s |  But I reported in may 2024 and it was exploitable at that time
2410.66s - 2412.66s |  but who knows
2412.98s - 2419.86s |  When it comes to exploiting ios devices, you can actually exploit map the same way on the ios devices as
2420.34s - 2426.74s |  On the android devices as on each new pairing request or in each new repairing pairing
2427.54s - 2431.70s |  The user would need to explicitly allow notifications by going to the
2432.42s - 2434.42s |  settings menu for this specific
2434.98s - 2442.82s |  Bluetooth device and then toggling the button to allow the notifications. It's quite infeasible when we do the attack that way but
2444.18s - 2449.64s |  What if we can renegotiate the connection for an already connected device that already has the notification permissions?
2449.94s - 2454.52s |  You would expect that the notifications would be reset on each pairing which is a requirement
2455.48s - 2457.64s |  As per specification but
2459.00s - 2461.80s |  ios doesn't follow that so
2462.60s - 2469.48s |  You can spoof the mac address for an already connected device that already has access or permissions and try to repair
2470.04s - 2472.04s |  in this case
2472.20s - 2473.32s |  it's
2473.32s - 2479.16s |  Here, I wasn't able to enforce the non-bit notebook like confirmation window that wouldn't show the pairing number to compare
2479.64s - 2486.12s |  but you might also experiment with that and maybe get the non-bit notebook like confirmation window, but
2487.56s - 2489.80s |  It is unfortunately that
2490.52s - 2492.68s |  It's not the case as of today
2492.68s - 2499.00s |  But what's most interesting is that the ios is also helping us in
2499.64s - 2506.68s |  One other way they fetch the name of the previously connected device from the cache and use it in the pairing request
2507.00s - 2513.96s |  So if the user had some kind of esoteric name for their device, they would be more inclined into pairing with us
2514.36s - 2519.96s |  And once they click pair we have the notifications permissions as the previous device
2520.36s - 2527.16s |  Is the previous connection had them so we'll be able to execute the attack in this case, for example hijack the facebook
2527.64s - 2533.80s |  But you might actually want to focus not just on the facebook, but also on the apple id itself. So
2534.12s - 2535.48s |  um
2535.48s - 2538.60s |  recently there was an attack and that involved phishing and
2539.64s - 2544.04s |  Seems to have attack and the perpetrators were able to steal twenty two thousand dollars
2544.52s - 2549.64s |  From the victim and here we can try to replicate the single attack with the map
2550.76s - 2552.76s |  map attack so
2552.76s - 2557.08s |  Here we'll be able to inject the sms message as if they came from apple
2557.48s - 2564.84s |  And do phishing once the user enters the apple id and the password the sms-based otp or mfe would be
2566.44s - 2568.84s |  Would be used and we'll be able to steal them
2569.56s - 2573.40s |  Steal the sms message value for or otp value
2574.20s - 2576.20s |  via the messenger extra profile attack
2576.60s - 2581.40s |  So here we just swap the same tool with the messenger extra profile attack
2581.88s - 2587.32s |  We we can also focus on other applications like paypal or coinbase or any other of interest
2587.96s - 2591.88s |  So you do not have to always focus on the apple id
2592.76s - 2594.76s |  but
2595.08s - 2597.08s |  The most actually interesting
2597.56s - 2599.00s |  worrying or
2599.00s - 2601.96s |  best part or worst part of this talk is that
2602.84s - 2608.92s |  This specific vulnerability is not fixed as of the latest ios version and it's not going to be fixed
2609.64s - 2616.76s |  The apple said that the users are safe because they are showing the parent prompt, but I seem to see that
2618.04s - 2619.32s |  They generally
2619.32s - 2625.72s |  Violated the business verification and that's why their users are one click away from their accounts being stolen
2626.12s - 2632.68s |  But of course it's up to you to judge and decide whether this is a specific vulnerability that should be fixed or not
2633.32s - 2637.74s |  But I personally hope that apple would eventually fix it and accredit accordingly
2638.70s - 2640.38s |  For the attack itself
2640.38s - 2648.14s |  I'm releasing a tool that affects more than 50 percent of the smartphone market worldwide more likely to affect the whole market
2648.78s - 2652.94s |  And this specific tool would allow you to retrieve and send sms messages as well
2653.02s - 2658.38s |  So look for the emails and phone numbers on the device and it would be possible to
2659.02s - 2663.74s |  Connect the tool to the infrastructure. This would actually do the recovery process
2664.70s - 2667.26s |  so here we come to the kit hacker base and
2667.74s - 2669.74s |  the first thing that I want to mention is that
2670.94s - 2675.44s |  Even the newest cars are generally shipped with the protocol. It's just vulnerabilities
2676.46s - 2679.18s |  and it's not really easy to fix this because
2679.74s - 2684.08s |  The design of the car is locked in just several years before it's manufactured
2684.92s - 2689.66s |  Manufactured and it's not possible to change the business version or hardware in it
2690.30s - 2696.22s |  So it's quite difficult to do so and we have to live with the anticipation of some kind of
2696.84s - 2700.78s |  Protocol obligations vulnerabilities in the cars and knowing that
2701.42s - 2705.42s |  Then when it comes to pairing pairing security or in the security environment
2705.74s - 2709.82s |  It's extremely important as it's the only safeguard against the many middle attacks
2710.30s - 2712.30s |  but what you have to remember is that
2713.26s - 2719.42s |  Forcing repairing is possible and it might be malicious. So we have to watch out for that as well
2720.30s - 2722.30s |  then when it comes to the
2722.46s - 2726.38s |  SMS based OTP services or the services that rely only on
2727.02s - 2734.86s |  SMS based OTPs. It might be rather risky for the end users and that's why maybe it would be best to consider other
2735.74s - 2737.74s |  OTPs
2738.62s - 2741.34s |  OTP sources, so for example
2742.14s - 2747.82s |  Email based OTPs and in that case it might add additional safeguards to the users
2748.46s - 2753.66s |  So thanks for listening now I hand over to Martin and maybe see you next year
2758.59s - 2765.79s |  All right, thanks for staying with us there's just two points left for me at the very end
2767.71s - 2769.71s |  Let me find the right slides
2774.09s - 2785.37s |  No, that's not it
2785.37s - 2797.96s |  Be quicker that way
2797.96s - 2804.14s |  So yeah, sorry, we've seen that much of bluetooth is fundamentally insecure both for standards and implementations
2804.92s - 2807.56s |  The toolkit have the link on the last slide as well
2808.60s - 2812.20s |  It's online for you to check your cars your bluetooth
2812.82s - 2814.84s |  products any of them
2814.84s - 2817.64s |  And of course, we're not liable for anything you do with it
2819.88s - 2827.16s |  But we focus on bluetooth and cars and just very last thing of course you can check anything and
2827.96s - 2831.64s |  We took it to one of the domains. We're very familiar with which is aviation
2832.04s - 2836.04s |  We tried it out on our own lab of certified real aircraft hardware
2836.60s - 2843.64s |  Which also has bluetooth to connect so-called electronic flight bags, which is just an ipad really with flight computers
2844.60s - 2846.36s |  and
2846.36s - 2847.64s |  the thing is
2847.64s - 2852.60s |  These bluetooth versions are so old. Most of these exploits don't work there because
2853.72s - 2859.56s |  honestly, you can establish the man in the middle position anyway, because the encryption is just so
2860.12s - 2863.24s |  Weak or trivial so we haven't explored this further
2863.88s - 2865.32s |  but it should be
2865.32s - 2869.40s |  Very easy to also do this on at least these specific
2870.52s - 2872.52s |  flight management systems
2873.16s - 2875.88s |  For that, thank you for listening and also
2876.52s - 2881.16s |  Putting up with a video talk. I hope that can make it in person next time
2882.12s - 2888.84s |  This is the qr code to the github repository where you can find all the information also this disclosure results
2889.56s - 2891.56s |  Any questions i'm available?
2892.36s - 2896.70s |  And vlad is also very happy if you contact him online. Thank you very much