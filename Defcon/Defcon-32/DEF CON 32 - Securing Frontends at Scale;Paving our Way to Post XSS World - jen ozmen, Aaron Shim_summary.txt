**Introduction to XSS**
- **Cross-site scripting (XSS)** remains a top web vulnerability.
- Google has heavily invested in defenses against XSS.
- The talk discusses runtime and compile-time protections across hundreds of products.
- Focus on technical lessons and best practices.
- Future of anti-XSS defenses aims to make the web safer for everyone.

**Agenda Overview**
- Introduction to **XSS** and examples.
- Discussion on **runtime mitigation** with content security policy (CSP).
- Securing applications at scale.
- Imagining a **post-XSS world**.
- Ending with a **call to action**.

**Understanding XSS**
- **Root cause**: User input gets mixed with code and is interpreted as code.
- **HTML** is dynamic and mixes static data with executable logic.
- Leads to malicious scripts injected into trusted sites.
- Results in attackers taking control of user accounts.

**DOM XSS**
- **Root cause**: DOM APIs are not secure by default.
- JavaScript turns strings into code via APIs like **innerHTML** or **script.innerText**.
- **Modern frameworks** like React abstract away DOM manipulations but do not prevent misuse.

**Content Security Policy (CSP)**
- **Nonce-only CSP**: Allows only scripts with the right nonce to run.
- **Hash-based CSP**: Provides a hash value instead of a nonce, useful when backend control is limited.
- **Trusted Types**: Protects against DOM-based XSS by restricting access to dangerous DOM APIs.

**Security Features and Best Practices**
- **Frameworks**: Use context-aware templating and built-in compatibility with security features.
- **Shift left**: Add headers and protections early in development.
- **Tools**: CSP evaluator, Trusted Types Helper, Safety Web, and Safe Values.

**Third-party Dependencies**
- **Challenge**: Ensuring all code running on the site is free of policy violations.
- **Solution**: Use tools to make informed decisions about dependencies and their compatibility with security features.

**Future Vision**
- **Perfect Types**: Next evolution of Trusted Types and a post-XSS world.
- **Secure-by-default APIs**: New platform-level APIs to replace unsafe DOM operations.
- **Safe coding philosophy**: Extend secure practices beyond JavaScript and cross-site scripting.

**Conclusion**
- Google's commitment to a safer future through shared knowledge and industry collaboration.
- Encouragement to adopt these practices for a more secure web.