{
  "webpage_url": "https://www.youtube.com/watch?v=l89qpmb2CAQ",
  "title": "DEF CON 32 - Evading Modern Defenses When Phishing with Pixels - Melvin Langvik",
  "description": "Dive into the art of phishing with QR codes! We'll cover the fundamentals of QR code phishing, revealing how these innocuous-looking images are used to deceive users into a false sense of legitimacy. After touching upon the basics, we'll explore creative tactics for obfuscating and hiding QR codes to ensure they reach their intended targets. As a sidetrack, we'll delve into how emails are rendered within the Outlook Mail Application and showcase some neat tricks that exploit its limitations for hiding QR codes from modern defensive solutions. Overall, the talk is intended to help testers up their QR code phishing game!",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1068,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.02s - 2.66s | This text was transcribed using whisper model: large-v2

 All right, good morning audience.
2.66s - 4.42s |  Welcome to the second day of DEF CON.
4.42s - 5.26s |  Proud to be here.
5.26s - 7.66s |  Hopefully everyone's had a great experience so far.
9.14s - 11.90s |  I wanna kick things off by introducing our next speaker.
11.90s - 13.54s |  He is coming all the way from Norway.
13.54s - 15.30s |  So he's had a very long flight.
15.30s - 17.56s |  So we definitely wanna give this guy a lot of attention.
17.56s - 19.26s |  His name is Melvin Langvik
19.26s - 23.06s |  and I'll read just a quick breakdown of his bio.
23.06s - 24.90s |  Melvin is an accomplished professional
24.90s - 26.94s |  with a diverse background in tech.
26.94s - 28.74s |  He started his career as a developer,
28.74s - 30.10s |  an integration consultant,
30.10s - 31.34s |  gaining practical experience
31.34s - 33.90s |  in distributing critical backend infrastructure
33.90s - 36.50s |  for an international customer base.
36.50s - 38.58s |  Melvin's passion for cybersecurity
38.58s - 43.22s |  led him to transition into offensive security, the bad team.
43.22s - 45.18s |  He previously worked for TrustedSec,
45.18s - 47.86s |  which is an internationally recognized security company.
47.86s - 50.70s |  As part of, as TrustedSec's targeted operations team,
50.70s - 53.66s |  Melvin was tasked with performing targeted cyber attacks
53.66s - 55.08s |  against some of the most mature
55.08s - 58.14s |  and often largest companies in the world.
58.14s - 61.66s |  Today, Melvin is with the offensive security team lead
61.66s - 63.90s |  at a company called CovertAS.
63.90s - 66.82s |  So please give Melvin a very warm welcome
66.82s - 68.60s |  and listen to what he has to say.
69.58s - 70.42s |  Thank you, Melvin.
70.42s - 71.58s |  Thank you so much.
71.58s - 72.78s |  Thank you so much, guys.
72.78s - 74.78s |  Okay, so this talk is only 25 minutes.
74.78s - 76.38s |  So the first portion is gonna be super quick
76.38s - 77.90s |  and then towards the end, we'll slow down
77.90s - 79.62s |  and I'll give you guys a nice demo, okay?
79.62s - 82.62s |  So evading modern fences versus phishing with pixels.
82.62s - 85.94s |  We're gonna talk about QR code phishing specifically.
85.94s - 87.18s |  Quick introduction about myself,
87.18s - 89.74s |  even though my biography got read up here.
89.74s - 90.74s |  My name is Melvin Langvik.
90.74s - 92.38s |  I go by the alias Flangvik.
92.38s - 93.22s |  I'm the team lead
93.22s - 95.10s |  for a small Norwegian pentest company called Covert.
95.10s - 97.14s |  Previously, I was at TrustedSec.
97.14s - 99.18s |  I've done quite a few offensive security tools
99.18s - 100.02s |  for the community.
100.02s - 101.34s |  Maybe somebody recognizes sharp collection
101.34s - 102.66s |  or team filtration.
102.66s - 105.90s |  I also create trash, semi-good-ish infosec content
105.90s - 106.94s |  on YouTube and Twitch.
106.94s - 109.26s |  Stream, I don't wanna go on a stream every Sunday,
109.26s - 111.30s |  but close to every Sunday, I do a stream.
112.86s - 114.62s |  Like you guys, I'm a part-time alcoholic
114.62s - 116.02s |  when I'm at conferences.
116.58s - 120.62s |  I'm also the guy who did the meme-y C2 and EDR tier lists.
120.62s - 123.30s |  Obviously, AnyDesk is the best C2 out there, right?
123.30s - 125.02s |  So this is all a meme.
125.02s - 126.82s |  Okay, so the game plan for this talk.
126.82s - 128.46s |  We're gonna talk about QR codes one-on-one.
128.46s - 130.22s |  We're gonna talk about phishing with QR codes.
130.22s - 131.90s |  Some basic detection engineering.
131.90s - 134.22s |  Obviously, not my field, but just some basic stuff.
134.22s - 137.74s |  Image-less QR codes, question mark, potential profit,
137.74s - 139.18s |  taking things a step further,
139.18s - 141.02s |  and then we're gonna talk about the tool and toolkit
141.02s - 143.10s |  I'm gonna be demoing and sort of releasing today
143.10s - 144.50s |  called Crucible.
144.50s - 146.70s |  Okay, so let's talk about some QR codes.
146.70s - 147.62s |  What is a QR code?
147.62s - 149.38s |  QR code is a quick response code.
149.38s - 150.50s |  It's essentially a bar code
150.50s - 152.66s |  that contains a given amount of data.
153.58s - 155.86s |  A QR code works while you scan it using a device.
155.86s - 157.10s |  Typically, it's a mobile, right?
157.10s - 158.22s |  That scans the QR code,
158.22s - 160.18s |  takes you to a link or some other data.
162.22s - 164.66s |  The QR code itself has a couple of key factors.
164.66s - 167.34s |  Finder patterns marked down there in purple
167.34s - 169.22s |  is for the device you're scanning the QR code
169.22s - 171.46s |  to identify where the QR code is.
171.46s - 172.90s |  Is this a QR code or not?
172.90s - 175.06s |  You got the alignment marker in green,
175.06s - 177.90s |  sort of telling the device the position of the QR code
177.90s - 179.70s |  so it knows which way to read it.
179.70s - 181.38s |  And then you get the actual data modules,
181.38s - 183.14s |  which is the black and white data
183.14s - 187.06s |  between the alignment and finder markers.
187.06s - 189.02s |  And then you have also error correction.
189.02s - 190.66s |  I didn't know this before doing the talk,
190.66s - 195.06s |  but QR codes can actually have error correction up to 30%.
195.06s - 197.74s |  So if up to 30% of the QR code is missing,
197.74s - 200.34s |  it's still readable depending on how it's generated.
201.18s - 204.46s |  Different versions of QR codes refer to different size,
204.46s - 206.70s |  how many modules are within.
206.70s - 210.46s |  Think like the smallest one, I believe is like a 21 by 21.
210.46s - 214.42s |  Then you can go all up to like 172, I think, 171.
214.42s - 216.26s |  And that will actually give you 40,
216.26s - 218.82s |  a bit over 4,000 alphanumerical characters.
218.82s - 221.86s |  So a QR code can be huge and can contain a lot of data.
221.86s - 223.90s |  Typical use cases for us, it's much smaller
223.90s - 227.50s |  and does contain like a series of numbers
227.50s - 228.98s |  or URL or something like that.
229.94s - 232.70s |  QR codes has a lot of legitimate use cases.
232.70s - 234.86s |  If you ever charge your electric vehicle,
234.86s - 237.30s |  if you ever booked like an e-bike or like a scooter,
237.30s - 239.82s |  if you ever ordered at a restaurant during COVID,
239.82s - 240.78s |  they use QR codes.
240.78s - 242.26s |  You scan them, you get to a webpage
242.26s - 243.70s |  and then you give them all your data
243.70s - 245.10s |  and you get some food, right?
245.10s - 247.02s |  So they have a ton of legitimate use cases
247.02s - 249.26s |  and they're great, we use them all the time.
250.14s - 253.78s |  The thing is that attackers also likes to use QR codes.
253.78s - 256.46s |  I'm actually super proud of this meme.
256.46s - 259.34s |  And why do attackers use QR codes?
259.34s - 261.30s |  They're simple to create and easy to share.
261.30s - 262.54s |  There's a bunch of online tools,
262.54s - 264.42s |  there's libraries to use in scripting languages,
264.42s - 266.74s |  there's pre-built offline tools, right?
266.74s - 269.98s |  Easy to create, easy to share and therefore easy to abuse.
269.98s - 271.94s |  Again, everybody knows what a QR code is.
271.94s - 274.66s |  Even non-technical people working in large organizations
274.66s - 276.86s |  have some sort of reference to QR codes, right?
276.86s - 278.46s |  So it's definitely like a legitimate,
278.46s - 281.14s |  looks like a legitimate delivery method.
281.14s - 282.70s |  Sometimes we'll talk more about this,
282.70s - 285.46s |  but typically it's easy to evade initial email filters
285.46s - 287.66s |  and some sandbox solutions by delivering URLs
287.66s - 289.50s |  or data in QR codes.
289.50s - 292.78s |  And actually I think they convey a sense of legitimacy.
292.78s - 295.46s |  I asked a bunch of my friends who's not technical,
295.46s - 297.78s |  can anybody create a QR code?
297.78s - 299.34s |  And a lot of them thought no.
299.34s - 300.90s |  A lot of them thought that you had to be
300.90s - 302.34s |  some sort of legitimate entity,
302.34s - 303.62s |  that you had to be an organization
303.62s - 306.50s |  or get a license or whatever to create your QR code,
306.50s - 308.06s |  which is obviously wrong, right?
308.06s - 310.70s |  So I think that is underlying of why a lot of people
310.70s - 312.54s |  feel QR code are very legitimate.
313.50s - 315.54s |  And also the best thing about phishing,
315.54s - 316.70s |  specifically with QR codes,
316.70s - 318.50s |  is that you move the initial access
318.50s - 320.74s |  of whatever you are giving to the victim
320.74s - 321.98s |  off the main device.
321.98s - 324.54s |  A lot of large corporate networks or large companies
324.54s - 326.74s |  will have heavily protected machines,
326.74s - 328.82s |  but the mobile devices are either private,
328.82s - 330.70s |  owned by the employee themselves,
330.70s - 332.90s |  or maybe not as heavily enrolled
332.90s - 335.02s |  or doesn't have the same defensive capabilities
335.02s - 337.78s |  as the machine itself.
337.78s - 339.82s |  Meaning that a potential defense, a SOC,
339.82s - 341.90s |  wouldn't gain the same telemetry from that phone
341.90s - 343.14s |  as they would from the device.
343.14s - 347.10s |  I think this is true for many, many organizations out there.
347.10s - 349.50s |  Okay, so obviously phishing with QR codes,
349.50s - 351.82s |  I think everybody's seen a couple of these examples.
351.82s - 353.86s |  I think the Microsoft multi-factor authentication one
353.86s - 355.30s |  is by far the most abused, right?
355.30s - 357.18s |  Because it's based on the legitimate use case
357.18s - 358.78s |  where you set up a Microsoft account,
358.78s - 361.38s |  you have to scan the QR code to set up your multi-factor app
361.38s - 363.46s |  and therefore, you know, you have to re-authenticate
363.46s - 366.30s |  or whatever the context is a couple of times a year.
366.30s - 368.06s |  And that really makes a good phishing campaign.
368.06s - 369.66s |  DocuSign is also heavily abused.
369.66s - 370.98s |  Anything related to Microsoft,
371.22s - 374.54s |  people love throwing Microsoft logos around, right?
374.54s - 376.50s |  So a bit of detection engineering,
376.50s - 378.42s |  how do we detect QR codes?
378.42s - 381.02s |  I Googled this, which means I did great research
381.02s - 382.54s |  on the subject, right?
382.54s - 384.82s |  Found this blog post by Liam Jones,
384.82s - 386.26s |  who created a basic detection rule
386.26s - 389.74s |  for basically pulling out image attachments from emails.
389.74s - 392.46s |  It then had some automation for parsing the images
392.46s - 394.34s |  and looking for QR codes,
394.34s - 397.26s |  essentially attempting to parse every image as a QR code
397.26s - 398.54s |  and then look at the data, right?
398.54s - 400.22s |  That's the manual way to do it.
400.22s - 401.82s |  There's a couple of flaws in this rule.
401.82s - 402.66s |  You can probably spot it.
402.66s - 404.58s |  You know, there's a bunch of more image extensions
404.58s - 406.90s |  than PNG, JPEG, and SVG,
406.90s - 408.58s |  but yeah, that's just an example, right?
408.58s - 409.98s |  And then you have black box solutions,
409.98s - 412.22s |  which we don't know how to work, like Microsoft Sentinel.
412.22s - 414.62s |  If you give Microsoft some of your hard-earned money
414.62s - 416.62s |  and get like an E5 or E3 or whatever
416.62s - 419.02s |  their licensing model is at the time,
419.02s - 421.10s |  you'll get this, which is Microsoft Sentinel.
421.10s - 423.74s |  It will overwatch all your emails,
423.74s - 425.50s |  inbound, outbound from the organization,
425.50s - 426.78s |  and it will actually tell you
426.78s - 428.62s |  if you got a URL from a QR code.
428.62s - 431.50s |  You see, it will tag it as the source of this data
431.50s - 433.98s |  is from a QR code, and it will give it a URL.
433.98s - 435.66s |  And it will automatically browse through it.
435.66s - 436.50s |  It will take a look at it
436.50s - 438.78s |  and try to determine if it's nasty or not, right?
438.78s - 441.58s |  So detection solutions, defensive solutions out there
441.58s - 443.42s |  are definitely aware of QR code phishing,
443.42s - 444.54s |  and it's an established thing.
444.54s - 446.82s |  We'll get back to this later.
446.82s - 449.26s |  Okay, how about image-less delivery methods, right?
449.26s - 450.86s |  I think when I say that,
450.86s - 452.38s |  most of you are immediately gonna think
452.38s - 453.58s |  about the ASCII art method,
453.58s - 454.62s |  because it's a known method
454.62s - 457.30s |  where you basically use different weird ASCII characters
457.30s - 458.86s |  to represent the QR code.
458.86s - 460.82s |  And the reason I say that this is a known method,
460.82s - 463.58s |  because our well-known influencer, John Hammond,
463.58s - 465.06s |  made a video about this four months ago,
465.06s - 467.50s |  and at least two million people know about this now,
467.50s - 468.90s |  so it's definitely known.
468.90s - 471.26s |  Obviously, not to throw him under the bus, it's great.
471.26s - 473.26s |  Just wanna say it's an established thing.
473.26s - 475.14s |  And so when we wanna phish,
475.14s - 477.26s |  if I wanted to phish without the use of images
477.26s - 479.50s |  to avoid this detection that I just talked about,
479.50s - 482.22s |  what could I possibly use for this?
482.22s - 484.74s |  Well, I found this example in CSS.
484.74s - 487.10s |  So this great guy called Jason Adelia,
487.10s - 488.58s |  or whatever I butcher his name,
488.58s - 490.98s |  he's a web developer or a web designer,
490.98s - 494.46s |  and he has this CodePen link out on Google somewhere
494.46s - 496.18s |  where he showcases his QR code
496.18s - 498.54s |  to his website created with CSS.
498.54s - 501.02s |  So he's actually using a blank white canvas
501.02s - 504.34s |  and then using box shadows to fill in the black and white
504.34s - 505.74s |  for the entire grid array,
505.74s - 507.98s |  and it turns into this beautiful QR code.
507.98s - 509.38s |  Now, this looks interesting.
509.38s - 510.70s |  This doesn't look like shit, right?
510.70s - 512.34s |  So we could potentially use this.
512.34s - 514.34s |  So me and ChatTPT sat down one night
514.34s - 516.42s |  and we looked at some Python code,
516.42s - 518.66s |  and I came up with this dirty piece of crap.
518.66s - 520.30s |  Basically, creates a QR code,
520.30s - 522.50s |  goes through every cell in the QR code,
522.50s - 524.30s |  determines if the QR code is,
524.30s - 526.22s |  or that pixel or cell is black,
526.22s - 528.42s |  and then fills in the box shadow, the CSS,
528.42s - 530.46s |  using his technique with that.
530.46s - 531.94s |  And then this looks really great.
531.94s - 534.22s |  Actually, a bunch of email clients will happily render this.
534.22s - 537.14s |  Both Thunderbird and Apple Mail, the built-in Apple Mail,
537.14s - 539.74s |  will render this as CSS, and it scans, it looks great,
539.74s - 540.86s |  and it's not an image.
540.86s - 543.90s |  So this will fly by basic detection for email filters
543.90s - 544.90s |  because there's no image there.
544.90s - 546.94s |  So there's obviously no QR code there, right?
546.94s - 549.74s |  And of course, you can see that the CSS is not offset
549.74s - 551.38s |  because centering things to CSS
551.38s - 552.82s |  is an absolute fucking nightmare.
552.82s - 555.14s |  So I didn't bother spending the needed two hours
555.14s - 556.02s |  to center this thing.
556.02s - 557.34s |  I just screenshots it.
557.34s - 560.10s |  That's your issue now, but it is what it is.
560.10s - 561.70s |  The sad thing about this, though,
561.70s - 565.54s |  is that Outlook doesn't support this in the desktop client.
565.54s - 568.70s |  The web version of Outlook will happily render CSS for you,
568.70s - 570.34s |  but the, again, not centered,
570.34s - 573.62s |  but the desktop client will not render CSS.
573.62s - 575.34s |  This is because the Outlook desktop client
575.34s - 578.06s |  is extremely sassy and, in general,
578.06s - 582.98s |  just is very picky about what HTML tags you can use,
582.98s - 584.82s |  what CSS you can use, and you can't.
584.82s - 587.78s |  If you ever made an email in the Outlook desktop client,
587.78s - 588.82s |  you know what I'm talking about.
588.82s - 590.70s |  It's a nightmare, right?
590.70s - 592.38s |  So it doesn't work, and it's kind of important
592.38s - 595.14s |  because it turns out, at least based on one source,
595.14s - 597.30s |  that the Outlook desktop client owns
597.30s - 600.58s |  about 58.1% of desktop machines,
600.58s - 601.66s |  so it's kind of important.
602.18s - 604.30s |  When working against large organizations,
604.30s - 606.30s |  by far, the experience I have
606.30s - 608.86s |  is that most people use the Outlook desktop client.
608.86s - 610.50s |  I think we can all agree on that, right?
610.50s - 611.66s |  That's a given.
612.82s - 614.26s |  Okay, so we got to take a step back then.
614.26s - 615.66s |  CSS, sure, we can use that.
615.66s - 616.86s |  We already scripted that way,
616.86s - 619.14s |  but we got to find some other way.
619.14s - 622.30s |  What other structure could we possibly use
622.30s - 626.58s |  to create a drawing, almost, of pixels?
626.58s - 628.46s |  Like, what could we use, right?
628.46s - 632.18s |  So the answer to that, at least one, is tables.
632.18s - 635.54s |  So tables is something that Outlook desktop client supports.
635.54s - 638.50s |  When I say tables, I don't mean like Excel tables.
638.50s - 642.14s |  I mean like actual HTML tables and rows and columns,
642.14s - 643.62s |  and they support styling.
643.62s - 647.50s |  So you could take a table, and you can style each column
647.50s - 650.02s |  in that either white color or black color,
650.02s - 651.66s |  and you can create a QR code.
651.66s - 654.54s |  So again, me and Chad TPT sat down one night,
654.54s - 655.82s |  and we created this.
655.82s - 658.14s |  So you set the cell spacing and the cell padding
658.98s - 662.18s |  to zero or a given size for how big QR code you want to make,
662.18s - 663.54s |  and then you basically start filling in,
663.54s - 666.34s |  okay, this pixel of this QR code is white.
666.34s - 668.98s |  Let's pad this, or let's make the background color
668.98s - 670.82s |  of this cell white or black, right?
670.82s - 672.30s |  And then you go through the whole thing,
672.30s - 677.06s |  and voila, you got a beautiful-looking table in HTML,
677.06s - 678.58s |  and you got a beautiful-looking QR code
678.58s - 680.10s |  in Outlook desktop client, right?
680.10s - 680.98s |  And this looks good.
680.98s - 683.10s |  I actually think this deserves a round of applause,
683.10s - 685.58s |  to be perfectly honest with you.
685.58s - 686.66s |  And this is really dumb.
687.10s - 688.58s |  This is KISS all the way, right?
688.58s - 690.02s |  It's super simple, super dumb.
690.02s - 691.02s |  And is it effective?
691.02s - 691.94s |  That's the big question.
691.94s - 693.18s |  Is this effective?
693.18s - 696.46s |  So I actually, you know, I reached into my paycheck,
696.46s - 698.78s |  and I bought Microsoft Sentinel, XDR, EDR,
698.78s - 699.70s |  whatever they call it now.
699.70s - 701.34s |  They change name every week.
701.34s - 704.06s |  And I give them my money, and I wanted to test it.
704.06s - 706.50s |  So first, I set up two accounts.
706.50s - 707.70s |  I set up Microsoft Sentinel.
707.70s - 709.86s |  I started monitoring incoming email traffic,
709.86s - 713.14s |  and then I set out this QR code in a Base64,
713.14s - 715.50s |  as a Base64 image embedded within the email,
715.50s - 717.62s |  and obviously, Microsoft Sentinel picked this right up.
717.62s - 719.06s |  It says, you know, this is a QR code.
719.06s - 720.10s |  This is the URL.
720.10s - 723.10s |  That's Rick Roll, if anybody recognized that.
723.10s - 725.54s |  Hacks, Elite Hacks are to you if you recognize that.
725.54s - 727.82s |  And then I tried sending a table,
727.82s - 729.50s |  and lo and behold, nothing happened.
729.50s - 731.50s |  So Microsoft Sentinel did not detect the table
731.50s - 733.82s |  as an image or as a QR code at all,
733.82s - 735.58s |  and didn't parse it, and therefore,
735.58s - 738.14s |  as a defender, you don't have telemetry for this.
738.14s - 739.78s |  So if I send a bunch of phishing emails
739.78s - 741.42s |  with QR codes generated as tables,
741.42s - 742.74s |  the URL will not pop up.
742.74s - 743.70s |  Nobody will spam it.
743.70s - 744.90s |  No bot will hit it,
744.90s - 746.06s |  and it will reach a target,
746.06s - 748.62s |  and it's still scannable by mobile devices.
748.62s - 750.78s |  So this works great.
750.78s - 752.22s |  Now this, I've already done this.
752.22s - 754.90s |  I talked about this at a conference a couple of months back.
754.90s - 757.42s |  This is built into the tool Crucible,
757.42s - 758.70s |  which I'll talk about later,
758.70s - 760.18s |  and you can find that on GitHub.
760.18s - 763.18s |  It works great, and yeah, it's cool.
763.18s - 765.70s |  But let's think about it and take it a step further.
765.70s - 768.50s |  So we can generate QR codes in CSS, sick.
768.50s - 771.34s |  We can generate QR codes in tables, even sicker.
771.34s - 774.50s |  But what about obfuscating email content
774.50s - 776.34s |  using tables?
776.34s - 777.34s |  Because think about it.
777.34s - 779.54s |  The table is essentially our drawing board.
779.54s - 781.10s |  We can draw whatever we want.
781.10s - 784.14s |  Each column in the table is a pixel for us, right?
784.14s - 786.58s |  So we could draw the entire email.
786.58s - 791.02s |  We could render HTML and draw the entire thing as a table.
791.02s - 793.14s |  So this is what we dive into,
793.14s - 795.58s |  and this was a bit of a nightmare, to be perfectly honest.
795.58s - 796.86s |  This is the process.
796.86s - 799.86s |  So we need to, so the point, what I wanna do,
799.86s - 801.06s |  I guess I should go back on this.
801.06s - 803.38s |  Why would you wanna do this in the first place, right?
803.38s - 806.34s |  So more and more defensive solutions out there
806.34s - 809.46s |  are using AI to get the context of the email you're sending.
809.46s - 810.66s |  They're using risk scores.
810.66s - 812.98s |  They're using a context-aware AI to understand,
812.98s - 815.90s |  you know, is this potentially a legitimate message
815.90s - 817.02s |  being delivered to my user?
817.02s - 818.50s |  And then based on the risk score, whatever,
818.50s - 821.62s |  it will be delivered, sandboxed, looked at, whatever, right?
821.62s - 823.30s |  So the thought behind this is that
823.30s - 826.38s |  if we can obfuscate keywords in the email,
826.38s - 829.54s |  like MFA, like QR, like re-authenticate,
829.54s - 832.18s |  like Microsoft, right, it's gonna be much harder
832.18s - 834.94s |  for the AI model to determine the context of the email
834.94s - 836.62s |  and if it's legitimate or not.
836.62s - 838.34s |  So the whole point behind this is
838.34s - 841.50s |  I wanna take a keyword, say re-authenticate,
841.50s - 844.46s |  and I wanna render that as an image,
844.46s - 846.54s |  and then I wanna turn it into a table,
846.54s - 848.74s |  and then I wanna replace the keyword
848.74s - 851.14s |  in the email with that table.
851.14s - 852.62s |  So there's no text there.
852.62s - 855.74s |  It's a table representing the text.
855.74s - 856.58s |  So there's no text.
856.58s - 858.50s |  You can't select it, but it looks like a text.
858.50s - 861.30s |  The end user will think it's text, but it's not.
861.30s - 862.82s |  I went through this process.
862.82s - 865.42s |  So basically, you give the Python script,
865.42s - 867.90s |  the email, the HTML email that you wanna send,
867.90s - 868.74s |  and then you tell it,
868.74s - 871.54s |  hey, I wanna replace the keyword, re-authenticate.
871.54s - 873.38s |  The Python script will then render the,
873.38s - 876.50s |  no, the Python script will then inject a marker
876.50s - 878.74s |  in that as to handle that word.
878.74s - 881.98s |  So it will inject like a box around the word in HTML,
881.98s - 884.18s |  and then it will render the entire email,
884.18s - 886.42s |  and then they will use image recognition
886.42s - 888.74s |  to cut out that box,
888.74s - 890.18s |  and then it will remove the borders
890.18s - 891.70s |  and turn it into a table.
892.66s - 894.34s |  And this is dumb and complicated,
894.34s - 895.94s |  and you would never think this would work,
895.94s - 897.18s |  but it actually works.
897.18s - 900.10s |  So I'm gonna demo that right now so you can see that.
900.10s - 904.22s |  Hopefully, you can see my terminal now.
904.22s - 905.58s |  Can you see a terminal?
905.58s - 906.42s |  Great.
906.42s - 908.94s |  I'll try to clear this
908.94s - 910.90s |  and make it a bit bigger for you guys.
912.18s - 913.66s |  Like, ooh.
913.66s - 915.66s |  Okay, so this is Crucible.
915.66s - 917.34s |  This is the help menu.
917.34s - 919.70s |  You give it a URL that you want the QR code data,
920.22s - 922.42s |  the data you want inside the QR code doesn't have to be URL,
922.42s - 923.78s |  but typically it's URL.
923.78s - 925.58s |  You wanna set a QR code size.
925.58s - 926.86s |  You give it an input,
926.86s - 928.18s |  so you give it like a typically
928.18s - 930.70s |  like a phishing email template in HTML,
930.70s - 934.74s |  and then wherever the word QR underscore placeholder is
934.74s - 938.02s |  will be replaced with the QR code table or CSS,
938.02s - 939.14s |  and then you give it an output path
939.14s - 941.02s |  if you don't want a random generated name.
941.02s - 942.62s |  You can choose if you want the CSS method
942.62s - 943.50s |  or the tables method,
943.50s - 945.98s |  and you can also generate output in straight EML,
945.98s - 947.10s |  which is an email format,
947.10s - 948.90s |  so you can just open it in Outlook afterwards,
948.90s - 950.10s |  which is super nice,
950.10s - 952.06s |  and then you have the obfuscate method,
952.06s - 954.58s |  so that's what I'll be demonstrating now.
954.58s - 955.70s |  So in this command here,
955.70s - 958.02s |  I'll be linking to Defcon.org.
958.02s - 960.50s |  I'm using my MFA or QR code template,
960.50s - 964.26s |  and then I'm obfuscating the keywords MFA, QR, and Microsoft,
964.26s - 967.90s |  so those words will be pulled out of the email template
967.90s - 971.22s |  and replaced with images illustrated as tables
971.22s - 974.12s |  in the new output,
974.12s - 977.36s |  so it worked, hopefully.
977.36s - 980.90s |  I have a backup if it doesn't.
980.90s - 983.70s |  Open Sesame.
983.70s - 986.46s |  Placeholder, I think, no.
986.46s - 987.66s |  Output, okay.
987.66s - 990.30s |  Hopefully, this worked.
990.30s - 992.34s |  Yeah.
992.34s - 994.10s |  So this is a table QR code,
994.10s - 995.34s |  and this is the...
995.34s - 996.58s |  Fuck, it broke.
996.58s - 997.94s |  Okay.
997.94s - 998.74s |  It broke.
998.74s - 999.46s |  Give me a second here.
999.46s - 1003.10s |  I'll go back to the demo.
1003.10s - 1006.54s |  So it looks like this if the demo worked correctly,
1006.54s - 1007.82s |  and then this is the output,
1007.82s - 1010.22s |  so this is the generated email.
1010.22s - 1013.86s |  Can you spot the text that is tables?
1013.86s - 1014.66s |  There is text.
1014.66s - 1018.34s |  There are keywords in this email that is not text.
1018.34s - 1019.02s |  Give you guys a second.
1019.02s - 1021.06s |  Some of it is obvious.
1021.06s - 1023.10s |  Some of it is not,
1023.10s - 1026.10s |  and all of this is not text.
1026.10s - 1030.22s |  This is tiny tables inserted into the email template,
1030.22s - 1032.66s |  resulting in it looking like text,
1032.66s - 1036.46s |  but it not being text.
1036.46s - 1037.18s |  Round of applause.
1037.18s - 1044.54s |  Cue that, and again,
1044.54s - 1048.34s |  this works when you're not demoing it live at DEF CON,
1048.34s - 1050.50s |  and that's basically all I got.
1050.50s - 1052.66s |  Thank you so much, Adversary Village, for having me.
1052.66s - 1054.18s |  I got stickers for the project.
1054.18s - 1055.62s |  Scan this QR code, if you trust me,
1055.62s - 1056.90s |  to get to the project,
1056.90s - 1058.50s |  and yeah, go out there and fish somebody
1058.50s - 1062.50s |  and improve our defenses by some degree.
1062.50s - 1064.50s |  Thank you so much from me, guys.