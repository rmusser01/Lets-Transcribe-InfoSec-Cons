{
  "webpage_url": "local:1732042117:d3b2a98b:DEF CON 32 - HHV  SSV - Taking off the blindfold - Detecting persistent threats on Draytek edge devices - Octavio Gianatiempo  Gast\u00f3n Aznarez.mp4",
  "title": "DEF CON 32 - HHV  SSV - Taking off the blindfold - Detecting persistent threats on Draytek edge devices - Octavio Gianatiempo  Gast\u00f3n Aznarez.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 1.60s | This text was transcribed using whisper model: large-v2

 Hi, everyone.
1.60s - 4.92s |  There is more people than I expect at 10 AM.
4.92s - 9.08s |  Thank you very much for being here.
9.08s - 12.84s |  You are the ones who survived until the last day in DEFCON.
12.84s - 15.04s |  Awesome.
15.04s - 18.12s |  Welcome to Taking Off the Blindfold,
18.12s - 24.20s |  Detecting Persistent Threats on Drytech Edge Devices.
24.20s - 26.72s |  We are part of the Faraday Research Team.
26.72s - 29.60s |  My partner here is Octavio Geno-Tiempo.
29.60s - 31.52s |  I am Gaston Asnares.
31.52s - 36.20s |  And we have some experience working with firmware.
36.20s - 40.16s |  We have foundation on computer science.
40.16s - 42.72s |  And we like to play CDF.
42.72s - 49.33s |  As a resume, we would like to break things and do research.
49.33s - 51.93s |  So what we are going to see today.
51.93s - 54.77s |  First, we are going to see a motivation for this research
54.77s - 56.69s |  and this talk.
56.69s - 60.85s |  We are going to see some reverse engineer on drytech firmwares.
60.85s - 63.93s |  We are going to talk about vulnerabilities and attack
63.93s - 65.89s |  vectors.
65.89s - 68.41s |  We are going to see mitigation strategies.
68.41s - 71.57s |  And at least, we're going to see some conclusions
71.57s - 74.78s |  and takeaways.
74.78s - 78.34s |  OK, how this started.
78.34s - 82.66s |  We had a call of a client saying that it was compromised.
82.66s - 85.62s |  And when we came to the scene, we
85.62s - 90.30s |  see a lot of outdated drytech equipment
90.30s - 92.30s |  in the edge of the network.
92.30s - 99.22s |  Most of them were SOHO models that runs our RTOS.
99.22s - 100.94s |  And we started making some analysis.
100.94s - 104.22s |  We found previous vulnerabilities
104.22s - 110.26s |  with proven exploits on high-end models of the drytech routers
110.26s - 113.70s |  that runs Linux.
113.70s - 116.74s |  And we started making some questions about it.
116.74s - 120.30s |  Like, are these vulnerabilities exploitable
120.30s - 122.74s |  on the SOHO routers?
122.74s - 125.98s |  There is other vulnerabilities that are unknown.
125.98s - 129.54s |  And the principal question was, were these routers
129.54s - 133.98s |  the entry point of the attackers?
133.98s - 135.86s |  OK, we know that there is an increasing
135.86s - 140.06s |  threat of advanced attack targeting edge devices.
140.06s - 144.14s |  We could name some examples, like the sewer rat that
144.14s - 148.10s |  was a sophisticated malware targeting SOHO routers.
148.14s - 150.66s |  We also could name the hiatus rat
150.66s - 153.42s |  that was a malware targeting drytech routers,
153.42s - 157.94s |  but the high-end models.
157.94s - 161.42s |  And at least we could name Benin Sartain
161.42s - 168.42s |  that was an NSA tool targeting Cisco routers that was leaked
168.42s - 173.30s |  by the shadow brokers group.
173.30s - 178.66s |  OK, so what is the attack surface of these routers?
178.66s - 186.90s |  We found over 5,100 exposed devices, mostly in the UK.
186.90s - 189.58s |  And we found a lot of vulnerabilities,
189.58s - 193.10s |  from an information disclosure to an authenticated
193.10s - 194.38s |  remote co-execution.
194.38s - 198.51s |  So there is a lot of stuff.
198.51s - 204.11s |  OK, so we had a Vigor 2925 in our office,
204.11s - 209.03s |  running MIPS 32 RTOS.
209.03s - 213.03s |  And we wanted to start making some research on that,
213.03s - 215.07s |  but we have a problem.
215.07s - 217.79s |  The code is closed source.
217.79s - 222.39s |  So first, we had to reverse engineer the firmware format.
222.39s - 225.35s |  We had to extract the firmwares, understand
225.35s - 229.83s |  previous vulnerabilities, and then look for new ones.
229.83s - 238.10s |  And finally, determine if this was the attack vector or not.
238.10s - 240.30s |  So the first thing we did was trying
240.30s - 242.46s |  to extract this firmware using a minwalk,
242.66s - 243.26s |  but it failed.
243.26s - 244.82s |  It produced no results.
244.82s - 247.22s |  So we tried to look for some specialized tools,
247.22s - 249.30s |  and we found this one, DRYTOOLS.
249.30s - 251.50s |  So this didn't work with new firmwares.
251.50s - 254.98s |  The last commit was 12 years ago, and that's why.
254.98s - 258.02s |  So luckily for us, we found a talk
258.02s - 261.34s |  by Philippe Loret at Hexagon 2022,
261.34s - 264.70s |  where he described that by emulating DRYTEXTBOOKLOADER,
264.70s - 268.94s |  we can extract, we can make it extract the RTOS kernel.
268.94s - 270.82s |  The disadvantage of this approach
270.82s - 272.38s |  is that this is a manual process,
272.38s - 274.74s |  and you have to tweak the addresses for each firmware
274.74s - 276.50s |  version.
276.50s - 278.14s |  And the other problem that it has
278.14s - 280.46s |  is that these firmware images have
280.46s - 284.26s |  other executable components apart from the RTOS kernel
284.26s - 288.82s |  and file systems that you cannot extract this way.
288.82s - 292.02s |  So our approach was to reverse engineer the format
292.02s - 295.58s |  and to try to write a tool that can extract all firmware
295.58s - 299.18s |  versions from different models, extracting all file systems,
299.18s - 303.62s |  and extracting all the executable components.
303.62s - 305.78s |  We named our tool DRYTEXT Arsenal.
305.78s - 307.34s |  It's a collection of tools.
307.34s - 309.42s |  We wrote this in Python.
309.42s - 310.18s |  It's open source.
310.18s - 313.78s |  You can check it out at that repository.
313.78s - 317.14s |  And the idea is to support for all these new firmware
317.14s - 319.90s |  versions, and we will be showing,
319.90s - 322.22s |  along these presentations, all the features
322.22s - 325.98s |  that we implemented.
325.98s - 328.70s |  So let's talk about the firmware format.
328.70s - 331.02s |  It has two main sections.
331.02s - 332.66s |  One is called the binary section,
332.66s - 334.74s |  and the other one, the web section.
334.74s - 337.90s |  Both start with a header that contains
337.90s - 340.82s |  the size and a pointer to the following section.
340.82s - 343.18s |  But in the first one, we also have information
343.18s - 347.38s |  about the firmware version and some metadata.
347.38s - 351.54s |  So the web section has a file system
351.54s - 354.58s |  that is compressed and contains all the static files
354.58s - 358.18s |  that the router serves for the web UI.
358.18s - 360.66s |  In the first section, the binary section,
360.66s - 364.54s |  we have the bootloader that is raw MIPS 32 code.
364.54s - 367.46s |  This is the part that Philippe emulated.
367.46s - 372.38s |  And then this is followed by the compressed RTOS kernel.
372.38s - 375.30s |  And after that, we have a very interesting part of the firmware
375.30s - 377.06s |  that is the DLM code.
377.06s - 381.34s |  This is also a file system, but it's compressed and encrypted.
381.34s - 384.74s |  And we will talk a lot about it.
384.74s - 389.06s |  So to work with this, we made a specification
389.06s - 391.70s |  of the structure of the firmware using KTI structs.
391.70s - 393.54s |  And the advantage of using this is
393.54s - 396.62s |  that you can manipulate the firmware images with any
396.62s - 398.18s |  language that you want from the list.
398.18s - 400.70s |  We used Python, but you can find this in the repo
400.70s - 404.91s |  and use the language that you prefer.
404.91s - 407.43s |  Well, by knowing all this, we started
407.43s - 409.07s |  to tackle the reverse engineering
409.07s - 411.07s |  of the compression algorithm.
411.07s - 415.15s |  So during boot, the RTOS is decompressed
415.15s - 418.43s |  to the same memory space as the bootloader.
418.43s - 421.11s |  We did this following the steps described
421.11s - 423.23s |  by Philippe in his talk.
423.23s - 425.63s |  But when we started reverse engineering this,
425.63s - 430.03s |  we mapped all this in memory, the bootloader and then
430.03s - 431.79s |  the RTOS after that.
431.79s - 435.23s |  And that allowed us to discover that the decompression
435.23s - 438.63s |  function is used during runtime to decompress other things,
438.63s - 440.87s |  for example, the file systems.
440.87s - 443.31s |  And we also discovered some interesting strings,
443.31s - 445.15s |  like the one that you can see down
445.15s - 449.07s |  to the right, that says LC4 decompression failed.
449.07s - 452.35s |  But if it was LC4, the compression algorithm,
452.35s - 456.23s |  why we couldn't start it with Inwalk?
456.23s - 459.11s |  And the reason for this is that while they
459.11s - 463.51s |  use a standard LC4 compression block format,
463.51s - 468.59s |  they have written a custom frame format.
468.59s - 472.63s |  So it's just a custom magic that is
472.63s - 475.23s |  followed by a succession of block size and block
475.23s - 477.43s |  data multiple times.
477.43s - 482.47s |  So we wrote a decompressor and a compressor for that format.
482.47s - 485.91s |  And then we moved on to the most interesting part
485.91s - 488.63s |  that is the DLM section.
488.63s - 492.47s |  So it turns out that the DLM stands
492.47s - 494.07s |  for Dynamic Kernel Modules.
494.07s - 496.71s |  So this real-time operating system
496.71s - 500.95s |  has the ability to load code modules during runtime,
500.95s - 502.07s |  dynamically.
502.07s - 506.51s |  And this feature works independently
506.51s - 508.39s |  from the firmware.
508.39s - 514.27s |  So during boot, we can see that the modules that
514.27s - 517.31s |  come with the firmware image are loaded.
517.31s - 518.79s |  There are three modules.
518.79s - 523.07s |  And they are called VR9 GeoIP, VR9 App E.
523.07s - 527.39s |  We will talk a lot about this one, and VR9 SSH.
527.39s - 530.03s |  So the first one contains information
530.03s - 532.47s |  about the geolocation of IPs.
532.47s - 536.55s |  The second one is used to block traffic from the users that
536.55s - 538.87s |  are in the LAN.
538.87s - 542.91s |  And the last one contains the implementation of SSH server.
542.91s - 545.79s |  And this is really interesting because this implementation
545.79s - 550.21s |  is separate from the firmware.
550.21s - 554.33s |  So these modules can be updated during runtime.
554.33s - 559.33s |  And if you install a new version of App Enforcement Module
559.33s - 563.69s |  or SSH, these are loaded first and prevent
563.69s - 567.29s |  the modules that come with the firmware to be loaded.
567.29s - 571.01s |  You can see down to the right that, for example,
571.01s - 574.29s |  in this case, the VR9 App E module was loaded first.
574.29s - 579.29s |  And then when the router tries to load
579.29s - 584.25s |  the version that comes in the firmware image, it will fail.
584.25s - 587.13s |  So doing some more reverse engineering,
587.13s - 589.01s |  we found out that the modules are compressed
589.01s - 594.73s |  using the same algorithm that is used for the RTOS.
594.73s - 596.73s |  But they are also encrypted.
596.73s - 599.17s |  So we recognized that the algorithm used
599.17s - 602.37s |  was a modified version of XDA.
602.37s - 605.33s |  And this is a symmetric encryption algorithm.
605.33s - 608.37s |  And what this means is that the keys for decrypting these DLMs
608.37s - 610.17s |  are present in the firmware.
610.17s - 611.57s |  So we looked for them.
611.57s - 615.09s |  And we wrote a decryptor and encryptor for the modules.
615.09s - 618.45s |  So if you take a DLM, you decrypt it using this.
618.45s - 622.49s |  And you decompress it using the modified version of LC4,
622.49s - 625.13s |  then what you get is a relocatable ELF.
625.13s - 626.97s |  And this is very interesting because all
626.97s - 630.57s |  the external functions that this ELF uses,
630.57s - 632.57s |  they have to have their symbol changed.
632.57s - 637.33s |  So they are really easy to reverse engineer.
637.33s - 639.61s |  And this also means that the firmware
639.61s - 641.33s |  must have an ELF loader.
641.33s - 643.21s |  So we looked for that code.
643.21s - 646.61s |  And we found that there is also a symbol table.
646.61s - 649.61s |  This symbol table was described before by Philippe Loret.
649.61s - 653.25s |  But only as an aid for reverse engineering.
653.25s - 655.17s |  Because imagine that you have a table
655.17s - 658.85s |  where you have function names followed by function pointers.
658.85s - 661.61s |  But now we know that this table is actually
661.61s - 666.97s |  used by the ELF loader to link these modules to the kernel.
666.97s - 671.53s |  So the advantage that this gives to us
671.53s - 674.17s |  is that if we manage to write our own modules,
674.17s - 676.37s |  we can use all these functions without knowing
676.37s - 679.90s |  their actual addresses.
679.90s - 684.54s |  So we implemented all these in our tool.
684.54s - 688.02s |  We have two functions, one called
688.02s - 690.30s |  parse firmware that will print a lot of information
690.30s - 691.78s |  about the firmware image.
691.78s - 694.30s |  And there are one called extract that will extract
694.30s - 696.46s |  all these pieces of the image.
696.46s - 699.82s |  It will decrypt and decompress all the modules.
699.82s - 704.42s |  It will extract all the file systems for the web server.
704.42s - 707.82s |  And it will generate a binary image
707.82s - 711.02s |  that contains the bootloader followed by the RTOS kernel,
711.02s - 713.66s |  but decompressed.
713.66s - 716.82s |  So if you want to start reverse engineering this,
716.82s - 718.94s |  you must know the loading address.
718.94s - 722.90s |  And what we realize is that all dry type bootloaders
722.90s - 725.58s |  start by calling the decompression function.
725.58s - 727.46s |  So this function is always located
727.46s - 729.42s |  near the start of the image.
729.42s - 733.86s |  And since all this has to be loaded aligned to the page,
733.86s - 737.42s |  then we can search for the address of this compression
737.42s - 738.34s |  function.
738.34s - 740.98s |  And if we remove the last three numbers,
740.98s - 743.26s |  what we get is the address, the loading
743.26s - 744.70s |  address of the whole image.
744.70s - 749.46s |  So with that, you can start your reverse engineering process.
749.46s - 752.34s |  We also implemented this in a functionality
752.34s - 754.86s |  called find loading address.
754.86s - 757.90s |  And when we had all that, we moved on
757.90s - 760.66s |  to try to find some vulnerabilities and attack
760.66s - 769.14s |  vectors.
769.14s - 772.90s |  OK, so let's talk something about vulnerabilities.
772.90s - 776.50s |  We are going to show some of them.
776.50s - 779.02s |  Starting with the basics, we found
779.02s - 781.98s |  that they had an insecure password storage.
781.98s - 785.14s |  That means they stored the passwords and the credentials
785.14s - 787.34s |  in plain text in memory.
787.34s - 790.38s |  So if someone had access to their memory,
790.38s - 795.22s |  they could read the credentials or maybe chain another exploit
795.22s - 798.58s |  to leak them.
798.58s - 802.22s |  We also found non-constant time comparison
802.22s - 805.62s |  on the credential.
805.62s - 810.82s |  So they use a function that takes different amounts of time
810.82s - 813.54s |  to compare different passwords, depending
813.54s - 819.38s |  on how much correct characters are in the string.
819.38s - 825.66s |  And that leads to a side attack channel, a timing attack.
825.66s - 830.26s |  OK, so DirectX implements a second step authentication
830.26s - 832.38s |  that's really nice.
832.38s - 835.26s |  But that was predictable.
835.26s - 837.86s |  Because the code generation was done
837.86s - 840.78s |  using a self-random function.
840.78s - 848.54s |  But with the seed, they use the time elapsed since boot.
848.54s - 853.06s |  So if you know for how long the router is running,
853.06s - 858.78s |  you could predict the second factor authentication codes.
858.78s - 864.06s |  We also found a nulled reference in the HCP server.
864.06s - 868.74s |  That leads to the native service attack.
868.74s - 872.46s |  But the interesting in that is that it was exposed to one.
872.46s - 875.38s |  So if the router was exposed to internet,
875.38s - 880.14s |  you could trigger that nulled reference.
880.14s - 883.30s |  And if we combine both vulnerabilities,
883.30s - 887.34s |  we could predict the second step authentication codes.
887.34s - 891.22s |  Because we could make the router crash.
891.22s - 895.26s |  And then we know the time elapsed since boot.
895.26s - 898.86s |  And we predict the codes.
898.86s - 903.02s |  And that's what we are going to see in the next demo.
903.02s - 905.46s |  We could see on the right the serial communication
905.46s - 906.14s |  with the router.
909.86s - 912.06s |  No, that's on the left.
912.06s - 915.02s |  On the right top is a script that we run.
915.02s - 919.06s |  It triggers the nulled reference.
919.06s - 922.62s |  And the router is rebooting.
922.62s - 925.74s |  It will take like two or three reboots
925.74s - 929.78s |  because it crashed hard.
929.78s - 934.50s |  And on the right bottom, we have the web UI
934.50s - 940.82s |  where we are going to try to log in.
940.82s - 943.46s |  So now it boots.
943.46s - 949.73s |  We are going to wait until the router initializes itself.
950.57s - 960.57s |  And now we are trying some different codes.
960.57s - 962.97s |  And we were able to predict the code.
962.97s - 969.47s |  And we are logging in.
969.47s - 973.55s |  So Octavio talked something about the APP enforcement
973.55s - 975.43s |  signature feature.
975.43s - 977.31s |  It's really great.
977.31s - 980.07s |  If you have an enterprise and you
980.07s - 985.23s |  want to block to your employees on web or I don't know,
985.23s - 988.23s |  you will update the signatures in order
988.23s - 991.15s |  to block that traffic.
991.15s - 996.31s |  And how this process is made, there are two ways.
996.31s - 997.71s |  The first one is a manual.
997.71s - 1002.43s |  We will see on the right bottom that says import.
1002.43s - 1006.43s |  If we click there, we could upload any file
1006.43s - 1008.99s |  with some checks.
1008.99s - 1013.75s |  And the second way is the automatic way
1013.75s - 1018.39s |  in which we have to select the update server
1018.39s - 1022.79s |  or left the default one.
1022.79s - 1025.19s |  And we have to schedule the updates.
1025.19s - 1029.99s |  So for example, every day at some point of the day,
1029.99s - 1035.35s |  it will check if there is some update for the signatures.
1035.35s - 1041.07s |  And how they implement this, the signatures,
1041.07s - 1046.59s |  you could think on JSON formats or YAML or something like that.
1046.59s - 1051.67s |  But Drytech has the idea to implement this as a module.
1051.67s - 1054.35s |  So to update the signatures, they
1054.35s - 1061.63s |  upload an L file with code and everything.
1061.63s - 1064.43s |  OK, let's talk about some vulnerabilities
1064.43s - 1066.47s |  related to the modules.
1066.47s - 1073.31s |  The first one is they not also update certificates with code.
1073.31s - 1076.59s |  But they don't check for certificates
1076.59s - 1079.07s |  or have SSL enforcement.
1079.07s - 1083.39s |  So if someone manipulates the configuration of the router
1083.39s - 1086.43s |  or the DNAs, maybe a DNS hijacking,
1086.43s - 1091.95s |  they could upload a module to all the Drytech routers that
1091.95s - 1094.59s |  has this feature.
1094.59s - 1099.67s |  And we have found two post-authentication endpoints.
1099.67s - 1103.63s |  The first one is the one that I told in the last slide.
1103.63s - 1107.19s |  And the second one is that we found an endpoint
1107.19s - 1112.39s |  to upload configurations files that doesn't have some checks.
1112.39s - 1116.19s |  So they allow us to upload an arbitrary DLM.
1116.19s - 1119.75s |  Now it's not only the APPA module,
1119.75s - 1123.43s |  but we could upload any modules that we want.
1123.43s - 1129.76s |  Maybe we could, I don't know, upload another SSH module.
1129.76s - 1132.88s |  So we have three ways for an attacker
1132.88s - 1134.60s |  to install malicious modules.
1134.60s - 1136.80s |  The first one is the post-authentication endpoints
1136.80s - 1141.16s |  that we talked about in the last slide.
1141.16s - 1143.92s |  We have the module upload process
1143.92s - 1147.56s |  that is hijacking the configuration or the DNS.
1147.56s - 1149.68s |  And the last one is the supply chain,
1149.68s - 1152.72s |  because the modules are very easy to craft.
1152.72s - 1158.04s |  So they are easily appended to the firmware.
1158.04s - 1160.96s |  And anyone with physical access or, I don't know,
1160.96s - 1163.60s |  exploiting some vulnerability, they
1163.60s - 1171.90s |  could upload the module before selling it.
1171.90s - 1173.62s |  OK, so now we know all of this, we
1173.62s - 1175.98s |  could start making some modules.
1175.98s - 1177.78s |  We implemented two commands.
1177.78s - 1179.38s |  The first one is the MIPS compile
1179.38s - 1186.90s |  that is going to make a compilation of source code
1186.90s - 1193.82s |  into a relocatable ELF of the architecture of MIPS32.
1193.82s - 1198.10s |  And we also have another command that is ELF to DLM.
1198.10s - 1200.78s |  As the name said, it will convert an ELF
1200.78s - 1203.42s |  to a DLM, compressing and encrypting
1203.42s - 1205.26s |  with the provided keys.
1205.26s - 1209.18s |  So we could append some web headers
1209.18s - 1215.33s |  so we could upload them through the web UI.
1215.33s - 1217.69s |  So we are going to see a demo.
1217.69s - 1225.69s |  We could see on the left the version of the APPA module.
1225.69s - 1227.41s |  On the right, in the middle, we are
1227.41s - 1232.01s |  going to run a server, a custom server that
1232.01s - 1242.67s |  is pointing the configuration of the auto-updates.
1242.67s - 1248.50s |  So on the top right, we could see the serial interface
1248.50s - 1250.82s |  with the router.
1250.82s - 1255.54s |  OK, so once the server is up, we are going to send.
1255.54s - 1259.38s |  We are going to trigger a new DLM.
1259.38s - 1260.10s |  So it's triggered.
1260.10s - 1263.54s |  We could see the router has fetched
1263.54s - 1265.58s |  the new module in our server.
1265.58s - 1268.58s |  We could see the Faraday logo because it's our module.
1268.58s - 1272.66s |  And if we log in again, we could see
1272.66s - 1275.26s |  that the version of the module has changed.
1275.26s - 1284.82s |  And we have some logs that said that it don't allow this.
1284.82s - 1289.06s |  OK, let's make something more funnier.
1289.06s - 1291.50s |  We are going to make a SSH backdoor.
1291.50s - 1292.62s |  Why not?
1292.62s - 1295.82s |  Because we have the module.
1295.82s - 1301.42s |  So the original behavior of the SSH module is the top one.
1301.42s - 1303.74s |  When we have a new connection, it's
1303.74s - 1306.42s |  going to call the authentication function.
1306.42s - 1308.38s |  And the authentication function will
1308.38s - 1312.66s |  say that it fails or it authenticates.
1312.66s - 1318.58s |  But what we are going to do is when a new connection enters,
1318.58s - 1321.54s |  when a new connection is open, that
1321.54s - 1323.66s |  is going to call our hook.
1323.66s - 1326.74s |  And it's going to check our credentials.
1326.74s - 1329.90s |  So if they are right, it authenticates.
1329.90s - 1332.94s |  If not, it's going to call the original function
1332.94s - 1334.78s |  because we don't want to change all
1334.78s - 1339.44s |  the behavior of the SSH module.
1339.44s - 1341.12s |  How is the roadmap for this?
1341.12s - 1344.60s |  First, we have to do a reverse engineer of the SSH module
1344.60s - 1347.76s |  to find that function that makes the authentication.
1347.76s - 1349.16s |  We are going to skip that part.
1349.16s - 1351.72s |  And we are going to say that the target function is the SSH
1351.72s - 1356.40s |  account and LDAP auth function.
1356.40s - 1360.24s |  After that, we have to write and compile the hook.
1360.24s - 1365.68s |  We have to merge the hook with the original module.
1365.68s - 1371.52s |  And we have to modify all the relocations in the entry table.
1371.52s - 1376.90s |  And last, we have to upload the DLM.
1376.90s - 1379.06s |  OK, so on the right, we could see the source
1379.06s - 1384.54s |  code of our hook function that takes the same arguments
1384.54s - 1390.78s |  as the target function, an SSH instance, and a packet.
1390.78s - 1394.18s |  And it will check for our credentials.
1394.18s - 1396.46s |  If they are right, it will return one
1396.46s - 1398.42s |  that says it authenticates.
1398.42s - 1404.56s |  And if not, it will call the target function.
1404.56s - 1412.55s |  OK, in order to compile this, we use our command MIPS compile.
1412.55s - 1415.39s |  And then we have to merge both binaries,
1415.39s - 1418.87s |  both relocatable ELFs.
1418.87s - 1424.63s |  So there is a relocatable ELF, have all the symbols
1424.63s - 1426.67s |  with no fixed address.
1426.67s - 1429.91s |  So they had a relocation table that
1429.91s - 1434.71s |  will say everything that uses a symbol
1434.71s - 1441.51s |  has to be modified to point to that symbol after linking.
1442.55s - 1444.79s |  So we have all the symbols there.
1444.79s - 1451.75s |  And once we merge it, we have the symbols of both modules.
1451.75s - 1457.27s |  We wrote a command to do this that
1457.27s - 1463.03s |  is with the name of MIPS merge that takes two ELF files
1463.03s - 1468.65s |  and as an output has one file.
1468.65s - 1472.81s |  OK, now we have to modify the relocations table.
1472.81s - 1476.57s |  So first, we find all the relocation
1476.57s - 1479.93s |  that talks about the target function.
1479.93s - 1484.01s |  We could see on the top right the two examples.
1484.01s - 1487.29s |  We are going to use the first one.
1487.29s - 1494.25s |  If we print the code that is on that address on the bottom
1494.25s - 1498.37s |  left, we could see that it's a jump instruction.
1498.37s - 1503.29s |  But the jump instruction only has his opcode
1503.29s - 1506.05s |  but doesn't have an address where to jump.
1506.05s - 1508.13s |  That is because the relocation entry
1508.13s - 1510.65s |  will set which one is going to be
1510.65s - 1512.81s |  that address on link in time.
1512.81s - 1515.97s |  And we could see there that is the target function.
1515.97s - 1520.37s |  So we modify that entry to give us
1520.37s - 1529.02s |  a result the right that points to the hack function.
1529.02s - 1533.39s |  So time to hack.
1533.39s - 1536.47s |  OK, so on the top right, we are trying
1536.47s - 1539.11s |  to log in with our credentials.
1539.11s - 1541.35s |  But we could see that it fails.
1541.35s - 1549.40s |  So on the bottom left, we upload our backdoor module.
1549.40s - 1552.44s |  And once it's uploaded, we could see that the file
1552.44s - 1554.48s |  was written successfully.
1554.48s - 1561.29s |  But we have to reboot the router.
1561.29s - 1563.57s |  And once it reboots, we are going
1563.57s - 1567.73s |  to try again with our credentials.
1567.73s - 1577.57s |  We could see that the module was loaded.
1577.57s - 1579.65s |  OK, so we try to log in.
1579.65s - 1582.21s |  And we will see that we are in.
1582.21s - 1594.46s |  And we could see some loss in the serial communication.
1594.46s - 1598.54s |  So this attack that Gaston showed is really dangerous.
1598.54s - 1602.62s |  Imagine that an attacker can craft a modified SSH module,
1602.62s - 1605.62s |  upload it to your dry-tech router,
1605.62s - 1608.38s |  and you have no way of detecting this.
1608.42s - 1611.54s |  Moreover, if you update the firmware,
1611.54s - 1613.34s |  the module will be still there.
1613.34s - 1614.66s |  It will persist.
1614.66s - 1616.30s |  And even will persist if you reset
1616.30s - 1617.66s |  the configuration of the router.
1617.66s - 1619.94s |  Because it's stored in a separate file system
1619.94s - 1621.78s |  in the flash.
1621.78s - 1626.30s |  So we started to think about some mitigation strategies.
1626.30s - 1629.58s |  The first one, the obvious that we thought about
1629.58s - 1631.10s |  was just to remove the feature.
1631.10s - 1634.86s |  Because who wants to have dynamic modules on their router?
1634.86s - 1638.50s |  But there might be some users that use this feature.
1638.50s - 1642.66s |  So well, instead of napping all the calls
1642.66s - 1648.22s |  to module loading during boot and during the update process,
1648.22s - 1651.06s |  we decided to think for a better solution.
1651.06s - 1657.02s |  And we devised a mechanism for checking
1657.02s - 1661.14s |  in-memory integrity of the other modules that are loaded.
1661.14s - 1664.18s |  This mechanism should fetch signatures from a server.
1664.18s - 1665.90s |  Because the modules will get updates,
1665.90s - 1668.34s |  so you have to update the signatures.
1668.34s - 1672.82s |  But this time, you have to check the certificates.
1672.82s - 1675.66s |  So once you got those signatures,
1675.66s - 1679.06s |  you have to find the loaded modules in memory,
1679.06s - 1682.74s |  calculate the actual signatures, and compare them.
1682.74s - 1684.90s |  And if there is a mismatch, then you
1684.90s - 1687.34s |  have to notify the user somehow.
1687.34s - 1689.42s |  And all this functionality should
1689.42s - 1692.10s |  be included with the firmware.
1692.10s - 1695.90s |  So what we did, as a proof of concept,
1695.90s - 1698.14s |  was to use the open source module
1698.14s - 1701.30s |  to introduce this code to the router.
1701.30s - 1703.70s |  Because it's much easier to write a module
1703.70s - 1704.98s |  than to patch the firmware.
1704.98s - 1709.06s |  Because you have all these functions from the symbol table
1709.06s - 1710.82s |  that you can use.
1710.82s - 1715.62s |  So there are two things that we have to solve.
1715.62s - 1717.74s |  The first one is how to calculate
1717.74s - 1721.14s |  a signature for a valid DLM.
1721.14s - 1724.70s |  And the second one is to find the actual DLMs in memory
1724.70s - 1726.66s |  and do the comparison.
1726.66s - 1732.06s |  So we focused on that, and we accepted some limitations.
1732.06s - 1735.78s |  We will not check the signatures every time a module is
1735.78s - 1737.70s |  loaded, as it should be.
1737.70s - 1739.14s |  We will only check signatures when
1739.14s - 1741.26s |  our defensive module is loaded.
1741.26s - 1746.53s |  And we will not try to notify users for now.
1746.53s - 1748.97s |  So the first problem that we have to solve
1749.01s - 1752.41s |  is how to calculate a hash or a signature for a DLM.
1752.41s - 1756.69s |  We'll hash each signature with md5,
1756.69s - 1761.01s |  because md5 was available on this symbol table.
1761.01s - 1763.61s |  And we will hash only the static sections,
1763.61s - 1767.01s |  because the dynamic sections will change once loaded.
1767.01s - 1769.33s |  If the static section contains data,
1769.33s - 1771.09s |  we will hash it right away.
1771.09s - 1774.53s |  But if it contains code, then, as Gaston
1774.53s - 1778.13s |  explained during the module installation when it's linked,
1778.13s - 1780.29s |  all the jams and the function calls
1780.29s - 1785.93s |  will get the actual addresses of the functions written to them.
1785.93s - 1789.17s |  So we will hash only the opcodes for these sections.
1789.17s - 1793.85s |  And the opcodes in MIPS are the first six bits.
1793.85s - 1798.05s |  So once we got that, we have to find all the modules that
1798.05s - 1799.49s |  are loaded.
1799.49s - 1803.45s |  When the ELF loader installs a module,
1803.45s - 1806.37s |  it creates an object to represent the module.
1806.41s - 1808.61s |  And the space for this module is allocated
1808.61s - 1811.65s |  using the linear allocator of the router.
1811.65s - 1815.81s |  So this allocator maintains a list of all the chunks
1815.81s - 1819.33s |  that it has assigned.
1819.33s - 1823.01s |  If we manage to find this object that represents a DLM,
1823.01s - 1825.77s |  we'll get the DLM name, a pointer
1825.77s - 1828.45s |  to the text section of that module,
1828.45s - 1830.29s |  and a pointer to the main section
1830.29s - 1834.09s |  that will get executed after the module is loaded.
1834.09s - 1839.01s |  So the loader copies all the sections
1839.01s - 1841.49s |  in a predefined order, one after the other,
1841.49s - 1843.09s |  after the text section.
1843.09s - 1845.57s |  This order is usually defined by the compiler.
1845.57s - 1850.49s |  And we will assume that this order doesn't change.
1850.49s - 1853.57s |  So on the bottom, you can see a little bit
1853.57s - 1856.45s |  of the code of this defensive module, the part where
1856.45s - 1861.13s |  we traverse the list of chunks from this allocator.
1861.13s - 1866.65s |  And we will check if each chunk corresponds to a module object.
1866.65s - 1868.57s |  If the chunk corresponds to a module object,
1868.57s - 1870.25s |  we will print some information.
1870.25s - 1873.49s |  And if this module happens to be the SSH one,
1873.49s - 1877.93s |  then we will calculate the hashes and compare them.
1877.93s - 1879.53s |  So here's the demonstration.
1879.53s - 1883.13s |  This router is the one that has been backdoored
1883.13s - 1885.97s |  and has a modified version of the SSH.
1885.97s - 1890.33s |  Then we upload our defensive module using the UI on the left.
1890.33s - 1895.73s |  And you can see right there that once it's uploaded,
1895.73s - 1898.77s |  it will try to find all the modules printing their information.
1898.77s - 1901.37s |  And when it reaches the SSH module, it
1901.37s - 1904.13s |  will start comparing the hashes for each section.
1904.13s - 1908.53s |  And it will find that there is a mismatch between the hashes
1908.53s - 1912.34s |  on the second section.
1912.34s - 1916.90s |  So to wrap this up, some conclusions and takeaways.
1916.90s - 1919.94s |  All these vulnerabilities were found by us
1919.94s - 1923.62s |  analyzing only the bigger 2925 router.
1923.62s - 1925.46s |  But they are present in several models
1925.46s - 1929.94s |  because all the SOHO routers use this real-time operating system.
1929.94s - 1935.38s |  And even some of the higher-end routers that run Linux
1935.38s - 1938.94s |  emulate the same real-time operating system.
1938.94s - 1941.98s |  So we found all these vulnerabilities and some more
1941.98s - 1943.30s |  that we didn't show.
1943.30s - 1944.86s |  And they are all patched by now.
1944.86s - 1949.66s |  But we don't have CEIDs yet.
1950.50s - 1953.46s |  Well, some conclusions on the offensive side.
1953.46s - 1956.46s |  The code for this real-time operating system is huge.
1956.46s - 1958.30s |  It's really complex.
1958.30s - 1961.54s |  And we only analyzed a little bit of it.
1961.54s - 1964.94s |  Imagine that the functions that are present in the symbol table
1964.94s - 1969.94s |  are maybe not up to 5% of all the functions in this firmware.
1969.94s - 1972.06s |  So there are probably more vulnerabilities here
1972.06s - 1973.26s |  to be found.
1973.26s - 1976.46s |  And that is why we are open sourcing our tool.
1976.46s - 1978.58s |  And we would love for you to try it.
1978.62s - 1980.98s |  And we would love to know if it's useful
1980.98s - 1982.54s |  and if you find something.
1982.54s - 1986.62s |  So there's the repository if you want to check it out.
1986.62s - 1990.18s |  And now some conclusions on the defensive side.
1990.18s - 1992.90s |  We show that it's possible to create a defensive module
1992.90s - 1995.58s |  to check the integrity of other modules in memory.
1995.58s - 1997.26s |  But in an ideal situation,
1997.26s - 2000.14s |  this feature should be implemented by the vendor.
2000.14s - 2002.70s |  It should fetch these updated signatures
2002.70s - 2006.42s |  from a trusted server verifying the certificates.
2006.42s - 2007.86s |  And for all this to work,
2007.86s - 2010.46s |  if this feature is included in the firmware,
2010.46s - 2012.90s |  also we must have a secure chain
2012.90s - 2017.67s |  to trust that this is working right.
2017.67s - 2019.71s |  And to close some takeaways,
2019.71s - 2023.15s |  we think that closed-source firmware, as this example,
2023.15s - 2025.55s |  is just another case of security by security.
2026.51s - 2028.67s |  All these vulnerabilities that we have found
2028.67s - 2030.83s |  are really simple.
2030.83s - 2035.63s |  And they would have been reported sooner by the community
2035.63s - 2040.03s |  if it were easier to reverse engineer these routers.
2040.03s - 2043.51s |  So some things as plain text password storage,
2043.51s - 2047.07s |  the use of insecure functions to compare sensitive data,
2047.07s - 2049.95s |  predictable random number generation,
2049.95s - 2053.19s |  and even the lack of SSL certificate validation.
2053.19s - 2056.83s |  So given all the increase in attacks
2056.83s - 2059.15s |  that we are seeing to edge devices,
2059.15s - 2061.11s |  it would be really important for vendors
2061.11s - 2064.31s |  to include features that facilitate observability,
2064.31s - 2066.67s |  vulnerability research by the community,
2066.67s - 2068.87s |  and to implement threat detection solutions.
2070.35s - 2071.71s |  So this is it.
2071.71s - 2072.59s |  Thank you for your time.
2072.59s - 2074.27s |  First for coming so early.
2074.27s - 2076.83s |  And if you have any questions, please ask us.
2077.95s - 2080.15s |  There's a mic here if you want to ask.
2083.03s - 2089.70s |  First question gets shared.
2089.70s - 2110.08s |  Well, thank you guys.
2110.08s - 2110.92s |  Yeah.
2112.36s - 2114.72s |  Okay, the question was if there is memory protection
2114.72s - 2117.12s |  between the modules and the RGOS, and there's not.
2117.76s - 2118.80s |  All these runs on the same memory space.
2118.80s - 2122.20s |  So from a module, you could modify the RGOS code
2122.20s - 2123.68s |  and vice versa.
2123.68s - 2135.17s |  Yeah.
2135.17s - 2136.69s |  Well, thanks again for coming.