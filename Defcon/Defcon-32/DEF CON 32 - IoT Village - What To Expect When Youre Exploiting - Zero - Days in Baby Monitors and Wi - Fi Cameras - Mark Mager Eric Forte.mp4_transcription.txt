{
  "webpage_url": "local:1732054456:3148fdca:DEF CON 32 - IoT Village - What To Expect When Youre Exploiting - Zero - Days in Baby Monitors and Wi - Fi Cameras - Mark Mager  Eric Forte.mp4",
  "title": "DEF CON 32 - IoT Village - What To Expect When Youre Exploiting - Zero - Days in Baby Monitors and Wi - Fi Cameras - Mark Mager  Eric Forte.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 2.24s | This text was transcribed using whisper model: large-v2

 Good morning, DEF CON.
2.24s - 5.00s |  We are going to be hacking some baby monitors and Wi-Fi cameras
5.00s - 6.80s |  today.
6.80s - 7.88s |  So a little bit about me.
7.88s - 8.76s |  My name's Mark Mager.
8.76s - 11.04s |  I'm senior manager of security research at Elastic.
11.04s - 13.38s |  My background is primarily in Windows malware research
13.38s - 15.84s |  and reverse engineering.
15.84s - 19.48s |  So what do we need to know about Wi-Fi cameras and baby monitors
19.48s - 20.32s |  today?
20.32s - 23.40s |  Basically, we're going to assume they're the exact same thing,
23.40s - 26.00s |  because they pretty much have the same feature set.
26.00s - 29.80s |  They're literally marketed and sold as equivalent devices.
29.80s - 33.64s |  So what we're talking about is the $10 cameras
33.64s - 37.92s |  you can find on Amazon that require internet connectivity
37.92s - 41.00s |  to that specific vendor's cloud platform.
41.00s - 44.56s |  And there's very basic operations, pan, tilt, zoom,
44.56s - 47.04s |  things along those lines, motion detection, whatever.
47.04s - 49.32s |  But yeah, that's what we're talking about when
49.32s - 51.28s |  we say Wi-Fi cameras for today.
51.28s - 52.68s |  So why Wi-Fi cameras?
52.68s - 57.92s |  Well, there's literally almost 125 million households
57.92s - 60.60s |  across the world that have these cameras installed
60.60s - 61.64s |  within their house.
61.64s - 65.36s |  So these things are everywhere.
65.36s - 67.76s |  And they're obviously going anywhere.
67.76s - 68.72s |  And they're super cheap.
68.72s - 70.92s |  So you're going to find them everywhere.
70.92s - 74.20s |  The attacks that are typically associated with these cameras,
74.20s - 76.12s |  what you're probably going to hear about usually
76.12s - 80.40s |  is people spying on babies and families,
80.40s - 83.80s |  terrorizing them, that sort of thing, a bit upsetting there.
83.84s - 89.44s |  And even things like Russians performing reconnaissance
89.44s - 93.00s |  on targets within Ukraine.
93.00s - 97.36s |  So when we set out to evaluate the attack surface for Wi-Fi
97.36s - 99.56s |  cameras, we wanted to break things down
99.56s - 102.40s |  into a few different common attack vectors.
102.40s - 106.12s |  That broke down primarily into leak credentials
106.12s - 107.60s |  and cloud vulnerabilities.
107.60s - 112.36s |  Those seem to be the most common attack vectors, the most
112.36s - 117.68s |  frequently seen ones in more of the attacks
117.68s - 120.00s |  that we see across the board.
120.00s - 122.68s |  Yeah, so focusing on those two, that's
122.68s - 126.92s |  certainly what we wanted to dig into
126.92s - 130.92s |  was any vulnerabilities specific to the cloud platforms,
130.92s - 133.76s |  the applications that control the cameras,
133.76s - 139.88s |  and the camera hardware itself.
139.88s - 141.16s |  Hello, DEF CON.
141.16s - 142.20s |  I'm Eric Forte.
142.20s - 144.40s |  And I'm doing the presentation with Mark.
144.40s - 147.28s |  And I'm a security research engineer at Elastic.
147.28s - 149.68s |  I'm on the Threat Research and Detection Engineering team,
149.68s - 151.24s |  otherwise known as TRADE.
151.24s - 154.32s |  And my background is in Linux software development,
154.32s - 157.28s |  IoT systems, UAVs, civil space sector,
157.28s - 159.76s |  and then also doing some threat research.
159.76s - 162.84s |  And so when we're talking about these cameras,
162.84s - 164.72s |  for the purposes of this talk, we
164.72s - 166.52s |  looked at a number of different cameras.
166.52s - 169.92s |  But we're going to primarily focus on the WandsView Q5
169.92s - 171.76s |  and the WandsView Q6.
171.76s - 175.44s |  And as far as why we picked these cameras,
175.44s - 178.20s |  it was sort of clear to see on the Amazon reviews
178.20s - 180.80s |  that they might have something for us to look at,
180.80s - 183.64s |  some vulnerabilities that other people had just come across
183.64s - 190.36s |  because they were readily hacked enough that it took notice.
190.36s - 193.40s |  So these cameras are made by WandsView.
193.40s - 197.12s |  But there are other vendors that also produce cameras,
197.12s - 199.20s |  such as Sonado and some others as well,
199.24s - 201.96s |  which we'll touch on a little bit more in a little bit.
201.96s - 205.52s |  But they're primarily under the AJ Cloud management
205.52s - 206.24s |  infrastructure.
206.24s - 208.96s |  And so this is going to be the cloud services that
208.96s - 214.16s |  provide you with the apps, with the way of connecting to it.
214.16s - 216.92s |  So the WandsView versus Sonado versus others
216.92s - 219.00s |  may have their own little differences in the apps
219.00s - 219.80s |  themselves.
219.80s - 223.00s |  But primarily, this cloud interface is with AJ Cloud.
223.00s - 226.20s |  And we'll get into a lot more of that in a minute.
226.20s - 229.00s |  So when we were first with these cameras,
229.00s - 231.44s |  we kind of looked at a few different approaches
231.44s - 233.28s |  for how we were going to try and see
233.28s - 237.16s |  if we could get some of those similar Amazon review results.
237.16s - 239.28s |  So first, we were looking at remote access.
239.28s - 241.16s |  So this is going to be accessing the camera
241.16s - 245.52s |  through whatever companion app that ships with the camera.
245.52s - 247.84s |  We also were going to look at some local attacks.
247.84s - 251.16s |  So it's going to be some active and passive networking recon,
251.16s - 253.88s |  in addition to seeing what else other services and things
253.88s - 255.12s |  were running there.
255.12s - 258.84s |  Also looking at some device physical manipulation,
258.84s - 261.68s |  which obviously, these are Wi-Fi cameras.
261.68s - 264.56s |  They're not necessarily like closed circuit TV cameras.
264.56s - 266.44s |  So we're expecting that there's going
266.44s - 269.00s |  to be some physical attacks, which there are.
269.00s - 271.00s |  We'll get to that.
271.00s - 273.24s |  But this is still, again, as an attack vector,
273.24s - 276.28s |  can enable some other aspects.
276.28s - 279.36s |  Then finally, looking at the hardware itself,
279.36s - 282.88s |  so looking at the chip and seeing what we can use,
282.88s - 285.28s |  what we can do to get the firmware off, what we can do
285.28s - 287.76s |  to kind of, again, extend that vulnerability process,
287.76s - 289.56s |  look for serial communications and things
289.56s - 294.88s |  like that, which, spoiler alert, we found some over UART.
294.88s - 298.72s |  So for our lab setup, we have a number of different things
298.72s - 300.10s |  that we wanted to look at, right?
300.10s - 301.88s |  So we've got different apps.
301.88s - 304.68s |  So we want to have a very controlled environment,
304.68s - 307.52s |  because we know, say, one, they're easy to hack,
307.52s - 309.28s |  so we don't want to be hacked ourselves.
309.28s - 312.60s |  But on top of that, we know, as these are largely, say,
312.60s - 315.36s |  Chinese-make cameras, that they may also
315.36s - 317.32s |  want to be watching what we're doing.
317.88s - 320.24s |  So we wanted to have a completely different setup.
320.24s - 323.32s |  And so we have a mobile hotspot.
323.32s - 324.72s |  I like the T-Mobile T9s.
324.72s - 325.30s |  They're cheap.
325.30s - 328.48s |  You can get them for about $20, and they do the job great.
328.48s - 330.36s |  We have the camera, of course, itself.
330.36s - 333.92s |  Then we needed, say, Windows and Linux operating systems.
333.92s - 336.04s |  You don't actually need Linux, except I
336.04s - 337.52s |  would argue that you do.
337.52s - 339.02s |  But practically speaking, you don't
339.02s - 341.80s |  need Linux to be able to run any of these things.
341.80s - 342.88s |  But we used that.
342.88s - 347.30s |  But we did need Windows to also look at the companion Windows
347.30s - 350.52s |  app, in addition to the iOS and Android apps,
350.52s - 355.10s |  which we had phones and virtual machines set up for, as well.
355.10s - 357.98s |  From a software side, we used a number of different tools,
357.98s - 361.54s |  including, say, Wireshark, running Android Studio
361.54s - 364.30s |  to try and see what we could find out from the app,
364.30s - 366.74s |  various other sort of decompiling mechanisms,
366.74s - 371.66s |  and also using the Elastic Stack to look at the network
371.66s - 373.06s |  communication logs and how we can
373.06s - 375.42s |  parse some of the different protocols that we saw.
376.42s - 378.46s |  Again, we'll talk to that more in a little bit,
378.46s - 381.94s |  but specifically looking at some peer-to-peer traffic there.
381.94s - 384.30s |  From a hardware standpoint, since we
384.30s - 387.38s |  wanted to do the full gamut of going from complete hardware
387.38s - 390.10s |  takedown, as well as looking at all the software,
390.10s - 392.46s |  we had some hardware teardown tools.
392.46s - 394.82s |  I like what iFixit has.
394.82s - 396.70s |  But of course, you can take your pick.
396.70s - 400.70s |  Then we needed some USB TTY connector.
400.70s - 404.70s |  So in this case, it's just your typical Adafruit USB TTY
404.78s - 406.86s |  serial connector there.
406.86s - 410.54s |  We also have a, and we'll get to it more in a minute,
410.54s - 415.30s |  but using the GrapeFET1 as a logic analyzer
415.30s - 417.10s |  and to be able to read voltages and things
417.10s - 419.74s |  like that in case we needed to actually hard
419.74s - 421.70s |  pull something off of the chip, solder something,
421.70s - 422.62s |  or things like that.
422.62s - 424.74s |  Ultimately, we didn't need to do that,
424.74s - 427.98s |  but we were prepared for that nonetheless.
427.98s - 432.30s |  Raspberry Pi, because it's easy to image and distribute.
432.30s - 436.42s |  So for doing cross compilation and things like that,
436.42s - 437.78s |  cheap, easy to come by.
437.78s - 443.86s |  And then also, we used alpha Wi-Fi, just a USB Wi-Fi
443.86s - 446.82s |  NIC, which for us, why this was important
446.82s - 450.70s |  and why you'll need some NIC that you can get active,
450.70s - 452.78s |  or rather passive sniffing on, is
452.78s - 455.78s |  because you're going to want to capture all of the traffic
455.78s - 458.74s |  going from the camera to the cloud
458.74s - 461.90s |  and not just what will appear as network traffic.
461.90s - 463.50s |  And we'll get to that in a little bit,
463.50s - 465.46s |  because to follow along, you'll need
465.46s - 468.90s |  to parse some other additional protocols.
468.90s - 472.74s |  So getting a little bit into our remote and local recon,
472.74s - 474.02s |  initial attacks were limited.
474.02s - 477.38s |  They had a fairly locked down attack surface.
477.38s - 479.54s |  The active network and local reconnaissance
479.54s - 482.30s |  doesn't reveal too much or too much interesting
482.30s - 484.38s |  as far as running on the traffic,
484.38s - 486.10s |  or rather running on the camera.
486.10s - 490.58s |  The network traffic itself is fairly mundane.
490.58s - 492.14s |  It uses encrypted web sockets, which
492.14s - 494.82s |  is a good sign that they are at least using encryption,
494.82s - 496.94s |  things like that.
496.94s - 499.58s |  So we tried to do some man-in-the-middle attacks,
499.58s - 501.58s |  but ultimately, we weren't particularly
501.58s - 503.18s |  successful with that.
503.18s - 505.78s |  Looking at the apps themselves, they
505.78s - 507.86s |  were likely obfuscated with ProGuard.
507.86s - 515.58s |  We couldn't, just from unpacking the APK, get too far there.
515.58s - 518.94s |  So those APKs were just not easily that debuggable.
518.94s - 521.26s |  But just as a quick note, ultimately, there's
521.26s - 522.70s |  three lines of communication.
522.70s - 524.66s |  We're going from the mobile app to the cloud,
524.66s - 527.22s |  the mobile app to the camera, and then also from the camera
527.22s - 528.86s |  to the cloud, and then the mobile app.
528.86s - 531.50s |  And that, just as a sort of primer,
531.50s - 534.14s |  we'll get into that more in a little bit.
534.14s - 537.18s |  Just as far as the physical device itself, again,
537.18s - 539.82s |  we weren't really expecting it to be that secure.
539.82s - 543.22s |  It has an exposed reset button, so if you had this sitting,
543.22s - 545.74s |  like let's say up here on stage, if you were to walk by,
545.74s - 548.18s |  hit the reset button, and then flash a QR code,
548.18s - 550.38s |  you could steal the camera, and then now it's yours.
550.38s - 551.62s |  You have full control over it.
551.62s - 553.66s |  Again, that's not particularly surprising,
553.66s - 557.42s |  because that's part of the expected setup process.
557.42s - 561.06s |  So in that sense, once you have reset the camera,
561.06s - 563.54s |  there's no verification.
563.54s - 566.86s |  So there's also an exposed SD card slot.
566.86s - 568.86s |  So as we came to discover later, this
568.86s - 571.40s |  can be used to load alternative firmware as well.
571.40s - 573.82s |  We'll get into what the bootloader looks like in a minute
573.82s - 577.66s |  too, but if you were to craft a malicious SD card,
577.66s - 579.22s |  you could go plug it into the camera
579.22s - 582.22s |  and then also have a field day there too.
582.22s - 585.22s |  The hardware recon starts to get a little bit more interesting.
585.22s - 590.54s |  So when we look at the chip, it's an Express T31 SoC.
590.54s - 592.66s |  It's primarily a MIPS processor, but it also
592.66s - 594.78s |  has a companion RISC-V processor.
594.78s - 596.90s |  But the primary thing I want you to focus
596.90s - 598.90s |  on for the sake of the demonstration
598.90s - 603.50s |  is that we have an I2C and UART bus
603.50s - 606.38s |  that we could be looking for on the hardware,
606.38s - 607.46s |  on the chip itself.
607.46s - 612.98s |  We also have a secure boot, which
612.98s - 614.66s |  that could throw a wrench into things.
614.66s - 618.38s |  And then we also have a hardware watchdog supported by this chip.
618.38s - 620.14s |  Doesn't necessarily mean they're using it,
620.14s - 621.74s |  but again, these are things that we can
621.74s - 624.58s |  look for in our hardware recon.
624.58s - 626.98s |  So in tearing down part of the camera,
626.98s - 632.18s |  we found a potential UART, UN access ports there.
632.18s - 636.34s |  And so we connected a logic analyzer, the great FET-1,
636.34s - 640.94s |  looked at the voltages, used some of the protocol detection,
640.94s - 643.46s |  saw that it appears to be UART.
643.46s - 646.14s |  And if we look at the actual signal,
646.14s - 649.06s |  we saw that it indeed was.
649.06s - 651.82s |  So we go ahead and use screen, but you
651.82s - 655.14s |  can use, again, whatever your favorite tool is to connect
655.14s - 657.30s |  over default baud rate to UART.
657.30s - 661.50s |  And lo and behold, on boot, we have UBOOT.
661.50s - 663.82s |  So that, of course, is useful for us.
663.82s - 666.78s |  But also, we, in further expecting this,
666.78s - 669.46s |  that secure boot is not enabled by default
669.46s - 672.70s |  as far as on the camera, even though the chip supports it.
672.70s - 676.66s |  So we can just do a quick boot into single user mode
676.66s - 679.54s |  and get a root shell so that we can start poking around further.
679.54s - 682.18s |  Now, this camera was particularly easy to do this,
682.18s - 686.54s |  because you could just straight set the environment
686.54s - 689.50s |  variables for UBOOT to be able to boot into single user mode
689.50s - 690.38s |  and get root.
690.38s - 692.58s |  Other cameras that we looked at were not as simple as this.
692.58s - 694.90s |  And sometimes, you have to use memory offsets and things
694.90s - 695.82s |  like that.
695.82s - 699.90s |  But this one, in particular, was fairly straightforward.
699.90s - 703.70s |  So again, we can hit boot and then just drop
703.70s - 705.94s |  into our root shell and then be able to poke around
705.94s - 706.98s |  on the camera.
706.98s - 710.14s |  So now that we're there, so a few things
710.14s - 711.94s |  that we want to then do to go forward.
711.94s - 715.26s |  First off, we may want to try and establish persistence.
715.26s - 717.46s |  But if you've done this type of attack before,
717.46s - 720.66s |  going to single user mode, especially on embedded devices,
720.66s - 722.66s |  and just embedded devices in general,
722.66s - 725.70s |  you might see that you're on a read-only file system.
725.70s - 728.66s |  Well, many times, this is only read-only-ish.
728.66s - 731.46s |  It's not quite truly read-only.
731.46s - 734.22s |  So if we take a look at fstab, we
734.22s - 739.14s |  can see that a number of these mount points are separated.
739.14s - 742.98s |  But then also, they are tmpfs shares.
742.98s - 747.42s |  So we can then make our own tmpfs partition
747.42s - 751.42s |  or just mount a tmpfs partition for read-write access,
751.42s - 753.70s |  modify the desired settings, and we
753.70s - 756.42s |  can run whatever we want, of course, and have persistence.
756.42s - 759.78s |  Which largely, for these type of devices,
759.78s - 761.82s |  you will need this type of interface,
761.82s - 764.62s |  whether it be for there's other methods for logging.
764.62s - 767.42s |  But again, when Linux is running,
767.42s - 770.02s |  it often needs to be able to make some level modifications.
770.02s - 772.50s |  So this is just walking through one way of doing that,
772.50s - 776.66s |  of saying, hey, I want to create a tmpfs share for dev,
776.86s - 780.98s |  and then go ahead and mount it, and then also then mount
780.98s - 786.06s |  Etsy such that I can make Etsy read-write as well, which,
786.06s - 789.54s |  of course, gives us access to some other things.
789.54s - 793.46s |  And so just demonstrating there that if I run,
793.46s - 796.14s |  that if I just create a file, then it does, in fact,
796.14s - 799.58s |  show up as opposed to when it didn't before.
799.58s - 802.02s |  So if you want, so that's just one way, of course,
802.02s - 805.02s |  then you can go and do whatever you want from that perspective.
805.06s - 808.14s |  But if you want to go log into the existing root user,
808.14s - 809.74s |  of course, you can pull Etsy password,
809.74s - 813.98s |  and then go and just use John the Ripper or something
813.98s - 817.10s |  to crack that hash, and go from there.
817.10s - 818.98s |  But for our purposes, again, we want
818.98s - 821.54s |  to keep looking for the other software vulnerabilities.
821.54s - 824.78s |  So this gives us an easy way to pull the firmware
824.78s - 826.86s |  over the serial connection.
826.86s - 828.42s |  And in addition to the firmware, we're
828.42s - 831.10s |  pulling a JFS to read-write partition containing
831.10s - 834.10s |  any log data, again, just might be useful for us.
834.10s - 836.86s |  So this is just demonstrating how you can,
836.86s - 838.66s |  one way of pulling the firmware.
838.66s - 840.20s |  There are a number of different ways,
840.20s - 844.82s |  but this is just how we did it using binwalk,
844.82s - 847.26s |  and then, of course, just echoing the bytes out
847.26s - 850.30s |  in the appropriate format over the serial connection.
850.30s - 852.90s |  So with that, I'm going to hand it over to Mark
852.90s - 856.24s |  to see what he did with the firmware.
856.24s - 858.84s |  All right, so as Eric mentioned earlier,
858.84s - 862.28s |  we definitely were running into issues
862.28s - 865.12s |  with the iOS and Android apps for WANs.
866.12s - 869.44s |  So we're hitting our heads against the wall a little bit.
869.44s - 871.92s |  So we kind of backed things up a little bit
871.92s - 874.20s |  and went directly to WANsvue's site.
874.20s - 877.96s |  And they host a version of WANsvue Cloud
877.96s - 880.04s |  that is for older versions of Windows.
880.04s - 883.52s |  I think it says Windows 7 specifically on their site.
883.52s - 886.80s |  But the main takeaways from that is that
886.80s - 890.36s |  that app is still compatible with all WANsvue devices.
890.36s - 891.76s |  It does have a limited feature set.
891.76s - 893.08s |  I mean, they're still trying to push you
893.08s - 895.16s |  towards using the apps.
895.16s - 898.00s |  You know, that's totally, you know, their sort of thing
898.00s - 900.60s |  because they want everybody to sign up
900.60s - 902.84s |  for their cloud plans so they can make more money
902.84s - 906.36s |  off of everybody, not just the $10 sales,
906.36s - 908.88s |  you know, from the device itself, right?
910.44s - 912.56s |  A couple of other things related to that,
912.56s - 914.44s |  this Windows app, is it does generate
914.44s - 917.40s |  a significantly less amount of network traffic.
917.40s - 919.20s |  That's going to come in handy later.
919.20s - 921.86s |  And the binaries are not packed.
921.86s - 925.90s |  Eric mentioned that the APKs look like
925.90s - 928.14s |  they're probably packed with ProGuard.
928.14s - 930.86s |  So, you know, definitely being able to disassemble
930.86s - 933.90s |  and decompile and debug pretty easily.
933.90s - 936.14s |  That helps out quite a bit.
936.14s - 939.18s |  And then last but certainly not least
939.18s - 944.18s |  is that it does generate a very, very verbose debug log file
944.54s - 946.62s |  which I'm going to dig into right now.
946.62s - 949.82s |  And the first thing we noticed when we ran it the first time
949.82s - 953.82s |  it logs user account credentials in clear text.
953.82s - 955.94s |  That's obviously terrible.
955.94s - 957.82s |  So yeah, not a great sign of things.
958.74s - 961.06s |  And as Eric mentioned before,
961.98s - 964.34s |  we had significant difficulties trying to man the middle
964.34s - 967.26s |  of any of the app traffic before.
967.26s - 969.06s |  So we had no visibility into that,
969.06s - 972.34s |  but hopefully their developers decided
972.34s - 977.34s |  to actually log all post request and response data.
977.60s - 979.14s |  So it's all there in the clear.
979.46s - 980.78s |  Who needs to man the middle of anything
980.78s - 985.91s |  when you have it in the clear on a file on disk?
985.91s - 987.95s |  So yeah, so digging into it.
987.95s - 990.23s |  Yeah, we could definitely get a ton of insight
990.23s - 993.87s |  into the sign-on process that we did not have before
993.87s - 997.19s |  including the actual endpoint APIs,
997.19s - 1001.35s |  as well as all the fields that are involved
1001.35s - 1002.79s |  both in the requests and responses.
1002.79s - 1004.87s |  So, you know, the first thing here
1004.87s - 1007.55s |  is the app startup endpoint.
1007.55s - 1009.15s |  It's not really a ton there.
1009.19s - 1010.71s |  It's more just initial setup.
1012.95s - 1016.79s |  This check is more just to see if this is a valid account
1016.79s - 1019.03s |  that you're attempting to sign on.
1019.03s - 1020.99s |  And then this here is where the actual,
1022.47s - 1025.87s |  let's see, yeah, it's an initial account where,
1025.87s - 1029.43s |  but yeah, challenge involved where the token's generated
1029.43s - 1032.87s |  for that specific client application.
1032.87s - 1035.99s |  And then there's a little bit of a key exchange that happens
1035.99s - 1037.87s |  but yeah, not too much else going on there.
1037.87s - 1042.19s |  This is where the sign-on really begins assaulted.
1042.19s - 1043.99s |  Yeah, your password is at least salted and hashed.
1043.99s - 1046.07s |  So it's not set in the clear, thank God.
1047.31s - 1048.35s |  And then, yeah, I mean,
1048.35s - 1052.43s |  it's mostly just to initialize the session
1052.43s - 1054.27s |  and to confirm that you are allowed
1054.27s - 1055.87s |  to log into this account.
1056.95s - 1059.39s |  From there, things really start to get interesting
1059.39s - 1063.35s |  because now that we're logged in,
1063.35s - 1065.35s |  we can request a list of devices
1065.35s - 1068.11s |  that are associated with that specific account.
1068.11s - 1071.19s |  And as you can see here, there's a specific device ID
1071.19s - 1073.87s |  along with some more configuration information,
1073.87s - 1076.15s |  primarily endpoint URIs.
1078.63s - 1081.95s |  And then there's another device configuration
1083.07s - 1085.03s |  API endpoint that's hit.
1085.03s - 1087.55s |  This is very notable.
1087.55s - 1089.47s |  We're gonna refer back to this later,
1089.47s - 1092.79s |  but this is where a device ID is first transmitted
1092.79s - 1097.15s |  from the application to the cloud.
1098.19s - 1102.27s |  And more configuration information comes through.
1102.27s - 1104.19s |  We'll dig into that a bit.
1104.19s - 1108.99s |  And then the last request we really dig into is Fetch Infos.
1108.99s - 1113.55s |  And this provides a much, much larger picture
1113.55s - 1118.55s |  of the data that is stored for that specific device.
1119.59s - 1121.79s |  And there's a lot to kind of dig into,
1121.79s - 1124.47s |  but what you'll wanna really highlight on
1124.47s - 1128.15s |  is there's a snapshot URL that's provided,
1128.15s - 1131.71s |  and that just happens to be publicly accessible,
1131.71s - 1134.99s |  and that's a picture of my kitchen from back in April.
1136.51s - 1141.11s |  So digging further into more of the response data,
1142.03s - 1143.51s |  there's a few things certainly to note here
1143.51s - 1145.95s |  that are a bit concerning, right?
1147.23s - 1150.27s |  The firmware version, the very specific firmware version
1150.27s - 1154.35s |  that is running on the device itself,
1154.35s - 1155.27s |  that's referenced there,
1155.27s - 1157.67s |  along with the next firmware version
1157.67s - 1159.07s |  they're supposed to upgrade to,
1159.07s - 1161.83s |  along with the actual SSID
1161.83s - 1165.27s |  that the device is currently signed onto,
1165.27s - 1167.59s |  along with some other network configuration information,
1167.59s - 1169.59s |  including its MAC address.
1169.59s - 1172.99s |  And then we also have geolocation data
1174.15s - 1178.07s |  in the form of time zone data and things like that.
1179.07s - 1184.07s |  So going back to the device configuration request,
1184.07s - 1187.31s |  what we tried to do first is we wanted to see
1187.31s - 1189.39s |  if we could actually access other devices
1189.39s - 1192.43s |  that weren't associated with our particular account.
1193.59s - 1195.39s |  So we tried a very naive approach
1195.39s - 1198.87s |  where all we wanted to do was simply just replace
1198.87s - 1201.55s |  the device ID in that particular request.
1201.55s - 1204.23s |  And without really doing a significant amount
1204.23s - 1205.11s |  of reverse engineering,
1205.11s - 1207.19s |  we can locate that pretty easily
1207.27s - 1209.95s |  based off of the verbose log data.
1209.95s - 1212.67s |  Because if we just look at post request,
1212.67s - 1216.27s |  we can see how many times that's specifically logged
1216.27s - 1218.23s |  to the log file.
1218.23s - 1219.83s |  And then we can cross-reference that
1219.83s - 1223.35s |  with the disassembly in IDA
1223.35s - 1227.83s |  in order to target the specific device configuration
1227.83s - 1230.27s |  post request to get a better idea
1230.27s - 1231.87s |  of where we would want to jump in.
1231.87s - 1236.87s |  And so digging further into the particular function,
1237.59s - 1240.23s |  what we decided to do is we needed to set a breakpoint
1240.23s - 1242.55s |  at this particular address,
1242.55s - 1246.15s |  which would be before the post request actually goes out
1246.15s - 1251.15s |  before the JSON is fully formed as well.
1251.19s - 1253.23s |  We're gonna swap out the device IDs and memory
1253.23s - 1254.71s |  and then resume execution.
1254.71s - 1256.35s |  So pretty straightforward.
1256.35s - 1259.67s |  What this ends up kind of looking like
1259.67s - 1263.23s |  is I wrote up maybe a 60 line Python script
1263.23s - 1265.07s |  that does this all for us,
1265.11s - 1267.31s |  which we will dig into right now.
1268.83s - 1272.79s |  Okay, so what we have right here is,
1274.83s - 1279.35s |  well, first I'll demonstrate that this account is,
1285.26s - 1290.26s |  so we already have one specific camera
1290.26s - 1292.74s |  that is tied to this account
1292.74s - 1295.54s |  and it's offline at the moment.
1295.54s - 1299.10s |  So nothing particularly concerning there, right?
1299.10s - 1301.50s |  We'll attempt to connect to it,
1301.50s - 1313.08s |  but nothing's gonna happen.
1313.08s - 1315.04s |  Now, if we kick off the exploit script,
1315.04s - 1317.32s |  what it's gonna do is it's gonna launch
1317.32s - 1320.64s |  the same Wansview Cloud for Windows app.
1321.84s - 1324.60s |  We'll proceed to sign in as expected.
1325.56s - 1330.04s |  And once we hit our breakpoint,
1330.04s - 1333.28s |  we will swap out the device ID in memory
1334.28s - 1336.80s |  and then once it says finished here,
1337.68s - 1351.45s |  it will resume execution and we're online.
1352.45s - 1355.17s |  So the thing is,
1360.02s - 1362.90s |  so yeah, we can do everything in the app.
1362.90s - 1364.46s |  We can pan and tilt.
1366.42s - 1368.02s |  Yeah, I mean, like I said,
1368.02s - 1369.62s |  it is a bit more limited feature set
1369.62s - 1373.38s |  compared to the mobile apps,
1373.38s - 1375.70s |  but basically, right, we've proven
1375.74s - 1378.34s |  we can get access to an account
1378.34s - 1380.90s |  or a device that's not associated with our account.
1380.90s - 1385.10s |  It's obviously a very, very significant
1385.10s - 1386.70s |  access control vulnerability.
1387.86s - 1392.78s |  So yeah, certainly that was a pretty big discovery
1393.98s - 1398.58s |  right off the bat.
1398.58s - 1401.42s |  So you might've seen in the background
1401.42s - 1404.58s |  that there was certainly a lot of network traffic
1404.58s - 1406.94s |  being generated in the background.
1406.98s - 1409.46s |  It was all primarily UDP,
1409.46s - 1412.18s |  but we hadn't really no idea what it is in particular.
1413.10s - 1417.34s |  Now, doing research before we submitted to DEF CON,
1417.34s - 1422.02s |  we did come across a particular IoT peer-to-peer protocol
1422.02s - 1427.02s |  called PPPP that was pretty significantly researched
1429.06s - 1430.98s |  and detailed by Polymer PC.
1430.98s - 1432.46s |  He has a website.
1432.46s - 1435.06s |  He presented at DEF CON 28 in 2020.
1436.02s - 1438.54s |  Fully tearing down the protocol and all that.
1438.54s - 1441.66s |  So ideally, this was going to be something that,
1443.10s - 1444.78s |  maybe that was going to be in use here too.
1444.78s - 1447.06s |  So we kind of set out to explore that
1447.06s - 1451.98s |  by just looking for references to P2P and PPPPP.
1451.98s - 1453.06s |  And yeah, sure enough,
1453.06s - 1455.74s |  within the Wandscape Cloud binary itself,
1455.74s - 1458.42s |  as well as the DLLs,
1458.42s - 1461.54s |  we found numerous references,
1461.54s - 1464.02s |  even references to their specific PDBs,
1464.50s - 1468.62s |  which referenced both multiple peer-to-peer terms.
1468.62s - 1471.78s |  So yeah, we're pretty sure
1471.78s - 1473.86s |  that we're dealing with the same protocol.
1473.86s - 1476.62s |  And going from there then,
1476.62s - 1479.26s |  there is a excellent dissector
1479.26s - 1480.66s |  for this peer-to-peer protocol
1480.66s - 1485.10s |  that is available and posted on GitHub as of last year.
1485.10s - 1487.66s |  We load it in and all of a sudden that UDP traffic,
1487.66s - 1488.86s |  we have no idea what it is,
1488.86s - 1493.42s |  turns into a very recognizable messaging sequence
1493.42s - 1495.10s |  that's associated with peer-to-peer.
1496.14s - 1498.06s |  So in very, very briefly,
1498.06s - 1502.62s |  the peer-to-peer protocol is used by a ton of IoT devices
1502.62s - 1503.58s |  across hundreds of vendors.
1503.58s - 1507.82s |  It's been in use for the better part of the last decade,
1507.82s - 1509.50s |  if not longer.
1509.50s - 1510.98s |  It uses UDP hole punching
1510.98s - 1514.94s |  in order to circumvent restrictive network configurations.
1514.94s - 1517.06s |  And it allows you,
1517.06s - 1519.10s |  these apps to connect to the cameras
1519.10s - 1520.58s |  from anywhere in the world, right?
1520.58s - 1522.82s |  They want it to be as accessible as possible, right?
1522.82s - 1525.42s |  That's the whole point of these devices.
1525.42s - 1527.38s |  And yeah, sometimes the connections are either,
1527.38s - 1528.94s |  they're either direct to the camera,
1528.94s - 1529.98s |  depending on the configuration,
1529.98s - 1532.34s |  or they go through a relay if they have to,
1532.34s - 1536.06s |  if they have to get around certain restrictions.
1537.26s - 1542.27s |  All right, I think that's it.
1542.27s - 1545.03s |  So now we have established some initial access, right?
1545.03s - 1549.15s |  So we also have, as we looked at a little bit before,
1549.15s - 1550.87s |  the firmware, which we can now go into
1550.87s - 1553.91s |  some of that static reverse engineering.
1553.91s - 1556.79s |  We have packet capture for the camera
1556.79s - 1558.99s |  and the app network communications.
1558.99s - 1562.91s |  We have log files from both the windows and the camera logs.
1562.91s - 1566.47s |  The logs, as when we logged in before under root,
1566.47s - 1569.55s |  we of course have access to all of the de-message logs
1569.55s - 1571.31s |  and things like that as well.
1571.31s - 1574.95s |  And then we can get the camera logs
1574.95s - 1577.51s |  from any of its hardware mechanisms as well
1577.51s - 1581.19s |  for the audio and camera, pan, tilt, zoom, et cetera.
1581.19s - 1582.51s |  So now we want to kind of establish
1582.51s - 1583.95s |  some more advanced access
1583.95s - 1586.19s |  for looking for some additional exploits.
1586.19s - 1588.15s |  So one, or first,
1588.15s - 1590.43s |  we're going to look for that live log output
1590.43s - 1591.83s |  for some immediate feedback
1591.83s - 1593.59s |  to determine some of the control flow.
1593.59s - 1595.11s |  Again, from the windows app, right,
1595.11s - 1597.79s |  we were able to see that some of the,
1597.79s - 1601.63s |  they are logging the post request and responses.
1601.63s - 1602.87s |  So we're hopeful that they're going to do
1602.87s - 1604.31s |  something similar in the camera,
1604.31s - 1606.27s |  but we also want to establish a,
1606.27s - 1608.51s |  we want to have a debugger running on that camera
1608.51s - 1610.43s |  so we can look at some of these applications
1610.43s - 1612.31s |  and see what we can do.
1612.99s - 1615.07s |  First, for live log output,
1615.07s - 1617.07s |  it's very, very simple, very easy.
1617.07s - 1618.31s |  You plug the serial,
1618.31s - 1620.67s |  you just get your serial shell over,
1620.67s - 1621.95s |  you aren't plugged it into,
1621.95s - 1623.47s |  say in this case, a Raspberry Pi,
1623.47s - 1625.55s |  but again, you could use whatever you like
1625.55s - 1628.07s |  and it spits out the logs over serial by default.
1628.07s - 1630.79s |  So you don't even necessarily need to use the root access
1630.79s - 1633.47s |  or boot the single user mode to just get the logs.
1633.47s - 1636.35s |  But again, that's just one way of doing it.
1636.35s - 1638.67s |  One thing that we'll quickly run into
1638.67s - 1640.87s |  is the kernel watchdog.
1640.87s - 1643.75s |  So if the watchdog is not written to,
1643.75s - 1644.91s |  it reboots the camera.
1644.91s - 1647.31s |  So this, what we're seeing here is,
1647.31s - 1651.23s |  if you try to kill the primary app,
1651.23s - 1653.55s |  or in this case, we'll get to it in a minute,
1653.55s - 1656.67s |  but if you start to kill off things in the camera
1656.67s - 1658.87s |  to go look at them or pause things,
1658.87s - 1662.11s |  it will trigger the kernel watchdog process,
1662.11s - 1664.75s |  which will then reboot the camera.
1664.75s - 1666.83s |  This isn't the only safe security mechanism.
1666.83s - 1667.91s |  This is just the one that,
1667.91s - 1670.39s |  the primary one that you would have to get around
1670.91s - 1671.75s |  to be able to run a debugger,
1671.75s - 1674.67s |  to be able to look at the primary application
1674.67s - 1676.03s |  that they're running on the camera,
1676.03s - 1678.03s |  which they call init app,
1678.03s - 1682.55s |  which handles all of the connection to the AJ cloud,
1682.55s - 1684.35s |  providing all of the video streaming
1684.35s - 1686.27s |  and the rest of the control of the camera.
1686.27s - 1691.27s |  They wrap this init app in a daemon.sh script,
1691.35s - 1693.27s |  which is just a simple while loop that says,
1693.27s - 1695.31s |  hey, keep kicking off the init app.
1695.31s - 1698.07s |  If I have to kick it off more than X number of times,
1698.07s - 1699.19s |  reboot it again,
1699.19s - 1700.99s |  acting sort of like, again, a catch all
1700.99s - 1702.99s |  in case something went really wrong,
1702.99s - 1706.51s |  but that init app is reporting into the watchdog.
1706.51s - 1707.87s |  And so this is, that's,
1707.87s - 1709.59s |  so if you either kill the init app
1709.59s - 1712.31s |  or again, kill the daemon and then kill the init app,
1712.31s - 1714.67s |  that's where you're gonna end up rebooting the device.
1714.67s - 1717.07s |  And so if you're using single user mode to get root,
1717.07s - 1718.75s |  you're going to lose that.
1718.75s - 1720.35s |  And some of the,
1720.35s - 1722.75s |  unless you have set up some level of persistence,
1722.75s - 1725.79s |  you're going to lose any of the edits as well.
1725.79s - 1728.63s |  So of course, next step is to defeat the watchdog.
1728.63s - 1730.47s |  So there are a couple of approaches here, right?
1730.47s - 1731.31s |  That you could do.
1731.31s - 1732.71s |  So the first one,
1732.71s - 1734.71s |  which you can actually get this example right off
1734.71s - 1738.67s |  from the kernel watchdog API information
1738.67s - 1739.99s |  from the Linux kernel,
1739.99s - 1742.19s |  you could just simply write some C code
1742.19s - 1744.83s |  to keep sending a live messages to the watchdog, right?
1744.83s - 1746.87s |  And so since we have root access,
1746.87s - 1748.39s |  we could do something like that.
1748.39s - 1751.11s |  However, this approach is not necessarily
1751.11s - 1753.39s |  what we want to do and not what we want it to do either,
1753.39s - 1756.87s |  because the fundamental problem with this
1756.91s - 1760.51s |  is that while you could keep sending the messages
1760.51s - 1762.75s |  or you could even use like take hold
1762.75s - 1765.51s |  of the kernel semaphores and keep it open just for yourself.
1765.51s - 1767.75s |  So init app can't write to it.
1767.75s - 1771.47s |  That doesn't necessarily help you
1771.47s - 1773.23s |  because init app, if it can't write to it,
1773.23s - 1775.55s |  then it's going to know that you're here
1775.55s - 1779.83s |  and know that you're now disabling its ability to operate.
1779.83s - 1782.71s |  And then it may change the way that it's going to operate.
1782.71s - 1785.15s |  In this case, we know say that it does,
1785.15s - 1787.39s |  but again, that's not necessarily the approach
1787.39s - 1788.23s |  you want to use,
1788.23s - 1790.31s |  even though it might work for your environment.
1790.31s - 1791.67s |  So there's another way.
1791.67s - 1793.11s |  There's other ways other than these two,
1793.11s - 1795.39s |  but these are just the ones we're going to talk through today.
1795.39s - 1797.35s |  There's the magic close feature,
1797.35s - 1800.95s |  which if you go look in the Linux kernel driver,
1800.95s - 1805.23s |  what the watchdog driver API from Linux kernel 2.4.18,
1805.23s - 1806.39s |  you can see that there,
1806.39s - 1808.47s |  if you write a magic character in this case,
1808.47s - 1809.31s |  an uppercase V,
1809.31s - 1811.19s |  there's another character that'll work as well.
1811.19s - 1814.43s |  But if you write that to dev watchdog
1814.43s - 1816.47s |  and that's the last thing that gets written
1816.47s - 1818.03s |  to dev watchdog,
1818.03s - 1822.27s |  it then can cleanly disable the kernel watchdog.
1822.27s - 1823.39s |  Now, as a note,
1823.39s - 1826.63s |  the camera is not running Linux kernel 2.4.18,
1826.63s - 1828.47s |  but it does still work.
1828.47s - 1829.91s |  So your mileage may vary.
1829.91s - 1832.07s |  It's running a three dot kernel,
1832.07s - 1834.19s |  but again, it still may work.
1834.19s - 1836.51s |  So you could write a simple script such as this,
1836.51s - 1838.99s |  or again, however you would like to do it,
1838.99s - 1841.47s |  to just simply continuously write V.
1841.47s - 1843.55s |  And the reason why you may want to do something like this
1843.55s - 1845.43s |  instead of just write V and stop,
1845.43s - 1847.35s |  is some other process,
1847.35s - 1849.99s |  especially as you're doing your reverse engineering,
1849.99s - 1852.27s |  might come along and reactivate the watchdog.
1852.27s - 1854.99s |  So if you want to try and keep making it such
1854.99s - 1857.15s |  that you're not going to be rebooted,
1857.15s - 1860.11s |  or at least have some protection against that,
1860.11s - 1862.71s |  you might want to continuously write to it.
1862.71s - 1865.67s |  So now with the watchdog generally defeated,
1865.67s - 1868.11s |  we need to be able to run a debugger on the camera,
1868.11s - 1870.63s |  which means we need to be able to compile binaries
1870.63s - 1872.55s |  that can run on the camera.
1872.55s - 1873.47s |  So in this case,
1873.47s - 1878.03s |  we discovered that our camera is a little Indian MIPS.
1878.03s - 1881.35s |  So just as a quick example,
1881.35s - 1885.43s |  we can compile arbitrary C code using just out of the box,
1885.43s - 1888.39s |  like the MIPS Linux GCC compilers,
1888.39s - 1892.15s |  we can run a quick hello MIPS and see.
1892.15s - 1895.31s |  So I did not know this at the time when I was doing it.
1895.31s - 1900.31s |  I built a tool chain and compiled GDB server myself
1900.35s - 1901.51s |  using that tool chain.
1901.51s - 1902.35s |  But later on,
1902.35s - 1904.51s |  we found that there is a prebuilt one that works,
1904.51s - 1906.27s |  that that's the link to be able to get to it.
1906.27s - 1907.97s |  Again, that will be available.
1907.97s - 1911.09s |  But what you'll need to do to be able to run GDB server,
1911.09s - 1911.93s |  you'll need to make sure
1911.93s - 1913.63s |  that you're exporting the proper paths
1913.63s - 1916.19s |  to get the proper libraries that an app needs,
1916.19s - 1917.83s |  then expose it over some port.
1917.83s - 1919.47s |  It could be, it works over serial.
1919.47s - 1921.03s |  I would recommend if you can use it,
1921.03s - 1922.03s |  doing it over networking,
1922.03s - 1924.39s |  just because the serial debugging can be very slow
1924.39s - 1926.27s |  when you're using this many libraries.
1926.27s - 1929.09s |  And again, just an example of how to do that.
1930.09s - 1934.61s |  So we can then connect to our use.
1934.61s - 1936.57s |  And this is actually one important note.
1936.57s - 1939.33s |  When you're using GDB to connect to GDB server,
1939.33s - 1940.81s |  you will likely,
1940.81s - 1944.57s |  you very likely need to use the multi-architecture version.
1944.57s - 1946.25s |  Otherwise it will not work
1946.25s - 1949.33s |  unless you happen to be running little Indian MIPS
1949.33s - 1951.95s |  on your laptop, which at least for me, I'm not.
1953.11s - 1955.85s |  But once you get there, again,
1955.85s - 1958.49s |  we know that an in-app is calling out to the watchdog.
1958.53s - 1961.89s |  So we need to overwrite those functions in memory
1961.89s - 1964.49s |  with no ops to be able to have it
1964.49s - 1966.21s |  not call to the watchdog at all.
1966.21s - 1968.81s |  Is this absolutely necessary?
1968.81s - 1971.13s |  Maybe not, but it will make it a lot cleaner for us
1971.13s - 1972.41s |  if we just don't have to worry about it.
1972.41s - 1973.73s |  So that's what we did.
1973.73s - 1975.33s |  And you can, at least in our case,
1975.33s - 1977.47s |  we were able to find that those locations
1977.47s - 1978.97s |  were where those functions were,
1978.97s - 1981.31s |  and we just overwrote them.
1982.51s - 1983.35s |  Sure.
1983.35s - 1985.37s |  So I'll hand it over to Mark.
1985.37s - 1986.25s |  All right.
1986.25s - 1989.57s |  So yeah, we're gonna skip over this second demo
1989.57s - 1990.89s |  and just kind of jump right into it.
1990.89s - 1993.09s |  So with the peer-to-peer discovery,
1993.09s - 1995.65s |  what we wanted to do is build a client
1995.65s - 1998.49s |  so we could actually connect directly to our camera
1998.49s - 2000.41s |  and issue commands to it
2000.41s - 2002.89s |  in order to attack and exploit it, right?
2002.89s - 2004.45s |  So the peer-to-peer servers,
2004.45s - 2008.41s |  you can discover them using Nmap or Masscan
2008.41s - 2010.85s |  and delivering that four-byte payload
2010.85s - 2013.13s |  to UDP port 607222.
2014.09s - 2016.13s |  And yeah, so very briefly,
2016.13s - 2018.49s |  how do we establish a peer-to-peer connection?
2019.49s - 2022.85s |  You need to send it a hello message from the client.
2022.85s - 2024.81s |  It'll act back.
2024.81s - 2028.17s |  You need to query for a specific device ID
2028.17s - 2031.01s |  if this peer-to-peer server has any idea of it.
2031.01s - 2033.61s |  Those device IDs are also serial numbers.
2033.61s - 2036.61s |  They're found on the bottom or on the back of these devices.
2037.51s - 2039.73s |  And hopefully the peer-to-peer server will say
2039.73s - 2041.99s |  that it knows how to access the device
2041.99s - 2044.31s |  and then instruct you to punch a hole
2044.31s - 2046.03s |  to a specific IP and port.
2047.79s - 2049.63s |  And then once we have the idea
2049.63s - 2051.67s |  of where we're supposed to go to,
2051.67s - 2056.55s |  we can query that specific relay server or the device itself.
2056.55s - 2061.27s |  If we can connect to it, it should hopefully say yes,
2061.27s - 2063.03s |  and then it'll send its packets back.
2063.03s - 2065.71s |  And then, yeah, your peer-to-peer connection's ready.
2065.71s - 2067.47s |  So yeah, there's a good exploit script
2067.47s - 2069.31s |  that we kind of base some of our work on.
2069.31s - 2071.75s |  Definitely check that out when you get a chance.
2072.51s - 2074.47s |  But yeah, basically, in order to prove things out,
2074.47s - 2076.95s |  we looked at how the camera panned initially
2076.95s - 2078.27s |  over Wireshark.
2078.27s - 2081.31s |  It was very easy to tell which specific packet
2081.31s - 2083.67s |  belonged to a pan operation.
2083.67s - 2087.27s |  Then we trace that back to debug log messages
2087.27s - 2088.91s |  from the firmware,
2088.91s - 2091.47s |  and then actually dug into the firmware itself specifically
2091.47s - 2096.47s |  to find where that log message is being generated
2097.07s - 2099.07s |  and what function is primarily handling
2100.35s - 2101.55s |  a lot of the comms and all that.
2102.51s - 2104.75s |  Very brief demo,
2105.59s - 2107.47s |  and we're gonna just kind of jump ahead
2107.47s - 2109.87s |  to our more compelling demo
2109.87s - 2113.19s |  of essentially what you can do
2114.47s - 2118.11s |  with our discovery of how to build a peer-to-peer client.
2118.11s - 2121.43s |  So what we can see here is there is a,
2122.67s - 2126.15s |  there's an INI file on the camera itself
2126.15s - 2127.99s |  that has the serial number.
2127.99s - 2132.23s |  And what we find out is that that is the only way
2132.23s - 2136.39s |  that the device knows what its own device ID is.
2136.39s - 2140.79s |  And so there is actually a command through peer-to-peer
2140.79s - 2144.47s |  that allows us to overwrite the contents of that INI file.
2144.47s - 2146.11s |  So what we're trying to do
2146.11s - 2150.07s |  is overwrite the serial number itself
2150.07s - 2151.99s |  to an arbitrary value
2151.99s - 2154.67s |  that's just going to completely brick this machine
2154.67s - 2157.51s |  and make it completely inaccessible to the internet
2157.51s - 2159.83s |  and essentially the user's gonna have to throw it away
2159.83s - 2162.47s |  because there's no way to restore that
2162.47s - 2165.35s |  unless you have access like we do.
2165.35s - 2168.27s |  And so we send our packets
2168.27s - 2171.51s |  and what we can see here is we pulled up the same INI file
2171.51s - 2173.11s |  and now it's full of garbage.
2175.15s - 2177.31s |  And we actually have another command
2177.31s - 2178.15s |  we're gonna send to it
2178.15s - 2180.63s |  that's gonna crash and reboot the cam.
2180.63s - 2184.63s |  And from there, what we can see is,
2184.63s - 2187.39s |  things are kind of already going haywire a little bit.
2188.23s - 2190.75s |  The camera's attempting to reboot right now,
2190.75s - 2193.27s |  but what we'll find out pretty shortly here
2193.27s - 2197.71s |  is that it will attempt to issue requests
2197.71s - 2200.03s |  to AJ Cloud's infrastructure,
2200.03s - 2201.99s |  but ultimately it's gonna be unsuccessful
2201.99s - 2206.59s |  because it's sending along absolute garbage
2206.59s - 2210.85s |  in its cURL requests.
2210.85s - 2213.25s |  And if we kind of like skip ahead a little bit here,
2213.25s - 2214.49s |  this is a press for time.
2216.33s - 2221.74s |  What we can see here,
2221.78s - 2223.78s |  yeah, if you kind of highlight that,
2223.78s - 2225.42s |  there's not much there.
2227.06s - 2228.90s |  Ah, yes.
2228.90s - 2231.90s |  So yeah, that doesn't really look like a good cURL request.
2240.70s - 2243.34s |  Okay, so very, very briefly,
2244.78s - 2247.38s |  what devices are actually affected by this, right?
2247.38s - 2250.70s |  So WANZU, every single device
2250.70s - 2252.98s |  associated with WANZU is affected,
2252.98s - 2254.70s |  including pet feeders, light bulbs,
2254.70s - 2256.54s |  indoor and outdoor cameras.
2256.54s - 2259.94s |  GALIU as well, since they're an affiliate company
2259.94s - 2263.22s |  of WANZU, and SONATO as well.
2263.22s - 2267.02s |  And then also Felimi is another manufacturer
2267.02s - 2269.50s |  that we were able to experiment with.
2270.98s - 2273.66s |  But ultimately the affected vendors,
2273.66s - 2274.90s |  it all stems from AJ Cloud.
2274.90s - 2278.22s |  It's whoever's running their device firmware
2278.22s - 2280.18s |  on their cloud platform.
2280.18s - 2283.90s |  And this ultimately affects seven different vendors,
2283.90s - 2284.90s |  possibly even more,
2284.90s - 2288.79s |  we weren't able to confirm all of these.
2288.79s - 2290.03s |  So just real quick,
2290.03s - 2291.99s |  what are some things that the vendors did right?
2291.99s - 2294.11s |  They have certificate web-based authentication.
2294.11s - 2295.35s |  It was fairly difficult to do
2295.35s - 2297.11s |  some man-in-the-middle attacks from that.
2297.11s - 2300.31s |  They have signed and obfuscated APKs, another good thing.
2300.31s - 2302.31s |  They have a pared down local operating system
2302.31s - 2304.43s |  that at least attempts to be read-only.
2304.43s - 2305.79s |  They could have had secure boot,
2305.79s - 2309.07s |  but again, they have a read-only-ish file system.
2309.07s - 2311.95s |  So you have to do some work, even with physical access
2311.95s - 2314.39s |  to be able to go and attack the machine.
2314.39s - 2315.63s |  What they did wrong, of course,
2315.63s - 2317.31s |  unauthenticated cloud access.
2317.31s - 2318.95s |  The demos that we showed you, again,
2318.95s - 2320.71s |  did not require any authentication.
2320.71s - 2324.43s |  We have significant verbose debugging in the log app,
2324.43s - 2326.03s |  the vulnerable peer-to-peer access,
2326.03s - 2329.75s |  and again, no secure boot despite the SoC supporting it.
2329.75s - 2331.51s |  And it's very easy to manipulate
2331.51s - 2333.39s |  when you have physical access.
2333.39s - 2336.35s |  So mitigations, of course, if you want to use them,
2336.35s - 2337.91s |  segment them off your network.
2337.91s - 2340.15s |  The critical vulnerabilities in the cloud infrastructure
2340.15s - 2341.43s |  will put your data at risk.
2341.43s - 2344.15s |  So we would just recommend not using them at all.
2344.15s - 2347.91s |  Again, restrict the inbound, outbound comms.
2347.91s - 2350.07s |  You basically just want to block
2350.07s - 2352.39s |  all of the different traffic that you have.
2352.39s - 2355.31s |  You could also flash it with a different operating system.
2355.31s - 2356.15s |  For sake of time,
2356.15s - 2359.19s |  I'm gonna kind of run through this really fast.
2359.19s - 2361.67s |  OpenIPC, I would recommend you checking it out.
2361.67s - 2364.63s |  At least the Q5 is directly supported.
2364.63s - 2366.07s |  So you could flash it with that,
2366.07s - 2369.03s |  but it supports a lot of different SoCs.
2369.03s - 2372.47s |  So our tools that we used for this demo,
2372.47s - 2374.67s |  we'll be releasing them shortly on GitHub.
2375.55s - 2379.31s |  So, and feel free to follow along with the demo.
2379.31s - 2381.51s |  There's some other future research opportunities.
2381.51s - 2384.47s |  Again, apologies for having to run through this real quick,
2384.47s - 2387.99s |  but thank you so much for coming to our talk.
2387.99s - 2390.23s |  Special thanks to, of course, the following here,
2390.23s - 2393.71s |  and definitely follow us on Twitter,
2393.71s - 2394.95s |  and Elastic Security Labs.
2394.95s - 2396.95s |  So again, thank you very much, DEF CON.
2399.44s - 2400.28s |  Thank you.
2400.28s - 2401.12s |  Thank you.