{
  "webpage_url": "https://www.youtube.com/watch?v=OkVNbL7gysI",
  "title": "DEF CON 32 -  How we built our REDACTED THING this year, 5n4ck3y, && AMA Badge Panel -  AND!XOR",
  "description": "See talk title, kids these days dont read more than a sentence anyway. Seriously though, we get asked a lot of random custom electronics, hardware hacking, and badge questions, here's your chance to throw them at us while we drink a beer and pretend to know the right answer",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2450,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 4.88s | This text was transcribed using whisper model: large-v2

 So, we're going to talk about how we built our redacted Anodic Sower Badge this year.
7.28s - 10.16s |  Oh, really? I should start with, can you hear me all right?
11.28s - 16.96s |  Now we're golden. And feel free to come closer if you want to ask questions and whatnot.
17.60s - 20.56s |  So yeah, we're going to go over how we did our Anodic Sower Badge this year,
20.56s - 26.08s |  all the fun and challenges we ran into, and reverse engineering snack machines.
26.32s - 26.88s |  First challenge.
29.68s - 34.64s |  Now it's off. We're dying. We've lost mics.
35.84s - 42.16s |  No. Does the mic run on Cox internet? All right.
42.16s - 45.28s |  Our first challenge that we have already that we have a problem is,
45.28s - 47.28s |  it says three people, it's two now.
47.28s - 53.68s |  Yeah. I'm higher on. This is, yeah. Zap's taking care of the snack machine.
54.16s - 58.48s |  So of course, normal disclaimer, this is our fun side thing.
58.48s - 60.48s |  We have employers like most people do.
60.48s - 62.24s |  This does not represent our employers.
62.24s - 65.36s |  But more importantly, this is a community stage.
65.36s - 68.00s |  And we didn't really want to give a talk.
68.00s - 70.40s |  We wanted to treat it like community discussion.
70.40s - 73.60s |  When we're running our contest, tons of people want to talk to us about,
73.60s - 77.76s |  hey, what was it like making the badge, working with Snacky, doing different things.
77.76s - 81.20s |  And you feel bad because you want to have deep conversations about this stuff.
81.76s - 87.44s |  But you're also running a contest with six, seven, 800 people running around and things breaking.
87.44s - 91.76s |  So don't treat this as a talk. Treat it like a town hall.
91.76s - 94.56s |  You know, politely interrupt us, ask questions.
94.56s - 101.20s |  I'll do my best to like hear and repeat it back so others can hear it and group discussion.
101.20s - 103.28s |  But we'll, we'll use the slides to go through it.
103.28s - 106.88s |  And anytime you're curious about something, ask.
107.28s - 107.84s |  Same thing?
107.84s - 109.20s |  Oh, that's good.
109.20s - 109.76s |  All right.
111.12s - 113.04s |  So we're Anodic Zor.
113.04s - 115.52s |  We've been making badges for about nine years.
116.56s - 118.40s |  Different members have come in and out.
118.40s - 123.60s |  But if you take a look at the picture, you can see a lot of the different work we've done over the years.
123.60s - 127.76s |  And yeah, we joke, we make stuff, drink beer, no particular order.
128.32s - 130.64s |  We just have a wide variety of backgrounds.
130.64s - 134.96s |  And we like doing this as a fun, interesting way to get people involved.
135.28s - 138.72s |  And I guess that's like, hey, why do we do this to ourselves?
138.72s - 142.00s |  Because you'll hear people, you know, joke about badges.
142.00s - 143.12s |  What do badges do to you?
143.12s - 144.96s |  What's all the stuff that's involved in it?
144.96s - 148.32s |  And I don't know, for me, it's like, I like learning new things.
149.52s - 153.20s |  Usually on a badge, sometimes we pick stuff that we don't know how to do.
153.20s - 154.64s |  So we have an excuse to learn it.
154.64s - 157.84s |  Yeah, like building stuff and just seeing how
159.44s - 160.80s |  DEF CON just tears it apart.
161.76s - 163.36s |  DEF CON just tears it apart.
163.36s - 166.32s |  DEF CON makes something that's mine, that's mine.
166.32s - 168.08s |  That's why I like to do it.
168.08s - 170.88s |  Also just providing something that people just like to do.
171.60s - 172.64s |  It's something people get to do.
173.76s - 176.56s |  Yeah, and I think like just teaching others, that's always been fun.
176.56s - 179.76s |  Like when we do our CTF, it's usually a mixture of things.
179.76s - 183.44s |  We like putting hardware hacking mostly, but we'll put reverse engineering,
183.44s - 188.40s |  lock picking we've done before, just different side channel attacks and RF cryptography.
188.40s - 190.24s |  Like it's fun to mix it up that way.
190.24s - 194.64s |  It's not fully devoted to one domain of InfoSec or something.
194.64s - 196.00s |  It's just kind of spices it up.
197.76s - 199.60s |  Fun fact, if you have friends with kids
199.60s - 202.24s |  and you're worried if your badge will survive DEF CON,
202.24s - 204.64s |  as soon as you're done, you give your prototype to a three-year-old
204.64s - 206.08s |  and let them play with it for a week.
206.08s - 209.04s |  It will survive drunk hackers at DEF CON sometimes.
210.48s - 212.64s |  And it's good level of response, three-year-old.
214.32s - 219.20s |  So I would say without further ado, yeah, our badge this year plays Doom.
219.92s - 228.48s |  And on the surface, you have a case which resembles a very recognizable
229.92s - 233.20s |  handheld video game device that came out 30 years ago.
234.96s - 236.08s |  It's very nostalgic.
236.96s - 238.48s |  And what would I say?
238.48s - 239.68s |  We did everything in C.
240.80s - 245.12s |  We got firmware that I'll talk about a little bit later, but yeah, it runs Doom.
245.12s - 248.48s |  And if you've never messed with Doom, by the way, if you have questions about Doom later,
248.48s - 249.28s |  throw them out there.
250.08s - 254.72s |  At this point, we're probably 16 forks deep on the version of Doom we're using.
256.00s - 258.80s |  And in a nutshell, where we stood on other's shoulders,
259.92s - 264.00s |  we had to put custom drivers together, rewriting the entire control API
264.00s - 269.60s |  because we do things where it's really hard to see a status bar to play Doom.
269.60s - 272.64s |  So tap into that API and control the LEDs.
272.64s - 274.88s |  So when you get shot, it gets bloody.
274.88s - 275.84s |  The LEDs are red.
275.84s - 277.60s |  When you shoot, go through ammo.
277.60s - 281.44s |  You have like a status of ammunition going downwards, white, et cetera.
283.04s - 287.52s |  We've done some other things, making custom free open source IWOD that can be used.
287.52s - 292.32s |  I'll get into that, what the hell that means and tying it into a CTF.
292.32s - 294.96s |  Do we have slides for the hardware?
294.96s - 296.48s |  We do have slides for the hardware.
298.48s - 302.56s |  We have lights on us now and it's actually more blinding and I can't see anyone.
302.56s - 303.28s |  That's okay.
303.28s - 304.24s |  I appreciate it.
304.96s - 308.96s |  So yeah, if you're curious to have a question, you can like wave your hand on something.
310.40s - 313.20s |  I think I just wanted to go through like what's up with the hardware
313.20s - 314.48s |  and what does it look like at first?
314.48s - 316.48s |  Because that is where it starts to look boring.
319.12s - 321.36s |  You may not be able to tell when it's first put on there,
321.36s - 325.12s |  but that's like our first rev where you just have the form factor, the buttons.
325.12s - 327.12s |  You have a little, oh, of course it can't see it.
328.08s - 332.16s |  Our RP2040, the Raspberry Pi Pico microcontroller.
332.72s - 337.28s |  Um, it may be too small, but I was going to ask folks, do you see what's wrong with it?
338.64s - 341.12s |  I didn't even catch this problem until the final rev.
341.12s - 343.84s |  Does anyone notice what's wrong on the front plate?
346.24s - 348.00s |  No introverts.
348.00s - 352.48s |  What's a that's one start and select our switched.
353.36s - 354.24s |  There's another one.
355.76s - 356.26s |  Yeah.
358.24s - 358.72s |  What's that?
358.88s - 362.24s |  Oh, we don't have SD cards.
363.92s - 364.42s |  Yeah.
365.44s - 366.40s |  Never again.
366.40s - 370.16s |  We we've had a, we've had a bad experience with SD cards.
370.16s - 371.92s |  So we use Winbon flash instead.
373.28s - 375.60s |  Um, yeah.
375.60s - 377.20s |  So it's funny.
380.80s - 386.22s |  No, then you learn there's many variants of Game Boy cases.
386.22s - 388.46s |  Um, yeah, so we didn't catch that.
388.54s - 391.74s |  A and B were flipped because when we were looking at the EDA design tools,
391.74s - 394.86s |  depending on the point of view, you see start, select BA.
395.98s - 399.58s |  And it wasn't until I started working with the firmware and the control that I thought that
399.58s - 400.86s |  the engine was just screwed up.
400.86s - 405.02s |  And I had to remap everything on the inside when it was really, our buttons were backwards.
405.02s - 409.90s |  Um, and you never want to build something into a Game Boy case.
409.90s - 413.66s |  I think our assembly involved 19 different parts and steps.
413.66s - 418.06s |  And the, the shit show gets worse, but it works.
418.06s - 418.78s |  It's fun.
418.78s - 424.94s |  It's a nostalgic, nice hand feel to it, but it doesn't, you have to have tedious.
425.90s - 428.22s |  Devotion to get through assembly base.
428.22s - 428.94s |  It's not fun.
431.34s - 436.06s |  Um, I honestly regret suggesting doing a Game Boy.
437.98s - 438.48s |  Really?
440.06s - 440.38s |  I don't know.
440.38s - 442.06s |  Has anyone ever done Game Boy modding?
442.46s - 446.94s |  Messed them for, yeah, it's, it's, it's a passion.
446.94s - 450.30s |  Um, it doesn't scale well, but we persevered and I think it's fun.
451.02s - 451.90s |  Especially but in doom.
451.90s - 452.40s |  Yeah.
456.51s - 460.99s |  Original question was, uh, in the other formats of game grades, um,
461.71s - 464.27s |  thought about actually doing the original with big brick.
464.27s - 468.99s |  And then I actually, I think what happened was that basically bought
468.99s - 471.31s |  the colors by accident and we just went with that.
472.43s - 473.71s |  Lots of planning, right?
473.71s - 475.31s |  We're like, just roll with it.
475.31s - 478.11s |  Um, and at first it was, it was a nice form factor too.
478.11s - 479.07s |  Cause you're thinking about it.
479.07s - 480.75s |  Like, okay, I can get cases.
480.75s - 482.51s |  It already holds batteries.
482.51s - 486.91s |  Um, we'll get into some of the battery stuff on the later revs, but it, I'll
486.91s - 491.15s |  admit as much as we complain about the cases, they're actually, it's ergonomic.
491.15s - 492.99s |  It uses certain form factors.
492.99s - 495.23s |  So you can only put in the parts in one way.
495.23s - 496.67s |  It's super useful.
496.67s - 502.27s |  Um, in hindsight, like a GBA would have given us better GPIO, especially for doom.
502.35s - 506.11s |  It, it made it a fun challenge of button combos to try to take like an eight
506.11s - 507.95s |  control system and put it on this.
508.83s - 511.55s |  Um, what's interesting is this is our first badge.
511.55s - 514.51s |  We also did lithium for our power source.
514.51s - 519.47s |  Um, usually we use like three triple A's or three double A's, but because
519.47s - 524.03s |  of the form factor, we were limited to just two batteries and the RP2040
524.03s - 528.43s |  is highly overclocked so that doom runs okay-ish on it.
529.31s - 531.63s |  And so it's really, really power hungry.
531.63s - 535.47s |  And so we need the extra lithium to make that work.
536.43s - 536.83s |  Yeah.
536.83s - 539.95s |  Anyone that gets them, like we had to put a, we put a weird sticker on
539.95s - 544.43s |  there just saying like, you know, RTFM don't put double A's in here.
544.43s - 546.67s |  In fact, they shouldn't have to remove the batteries at all.
546.67s - 552.75s |  These are lipos that are in the form factor of a double A battery, but yeah.
553.39s - 556.67s |  So fully charged circuit in there, but if you put in double A's, it just
556.67s - 558.83s |  won't work because they can't provide enough power.
561.49s - 564.21s |  So this is kind of what like the progression looks like from a rev
564.21s - 566.77s |  one to a two, three, you start seeing the yellow.
566.77s - 568.85s |  Um, I know you want to talk about that.
568.85s - 571.09s |  You want, you want to geek about the charging circuit?
571.09s - 571.33s |  Yeah.
571.33s - 574.61s |  So rev two and three was when we were trying to dial in the, uh,
574.61s - 576.69s |  charging circuit, make the lithium work correctly.
577.49s - 581.25s |  I think we were using a slightly different scheme at that point too,
581.25s - 585.33s |  before we settled on that we could not dare, uh, production.
585.33s - 590.53s |  Um, this was, um, I, some SAP did the hardware one, and then I took over for
590.53s - 594.45s |  hardware and finishing hardware two and three, and then eventually four,
594.45s - 596.21s |  which is the production version.
596.21s - 600.45s |  I'm a big background in like in that system.
600.45s - 602.21s |  So I've never used keypad before.
602.21s - 605.09s |  So basically I had to spend about a month and a half learning keypad,
605.09s - 609.33s |  another user tool to basically finish up rev two and then rev three.
610.13s - 616.13s |  Um, we actually didn't have any problems with, uh, like we didn't
616.13s - 617.73s |  have any wire mods or anything like that.
617.73s - 618.77s |  Everything kind of just worked.
618.77s - 621.41s |  It just was trying to get the fit in the case.
621.41s - 623.41s |  And when you get a different case and it just still wouldn't fit,
624.05s - 628.37s |  figuring out all the different locations of cases that it had to fit into.
629.49s - 629.89s |  Yeah.
629.89s - 630.21s |  Okay.
630.21s - 631.73s |  So there's a problem I can think of.
632.53s - 634.13s |  You guys all made fun of me before.
634.13s - 637.89s |  So on, you see on that previous one, I got the breadboard with the two wires and the two buttons.
639.17s - 642.77s |  When you program a Pi Pico, you have to put it in boot select mode.
643.49s - 648.53s |  Those buttons were strategically placed on the very bottom of here.
648.53s - 653.89s |  Um, where there is, uh, you would have an old audio jack and an old DC,
653.89s - 656.93s |  and it's hard to hit them and they were covered by the case.
657.65s - 659.57s |  It's fine when you're designing hardware,
659.57s - 665.97s |  but when you're working on flashing firmware and wads and files, nonstop a hundred times a day,
665.97s - 668.37s |  I can't sit there with a paper clip and push them in.
668.37s - 671.73s |  So I, I yanked out wires and just soldered them in.
671.73s - 673.33s |  So I could tap buttons to do that.
673.89s - 675.49s |  Um, eventually a fun mod.
675.49s - 679.97s |  If you ever develop on a RPi 2040 or any of the Raspberry Pi microcontroller lines,
679.97s - 681.65s |  because now there's multiples of them.
682.21s - 685.73s |  Um, you can mess with the bootloader selecting.
685.73s - 687.41s |  We called it our magic baud rate.
687.41s - 692.05s |  So that if you open a serial connection, you can set it to say,
692.05s - 695.57s |  Hey, if anything ever tries to connect to you at 1200 baud,
695.57s - 698.77s |  we picked 1337 as our magic baud right now.
698.77s - 703.17s |  But if you just hit it with 1337 on a serial terminal,
703.17s - 706.61s |  it will automatically fall into boot select mode and reboot,
707.17s - 709.33s |  which is wonderful if you want to, you know,
709.33s - 711.25s |  speed up your tool chain when you're developing
711.25s - 714.13s |  and then just have a script that runs and knocks it in boot select.
717.73s - 718.77s |  I bitched quite a bit.
721.97s - 723.65s |  So, and there's the final.
723.73s - 723.97s |  Yeah.
723.97s - 727.97s |  So the big difference, the only difference between REV3 and REV4 was the artwork.
728.53s - 732.45s |  And we were actually just shooting without artwork for a really long time.
732.45s - 733.73s |  And I was like, you know how we got to do it.
733.73s - 737.25s |  Uh, so that was the artwork that we did.
737.25s - 741.25s |  Since AI generated, it just kind of left the artifacts in there.
741.25s - 744.37s |  So like you see, it says, it said just doom.
745.09s - 748.29s |  And so we just kind of left that little easter egg in there.
748.29s - 749.49s |  It was funny enough.
749.49s - 749.99s |  Yeah.
750.39s - 753.19s |  It's actually kind of unfortunate that you can't see,
753.19s - 756.31s |  like the clear cases aren't kind of cloudy.
756.31s - 759.59s |  You can't actually see how my set subscreen actually turned out.
761.59s - 761.99s |  True.
761.99s - 762.23s |  Yeah.
762.23s - 765.59s |  I think if people had the clear PCBs, you can actually see them a lot better.
765.59s - 767.43s |  Maybe the black ones, but purple.
767.43s - 768.39s |  I grabbed a teeth.
768.39s - 771.51s |  I was trying to go with like a Miami Vice color, cyan teal.
771.51s - 773.35s |  It blocks the PCB altogether.
773.35s - 775.43s |  Maybe I'm sad, but yeah.
776.71s - 779.67s |  Um, a lot happened the past couple months.
779.75s - 787.43s |  A lot, um, oh yeah, we're full stack.
788.15s - 790.47s |  Got random questions to throw them at us.
791.19s - 793.51s |  So yeah, that's my excuse.
793.51s - 794.79s |  We were looking at the slides.
794.79s - 795.67s |  We're about to turn in.
795.67s - 798.31s |  I was like, oh shit, we didn't finish those, but you know what?
798.31s - 800.23s |  That's good enough for a slide, right?
800.23s - 807.19s |  Um, when, when we were talking earlier, you know, it runs doom and sometimes people are
807.19s - 809.67s |  curious, how do you put doom on something?
809.67s - 813.99s |  You know, what is really going on when you see doom and, and, and different types of
813.99s - 814.31s |  things.
814.31s - 819.91s |  And, um, in general, um, you see a bunch of variants of doom out there.
819.91s - 824.87s |  You'll hear people refer to vanilla doom, chocolate doom, um, cheesy doom.
824.87s - 827.51s |  You get in all these different variants in general.
829.51s - 829.91s |  You know what?
830.71s - 831.91s |  Vanilla is vanilla.
831.91s - 832.47s |  It's plain.
833.11s - 834.47s |  It is what it released.
835.03s - 838.87s |  And chocolate built on it because you're not going to change what it released.
838.87s - 843.03s |  You're, you're going to keep it as close to the original port of doom as possible.
843.03s - 849.03s |  Um, with, with some fixes that are necessary, but not changing the original source.
849.67s - 855.03s |  And what happens over time is you have all of these forks where people want to play original
855.03s - 857.35s |  doom, but they want it in triple, super widescreen.
857.35s - 861.11s |  Um, they don't want sprites that are from six different angles.
861.11s - 863.19s |  They want 32 different angles.
863.91s - 867.91s |  They start doing what's called limit removing because you have faster computers.
867.91s - 873.83s |  So a lot of doom engines out there and wads that are generated out there, uh, they don't
873.83s - 878.95s |  work on embedded systems because they assume a lot of power horse hungry stuff.
879.51s - 881.75s |  So we went with chocolate doom.
881.75s - 886.79s |  Um, there was a variant of chocolate doom that, uh, I believe the hacker's name was
886.79s - 888.31s |  kilogram that put it together.
888.31s - 893.59s |  He pulled in a lot of fixes that came in on a Nordic NRF, like BMD three 50 mod where
894.87s - 898.95s |  back in the day when you'd have doom, doom was very much, um,
901.03s - 903.91s |  not, not so processor intensive, Ram intensive.
903.91s - 908.63s |  And if you go through the source code and statically allocate your variables, you can
908.63s - 913.19s |  shift a lot of that over and shoot through it through processing, which you mentioned,
913.19s - 918.31s |  we doubly overclocked the PI Pico at 192 megahertz.
918.31s - 920.07s |  I can't remember how many megahertz we're running at.
920.63s - 923.99s |  Um, you're just trading processor for Ram.
923.99s - 927.83s |  And so you keep building on these techniques and it makes it a really nice way to throw
927.83s - 929.03s |  doom on an embedded system.
929.59s - 931.11s |  Sometimes I'm sure you see random things.
931.11s - 935.91s |  People put doom on a toothbrush on this, on that, and it's just running the demo.
935.91s - 940.23s |  Um, if you're actually trying to process a lot of other things, networking stack and,
940.31s - 942.31s |  and mega wads, it gets rough.
943.03s - 949.19s |  Um, so yeah, something that we saw in that, that, that this person ran into on one of
949.19s - 953.11s |  the forks we, we picked up on, you start running out of memory.
953.11s - 957.75s |  And the cool thing about doing this is instead of drawing pixels, it's running with scan
957.75s - 959.67s |  lines like you would on a normal CRT.
960.31s - 964.55s |  And you'd only have enough memory to draw about 70, 80% of the screen.
964.55s - 969.35s |  So with it doing scan line drawing, it's actually a lot more efficient to go through
969.51s - 971.03s |  the graphics rendering.
971.03s - 977.11s |  And then on the HUD, we just painted a static image on the HUD because we realized one,
977.11s - 979.11s |  the screen was too small to even read it.
979.67s - 984.31s |  And two, we had needed CTF challenges that actually ran on the badge.
984.31s - 989.51s |  So over there, you actually see a certain hex memory address that's printed into the
989.51s - 995.19s |  status bar that gets updated during the game, uh, amongst other things.
995.19s - 1000.07s |  So it's like we're drawing 70, 80%, drawing a static image, leaving it, and you go through
1000.07s - 1001.67s |  little tricks just to keep memory going up.
1002.31s - 1006.79s |  Um, but yeah, make sure to member finished, uh, fixing the slide.
1006.79s - 1010.87s |  I think one of the other fun things is just tapping into the API that is used to update
1010.87s - 1015.35s |  the status bar, because if you have a badge with bling, why not update it?
1015.35s - 1018.15s |  You know, why not turn it red when you're getting shot?
1018.15s - 1022.15s |  It's, it's a nice visual indicator for someone who's holding a badge playing doom to see
1022.15s - 1026.87s |  it like glowing red as you're getting lit up or, or when you fire, it turns white and
1026.87s - 1029.19s |  flashes for, for you shooting.
1029.19s - 1033.03s |  Um, and then, you know, you just have like ammo and health kind of going up the rim on
1033.03s - 1033.51s |  the side.
1034.71s - 1036.95s |  Figure it's a, it's a nice visual HUD.
1036.95s - 1040.71s |  I don't think anyone ever paid attention to their health or their ammo count when they
1040.71s - 1041.35s |  played doom.
1041.35s - 1044.39s |  They just used it till it ran out and then, okay, I'm going to switch to something else
1044.39s - 1045.43s |  and fire on them anyway.
1047.75s - 1048.55s |  I don't know.
1048.55s - 1052.63s |  Any questions about firmware, doom engines, putting doom on stuff before we get into like
1052.63s - 1053.75s |  the wads and whatnot?
1053.75s - 1053.91s |  Yeah.
1053.91s - 1054.31s |  What's up?
1056.23s - 1056.55s |  Sorry.
1056.55s - 1057.11s |  I can't hear.
1059.03s - 1060.23s |  Did we use the PIOs?
1061.03s - 1065.11s |  Um, I don't think we did.
1065.83s - 1066.07s |  No.
1076.23s - 1076.63s |  Sorry.
1077.59s - 1078.87s |  I will use it next year.
1081.35s - 1084.79s |  So I tried to make this as messy as possible, right?
1095.67s - 1095.91s |  Yeah.
1098.07s - 1100.31s |  So for the most part, it's good.
1100.31s - 1106.55s |  Um, I think a couple of things I would go through is, is this, um, there's a lot
1107.11s - 1111.03s |  there's a lot of modders in the doom community and they've made wonderful tools over the
1111.03s - 1111.67s |  years.
1111.67s - 1113.99s |  Some of those tools are still in use.
1113.99s - 1116.79s |  Some of them are being migrated to bigger tools.
1116.79s - 1120.79s |  Um, one of them that I was primarily using is Slade.
1121.51s - 1122.95s |  Slade is really good.
1122.95s - 1128.79s |  If you are making a wad and I guess I should say wad unless people don't know wad stands
1128.79s - 1135.11s |  for, where's all the data it's, it's how the ed team use doom to store all of the core
1135.11s - 1136.55s |  assets of their game.
1136.55s - 1142.31s |  Those assets are referred to as lumps, but where Slade shines is you make wads with it.
1142.31s - 1144.95s |  You really don't want to make maps with it too much.
1144.95s - 1147.51s |  It has a map editor, but it's not that great.
1147.51s - 1152.39s |  Um, there's, there's better tools for like ultimate doom builder to work on maps.
1152.95s - 1158.95s |  Um, but what you end up with is a number of things being needed to make that successful.
1158.95s - 1166.39s |  So the core I started with was freedom and freedom is free open source doom replacement.
1166.39s - 1170.47s |  I know you see a lot of people make doom mods and put doom on things.
1170.47s - 1172.71s |  The doom engine is open sourced.
1173.67s - 1178.55s |  The IP and the graphics and the music and the, all those lumps that are in that doom
1178.55s - 1183.51s |  one shareware wad are not, they are copyrighted and protected.
1183.51s - 1189.67s |  So freedom is a open source project to, to make a community driven doom alternative where
1189.67s - 1190.79s |  you can drop in the wad.
1191.59s - 1196.87s |  The first problem with that is they rely on limit removing engines that use all these
1196.87s - 1201.27s |  crazy different features and they bundle in doom, doom to hexon.
1201.27s - 1206.23s |  So there's a lot of stuff on there that in their one wad that if, if you're doing this
1206.23s - 1207.75s |  on your computer, it doesn't matter.
1207.75s - 1212.39s |  But if you're putting it on an embedded system where I only have like a wind bond chip, but
1212.39s - 1214.15s |  they makes a flash, it's not going to help.
1214.71s - 1221.11s |  So we started stripping everything out, changing out different sprites, different assets, doing
1221.11s - 1221.91s |  our own editing.
1223.75s - 1228.47s |  Some of the old tools like converting midis to their traditional muse format only run
1228.47s - 1229.03s |  in DOS.
1229.03s - 1233.99s |  So I'm running like DOS box and Linux to run, write my own bash scripts.
1235.35s - 1237.99s |  That's when I learned slate actually had something that did that.
1237.99s - 1241.11s |  And I felt stupid for setting up that tool chain, but yeah, whatever.
1242.39s - 1246.71s |  And then using like Krita and Inkscape, Photoshop to put my different sprites together that
1246.71s - 1250.71s |  I was creating, bundle it all together, bring chocolate doom into VS code.
1252.15s - 1253.67s |  Seems messy, goes through.
1254.79s - 1260.87s |  I think the only other reason I put the meme on the side is in general, you wouldn't mess
1260.87s - 1263.91s |  with the core wad when you work on doom.
1263.91s - 1268.63s |  The way doom works is it assumes that core library assets in the wad exist.
1268.63s - 1271.83s |  And a wad that you're putting out is really a P wad.
1271.83s - 1272.87s |  It's considered a patch.
1273.51s - 1278.55s |  And when you put different assets in there, it's literally patching it in memory and overriding
1278.55s - 1282.71s |  those assets with a subset because it's an embedded system.
1282.71s - 1287.75s |  We don't have the luxury of a file system where I can have multiple wads on there.
1287.75s - 1292.55s |  So if you were to look on doom wiki or go on some of the doom, like the wad creators
1292.55s - 1294.63s |  resources, they will light you up.
1294.63s - 1299.91s |  If you're like, I'm making my own I wad because really people should not be making their own
1299.91s - 1300.55s |  I wad.
1300.55s - 1301.35s |  It's wasteful.
1301.83s - 1305.03s |  Unless you have your own, you know, limited source.
1305.91s - 1312.63s |  The end result of that is we will be open sourcing a, you know, a fork of free doom
1312.63s - 1319.67s |  that maps a full mega wad, one, two, three, with no other doom two or hex and stuff that
1319.67s - 1322.87s |  is completely free and open source and slimmed down.
1322.87s - 1324.47s |  So it's great for embedded systems.
1327.35s - 1328.47s |  Oh, that's backwards.
1329.03s - 1333.83s |  And I pretty much mentioned that, you know, there's what does it look like when you when
1333.83s - 1335.35s |  you're actually editing wads?
1335.35s - 1337.03s |  It's like a memory editor.
1337.03s - 1339.51s |  You know, it may look like a spreadsheet or a database.
1339.51s - 1344.23s |  But if you even sort things, people sometimes forget that there's memory mappings of memory
1344.23s - 1344.87s |  addressings.
1344.87s - 1349.67s |  And if you just copy paste stuff in, you can you can really screw up your doom engine and
1349.67s - 1352.15s |  doom game just by putting things wrong in a wad.
1353.43s - 1357.67s |  And it makes it fun for hiding things in CTS because it's like a giant zip file.
1357.67s - 1362.31s |  I can pad stuff in certain memory locations that, you know, I'm trying to get people to
1362.31s - 1367.11s |  dump ROMs, dump, dig through the source code, dump the wads and look for things that we've
1367.11s - 1367.91s |  hidden on the side.
1369.83s - 1376.07s |  I'm about done with the wads, but I would say the only fun I had is the most fun I had
1376.07s - 1379.51s |  was you look at how assets are made.
1379.51s - 1383.83s |  A lot of people will like open up Blender, you know, take a 3D model, rotate it, take
1383.83s - 1384.79s |  slices.
1384.79s - 1388.63s |  I wanted to make our own rubber chicken weapons, and it's kind of stupid.
1388.63s - 1393.03s |  But, you know, you got a toilet paper tube, some rubber bands and rubber chickens, record
1393.03s - 1395.43s |  a video and then takes time slices.
1395.43s - 1398.63s |  And that turns into what I used in the game.
1403.11s - 1407.67s |  And I have to explain to my wife why I'm like punching rubber chickens in the wall, recording
1407.67s - 1408.07s |  myself.
1408.07s - 1409.19s |  And I'm like, it's for DEF CON.
1409.19s - 1409.99s |  It'll make sense.
1409.99s - 1410.47s |  Trust me.
1411.99s - 1413.19s |  You should all try this.
1413.19s - 1414.31s |  It's actually super fun.
1414.47s - 1416.87s |  I know people like, oh, you know, I want to make my own DOOM wad.
1416.87s - 1421.03s |  I'm like, take something and just record your hand punching and I don't know.
1421.03s - 1424.95s |  I thought it was kind of fun just to try to do my own reverse stop motion on things.
1429.11s - 1432.07s |  Without dragging it out further, because we want to get some more of the snacky stuff,
1433.03s - 1438.95s |  whether you're following us on Twitter or hearing us gripe, we were releasing something
1438.95s - 1440.23s |  like, yeah, we fucked up.
1440.79s - 1445.19s |  Um, normally I'd say a different version or different way to tell what we were talking
1445.19s - 1449.75s |  about was we're usually pretty good about setting a hard date.
1449.75s - 1453.51s |  And it's usually like it was around when we would buy tickets for Derby Con.
1453.51s - 1455.83s |  It would be during the Kentucky Derby, like the first week of May.
1455.83s - 1457.43s |  And that's when we would submit our order.
1458.79s - 1460.23s |  We feature creeped ourselves.
1460.23s - 1463.99s |  Some things fell behind schedule, but we always have plenty of slack and times.
1464.71s - 1469.99s |  And without going through the exhausted list, you have a couple of hurricanes hit.
1470.31s - 1471.91s |  You have different things pop up.
1471.91s - 1473.51s |  It kept eating into our slack.
1473.51s - 1477.35s |  And if we hadn't feature creeped ourselves, I know those things are out of control.
1477.35s - 1483.75s |  But, um, the end result is when the big problems happen, like it went to our fab and they sent
1483.75s - 1489.43s |  us pictures early in the morning showing that, Hey, you have an eight pad thing for LEDs.
1490.23s - 1493.35s |  And we have six on the LEDs.
1493.35s - 1495.03s |  You know, you have the complete wrong part.
1496.47s - 1498.39s |  This was the morning CrowdStrike happens.
1500.47s - 1505.83s |  Try to source LEDs and overnight them to a fab when all air traffic's been grounded, except
1505.83s - 1508.47s |  for UPS or USPS.
1508.47s - 1511.99s |  We use the postal service and it gets delivered to the wrong city three hours away.
1513.67s - 1520.39s |  So, yeah, we've spent the better part of the past two weeks, 20 hour days late at work
1520.39s - 1529.03s |  on third shifts, in hotel rooms, in garages, reflowing, hot airing, hand soldering, 14,000
1529.03s - 1529.53s |  LEDs.
1531.43s - 1532.63s |  I think we got a pretty good deal.
1536.07s - 1539.59s |  So the tail end of some of the badges we were vending, they have little yellow dots.
1539.59s - 1544.63s |  We did our hardest, but I think about the last hundred or so, um, they would have one
1544.63s - 1547.19s |  to many LEDs working.
1547.19s - 1552.39s |  You know, some of them had like all of them, but one in the top corner, or maybe half of
1552.39s - 1554.63s |  them were out because the thing just got cooked.
1554.63s - 1556.79s |  And we figured it plays doom.
1556.79s - 1558.07s |  It still blinks a little bit.
1558.07s - 1559.59s |  People would still rather have them.
1567.91s - 1570.39s |  Yeah, we're, we're going to bring all our spare parts tomorrow.
1571.11s - 1575.35s |  If you want to do like kind of a ad hoc workshop, we'll bring all the parts, all the failed
1575.35s - 1575.67s |  boards.
1575.67s - 1578.55s |  We'll show them to people and be like, do you want to have your hand at assembling one
1578.55s - 1579.19s |  of these boards?
1579.19s - 1581.59s |  You know, assembling everything into a Game Boy case.
1582.15s - 1583.35s |  You think you can fix it?
1583.35s - 1584.07s |  You can have it.
1584.07s - 1585.35s |  Try your, try your best.
1587.03s - 1587.91s |  We'll do that tomorrow.
1588.23s - 1588.39s |  Yeah.
1591.11s - 1593.03s |  Um, yeah.
1593.03s - 1598.63s |  Other than that, I, I, I pretty much summed it up after that, where, uh, things just kept
1598.63s - 1600.07s |  getting more saddled.
1600.07s - 1603.51s |  What was there anything else funny that happened in that whole debacle?
1604.39s - 1605.99s |  Self-deprecating in that sense.
1607.75s - 1610.79s |  Like how many miles the LEDs traveled.
1614.15s - 1614.65s |  Yeah.
1615.61s - 1622.25s |  I know we, I wish we had the actual numbers because he's thinking about the, the, they
1622.25s - 1625.13s |  come from Taiwan, went to San Dimas.
1625.13s - 1629.37s |  They went from San Dimas to Houston and then from Houston to Dallas.
1629.93s - 1631.77s |  They found out they were wrong in Dallas.
1632.49s - 1636.09s |  And then we had to do a split order where more were coming from Taiwan.
1636.09s - 1639.13s |  And another order was coming from Sam Dimas, but it didn't go to Dallas.
1639.13s - 1640.09s |  It went to Houston.
1640.09s - 1644.41s |  And the one that was leaving Taiwan, there was a typhoon and they grounded all DHL.
1644.41s - 1646.73s |  I forgot about the typhoon weather.
1646.73s - 1647.45s |  Isn't our friend.
1648.57s - 1651.21s |  So you're getting five international trips.
1651.21s - 1656.01s |  Then they all come back to California, then back to Houston and then driven to Las Vegas.
1658.09s - 1660.25s |  They've gotten like 30,000 miles on them at least.
1666.01s - 1666.49s |  Oh yeah.
1666.49s - 1669.05s |  Everything on that end goes through Louisville, Kentucky.
1669.05s - 1673.45s |  And because of the tornadoes in Louisville a week and a half ago that got shut down and
1673.45s - 1675.69s |  things were put on hold at the district center.
1683.69s - 1691.85s |  Yeah, you know, different version of that because we're all here at the LBCC this year
1691.85s - 1696.17s |  and whether you're, you're attending as a human or you, you know, you volunteer as a
1696.17s - 1702.89s |  goon or you're in a contest area or a village, there's a lot going on when you're in a new
1702.89s - 1703.37s |  area.
1703.37s - 1707.45s |  Like, you know, we're all trying to fill it out and learn, learn the ropes and new things.
1707.45s - 1710.89s |  And every now and then, you know, everyone's doing different projects and contests and
1710.89s - 1711.13s |  stuff.
1711.13s - 1712.97s |  And we all run into issues.
1712.97s - 1715.61s |  You know, we had some issues with LEDs this year.
1715.61s - 1719.13s |  We were joking about how we had such issues with SD cards in the past.
1719.13s - 1724.09s |  And, you know, people run into technical problems left and right.
1724.09s - 1725.37s |  And that's okay.
1725.93s - 1730.41s |  I think what, what matters is just trying to persevere through it and realize, hey,
1731.05s - 1732.33s |  we're all human.
1732.33s - 1733.61s |  Nothing's perfect.
1733.61s - 1737.29s |  You know, be compassionate and generous towards folks and support them.
1737.29s - 1738.97s |  And maybe you can come.
1738.97s - 1743.21s |  We had friends that never used hot air before.
1743.21s - 1746.65s |  And they're like, hell yeah, I want to learn to hot air something or reflow something.
1746.65s - 1747.37s |  I want to take that.
1747.37s - 1748.89s |  And I think that's awesome.
1748.89s - 1753.21s |  We have people that never picked up a soldering iron or anything before.
1753.21s - 1757.37s |  We taught them how to use technology and send it in a garage.
1757.93s - 1763.53s |  But it's really like, how do you make your problems up?
1766.89s - 1768.01s |  This is interesting.
1768.01s - 1769.05s |  I never want to hear that again.
1769.05s - 1773.61s |  But it's a good trigger.
1775.21s - 1778.49s |  It's making the best decision at the time and making sure it's not a rash decision.
1779.45s - 1781.13s |  So take some time.
1781.13s - 1782.73s |  Think about all the options.
1782.73s - 1783.77s |  Pick which is the best one.
1783.77s - 1785.77s |  It might be the wrong one down the road.
1786.49s - 1787.93s |  There's lots on this field.
1788.65s - 1791.05s |  But at the time, the best decision.
1791.05s - 1793.77s |  You can't look back.
1793.77s - 1796.97s |  You can't beat yourself up at the time you made the best decision.
1796.97s - 1797.21s |  Yeah.
1798.01s - 1800.57s |  But yeah, I think that's the best way to put it.
1801.69s - 1804.09s |  So this is where it's more fun.
1804.09s - 1804.65s |  Snacky.
1805.37s - 1805.69s |  Down.
1807.29s - 1807.85s |  Down button.
1808.81s - 1809.13s |  Yeah.
1811.69s - 1814.33s |  Our CTF centers are snatching.
1817.45s - 1820.17s |  Used to be a FSI model.
1820.17s - 1821.05s |  I think that's 31.
1821.05s - 1821.61s |  59.
1821.61s - 1823.21s |  Clearly read it without my glasses on.
1823.77s - 1825.05s |  Redemption Snack Machine.
1825.77s - 1829.93s |  I picked it up from a KUKA shop that was closing down in Houston, Texas.
1830.49s - 1832.41s |  And it had the image of it.
1836.41s - 1837.37s |  So the first thing was...
1838.25s - 1841.05s |  I ate the candy from the head shop of the old vending machine.
1841.05s - 1841.29s |  Yes.
1844.25s - 1848.49s |  You can see it's on my little tiny 4x8 trailer there.
1848.49s - 1851.37s |  And imagine driving that down the road at 60 miles an hour.
1855.37s - 1855.93s |  But it's mine.
1855.93s - 1856.41s |  It's mine.
1857.77s - 1860.73s |  So first, we're trying to figure out how the snack machine works.
1861.45s - 1865.61s |  So what's interesting about snack machines or any kind of redemption technology,
1866.41s - 1868.73s |  there's not a lot of information out there about it.
1868.73s - 1873.13s |  The companies that build these things aren't very tight on what information exists.
1874.41s - 1877.85s |  You wouldn't be like, hey, I have an exploit on this machine.
1877.85s - 1878.97s |  You'd be like, we'll see.
1878.97s - 1881.69s |  It's like, take that advice.
1881.69s - 1888.57s |  So anyways, so we basically have to reverse engineer how this one particular snack machine
1888.57s - 1888.81s |  works.
1889.85s - 1896.65s |  So the original board there, it uses a bunch of custom ASICs and a bunch of logic.
1897.29s - 1901.61s |  And the upper right part is the whole power subsystem.
1902.41s - 1904.49s |  It has a speaker on it for some reason.
1904.49s - 1905.37s |  It never makes noise.
1908.81s - 1912.09s |  And I come to this one part of the circuit.
1912.09s - 1913.29s |  I wish I could find this guy.
1914.81s - 1920.73s |  My idea was basically to take out the custom ASIC, plug it into my controller subsystem,
1920.73s - 1922.25s |  and change the controls on this logic.
1922.81s - 1925.29s |  But one of the logic chips is an inverter chip.
1925.29s - 1927.93s |  It's a 3D channel inverter.
1927.93s - 1929.69s |  And it would just loop into itself.
1929.69s - 1932.09s |  And I'm like, I have no idea what that's going to do.
1932.09s - 1934.01s |  So I was like, well, we're going to find out one way.
1934.01s - 1935.53s |  We've got to figure out how motors work now.
1936.17s - 1940.97s |  So how these motors work is they have a DC motor matrix.
1940.97s - 1946.73s |  So high side, low side, and then they have a switch on it.
1946.73s - 1949.93s |  You would think the switch is there to let you know you can rotate it once.
1949.93s - 1951.69s |  Like a feedback, you have a limit switch.
1952.33s - 1953.13s |  That's not the case.
1954.01s - 1956.41s |  It actually rotates when it hits the switch.
1956.41s - 1958.89s |  It actually increases the amount of current.
1958.89s - 1960.73s |  It's just increases the amount of current.
1960.73s - 1963.05s |  It's like a resistor there.
1963.05s - 1968.89s |  And so the logic board is actually just looking for these current pulses on the motors.
1969.85s - 1980.97s |  So basically, so this is, I'll talk more about that motor thing when it comes to 40.
1980.97s - 1985.61s |  But this is also like reverse engineering how the rest of the stack machine works.
1985.61s - 1987.05s |  Like how does the keypad work?
1987.05s - 1988.73s |  How does the display work?
1988.73s - 1989.53s |  And all that stuff.
1989.53s - 1991.05s |  So you can see my laptop there.
1991.05s - 1993.61s |  And it's like connected to an Arduino.
1993.61s - 1996.09s |  And it's like zip tied to the side of the machine.
1996.73s - 1998.33s |  And then we put casters on it.
1998.41s - 2001.29s |  Because moving a 800 pound machine, it's really hard by yourself.
2002.41s - 2004.57s |  That's the best design decision on Snacky.
2006.89s - 2010.01s |  If you think about taking something big and heavy to DEF CON,
2010.57s - 2015.53s |  you don't want to drag it, put it on a pallet, or like have six people puff it around.
2016.73s - 2019.05s |  Well, I had to put it on a trailer by myself.
2019.77s - 2021.93s |  And I was like, I'm not doing that.
2021.93s - 2028.73s |  What's interesting is the legs of the stack machine is a standard for casters.
2028.73s - 2032.09s |  So I was like, oh, I actually want the legs of that machine.
2035.37s - 2038.17s |  Oh, we should have had the receipt corrector.
2038.17s - 2041.61s |  This was like when I was trying to figure out how to make it work.
2042.25s - 2047.45s |  And we wanted like, this is what we're trying to make it like more of a standalone machine.
2048.09s - 2049.69s |  We didn't have a contest at the time.
2050.33s - 2054.25s |  And so everything had to be like, be oscurated, be robust.
2054.25s - 2055.69s |  And so we're trying to do stuff like this.
2055.69s - 2058.01s |  We don't want the receipt corrector to just sit off to the side.
2058.01s - 2058.97s |  We need to build it in.
2059.77s - 2062.01s |  So this is a, I can't remember the model.
2062.01s - 2064.65s |  It was a TS thermal printer.
2064.65s - 2066.97s |  But we bought it on eBay.
2066.97s - 2068.41s |  And it was like $200.
2069.53s - 2071.77s |  They had to buy it now, like they offered.
2071.77s - 2074.33s |  They offered $69, and we accepted it.
2074.81s - 2078.01s |  So here's the custom board.
2078.01s - 2082.65s |  So they're basically reverse engineering how all the peripherals in the machine works.
2082.65s - 2087.13s |  We basically built this circuit board to control that circuit.
2087.13s - 2092.09s |  All those, it's called the motors.
2092.09s - 2097.85s |  And so it uses two Arduino Vegas.
2097.85s - 2102.09s |  Because at the time, the world supply chain was in crisis.
2102.33s - 2105.77s |  I had two Arduino Vegas in my drawer, which is what we used.
2106.81s - 2111.21s |  And I just made some use of all the little parts I had for more computer machines and
2111.21s - 2111.77s |  that kind of stuff.
2113.69s - 2120.17s |  Left side, you can see the computer in the middle is like, it's called like the cache
2120.17s - 2124.73s |  area of the machine, where all the components and stuff are stored.
2124.73s - 2127.37s |  So that's where we export all our custom electronics.
2127.37s - 2129.69s |  So you can see where the boards are stacked.
2129.69s - 2131.77s |  They actually use the same part, which is the printer.
2131.77s - 2137.93s |  So it's like they snapped into the original screw boxes in there.
2138.65s - 2140.81s |  And then we have a big power supply.
2141.69s - 2143.61s |  That's the big silver box.
2143.61s - 2146.33s |  We wanted to put lots and lots and lots of electronics.
2148.17s - 2151.05s |  We kind of modified the pointer turn.
2151.05s - 2152.41s |  That's our enter button.
2152.41s - 2154.73s |  Just click to switch on that.
2154.73s - 2159.53s |  And then the right side is like when I finally got the whole thing brought up.
2160.01s - 2163.13s |  So it's kind of our hello world for stacking.
2164.49s - 2165.37s |  Any questions so far?
2178.04s - 2180.12s |  I think the question is, it went down earlier.
2180.12s - 2181.96s |  Is it possible to make it all self-contained?
2183.00s - 2183.40s |  Yeah.
2183.40s - 2184.68s |  So it's an IST machine.
2186.84s - 2189.16s |  So it connects through a database in the cloud.
2189.16s - 2192.36s |  And that's how we know all the codes are.
2197.06s - 2199.14s |  So that's how it knows codes are valid or not.
2199.70s - 2203.54s |  I guess nothing we can do to run that in there, but it's easier to, especially when
2203.54s - 2204.74s |  there's some technical problems.
2204.74s - 2206.02s |  It's just a mechanical device.
2207.06s - 2208.18s |  Verify and that mess.
2208.18s - 2209.30s |  Like I said, I'm like, okay.
2210.42s - 2214.66s |  I mean, it can run disconnected, but it doesn't like it.
2214.66s - 2215.14s |  Yeah.
2215.14s - 2217.06s |  And you get different Venn problems.
2217.06s - 2217.22s |  Yeah.
2217.22s - 2217.86s |  It also runs.
2217.86s - 2219.54s |  It basically runs for like 30 seconds.
2219.54s - 2221.46s |  And it goes, oh, I lost connection to the internet.
2221.46s - 2223.46s |  My database is not up to date anymore.
2223.46s - 2226.66s |  So yeah, but that gives us a full security stack.
2227.22s - 2229.46s |  And it did not crash with CrowdStrike.
2229.46s - 2230.34s |  Yeah, it did not crash.
2231.30s - 2233.38s |  Um, so this is year two.
2233.38s - 2237.22s |  We took a lot of what we've learned from the first year, which was basically, well, the
2237.22s - 2238.82s |  first year it ran on Wi-Fi.
2238.82s - 2240.90s |  We had people deaughtening all the time.
2240.90s - 2242.26s |  We went to hard wire.
2243.78s - 2248.42s |  And then originally it ran on a Raspberry Pi, a control object.
2249.14s - 2254.18s |  And we switched over to just a x86 based, uh, PC.
2254.90s - 2264.34s |  Um, and then we added the marquee display at the top.
2265.62s - 2268.66s |  Certain display gifts, videos, that kind of stuff.
2271.22s - 2279.54s |  And then we added HAL 9000 or Snacky 9000, which is our infrared and Morse code style
2279.54s - 2280.02s |  challenges.
2285.59s - 2288.55s |  And this kind of caused me to have to create more of a cache.
2289.19s - 2289.59s |  Oh, yeah.
2289.59s - 2292.07s |  So here's, like, the current, this is like this year's.
2293.19s - 2294.07s |  We added a speaker.
2294.71s - 2301.11s |  Um, we upgraded our display to a higher resolution to be like that 1920 by 360, which is really
2301.11s - 2303.11s |  weird to make, like, art assets for.
2303.75s - 2307.11s |  Um, it frustrates everyone in the team.
2307.11s - 2309.75s |  So like this year, now you don't have to follow that ratio.
2309.75s - 2311.27s |  You can just make whatever.
2311.27s - 2314.47s |  People letterbox or stretch or whatever.
2314.55s - 2317.67s |  Whatever actually decides to do focus on that image.
2317.67s - 2324.47s |  Uh, we got, we upgraded our, um, heat source for the thermal printer, which we actually
2324.47s - 2327.83s |  think downgrade now because we have problems scanning that.
2329.59s - 2332.63s |  So I had to find the original source of the paper.
2333.51s - 2340.39s |  Um, we added more LEDs and now it has a PoE switch in it for future expansion.
2340.39s - 2344.55s |  So we're hoping to bring like more themes for our contest and hooking up to it.
2346.31s - 2347.35s |  I like that PoE.
2347.35s - 2347.59s |  Yeah.
2347.59s - 2347.83s |  Yeah.
2347.83s - 2350.23s |  We put a transmitter in there too, for all that.
2352.23s - 2355.35s |  So everything kind of add on if things like that, you speak twice.
2355.35s - 2360.55s |  So that's really like we added a speaker and it's really easy and module how we design
2360.55s - 2363.59s |  the software and the hardware solutions.
2363.59s - 2364.79s |  So it's easy to add on.
2365.27s - 2370.23s |  Um, it probably needs a refactor now because it has like one big Python script that runs
2370.23s - 2370.63s |  everything.
2371.27s - 2372.63s |  Um, I probably need to fix that.
2373.27s - 2373.59s |  Yeah.
2375.11s - 2375.35s |  Okay.
2378.60s - 2378.92s |  Perfect.
2379.96s - 2384.84s |  Um, so I actually, this is, first of all, we should update this because we bring that
2384.84s - 2390.44s |  badge, um, but you can still play the CTF right now.
2390.44s - 2396.60s |  I should say, do you want to try and build a badge out of cannibalized parts, which may
2396.60s - 2396.84s |  work.
2397.80s - 2398.76s |  Come visit us tomorrow.
2400.92s - 2403.24s |  Or just come check out Snacky, mess with it, press buttons.
2407.53s - 2407.77s |  Yay.
2409.53s - 2412.81s |  Yo, any questions related or not?
2414.01s - 2416.65s |  You have us for, I don't know.
2416.65s - 2418.17s |  They have to tell me four more minutes.
2424.49s - 2425.05s |  Oh Jesus.
2428.81s - 2429.77s |  I was building my garage.
2440.89s - 2442.01s |  We're getting caned off stage.
2442.81s - 2443.53s |  How about this?
2443.53s - 2449.53s |  If you have questions, follow us right out there.