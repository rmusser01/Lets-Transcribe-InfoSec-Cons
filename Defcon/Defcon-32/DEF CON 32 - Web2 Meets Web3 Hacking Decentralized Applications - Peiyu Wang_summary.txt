**Introduction to Dapps and Web3 Security**

- **Dapps (decentralized applications):** Integrate Web2 and blockchain components, presenting unique security challenges.
- **Peiyu Wang:** Security engineer specializing in application penetration testing, smart contract audits, and security research.
- **Blockchain Growth:** Since 2020, there's been significant development in applications, tools, infrastructure, and protocols.

**Types of Web3 Applications**

- **Centralized Exchanges:** Platforms like Coinbase and Binance.
- **Data Platforms:** Tools like Etherscan for reading blockchain transaction data.
- **Wallets:** Applications like MetaMask that hold private keys and perform signing requests.
- **Dapps (Decentralized Applications):** Implement functionalities through on-chain smart contracts.

**Understanding Smart Contracts**

- **Smart Contracts:** Backend API servers running on blockchains.
- **Privileged Functions:** Functions within smart contracts that can be called by specific addresses (e.g., admin).
- **Transactions:** Bundles of POST requests sent to smart contracts, identified by unique transaction hashes.
- **Gas:** Fees charged for blockchain transactions; higher fees result in faster execution.

**Dapp Architecture**

- **API-less Dapps:** Main logic is in smart contracts; limited attack surface.
- **API-enabled Dapps:** Server-side APIs increase the attack surface, often introducing Web2-related vulnerabilities.
- **Full-scale Dapps:** Backend interacts with smart contracts, often holding privileged keys. Vulnerable to server-side attacks.

**Dapp Threat Modeling**

- **Assets in Web3:** Private keys, signatures, and API keys.
- **Client-side Attacks:** Malicious transactions, deceiving users, and exploiting connected wallets.
- **Server-side Attacks:** Stealing keys, crypto assets, and affecting NFT values.

**Case Studies and Vulnerabilities**

- **Unrestricted APIs:** Can lead to gas wastage and denial of service.
- **Transaction Time Handling:** Poor management can result in denial of service or race conditions.
- **Bridge Contract Vulnerabilities:** Lack of smart contract address validations can lead to token theft.
- **Backend Errors:** Misinterpretation of transactions (e.g., mistaking NFTs for valid deposits) can lead to financial discrepancies.

**Securing Dapps**

- **Complexity of Modern Dapps:** Increased integration of Web2 components introduces vulnerabilities.
- **Penetration Testing:** Essential alongside smart contract audits.
- **Web2 and Web3 Security Knowledge:** Crucial for developers to prevent vulnerabilities.

**Getting Started with Dapp Hacking**

- **Web2 Application Hacking:** Important foundation for understanding Dapp architecture and attack surfaces.
- **Experimentation:** Hands-on practice with Dapps using small crypto investments.
- **Learning Solidity:** To understand smart contracts and identify hidden attack surfaces.
- **Legal Hacking:** Encouraged as a way to transition from Web2 to Web3 security.