{
  "webpage_url": "local:1731817598:26609f63:DEF CON 32 - Car Hacking Village - Bluetooth Blues - Unmasking CVE 2023 - 52709 - The TI BLE5 - Stack Attack - Kevin Mitchell.mp4",
  "title": "DEF CON 32 - Car Hacking Village - Bluetooth Blues - Unmasking CVE 2023 - 52709 - The TI BLE5 - Stack Attack - Kevin Mitchell.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 7.44s | This text was transcribed using whisper model: large-v2

 Okay. Thank you all for joining. My name is Kevin Mitchell. Today I want to talk to you all about a
7.44s - 14.64s |  vulnerability that I discovered while testing a phone as key system. The official vulnerability
14.64s - 25.68s |  title is CVE-2023-52709. The name of this talk is Bluetooth Blues Unmasking CVE-2023-52709,
25.68s - 39.63s |  the TI-BLE5 stack attack. Okay. So here's the agenda. First I'm going to do a brief introduction,
40.83s - 46.35s |  go into a little bit of a speaker bio, look at the impact of denial of service attacks on
46.35s - 51.15s |  keyless entry systems, and then we're going to jump into the origin of the vulnerability itself,
51.87s - 57.47s |  the timeline, the testing setup, the testing results, the outcome, the consequences,
57.47s - 60.67s |  and then I want to talk to you about the vulnerability disclosure process
61.23s - 66.91s |  with Texas Instruments and Bosch, and then we're going to jump into the denial of service attack
66.91s - 73.55s |  details, looking at the attack mechanisms, also looking at some Wireshark analysis, and then I'm
73.55s - 79.63s |  going to jump into the root cause analysis, give you some context behind the root cause analysis,
79.63s - 84.35s |  some background, and then a detailed explanation. Then we're going to jump into the affected
84.35s - 92.75s |  devices, the initial assessment of the affected devices, the updated lists after a couple of
92.75s - 98.43s |  months of, you know, looking at this vulnerability, you know, we found that it was more and more
98.43s - 103.31s |  devices that were impacted by it. Then we're going to look at some of the real world impacts,
103.31s - 109.47s |  potentially the supplier pre-production cost of the vulnerability, just looking at it from
109.47s - 115.15s |  how much it would cost, like, Texas Instruments before these devices actually go into vehicles,
115.71s - 120.51s |  and then just give you some context, look at, like, some NISTA recall, like, numbers as far as,
120.51s - 125.55s |  like, how many recalls are typically done by NISTA on a year-to-year basis, and then going
125.55s - 133.07s |  to the mitigation strategy, how Texas Instruments put out, like, an SDK to mitigate this issue,
133.07s - 138.99s |  and then the conclusion, outcome, consequences, and then we're going to do a question and answers,
138.99s - 145.23s |  and then you all can connect with me if you like. So a little bit about myself. My name is Kevin
145.23s - 151.15s |  Mitchell. I've been doing IT since about 2008, once I joined the Army as a human resources
151.15s - 156.27s |  information management system specialist. Then I worked for Hewlett Packard for a little bit.
157.63s - 164.59s |  Then I went to FCA, where I was hired as a certified ethical hacker on the Uconnect team
164.59s - 170.27s |  after the infamous Jeep hack. I was, like, the only cybersecurity professional on the Uconnect
170.27s - 176.27s |  team out of, like, a team of 30 QREs. I was, like, the only one specializing in automotive
176.83s - 182.51s |  cybersecurity then. And then I went on to work for Mercedes-Benz Financial Services, where I was
182.51s - 186.91s |  doing some penetration testing, vulnerability management, as well as penetration testing
186.91s - 192.75s |  management. Then I got into, like, some web application penetration testing, and then now
192.75s - 197.47s |  to my current job right now, where I am a senior automotive security tester, where I work for a
197.47s - 205.47s |  company called ETAS. And ETAS's primary goal is to enhance tomorrow's automotive software. And so,
205.47s - 209.39s |  like, the way that I contribute to that goal is just by being an automotive security tester. I
209.39s - 218.11s |  hack cars. And so I want to give you a quote by a famous hacker. The advance of technology
218.11s - 222.27s |  is based on making it fit in so that you really don't even notice it. So it's a part of everyday
222.27s - 230.11s |  life by Bill Gates, right? And so if you look at technology, right, it's really baked into
230.11s - 233.87s |  every aspect of our life. Like, from the time that you wake up, you're probably using technology to
233.87s - 239.87s |  make coffee to your daily commutes. And that's really where I want to focus on because I'm,
239.87s - 243.95s |  you know, automotive security tester, so I'm looking at technology when it comes to the
243.95s - 251.95s |  automotive industry. And so I'm not here to pick on any one OEM, but I just did a random
251.95s - 258.59s |  Google search, like, how many vehicles does GM produce in a year? And so it says in a year 2023,
258.59s - 266.91s |  GM sold about 6.2 million vehicles, right? So my next point is, what is the average cost of an
266.91s - 273.39s |  automotive recall? And so that average cost of automotive recall is about $500. And so if you're
273.39s - 280.27s |  looking at 6.2 million vehicles times 500, you really get to see, like, the impact. And that
280.27s - 284.51s |  might not be an accurate number, but we're just, you know, providing these numbers for context,
284.51s - 290.19s |  and seeing, like, how much, you know, a recall could actually affect your everyday life.
290.19s - 296.99s |  And so leads me to my next quote. The problem with technology is when it doesn't work,
296.99s - 302.51s |  you're SOL. That's from a clerk at a corner store after a failed tap to pay.
302.51s - 311.55s |  So now I'm going to jump into the origin of the CVE itself. Okay, so if you look at these updates,
311.55s - 316.83s |  I didn't provide exact dates for them. I just kind of provided the months. But if you're tracking,
317.39s - 324.19s |  we'll just say each update was a different day. So the first update, Texas Instruments acknowledges
324.19s - 330.59s |  the vulnerability disclosure that we provided them on the phone as key systems in the BLE-5
330.59s - 336.67s |  stack. The next update, the next day, the Texas Instruments engineers were unable
336.67s - 345.39s |  to reproduce the issue based on the report that we sent them. Then I replied with instructions
345.39s - 351.15s |  on how to actually reproduce the issue. The next day, they came back and said,
351.15s - 357.47s |  we cannot reproduce this issue. And so after that, I doubled down and just reworded my previous email
357.47s - 362.35s |  and telling them how to reproduce the issue. And then, you know, we're working with Bosch. So a
362.35s - 368.75s |  couple of Bosch engineers suggested that I test the TI launchpad, which is just like,
370.67s - 376.59s |  it's essentially just like a microcontroller that's used for development. And they were like,
376.59s - 381.15s |  you should pretty much test the launchpad to see if you can get the launchpad to fail in
381.15s - 386.11s |  the same way that you got the phone as key systems to fail. And so the next update,
386.43s - 391.71s |  TI engineers were asking me clarifying questions and tripling down based on the previous communications
391.71s - 395.95s |  that they actually couldn't just reproduce the issue. So then I decided to schedule a meeting
395.95s - 402.03s |  with the stakeholders. I demoed the issue and I was able to reproduce the issue and show them the
402.03s - 408.35s |  actual testing method on how I was actually able to do that. And this is happening, you know,
408.35s - 413.39s |  this is going on the entire month of August and then the entire month of September. And so the
413.39s - 419.79s |  Bosch engineers that I actually worked with, they were able to reproduce the same issue that we had
419.79s - 424.91s |  initially sent them, that we had initially sent Texas Instruments. And so the reason why it was
424.91s - 431.07s |  important that Bosch engineers actually, you know, helped me verify that this was actually an issue,
431.07s - 435.47s |  because if I'm telling them they have a vulnerability, and I'm the only one who can
435.47s - 440.19s |  demo the vulnerability, is it really a vulnerability? Or if it's not really reproducible by anybody
440.19s - 445.95s |  besides me, is it even something that can be verified? Where's the veracity in that?
445.95s - 452.51s |  So then we actually had the Bosch engineers come into the ETAS office, and the Bosch engineers
452.51s - 457.39s |  were also able to reproduce the issue on the Phonus key systems. And before then, I was able
457.39s - 462.99s |  to reproduce the issue on the launch pad, like they suggested. And so we now have, I was able to
462.99s - 468.03s |  reproduce the issue on the Phonus key systems and the launch pad, and Bosch engineers were able to
468.03s - 473.23s |  do the exact same thing. And so at this point, I think it's a pretty good time to report it to
473.23s - 477.87s |  Bosch PSIRT. And the reason why I reported it to Bosch PSIRT is because they're a CNA.
477.87s - 485.39s |  They have the ability to, they have the ability to create CVEs. And so, you know, I wanted to get
485.39s - 491.63s |  this out there as soon as possible. So then Texas Instruments stakeholders respond to Bosch,
491.63s - 497.79s |  really, you know, putting forth that CVE and contacting them. And they said that they needed,
497.79s - 504.59s |  you know, time to review the issue and try to reproduce again. So the next update, you know,
504.59s - 513.07s |  this happened, like I said, August, September, November. Yeah, August, September, October,
513.07s - 518.83s |  November. And by the time we get to November, the TI engineers are like quadrupling down,
518.83s - 524.75s |  and they're pretty much saying, we're going to stop testing this issue until you can show us
524.75s - 528.35s |  exactly how to do this. But at this time, I had already shown them how to do this like three or
528.35s - 537.15s |  four times. So internally, TI is actually escalating this issue. And then Bosch, some
537.15s - 542.67s |  Bosch engineers pretty much detailed the differences in Texas Instruments testing setup
542.75s - 550.35s |  and my testing setup. A few moments later, Texas Instruments engineers are finally able to
550.35s - 560.27s |  reproduce the vulnerability on the launch pad or aka the CC26X2R1. And the reason why this is
560.27s - 565.95s |  important, this is important is because the vulnerability, or I'm sorry, the responsible
565.95s - 574.27s |  disclosure period does not start until after the engineers of the responsible company are able to
574.27s - 581.71s |  reproduce the issue. And so that responsible disclosure period was about like six months.
581.71s - 586.67s |  And so that mean, that meant that I actually couldn't talk about this vulnerability until
586.67s - 593.23s |  six months till after they were able to reproduce the issue. Coincidentally enough, two weeks after
593.23s - 599.47s |  they were able to reproduce the issue, they had a mitigating SDK, and they were ready to push out
599.47s - 607.95s |  that the mitigations. Okay, so now I'm going to go into like the testing setup. And I forgot to
607.95s - 613.87s |  give my disclaimer that all the images were created by ChatGPT. But we have like an Alice
613.87s - 619.47s |  in Wonderland theme here. So you'll keep seeing like Alice in Wonderland kind of theme here. And
619.47s - 624.99s |  what I'm trying to show with this image is like you're using legacy systems on new vehicles,
624.99s - 629.39s |  you're using the legacy technology on new vehicles, and there's pretty much making them vulnerable.
629.39s - 638.43s |  So the hardware setup that you know we use was going to be the CC26X2R1 as the device under
638.43s - 646.75s |  test. And then we also had a BLE654 dongle as the central device that's actually connecting to the
646.75s - 653.63s |  device under test and testing it. And then we're also using a Defensics test case. The specific
653.63s - 659.71s |  test case for this vulnerability was test case 1001. And it's a security manager protocol test
659.71s - 665.55s |  case. And I'll jump into that in detail. Shout out to Synopsys for in Defensics for you know,
666.11s - 671.31s |  helping me discover this vulnerability and you know, having the tools that allow me to do my
671.31s - 678.59s |  job. So that's my quick shout out. So the testing results. So the outcome of the test when running
678.59s - 686.35s |  Defensics fuzzing test case 1001 on loop mode, the device under test using a resolvable private
686.35s - 695.39s |  address for connecting or connectable advertising, the device ends up generating unresolvable
696.35s - 701.71s |  RPAs after a while, which causes a denial of service. And I'll really jump into this. So I
701.71s - 710.11s |  went back and forth with Texas Instruments on the CVE base score, because in the phone as a
710.11s - 716.59s |  key system, it failed every time. And once it failed, if you are using your phone as a key,
716.59s - 724.19s |  and you lock your door, and I come behind you and run this exploit, you actually can't get back
724.19s - 730.51s |  into your vehicle until you hard reset the vehicle. So if we're looking at the CIA, or,
730.51s - 735.79s |  you know, triad, we're looking at confidentiality, integrity and availability. In my mind, if I
735.79s - 740.35s |  knocked off one of those, you know, triads, if I knocked off availability, I would think it's a
740.35s - 744.67s |  high severity vulnerability at the very least. But they, you know, came back and said, you know,
744.67s - 749.07s |  this is the case when it comes to phone as key systems, but it might not be the case in every
749.07s - 756.03s |  other application that uses the TI BLE 5 stack. And so that made me think that, oh, this might be
756.03s - 763.95s |  a little bit bigger, you know, issue than just automotive. So the consequence of this is the
763.95s - 772.11s |  vulnerability can impact BLE devices running the effective SDK versions, and the devices that are
772.11s - 776.91s |  enabled with Bluetooth privacy with resolvable private address feature. And I'm going to jump
776.91s - 782.11s |  into this a little bit later about the context about the RPAs. And so the vulnerability
782.11s - 790.11s |  disclosure, the, you know, the vulnerability disclosure that the Texas Instruments PSIRT team
790.11s - 795.95s |  came back, and pretty much they created an internal PSIRT ID, and this is the PSIRT ID,
795.95s - 802.75s |  and this was the initial, the initial advisory, the very, very initial advisory before we started
802.75s - 808.27s |  to discover how many different devices that this actually affected. So they just labeled this as
808.27s - 815.87s |  the CCX or CC26X2R1 BLE denial of service through unexpected RPAs. And like I said,
815.87s - 821.79s |  this is just the first response that they gave us. When Bosch PSIRT actually published
822.51s - 829.07s |  their security advisory based on what Texas Instruments sent us, they created the CVE
829.07s - 835.15s |  with the same base score, and they updated the title of that CVE to TI Bluetooth stack can fail
835.15s - 840.67s |  to generate resolvable random private addresses leading to a denial of service for already
840.67s - 846.19s |  peer-bonded devices. And I'm going to jump into that because it's, you know, it's kind of deep
846.19s - 851.79s |  because if a device is already peer-bonded to it and I'm running this attack on it, then every
851.79s - 857.79s |  device that was previously connected to it will not be able to actually connect to it again until
857.79s - 861.63s |  there's a hard reset. Now if we're talking about a vehicle, then you actually have to get into the
861.63s - 866.11s |  vehicle and hard reset the vehicle or restart it. But if you're only, if you're only like using
866.11s - 871.15s |  your phone as a key, then how are you going to do that? So looking at the details itself, we're
871.15s - 878.35s |  looking at Defensics Test Case 1001, and this is specifically on the CC26X2R1. And the reason
878.35s - 887.63s |  why I'm showing this is because Defensics Test Case 1001 does not always work on the
887.63s - 893.39s |  development chip or the development board, but the test case works 100 percent of the time
893.39s - 899.87s |  on the phone as key systems. And the reason why I decided to escalate this to Bosch PSIRT
899.87s - 907.39s |  is because there was another test case that worked specifically on the phone as key systems
907.39s - 914.11s |  and on the CC26X2R1. And this is Test Case 3. And I'm not sure how small that font is,
914.11s - 919.71s |  but I can kind of go over it with you all. So you get a pairing request, and then you get a pairing
919.71s - 925.71s |  confirm that the, that the testing device or the central is sending the device under test. So it
925.71s - 931.15s |  sends it a pairing request, and then it also sends it a pairing confirmation, and then it sends it a
931.15s - 937.79s |  pairing random. And when it sends it that pairing random, essentially, encryption fails and the
937.79s - 942.43s |  device no longer is responding to previously peer-bonded devices. And this is a little bit
942.43s - 948.11s |  of context to showing you exactly, like, the structure of the packets that were being sent
948.11s - 956.50s |  to the device under test. Okay. And so we're looking at a Wireshark analysis of Test Case 3
957.46s - 962.66s |  because Test Case 3 is, you know, something that we're building our proof of concept off of.
962.66s - 970.10s |  So like I said, you send it 128 bytes plus the 8-byte header, and it receives that, the pairing
970.10s - 976.10s |  request. And then it, then you also send it a pairing confirmation, and then you send it a
976.10s - 982.34s |  pairing random. And so we developed a POC that pretty much automates the connection of the
982.34s - 988.74s |  pairing process with the Bluetooth device, sending a specific sequence of pairing messages that,
988.74s - 992.26s |  you know, like I said, the pairing request, pairing confirmation, pairing random.
992.26s - 997.22s |  And like I said, this will pretty much get the device to fail 100 percent of the time. So we'll
997.22s - 1003.78s |  have a GitHub, and the POC isn't published as of yet. But as soon as I get done with this talk,
1003.78s - 1009.06s |  I'll make sure that I make this, like, available to everybody. And so if we're looking at the root
1009.06s - 1012.74s |  cause analysis, this is where it's going to get maybe a little technical, maybe a little bit
1012.74s - 1020.50s |  boring. Every Bluetooth low-energy device has a unique 48-bit address. And these addresses are
1020.50s - 1025.94s |  pretty much characterized into public addresses and then random addresses. And the random addresses
1025.94s - 1031.94s |  can be further classified into static addresses or private addresses, and depending on whether
1031.94s - 1037.94s |  or not they change. And furthermore, private addresses can either be resolvable or non-resolvable.
1037.94s - 1044.26s |  So all BLE devices must either have a public address or a random static address, and they
1044.26s - 1050.18s |  also can have a resolvable or non-resolvable private address, which is pretty much just
1050.18s - 1056.26s |  typically used for, like, security reasons. And so this is the boring but exciting part for me.
1056.26s - 1062.26s |  Okay, so you have random addresses, random private addresses, which are pretty much used in addition
1062.26s - 1067.86s |  to public or random static addresses when a device wishes to protect its privacy. And then
1067.86s - 1074.10s |  moving on to the resolvable random private addresses, a resolvable private address is true
1074.10s - 1080.98s |  to its name. It's intended to have users, like, have this pre-shared key that the device can
1080.98s - 1085.38s |  pretty much figure out the address every time it changes. And so the pre-shared key is the
1085.38s - 1089.94s |  identity-resolving key, which is used to generate and resolve random addresses.
1090.82s - 1096.02s |  Kind of boring stuff, right? And then we have non-resolvable random private addresses. And
1096.02s - 1103.62s |  non-resolvable random private addresses is pretty much used by devices when they want to prevent
1103.62s - 1110.90s |  tracking. And this is not commonly used, but it's relevant for this, you know, hack.
1111.46s - 1119.86s |  And so providing a little bit of context, the BLE core specification or the Bluetooth 5.3 core
1119.86s - 1126.10s |  specification of Volume 6, Part B, 4.7, the resolving list, if the link layer using the
1126.10s - 1132.02s |  resolving list and the peer device has been resolved but encryption fails, the resolvable
1132.02s - 1137.70s |  private address shall be immediately discarded and a new private address will be generated.
1137.86s - 1142.58s |  So this is kind of like, you know, where we're looking at. I'm providing you all a little bit
1142.58s - 1148.02s |  of context as well as, like, this root cause analysis. So this is what we received back
1148.02s - 1155.14s |  from Texas Instruments verbatim for, like, the reason for the failure. So the malformed packet
1155.14s - 1161.62s |  in our stack, map, link layer, encrypt, decrypt, will return false and then trigger RPA update.
1161.62s - 1166.50s |  But however, at this point, the stack has not terminated the link. So for the next ACL packet
1166.50s - 1171.22s |  within the same connection, that function will still get called. And when that function gets
1171.22s - 1177.06s |  called right before the RPA update is happening, then the RPA update using encryption will fail,
1177.06s - 1181.86s |  which leads to non-resolvable private addresses. And so the reason why I gave you this context
1181.86s - 1187.22s |  before is because it's, like, the device is actually operating according to the Bluetooth
1187.22s - 1194.18s |  stack or according to the Bluetooth specification itself, right? It receives a pairing request.
1194.18s - 1199.22s |  It receives a pairing confirmation. And then it receives a pairing random. And that pairing random
1199.22s - 1204.42s |  actually makes the encryption fail. And once the encryption fails, then the MAC address is
1204.42s - 1209.30s |  automatically discarded. The MAC address is automatically discarded. And when the MAC
1209.30s - 1214.18s |  address is automatically discarded, every previously peer-bonded device can no longer
1214.18s - 1220.02s |  can connect to the device. So that's what we're seeing. And that's kind of like, you know,
1220.02s - 1227.38s |  the root cause analysis of the vulnerability itself. I found it exciting, you know, to really
1227.38s - 1232.10s |  do, like, a deep dive and understand exactly what's happening. Because it's not like Texas Instruments,
1232.10s - 1239.14s |  like, did a bad job at actually, like, you know, developing this system. Things just happen too
1239.14s - 1244.58s |  fast. And like I said, the link wasn't actually terminating. So it just caused a denial of service.
1245.54s - 1252.74s |  So now we want to look at the affected devices. So initially, we had 19 different affected parts
1252.74s - 1258.90s |  and two different software development kits. And so these are all the kits and the software
1258.90s - 1263.22s |  versions that were affected by it in the software stack. I was pretty proud of myself. Like, the BLE5
1263.22s - 1269.70s |  stack, you know, vulnerability on that, it seemed, you know, rewarding, especially being a penetration
1270.10s - 1276.02s |  tester on automotive, you know, on vehicles. And sometimes if you don't go about it the right way,
1276.02s - 1280.66s |  you really can't talk about some of your research. And so this was just a confirmation that we went
1280.66s - 1285.70s |  about it the right way. We handled the responsible disclosure period the right way. And now, you know,
1285.70s - 1292.34s |  we're, you know, enjoying the fruits of my labor. So Texas Instruments, after a couple of months,
1293.70s - 1296.90s |  you know, I was asking them, hey, when are you guys going to publish? When are you guys going
1296.90s - 1301.38s |  to publish? And I realized that they weren't publishing because they were still discovering
1302.02s - 1307.94s |  devices within their inventory that were still vulnerable. And so they updated it from 19 parts
1308.58s - 1314.74s |  to 28 parts in six different software versions. And I found this pretty interesting, right? There's
1314.74s - 1324.82s |  a BLE5 stack, BLE5 stack, BLE stack 2.X, I don't know what that is. But at any rate, we have,
1324.82s - 1331.30s |  you know, an updated parts list, and it included 28 parts. And I did, you know, a little bit of a
1331.30s - 1337.46s |  research on the on all of these parts that are listed here. I was looking at the real world
1337.46s - 1342.10s |  impact. And so if you go on Texas Instruments.com, you can actually search their inventory by parts.
1342.10s - 1346.02s |  And so I was able to see all of these vulnerable parts that were listed here. And what I have in
1346.02s - 1351.70s |  bold are just the automotive parts. And so, you know, I'm suspecting in Texas Instruments,
1351.70s - 1356.02s |  the reason why they said that this is not a high severity vulnerability is because they have other
1356.02s - 1362.26s |  devices such as like medical devices that this vulnerability is present on. I haven't done the
1362.26s - 1366.90s |  research to see, you know, what devices are actually affected. But you know, I was just
1366.90s - 1373.22s |  more so concerned about like the automotive part of it. So there's like 2.6 million devices that
1373.22s - 1379.38s |  they have in their inventory. And that's about $2.6 million in inventory that they have. But
1379.38s - 1385.54s |  that is before these devices actually get sold to any OEM and OEM puts their software on top of
1385.54s - 1390.50s |  that. So that's why I call it a supplier pre production costs of the vulnerability because
1390.50s - 1396.02s |  we're just looking at it from Texas Instruments. We're not looking at it if like GM or Ford
1396.02s - 1401.22s |  purchased one of these and then they developed, you know, vulnerable software on top of that.
1401.22s - 1406.98s |  And so I think I'm, I think I'm good on time. I got like two minutes left. Okay, so
1407.78s - 1414.90s |  I missed the recall. So, you know, I believe this is for the year 2022. And we're just looking at
1414.90s - 1423.30s |  electrical systems. And so if we have, you know, 3.4 million, you know, electrical system recalls
1423.30s - 1429.30s |  averaging at around like $500, then that's like $1.7 billion, right? And
1431.38s - 1437.86s |  the reason why I put this here is because like, as as a security engineer, or as a penetration
1437.86s - 1444.02s |  tester, it's kind of hard to quantify your impact on the world. It's kind of hard to quantify
1444.02s - 1450.82s |  exactly, you know, the impact that you're having on figuring out some of these things. And so my
1450.82s - 1456.18s |  thing is like, say, for instance, each one of these recalls doesn't cost $500. Maybe if it only
1456.18s - 1461.14s |  costs 1% of that, we're still looking at $17 million. So you should really just do a penetration
1461.14s - 1466.82s |  test on your system before you're stuck paying, you know, for recalls that that might cost you,
1466.82s - 1472.50s |  you know, billions or millions of dollars. And so like I said before, it was pretty interesting
1472.50s - 1480.26s |  that Texas Instruments was able to come up with a fix and publish that fix two weeks after they
1480.26s - 1485.46s |  were able to reproduce it, but couldn't reproduce the issue for like six months. I thought that was,
1486.02s - 1491.22s |  you know, genius of them. And this is the mitigating strategies that they put out.
1491.22s - 1496.82s |  I know that they still have a lot of SDKs that they have to publish in order to make sure
1496.82s - 1504.02s |  that all of the systems are mitigated or remediated in the right way. But they're
1504.02s - 1512.58s |  still working on that right now. And right on time. Questions? Any questions?
1512.74s - 1526.59s |  Right there. So for scanning and talking to the launchpad, we use Defensics as well.
1526.59s - 1542.05s |  We also use Bluetooth CTL. And we also use the TI launchpad with a software called Sniffle
1542.05s - 1548.85s |  that was developed by NCC Group. And it specifically scans for long range advertising
1549.09s - 1554.69s |  long range advertisements or extended advertisements that are specific to BLE5.
1555.33s - 1562.19s |  That answers your question. Mr. McKee. Oh, can I get this last question right here?
1568.08s - 1576.24s |  All of the devices, the 19 devices are in the CVE. The extended list has not been updated or
1576.24s - 1581.76s |  published yet. We're still with you can get it. Yes, yes. And I believe that this is publicly
1581.76s - 1586.32s |  available. There's a QR code you guys can connect with me on LinkedIn. Thank you for your time.