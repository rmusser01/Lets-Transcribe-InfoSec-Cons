{
  "webpage_url": "https://www.youtube.com/watch?v=z33TSv9EXBQ",
  "title": "DEF CON 32 - Nano Enigma Uncovering the Secrets in eFuse Memories -  Michal Grygarek, Martin Petr",
  "description": "For years, eFuse-based memories were used to store sensitive information such as encryption keys, passwords, and other potentially confidential pieces of information. This practice was encouraged by several vendors who leverage such memory types for protecting the debugging interfaces using a password or for official way to store encryption keys for external flash memories.\n\nHowever, with the advances in technology and threat actors\u2019 creativity, eFuse-based memories may take a hard hit on their confidentiality assurance as their physical properties could allow for a relatively easy extraction of the stored information.\n\nIn this talk we will walk you through the journey of revealing one such data storage from decapsulating the chip itself, delayering it using common household items all the way to using advanced tools such as Scanning Electron Microscope (SEM) to read value of an encryption key and thus break the confidentiality of the encrypted flash memory.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2286,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.00s - 5.84s | This text was transcribed using whisper model: large-v2

 I'd like to welcome you on our talk, Nano Enigma, Uncovering the Secrets within EFUSE
5.84s - 10.50s |  Memories. Uh first of all, allow me a brief introduction. Uh my name is Martin and I'm here
10.50s - 15.74s |  together with my colleague Michal. We also have a third partner in crime named Hayan,
15.74s - 20.88s |  however he couldn't come here with us so we just have pre-recorded message from him. Uh we
20.88s - 24.88s |  all work in the embedded system security testing team that's based in Prague, Czech
24.88s - 29.66s |  Republic, which is under Accenture Umbrella and we all have different fields of focus. So
29.68s - 33.98s |  for me that's reverse engineering, so I'm usually that person that wants that firmware
33.98s - 40.46s |  image unencrypted. So making me shut up was partial motivation of this talk. Uh I'm pretty
40.46s - 44.26s |  sure the other guys will tell you briefly about themselves when their time comes so I'm
44.26s - 48.90s |  just gonna jump straight ahead into the overview. Uh we have it in the title, we will be
48.90s - 54.04s |  talking about EFUSES and EFUSE is an electronic component which is just uh 2 points
54.04s - 59.54s |  interconnected with a connection that has a property that it burns or terminates when
59.56s - 64.66s |  the current flowing through it exceeds certain threshold. Uh this is really useful when
64.66s - 68.76s |  you want to protect your home appliances from over current and but it's also really
68.76s - 73.30s |  useful when you want to create something called one time programmable memory. Because if
73.30s - 79.60s |  you represent bits with EFUSES, once you change state of a bit from 0 to 1, you cannot
79.60s - 86.42s |  ever unchange it back to 0. This basically means that you you can change the the state of
86.46s - 91.26s |  the device permanently. This is really useful for security because now you can use these
91.26s - 97.10s |  types of memories to for example disable debugging interfaces or enable secure boot or
97.10s - 102.74s |  put there public keys for secure boot. However some manufacturers took it one step further
102.74s - 107.68s |  and they actually use these EFUSE based memories for storing information that requires
107.68s - 113.36s |  confidentiality protection. Uh meaning that you can find there also flash memory
113.36s - 118.60s |  encryption keys or passwords for debugging interfaces. Uh but since I mentioned that
118.60s - 124.10s |  that connection burns or terminates, there's actual physical change inside that component.
124.10s - 128.58s |  So how do you protect confidentiality of something that could be observed through
128.58s - 132.78s |  microscope? Because for example if I Google EFUSE microscope, you're gonna get all the
132.78s - 139.28s |  images like burned and unburned examples. So the protection measure you you mainly used
139.28s - 145.08s |  in some of the chips we looked at was layering. So layering is normal way of making chips
145.08s - 150.12s |  where you stack components on top of each other. However if you put that EFUSE based memory
150.12s - 154.50s |  in the very bottom layer, you can then consider it protection because you can't directly
154.50s - 160.80s |  observe it. Uh this is based mainly on an assumption that performing the layering process,
160.80s - 165.98s |  so removing carefully the layers from the chip so that you can extract information from it
165.98s - 171.48s |  is very complex and expensive process. But we are here at DEF CON because we have proved
171.48s - 177.78s |  this assumption wrong and we will demonstrate you all these techniques on an ESP32 chip
177.78s - 183.90s |  from Espressif. However keep in mind that all of what we will be presenting here is also
183.90s - 188.90s |  generally applicable to just about any chip that is using an EFUSE based memory. And with
188.90s - 194.00s |  that uh I would like to pass my word to Michal who's gonna walk you to the details of the
194.00s - 205.58s |  ATT&CK. Hello my name is Michal Grigarek and I'm also proud uh sorry I'm also a part
205.58s - 212.66s |  of Accenture Prague. At first I must say I'm really proud to be here on this stage to present
212.66s - 223.97s |  you results of our work. So my colleague Martin just explained what EFUSE is for and now let's
224.03s - 230.63s |  take a look more closely how we can observe these structures in much more detail and what
230.63s - 242.71s |  technologies and skills we will need. First we must decapsulate the chip. Decapsulation is
242.71s - 249.43s |  the process when we extract the silicon plate from the from the epoxy housing. Of course
249.43s - 256.43s |  there exist some other material for for housings but for purposes this presentation we only
256.43s - 268.13s |  consider only epoxy materials. There we see four basic techniques for decapsulation. Thermal,
268.13s - 278.37s |  chemical, laser and plasma. Thermal method, this method use only a blowtorch or heat gun. Simply
278.43s - 286.83s |  heat up the epoxy housing and then slowly and carefully break it and obtain the epoxy,
286.83s - 297.03s |  sorry epoxy silicon plate. Chemical decapsulation use concentrate chemicals, concentrate acid to
297.03s - 307.17s |  dissolve the epoxy housings. Laser etching use a strong laser beam to vaporize the epoxy material
307.17s - 317.55s |  but this method is quite risky because it is very easy to burn the silicon plate and my problem
317.55s - 329.37s |  lies in the heat deposition to the sample. And the last plasma one, this process involves ionized
329.47s - 340.37s |  gas or plasma to selective etching of materials. So due to its availability and good traceability
340.37s - 349.21s |  we decided to use chemical method of decapsulation. Especially we used concentrated acid. In our case
349.21s - 361.45s |  concentrated acid means 96% of concentration which must be heated to the approximately
361.67s - 370.39s |  150 degrees Fahrenheit. The chemical methods can be effectively combined with laser ablation. At
370.39s - 377.75s |  first laser removes a large part of the housing and then the remaining can be dissolved in the
377.75s - 395.27s |  acid. This short process during the exposure to the acid which is needed. The acid will dissolve
395.27s - 407.17s |  the housing residue and leaving only the dye. Of course we must use appropriate protective
407.55s - 418.59s |  equipment. After this process we obtain a beautiful etched chip suitable for other investigation.
418.59s - 436.69s |  Because the chip has typically metallization on its two layers, we do not see any internal layers
436.75s - 447.87s |  at the first. So we must etch the surface to obtain these structures and this process is
447.87s - 457.03s |  called de-layering. Again we have seen on this slide four types of basic method of de-layering.
457.21s - 468.25s |  Mechanical is the cheapest and starting about $100. Chemical, when we consider only chemical it is
468.25s - 480.09s |  also not expensive. Laser ablation uses very short precise femtoseconds pulses of laser beam to
481.03s - 491.67s |  ablate the surface but it is quite costly starting at 50k USD. And the last, the plasma. This is
491.67s - 500.15s |  simply the nanomachining using an ion beam. It offers maximum precision but comes of course
500.15s - 512.52s |  with maximum price tag as well. Due to cost effectiveness we choose to mechanical etching
512.58s - 522.38s |  with a wet stone. I just slide a piece of silicon with my finger over the stone. Of course we must
522.38s - 531.78s |  use a grinding stone with highest possible grit size. In our case it is 8000 grit. Of course it
531.78s - 541.26s |  requires some skill and I personally mastered it around 10 samples. Too much pressure quickly
541.26s - 549.24s |  obtain the background and it means we must start again. But with patience and systematic polishing
549.24s - 561.36s |  we can obtain beautiful etched chip within 30 minutes or 1 hour. Unfortunately wet stone etching
561.36s - 572.56s |  alone isn't enough. Our stone has grain size about 2 microns but for the final stage it is necessary
572.56s - 584.10s |  to use a diamond lapping foil which grain size has less than 0.5 microns. These foils made a
584.10s - 591.26s |  significant difference providing much more smoother surface and of course reducing the number of
591.26s - 607.67s |  scratches. I tried to prepare the sample on the industrial machine costing around 65 KSV and as we
607.67s - 616.91s |  see on these pictures mostly the same results can be achieved when I use wet knife etching stone and
616.91s - 629.00s |  the lapping foils purchased on Aliexpress for 100 bucks. Another important task is to locate the
629.00s - 640.84s |  eFuse memory bank itself. The largest part of the chip is taken up by logical circuits. It is easily
640.84s - 654.88s |  identified and can be skipped. The other radio frequency part is good visible too and can be skipped.
654.88s - 664.56s |  And the rest we left with the rectangle purple areas and these are memory types such as RAM, flash and our
664.68s - 677.06s |  eFuses. The eFuse memory cells is essentially a fuse which is conductive structures with a weak point.
677.06s - 688.18s |  In our case it's looking like some triangle with a line going through it. It's looking like a flag maybe.
688.18s - 696.48s |  And at approximately 500 times magnification clear repeating isolated structures of our eFuses become
696.48s - 708.02s |  visible. They are relatively small and each eFuse represents once bit is smaller than 1 micron. We have
708.02s - 719.50s |  successfully located these eFuse banks on ESP32 version S2, S3 and C6. It is positioned slightly differently
719.50s - 736.16s |  on the C6 but the construction is the same. And now optical microscopy. Observation with optical microscopy
736.16s - 745.36s |  has its limits. Maximum resolution of optical microscopy is around 400 nanometers which corresponds with
745.36s - 757.80s |  2000 times magnification. That is nearly physical limits. This magnification is suitable for locating our
758.64s - 770.93s |  structures, our eFuse bank. And on well-prepared sample we can even see if the eFuse is burned or not or programmed
770.93s - 781.05s |  or not. The term burned is fitting because when we program data into the eFuse memory bits during
781.05s - 792.37s |  programmation going current through the fuse and physically change its structures and these changes are
792.37s - 803.74s |  observable by optical or scanning electron microscopy technology. For the size comparison a human hair is 100
803.74s - 815.58s |  times bigger than our eFuses. In order to read their states correctly and repeatedly we of course need
815.58s - 822.54s |  some much more advanced imaging technique. And it is scanning electron microscopy which provides much more
822.54s - 833.14s |  higher resolution. Scanning electron microscopy provides approximately 100 times better resolution. As I said
833.14s - 841.50s |  since optical microscopy has a resolution around 400 nanometers, scanning electron microscopy has a resolution
841.54s - 850.78s |  approximately 5 nanometers which corresponds to magnification 100,000 times. Of course these parameters can apply
850.78s - 860.38s |  specifically to our scanning electron microscope. It is Hitachi FlexSAM. The image compares the level of detail we can
860.38s - 870.30s |  achieve with these methods and the difference is significant. This is what the eFuse looks like at even higher
870.30s - 879.06s |  magnification using a large electron microscope. This image shows the 3D structure which essentially looks like a
879.06s - 889.06s |  printed circuit board. Everything is visible at the nanoscale. On the right image we see detail of unburned eFuse,
889.10s - 904.82s |  clear eFuse representing logical zero and on the left image we see burned eFuse representing logical one. Once we obtain
904.82s - 914.30s |  higher resolution images of our eFuses we can read the data stored in them. In my initial experiments I manually
914.30s - 928.18s |  transcribed the data to the Excel bit by bit, fuse by fuse, which was extremely time consuming and it requires intense
928.18s - 942.90s |  focus to avoid error because bits look very similar. It takes about 10 hours to read one bit of 4096 bits and
942.90s - 952.90s |  additionally mapping the logical memory address to a specific cell on the silicon die was also very, very challenging. I had to
952.90s - 963.70s |  carefully read and transcript about 20 kilobytes of data before we had enough for our analysis. It truly feels like a forensic
963.70s - 972.22s |  investigation. And now my colleague demonstrates how to assign a logical address to a physical location of given memory.
973.22s - 985.99s |  Thank you Michal for extracting all this data during your vacation. Now that we have the raw data we have to somewhat put meaning to it so that we have
985.99s - 993.55s |  some useful information out of it. The best place to start with is documentation because it actually mentions a lot of information about both
993.55s - 1001.15s |  logical and physical alignment of the memory. From the logical perspective it will tell us that there are 11 of eFuse blocks and that blocks zero,
1001.15s - 1010.35s |  one and two are used for system purposes. These basically store MAC address, chip ID and chip configuration that you can set. The rest of the
1010.35s - 1017.71s |  blocks are user programmable, meaning you could put whatever you want there, however their primary purpose is actually to store the secure boot
1017.71s - 1025.99s |  keys or the flash memory encryption keys. From the physical perspective the information is a little scarce, but it will tell us that there are
1025.99s - 1035.55s |  four backups of block zero, meaning that any single eFuse burned in block zero will actually result in four actual fuses burned. And blocks one to
1035.55s - 1044.23s |  ten are using Reed-Solomon coding scheme for automatic error correction. This is just 12 bytes added to each of the blocks, uh but it could prove
1044.23s - 1052.15s |  useful in case we cause some damage during the delayering process so we'll talk about that briefly later. So with that, let's summarize what we
1052.15s - 1060.03s |  want to know. We have a lot of bits we now need to assign them to the bytes, then we want to take those bytes, put them in the correct order and
1060.03s - 1069.91s |  have them assigned in the blocks and then voila, we will have our flash memory encryption key. To do that we performed several experiments and the
1069.91s - 1078.15s |  first one was a really stupid one and I came up with it. And it was like let's burn values FF into the first block of an eFuses so that we can locate
1078.15s - 1086.83s |  where it is. However at that time we didn't really know how painful it is to actually read them so we kind of wasted this experiment because if you burn
1086.83s - 1096.19s |  only FF values you can very well detect where the first block is but you really can't detect how the bit assignment works inside these bytes and how the byte
1096.19s - 1106.07s |  order works in the blocks because that information just doesn't exist in such a memory. So we quickly transitioned to the second experiment. In this case we
1106.07s - 1114.71s |  were a bit smarter so we burned in unique patterns into the eFuse blocks and these unique patterns had something in common and that is that the most
1114.71s - 1125.67s |  significant bits of all of the bytes in these patterns were set to 1, either 3 or 4 of them. This was because just from an overview of the memory, if you look at
1125.67s - 1134.99s |  the middle picture, the big one, you can see a lot of red color in the upper portion, those are the 1s and that the lower portion has a lot of variety in it. You may
1134.99s - 1144.75s |  think there's an ASCII text written at the bottom line, at the bottom of the picture, there are no hidden messages, this is purely coincidence. But if we take the
1144.75s - 1154.71s |  only useful information from the very first experiment and filter out in those Excel files the rows that were associated with the first block, we can clearly see our
1154.71s - 1163.99s |  pattern. So in this case we now know that the bits are organized in columns with the most significant bits in the upper portion of the memory and we also know the byte
1163.99s - 1173.63s |  and the NS inside the blocks. This is enough for us to just extract any information we want from these memories. We did several other experiments, mainly to
1173.63s - 1184.19s |  confirm that the memory is working the same way also on the other lines of the chip, so we did on S2, S3, C6, as Michal was saying. And the third one I'm showing you
1184.19s - 1195.19s |  here isn't really interesting from the memory layout evaluation, but it's rather interesting because of those white fields there. Again I am to blame for that, because when you do the
1195.19s - 1206.03s |  layering on the whetstone and you don't clean the whetstone you have a debris that's left there and when you keep scratching with your finger you create these gigantic canyons in
1206.03s - 1218.07s |  that memory where the e-fuses are just completely gone. In this case that Reed-Solomon automatic error correction could actually prove useful to recover the information, however for like
1218.07s - 1228.11s |  future proofing these methods we rather spend the time on improving the layering method because for example block 0 here doesn't have any automatic error correction and the other
1228.15s - 1242.17s |  chips don't have that as well. It was just that in case of ESP32, if you do some damage to the chip you can actually recover for it using this automatic error correction. Uh so now this image will show you the layout of the
1242.17s - 1257.17s |  memory so the full green row at the top and the bottom of the picture and 6 others, full green rows in between, that's block 0 so that's where those 4 times duplicated values actually go to. Uh for example if you
1257.17s - 1262.17s |  disable JTAG, that's where 4 e-fuses will be burned. And the
1262.17s - 1265.21s |  rest of the colorful blocks, and I'm sorry for using too many
1265.21s - 1268.21s |  shades of green, but I'm bad with colors. Anyway, the rest of
1268.21s - 1270.91s |  this color of, uh, the rest of the blocks here are the user
1270.91s - 1275.01s |  writable blocks. Most tutorials on the internet will just tell
1275.01s - 1279.49s |  you please put your encryption key into the purple one here. So
1279.49s - 1283.89s |  that's where we will be focusing the most. Uh, but once you know
1283.89s - 1286.13s |  the alignment of the blocks, it doesn't really matter which
1286.13s - 1289.09s |  blocks you extract. You just get the coordinates from the
1289.09s - 1293.07s |  extracted data. Uh, the biggest problem at this point was that
1293.07s - 1296.81s |  Michal refused to read that manually, uh, anymore after
1296.81s - 1301.21s |  whatever amount of bits he read. So we had to turn to our machine
1301.21s - 1304.71s |  learning guru to help us automate the process. Uh, his
1304.71s - 1307.25s |  name is Hayan and he unfortunately couldn't be here
1307.25s - 1311.05s |  with us. Uh, but he prerecorded the message, uh, prerecorded his
1311.05s - 1314.39s |  part of the presentation, which I'll try to play now. There's
1314.39s - 1319.59s |  about a 50% chance it's going to play. Uh, if it does not, I
1319.59s - 1322.25s |  will still play it and I'll try to comment it. So you will not
1322.25s - 1323.93s |  learn anything useful. So let's see.
1325.87s - 1328.93s |  Hello, I'm Hayan Eri, security database senior analyst in
1328.93s - 1331.87s |  Accenture. And also I'm doing a PhD in music, which I learned
1331.87s - 1334.91s |  in the four violin clubs. I will go through the automation
1334.91s - 1338.95s |  process and show you finally a demo about it. Let's go.
1339.91s - 1344.95s |  Instead of a visual reading of the effuses from the images, we
1344.95s - 1347.95s |  automated the process. We started from the output of
1347.95s - 1351.75s |  microscope, where there are around 200 images for each one.
1352.59s - 1355.69s |  First we stitched these images to get only one image per one,
1356.03s - 1359.67s |  then pre-processing before applying the machine learning,
1359.87s - 1362.27s |  then applying the machine learning object detection model,
1362.63s - 1368.43s |  then extracting the effuses values into the arrays.
1369.91s - 1373.51s |  The microscope provides high resolution images when working
1373.51s - 1378.31s |  in zigzag mode. In zigzag mode, the microscope scans the palm in
1378.31s - 1382.31s |  zigzag line, as we see here in the figure, generating around
1382.59s - 1389.43s |  200 images for each one. Each image is 2,560 by 1,920. We can
1389.43s - 1393.03s |  see this image is high resolution image as we can
1393.03s - 1396.23s |  distinguish between the off effuse, which is the default
1396.31s - 1403.39s |  state, and the blown one, which is the on case. We keep margin
1403.39s - 1411.27s |  by 35% between images to avoid wasting any pixels. Then we
1411.27s - 1417.03s |  stitch these images to get one image per bank. But when using
1417.31s - 1422.51s |  the embedded stitching tool in the microscope, we get bad
1422.55s - 1426.67s |  stitching. For example, there is misalignment between zero and
1426.67s - 1430.43s |  one, or two, one, two, two, or between first row and second
1430.43s - 1435.95s |  row. The reason behind this misalignment is that the margin
1435.99s - 1441.75s |  is theoretically 35%. But practically speaking is
1442.35s - 1447.67s |  something random around this value. That's why we suggested
1448.07s - 1452.63s |  a new stitching method. In this method, to stitch two images,
1452.63s - 1455.11s |  one and two, we define comparison strip in the first
1455.11s - 1461.43s |  image and look for the similar strip in a stitching area in the
1461.43s - 1466.47s |  second image. A stitching area is plus minus 200 pixels around
1466.47s - 1471.43s |  the margin line. When defining the similar strip, we determine
1471.43s - 1475.35s |  the margin accurately and also the vertical shift between
1475.35s - 1478.75s |  images. Here we can see the result of stitching image one
1478.75s - 1483.23s |  and two. The advantage of this method is to accurate, but
1483.27s - 1488.59s |  downside is the long time it takes. For example, to stitch
1488.71s - 1492.87s |  200 images to constitute one bank image, it will take around
1492.87s - 1496.95s |  five hours. Here we can see the result of stitching for one
1496.95s - 1505.83s |  bank image. Its high resolution image is 34,000 by 12,000 image.
1506.63s - 1511.91s |  To effectively use AI to extract the fuses, we use Jetson
1511.91s - 1517.19s |  Ajax Orion from NVIDIA. It has 64 gigabyte RAM and 2048 CUDA
1517.19s - 1522.79s |  cores and 64 tensor cores, which makes it good for the image
1522.79s - 1528.15s |  based AI projects like object detection projects. We use also
1528.19s - 1533.15s |  MobileNet SSD model, which provides a balance between speed
1533.15s - 1539.51s |  and accuracy. This model is trained to detect fuses in the
1539.51s - 1542.79s |  images in terms of the coordinates of the fuses in the
1542.79s - 1547.39s |  images. Also, it's a class whether it is on or off. Here
1548.39s - 1553.99s |  the example of on if-use and this is off if-use, which is the
1554.03s - 1561.39s |  default state of the if-use. What is the optimal input of the
1561.39s - 1567.55s |  model? We read from the MobileNet SSD model documents, the
1567.59s - 1571.91s |  optimal size for training and also for inference is 300 by
1571.91s - 1578.03s |  300. Also, we should meet another condition, which is the
1578.71s - 1583.83s |  object, which is if-use size to the image size should be bigger
1583.83s - 1587.71s |  than predefined ratio. This ratio, in our case, is defined
1587.71s - 1593.99s |  using practical experience. It is 0.04. Here we can see the
1593.99s - 1598.55s |  example of the optimal image and we can see also the size of the
1598.71s - 1603.55s |  if-use regarding to the image size. We meet these two
1603.55s - 1607.79s |  conditions using resizing and tiling. When tiling the
1607.83s - 1612.15s |  stitched image, we keep 100 pixels overlapping between
1612.15s - 1617.55s |  tiles to be sure that the whole size of if-use is exist, at
1617.55s - 1624.31s |  least in one tile. When training the model, we used 3500 training
1624.31s - 1628.55s |  tiles with balanced number between on and off fuses. We
1628.55s - 1634.03s |  used CFAT tool, which is a web-based AI free tool to
1634.03s - 1637.99s |  annotate the if-uses. Here we can see example of annotation.
1638.03s - 1642.07s |  We use different colors when drawing boxes about the on and
1642.07s - 1648.67s |  off if-uses. The training results, the detection accuracy
1648.71s - 1654.23s |  99%, the classification accuracy 97% and also we got fake
1654.23s - 1658.79s |  detection where non-if-use objects are detected as if-uses,
1659.07s - 1663.39s |  but these fake detections will be resolved during the post
1663.43s - 1669.59s |  processing after prediction. Now we have stitched image. What
1669.59s - 1675.75s |  do we do to extract the if-uses? First, we tile this stitched
1675.75s - 1680.35s |  image to 2500 tiles. Then we apply the inference using the
1680.35s - 1685.35s |  trained machine learning model. The inference results for each
1685.35s - 1690.91s |  tiles are three things. First, the continuous of if-uses in the
1690.91s - 1693.83s |  tile and also the classification of the if-uses
1693.83s - 1698.07s |  whether they are on or off and also the confidence score which
1698.07s - 1701.67s |  corresponds to how the machine learning model is confident
1701.75s - 1706.59s |  about the classification. These three things, results from all
1706.59s - 1711.15s |  the tiles will be re-aggregated again on the stitched image.
1712.39s - 1718.71s |  Then the duplicates will be removed with keeping only the
1718.75s - 1724.35s |  highest confidence score. Finally, any if-use with
1724.59s - 1730.39s |  confidence score less than 95% will be visually checked.
1732.19s - 1737.63s |  Finally, we will use dbScan clustering method to define the
1737.67s - 1743.23s |  outliers out of the columns and remove them. Then we use another
1743.23s - 1748.35s |  clustering method to group the if-uses in columns and exporting
1748.55s - 1754.39s |  their values into the arrays 1s and 0s. We repeat the same
1754.39s - 1759.11s |  process for another bank as we know there are lower bank and
1759.11s - 1764.83s |  upper bank. Finally, we will get a 64 by 64 array and then we'll
1764.83s - 1771.11s |  go through the next steps as my colleagues explained. We will
1771.15s - 1777.63s |  extract the encryption key from the array and use this key to
1777.67s - 1782.19s |  decrypt the encrypted firmware. We will see these steps in the
1782.19s - 1797.01s |  demo. Let's go. We have firmware image where the main program
1797.37s - 1802.09s |  prints periodically the sentence Hello Las Vegas. This firmware
1802.13s - 1805.37s |  is encrypted. That's why when we look for Hello World, we can
1805.37s - 1814.90s |  find nothing. Here we will see the images of lower bank and
1814.90s - 1823.46s |  upper bank of the chip holding the encrypted firmware. Here are
1823.46s - 1831.62s |  the images of lower bank before stitching. Here the image of
1832.26s - 1838.70s |  stitched lower bank. You can see the high resolution of the
1838.70s - 1844.42s |  stitched image. Now we will apply the if-use detection
1844.86s - 1851.30s |  script. This script will go through the stitched lower bank
1851.30s - 1855.26s |  and upper bank, do pre-processing, tiling of the
1855.26s - 1860.82s |  images, and prepare the images to be optimal input for the
1860.86s - 1866.22s |  model. These tiles will be stored in the folder for
1866.22s - 1876.70s |  inference, this folder. Now, the script will run the machine
1876.70s - 1883.46s |  learning model, which is trained. This model will do the
1883.46s - 1891.82s |  inference and detect the if-uses classes on and off, and
1891.82s - 1895.86s |  also the confidence scores of the classifications. Starting
1895.86s - 1912.81s |  from the upper bank, then the lower bank script will store all
1912.81s - 1916.29s |  of these inference results or in-folder inference results.
1917.65s - 1923.77s |  Now the script will ask for visually checking the if-uses
1924.05s - 1927.53s |  where there are different classifications due to tiles
1927.53s - 1933.29s |  overlapping. For the lower bank, we have 11 if-uses should be
1933.29s - 1941.91s |  checked. The checking should be whether the if-use unbound
1941.91s - 1953.29s |  means off or bound means on or not if-use. For the upper bank,
1953.29s - 1974.14s |  we have zero if-uses to be checked. Visually, if the if-use
1974.46s - 1980.02s |  with confidence score is then 95%. We have eight if-uses to be
1980.02s - 2008.82s |  checked in the lower bank and 13 in the upper bank. After that,
2008.82s - 2012.38s |  the script will show us the distribution of the if-uses in
2012.38s - 2020.22s |  the image. We can note that no outliers and also in the upper
2020.22s - 2026.66s |  bank. As everything is okay, the script will export the values
2026.66s - 2036.71s |  of if-uses as zeros at once. The script also will extract the
2036.71s - 2041.67s |  flush key file, which contains the encryption keys of the
2041.67s - 2051.19s |  firmware and here the 64 by 64 array of ones and zeros. We will
2051.19s - 2055.35s |  use the flush key file to decrypt the encrypted firmware
2055.71s - 2063.59s |  and get the decrypt.bin file, which is the decrypted firmware.
2069.54s - 2077.06s |  Here is the decrypted.bin file. We should look for hello in this
2077.06s - 2086.94s |  file. We should find something. And here we are. Thanks. I will
2086.94s - 2090.90s |  go back to my colleagues to conclude the presentation.
2093.39s - 2096.63s |  Okay, I know it's 3am in Prague, but Haijan, if you're watching,
2096.63s - 2103.23s |  thanks for the video. Now to conclude real quick. If you have
2103.23s - 2108.23s |  an information that you would like to store, if you like have
2108.23s - 2110.75s |  an information that you would like to keep secret and you need
2110.75s - 2114.75s |  to store it in a chip and you have a choice to do so, please
2114.75s - 2118.87s |  do not put it in any fuse-based memory. In the case of ESP32
2118.87s - 2121.91s |  chip, if you want to encrypt the flash memory, and you really
2121.91s - 2125.39s |  should if you want to, you have no other choices. So in this
2125.39s - 2128.67s |  case, you should use countermeasures such as using a
2128.67s - 2133.55s |  unique key per each chip, not just use the same key for every
2133.55s - 2138.59s |  device. If you have a choice to store it in some HSM module,
2138.59s - 2142.35s |  physical unclonable functional protected memory or anti-fuses,
2142.35s - 2146.67s |  whatever you have, it would be a better way. Because any fuse
2146.67s - 2151.15s |  based memory is just readable based on its physical
2151.15s - 2154.67s |  properties. And the readability protection methods such as
2154.67s - 2158.71s |  layering, they do increase the effort by putting obstacles in
2158.71s - 2161.59s |  between the malicious actor and the information that you're
2161.59s - 2165.19s |  trying to protect. They don't prevent reading. In this case,
2165.19s - 2167.95s |  we had to destroy the chip in process of recovering this
2167.95s - 2172.51s |  information. But since our goal was to recover an unencrypted
2172.51s - 2175.83s |  firmware image, we didn't really care about that, because we
2175.83s - 2180.39s |  don't need it to run, we just want to read the firmware. The
2180.39s - 2184.07s |  assumption about the delay ring being expensive, complex and
2184.07s - 2189.31s |  whatnot has basically been destroyed. Because if you have a
2189.31s - 2195.99s |  sink, whetstone, and at least two fingers, you could do that
2196.27s - 2199.51s |  in your home conditions. And if you also can rent a microscope
2199.51s - 2202.55s |  on your local university for a couple hours to just scan some
2202.71s - 2206.95s |  location on chip, then you can do the recovery of the
2206.95s - 2212.11s |  information at home. So it's rather easy and cheap, if you're
2212.11s - 2216.03s |  willing to sacrifice a bit of your fingers. Are there two
2216.03s - 2220.31s |  things I'd like to point out still. The first one is to thank
2220.31s - 2223.71s |  to Espressif, because they allowed us to have this talk. And
2223.71s - 2226.31s |  the communication with them was really smooth. So thanks for
2226.31s - 2230.27s |  that. And finally, I'd like to admit to a lie, because at the
2230.27s - 2234.71s |  very beginning, I told you that if you burn an eFuse from state
2234.71s - 2241.51s |  zero to one, you cannot unburn it. I lied because you can. But
2241.51s - 2244.51s |  the processes around this are really complex and really
2244.51s - 2248.79s |  expensive. So I'd like to keep this as a separate topic for
2248.79s - 2254.27s |  perhaps next time. And we can transition into the Q&A session,
2254.27s - 2257.79s |  which as I've heard, we will be doing as we will be going. But
2257.79s - 2262.75s |  wait, we also have a giveaway. We have 20 decapsulated ESP32
2262.75s - 2266.83s |  chips in a vials that look like that they hold some bacteria,
2266.83s - 2271.31s |  but we promise that they did not. And we could just take them
2271.31s - 2275.23s |  and try the layering process at home if you want to, or you just
2275.23s - 2278.83s |  as a souvenir. So thank you for attention. And we will be
2278.83s - 2280.15s |  answering questions as we go.