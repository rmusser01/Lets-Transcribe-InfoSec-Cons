{
  "webpage_url": "https://www.youtube.com/watch?v=B0A8F_Izmj0",
  "title": "DEF CON 32 - Xiaomi The Money : Our Toronto Pwn2Own Exploit & BTS Story - Ken Gannon, Ilyes Beghdadi",
  "description": "At Pwn2Own Toronto 2023, NCC Group was one of the two teams that compromised the Xiaomi 13 Pro. The exploit chain involved using a malicious HTML hyperlink and uploading a potentially malicious application to the Xiaomi app store.\n\nHowever, this talk is not just about the technical details of the exploit. While researching the final exploit, NCC Group discovered how an exploit could work in one region of the world, but not in other regions, and how the researchers had to travel to Canada for a day just to test if the exploit would work in Canada. This talk also discusses just how far Xiaomi is willing to go to make sure their device isn't hacked at Pwn2Own, and why only two teams were able to successfully compromise the device during the competition.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2341,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.24s - 12.69s | This text was transcribed using whisper model: large-v2

 Alright, hello. I'm not used to a mic so sensitive, so I'm gonna talk like back here. And if that
12.69s - 20.21s |  doesn't work, then I'll adjust, whatever. This is Xiaomi the money. The our port Toronto
20.21s - 28.45s |  pwned to own 2023 exploit and behind the scenes story. Uh what this talk is about is our hack
28.45s - 34.99s |  against the Xiaomi 13 pro, which includes the full exploit chain that we used and also issues
34.99s - 40.17s |  encountered during the research itself. And then we're gonna we're gonna cover what happened
40.17s - 46.01s |  during the pwned to own competition itself. And for a little bit of background on who we are,
46.01s - 52.31s |  I'm Ken Gannon. I'm a principal security consultant at NCC group and I usually focus on
52.31s - 59.41s |  hacking mobile shit. This is Ilyas. At the time of the competition he was also part of NCC
59.41s - 65.75s |  group. He is a veteran Android malware reverse engineer and this was his first time
65.75s - 70.39s |  competing at pwned to own. So we got first time pwned to own, first time Defcon. This is his
70.39s - 77.89s |  first time in the US. This is uh a lot of stuff for this guy right here. So a little bit about
77.89s - 82.89s |  us. So it was in 2022, no 2023 of last year. It was around May. Ilyas was looking to do pwned to
86.23s - 91.33s |  own. For those of you that don't know what pwned to own is, it is a zero day competition where
91.33s - 97.47s |  you try to hack some devices and some prize money involved. And Ilyas was looking to do
97.47s - 103.31s |  pwned to own this year, last year for his first time. And so he started researching previous
103.31s - 109.01s |  vulnerabilities, previous competitions to see what that was like. And then he came across my
109.01s - 114.05s |  name because I've done exploits, I've done previous attempts at pwned to own and he
114.05s - 119.79s |  realized, oh shit, I work at the same company as Ken Gannon, I'm gonna reach out to him. So it
119.79s - 125.19s |  was like May of last year, we get together, we talk over teams and we discuss what we wanna
125.19s - 130.19s |  hack. And we decided to hack the Samsung Galaxy S23. So that was as of May last, oh it's
133.33s - 138.33s |  I will, I didn't see you there. So that was May of last year. And then July of last year, ZDI
141.27s - 146.75s |  announces their list of devices. And as you can see on the screen, it includes the Xiaomi 13
146.75s - 152.79s |  Pro. So the thing about the Xiaomi 13 Pro though is that the Xiaomi devices has not been a
152.79s - 157.79s |  target of pwned to own since 2020, the COVID pandemic. And him and I got together again and
158.05s - 163.05s |  we're like, oh, this sounds interesting. Maybe we should try to hack this new device or we
166.05s - 172.55s |  should try to stick with Samsung Galaxy S23. And the thing about our discussions at the
172.55s - 177.03s |  time is that we were discussing this on July 13th of last year when the devices were
177.03s - 182.03s |  announced. And as I said, we were thinking about Samsung Galaxy S23, but I have a history
182.99s - 187.99s |  with uh Samsung at this point. A lot of traumatic experiences with Samsung including a
191.49s - 196.49s |  failed pwned to own attempt in 2021 because I am a very shitty programmer. So because of
199.63s - 205.67s |  that and we decided that maybe we should just go for the Samsung, for the Xiaomi 13 Pro
205.67s - 210.55s |  instead. Something new, something fresh. We we just thought, you know, something that we
210.57s - 214.87s |  both can learn together. What could possibly fucking go wrong, right? This is gonna be
214.87s - 219.87s |  awesome. So, let's talk about the Xiaomi 13 Pro. There's essentially two versions of this
222.97s - 228.65s |  device. The global variant and the China variant. The global variant is available
228.65s - 233.75s |  worldwide wherever you can get a Xiaomi device, whereas the China variant is typically
233.75s - 239.29s |  only found in China. At a hardware level, they're exactly the same thing. Same camera,
239.33s - 245.37s |  same processor, same board, same chip set. The only minor difference between these two
245.37s - 250.37s |  models is the type of firmware that can be installed on each device. Uh the China model
252.37s - 257.39s |  can have the China firmware as well as what's called the global variant firmware. Whereas
259.81s - 266.13s |  the global model can only install the global variant firmware. Now the unique part about
266.13s - 271.15s |  the global firmware though is that depending on the settings, you can have it emulate
273.45s - 278.45s |  different regions. Like for example in Europe, in India and in Taiwan, they have their own
280.39s - 285.39s |  Taiwan, India and Europe firmware. Or you can tell the global mother one to emulate a
288.29s - 294.63s |  different region and it will become that region. Why this is important is because certain
294.67s - 301.11s |  regions have certain apps enabled or disabled. For example, if you set the region to United
301.11s - 307.05s |  Kingdom, the GetApps application, which is the Xiaomi uh application store, will be
307.05s - 313.43s |  enabled if the phone is set to the UK region. Whereas if you were to set it to United States
313.43s - 319.23s |  region, the GetApps store is disabled. And this is just one example. Another one is that if
319.27s - 325.27s |  you set the region to Russia, then the Yandex browser becomes enabled on the device. Keep in
325.27s - 330.67s |  mind that this browser, the APK file, is in the firmware already, it's just that it gets
330.67s - 337.05s |  enabled or disabled depending on what region the firmware is set to. Another example is
337.05s - 342.05s |  that with the Spain region, the Opera browser becomes enabled and uh one more subj- and
342.65s - 347.65s |  one more example, the Indonesia region, the WhatsApp uh app becomes enabled or disabled. So
350.85s - 354.69s |  at this point we have multiple different regions, multiple apps being enabled, multiple
354.69s - 361.47s |  apps being disabled. So we thought, well, why don't we determine what each region does,
361.47s - 366.27s |  download all 400 plus applications from the phone and start reverse engineering every
366.27s - 371.45s |  single application. Except that's a really fucking bad idea because that's a lot of
371.45s - 377.45s |  applications. So instead, we decided to just prior tori- prioritize the Xiaomi developed
377.45s - 383.43s |  application, specifically the ones that were developed by Xiaomi for that phone. And so then
383.43s - 388.43s |  22 days later, we had 3 exploits for the GetApps application. And this is where Elias is
390.53s - 392.63s |  going to talk about them real quick.
392.63s - 399.31s |  Hey everyone. I'm going to be talking about the app we exploited. So we found 3 different
399.33s - 405.67s |  exploits in the GetApps application. This application is also what the, what we ended up
405.67s - 412.45s |  exploiting at point one. So we found 3 different ways to force install application. And the
412.45s - 418.95s |  attack scenario is the following. Tapping a malicious uh hyperlink in the web browser would
418.95s - 425.53s |  result in automatically install any application available on the GetApps store without user
425.55s - 431.79s |  consent. 2 of the methods were unfortunately patched before the competition and I'm going to
431.79s - 438.83s |  show here the exploit code of those 2 patch exploits. So here's the first one. Um, that was
438.83s - 443.83s |  used to install WhatsApp automatically. On the first screenshot, you can see the
443.83s - 450.01s |  browsable intent code. And if you've never created a browsable intent hyperlink before, we've
450.03s - 455.03s |  also put the Java code which does the exact same thing. And there is an ID equal com dot
458.63s - 463.97s |  WhatsApp parameter in there. And that's what could be used to install any application
463.97s - 470.38s |  available in GetApps. Here's the second patch exploit. On the left you can see the browsable
473.26s - 478.80s |  intent code. And again on the right you can see the Java code which does the exact same
478.84s - 483.84s |  thing. It's a lot chunkier as you can see. And if you base 64 decode that string, you'll be
486.58s - 494.19s |  able to see the WhatsApp packet name, package name in there. Before we can get into the third
494.19s - 499.19s |  exploit, um, we need to talk a little bit about WebView in GetApps. Um, GetApps had a WebView
503.47s - 510.31s |  which contained a JavaScript interface. And for 900 people, this means that JavaScript could
510.31s - 517.23s |  be used to execute a set of Java function defined in the application. It's defined in the
517.23s - 522.23s |  JavaScript interface class. And some of those JavaScript interface function were benign
524.73s - 531.73s |  like show toast function, for show toast functions. Um, which literally just shows a toast
531.73s - 537.65s |  as you can see in the screenshot. But there are 2 interesting functions there for us for
537.65s - 544.39s |  point 1. The install function which installs any application available on the GetApps store
544.39s - 549.39s |  without user consent. And the open app functions which opens any specific application again
551.63s - 556.63s |  without user consent. And this WebView is obviously dangerous and Xiaomi knows it. So they
560.01s - 566.61s |  implemented some protection to ensure that attackers cannot habitually open this WebView and
566.63s - 573.65s |  execute any of those JavaScript interface functions. And one of those protection was that
573.65s - 578.65s |  whatever URL being loaded in the WebView must be a valid URL. And by valid, I mean that it
581.99s - 586.99s |  either starts with a HTTPS protocol and the domain should belong to a defined set of um,
587.99s - 592.99s |  uh, white listed domains. All of them were owned by Xiaomi. And the other valid URL um,
599.53s - 606.03s |  should start with a file protocol and the file should be located in the GetApps private
606.03s - 611.03s |  directory. A GetApps private directory um, names was always web hyphen raise I hyphen some
611.79s - 616.79s |  random numbers. So now, we have a new plan. First, we can launch the WebView and load a
625.54s - 631.82s |  valid URL. Second, inject, inject some custom JavaScript code into the WebView possibly
631.82s - 638.22s |  through cross site scripting. Third, having the JavaScript code execute the 2 JavaScript
638.74s - 643.74s |  functions mentioned before. And fourth, got, get remote code execution. Okay, step 1. To
647.22s - 653.08s |  launch the WebView, we use the activity called join activity. This activity could be
653.08s - 658.90s |  launched via browsable intent. Again, this means that this activity could be launched via
658.90s - 665.20s |  hyperlink in a website. And it was also really simple to tell join activity what URL we
665.22s - 672.78s |  wanted to load in the WebView. It was just a get parameter called URL. This is the proof of
672.78s - 677.78s |  concept uh, which launched join activity and loaded the file detail dot html that was in the
682.16s - 688.12s |  GetApps private folder. That detail dot html is pretty blank as you can see on the
688.12s - 695.65s |  screenshots. But that's just because we didn't give him the application's data to use. So
695.65s - 700.65s |  now step 1 is done. Let's move on to step 2. We had 2 options to inject custom JavaScript. We
703.67s - 710.57s |  could either load a show me domain URL and then print test that URL and look for usable
710.57s - 717.77s |  vulnerabilities. Or, we can analyze the file in the private folder and look for user input
717.77s - 724.39s |  vulnerabilities. We choose for the, we choose the second option. And now this research just
724.39s - 729.39s |  became a JavaScript source code review job. And as you can see on this, on the picture, this
731.77s - 738.47s |  was my reaction when I realized what was going on. Um, point 1 will make you do stuff you
738.47s - 743.47s |  really don't want to do. But we still did it. Um, in, in the uh, the web hyphen res folder, we
744.33s - 749.33s |  had like html file and JavaScript file with similar names. As an example, we had the detail
755.45s - 760.45s |  dot html file and this file would load the detail dot chunk dot js. Some JavaScript file
763.59s - 768.59s |  would accept user input via get parameters. But also, all of those JavaScript file had a
769.09s - 774.09s |  built-in function to filter out any cross-site scripting payloads. Well, except for one. One
778.93s - 783.93s |  that we found. There was a file called integral dialog page dot chunk dot js which failed to
786.27s - 792.81s |  sanitize cross-site scripting payloads in one specific area. So, let's try to get a dumb
792.81s - 797.81s |  XSS payload working in this file. This was the initial payload that was used for testing. On
800.31s - 806.69s |  the right, you can see the decoded version of it. So, we had different inputs and we had
806.69s - 811.69s |  different payloads. All of them started with XSS test, 1, 2, 3, 4, 5. And they all ended with
814.53s - 819.53s |  um, 2 characters that was encoded. And those characters were double quote symbol and the
819.89s - 826.33s |  less than symbol. On the left is what the web view looked like with the payloads. And the
830.37s - 835.37s |  right is a debugging window in Chrome. Our less than symbol character was unfiltered in one of
838.31s - 843.31s |  the area, specifically the XSS test 2. All the others were filtered, filtered the right way. So
843.97s - 848.97s |  now, with this XSS test 2 payload, we can try to just pop a simple alert box. And then, what
856.95s - 861.95s |  the hell? We got some errors. Locat was showing us disabled XSS checks, XSS errors, um,
864.79s - 870.13s |  errors. So, let's dig into that. Remember the protection against the web view that we
870.15s - 876.19s |  mentioned earlier? There was another one, unfortunately. The GitHub application had a
876.19s - 881.19s |  built in XSS filter in the Java code itself. And it looked for XSS payload in the URL. So, if
885.67s - 890.67s |  the URL had any XSS payload found, then the URL would fail to load. And here is the list of
890.75s - 895.75s |  the XSS filter. And as you can see, it detected our forward slash script string in our payload.
903.87s - 910.17s |  At this point, we decided that maybe we shouldn't be using script string at all. Maybe
910.17s - 915.21s |  because there might be other filters we haven't found yet. And also, script is just too
915.23s - 920.23s |  obvious for an XSS payload. Okay, so going through the list and thinking about what could we
922.63s - 927.63s |  use now, we realized that the Java XSS filter was just looking for string matches. So, we
930.61s - 937.27s |  thought, what if we could encode, um, a less than symbol, um, a character in one of those
937.27s - 942.27s |  payloads, such as the less than symbol SVG. So, that's what we tried. And we found a
945.21s - 950.21s |  way. We used, um, the SVG unload to run the JavaScript alert box and that, that said, yeah,
952.79s - 957.79s |  dumb XSS here. And boom, it worked. We finally have an XSS in the web view now. So, step
962.25s - 967.25s |  two is done. Let's move on to step three. Oops, sorry. Now, let's try to call the, those
969.59s - 976.29s |  JavaScript interface function mentioned earlier. To test, we tested our payload just to see if
976.59s - 982.29s |  we could run the show toast function. And on the screenshot on the right, you can see that we
982.29s - 987.31s |  managed to do that. So now, after some time, we did some reverse engineering and we came up
990.57s - 996.77s |  with this lovely JavaScript payload to install any application. On the screenshot, you can
996.77s - 1001.19s |  see that we first called the install with the package name of the application we want to
1001.19s - 1006.19s |  install and then we run a loop, um, and wait for the, the application to install and then we use
1009.39s - 1015.91s |  the open app with the package name again to open the application. So now, there is just one
1015.91s - 1020.91s |  problem. We didn't know what to install. So now, what application should we install? Ideally, we
1024.85s - 1031.15s |  want some malware that we can control in the application store, store somewhere. And I'm
1031.15s - 1039.04s |  gonna let Ken talk about his baby now. So, for those of you that don't know, I'm also an
1039.04s - 1044.38s |  active contributor for the Android tool Drozer. Yay! For those of you that know what Drozer
1044.38s - 1049.38s |  is, yay! Uh, and because I'm an active contributor, I know how to reskin it into an
1051.78s - 1058.02s |  application called Sunfish, which does literally the same exact thing as Drozer, except it
1058.04s - 1065.18s |  starts a bind shell on boot as well, and then I uploaded it to this Xiaomi app store. So, for a
1065.18s - 1071.12s |  little bit, on the Xiaomi app store, there was a, a copy of Drozer called Sunfish up on the app
1071.12s - 1076.12s |  store. And that was fun. So, we had a new payload. In this case, the payload is going to step
1078.50s - 1083.50s |  one, install Sunfish, and then step two, open it after Sunfish is installed on the device. So,
1084.22s - 1089.22s |  alright, all the pieces, all the puzzle pieces are in place. Let's uh, let's watch it do its
1092.40s - 1098.00s |  thing real quick. We open up Google Chrome. Uh, in this case, we're going to, as you can see,
1098.00s - 1102.80s |  it's a new copy of Chrome with all those popups. We browse to the web server I had at my
1102.80s - 1109.82s |  house, uh, over HTTP because I'm lazy. But eventually what's gonna happen is I will load the
1109.84s - 1114.84s |  website, and there's a yay POC hyperlink. Click that one link. This appears, and then Sunfish
1117.28s - 1122.88s |  gets installed, and boom, Sunfish is now installed. The server has started as well. I put the
1122.88s - 1128.78s |  phone down. At this point, I have the IP address of the phone that reached out to my web
1128.78s - 1133.80s |  server as well. And so with the bind shell open, all I had to do was use my reskinned Drozer
1133.92s - 1138.92s |  console thingy, whatever, to connect to the Drozer application installed on the phone. And
1141.76s - 1147.22s |  then for, per the rules of Pwn2Own, as long as you get RCE on the device, that is good
1147.22s - 1152.22s |  enough. Including just RCE as a single application. So in this case, I'm running ID and who am I
1153.84s - 1158.84s |  as Sunfish? There we go. One click to, one click to RCE. Yay! So, we got RCE. All that's
1163.84s - 1169.88s |  steps are done. And like I said, that was only 22 days later. We had 22 days of research
1169.88s - 1175.78s |  time. We had 77 more days to go to to do whatever the fuck we wanted. Everything was
1175.78s - 1180.80s |  awesome. Nothing could have possibly gone wrong. Let's discuss what went wrong. So, late August
1183.96s - 1190.40s |  of 2023, Xiaomi made changes to their get app server. Uh specifically, one of the changes
1190.40s - 1195.40s |  that they made was that the install parameter, the install function that we were using, now
1197.58s - 1202.58s |  required a shit ton more code. Our payload was now chonky as fuck. But wait, there's more.
1207.42s - 1213.90s |  You see, this payload did not work in all parts of the world. So for a little bit of
1213.90s - 1218.90s |  background, last year and around August, late August 2023, I went on vacation to Japan and
1220.76s - 1227.78s |  the Philippines. And this new chonky install payload would work in Japan and the United
1227.78s - 1233.12s |  Kingdom. Thanks to Ilias here being based in the United Kingdom. But it fucking wouldn't work
1233.12s - 1238.12s |  in the Philippines for some reason. And while in uh Japan and the Philippines, I noticed that
1241.78s - 1248.50s |  the get apps application was showing different content based on the physical location of the
1248.50s - 1255.50s |  phone. Not the IP address. I'm talking about doing a factory reset and you you know you go
1255.50s - 1259.18s |  factory reset, you go through the whole setup, the cell phone towers are, the cell phone
1259.18s - 1264.88s |  signal is now enabled on the phone. And for some reason, after you do a factory reset and you
1264.88s - 1270.32s |  go through the initial setup, there was stuff on the uh in the get app store that was
1270.32s - 1275.32s |  exclusive to that one region. And what I also realized at the time, or as we were doing like
1278.56s - 1283.56s |  research, like figuring out what is going on, uh VPN did not affect this. The reason I was
1287.20s - 1292.78s |  talking about factory reset is because during Pwn2Own specifically, uh they typically
1292.78s - 1298.84s |  factory reset their phone before every single uh entry goes up. And so then during a
1298.84s - 1303.58s |  factory reset process, the cell phone tower, the cell phone signal antenna is enabled. So we
1303.60s - 1309.94s |  wanted to mimic that. And we realized that just really weird stuff was happening with the
1309.94s - 1316.86s |  get app store depending on where I was in Japan and the Philippines. And so then after
1316.86s - 1321.80s |  looking at the developer documentation and looking at uh the the developer portal I had
1321.80s - 1327.44s |  access to since I uploaded Sunfish to their app store, I realized that there were some
1327.44s - 1332.44s |  places that were launched. Uh for example, get apps was not launched in the US, UK, and
1335.22s - 1340.22s |  Japan. But it was launched in the Philippines. Now I don't have definitive proof, but this is
1344.32s - 1349.30s |  literally the only thing I could think of at the moment. Maybe we were seeing different
1349.30s - 1354.50s |  behavior in the Philippines because the get app store was not, was launched in the
1354.50s - 1359.50s |  Philippines but was not launched anywhere else that we've been to. Now thankfully,
1360.28s - 1366.46s |  because we are awesome, eventually we found a way for the payload to work in the
1366.46s - 1371.46s |  Philippines. But that payload would only work in the Philippines. It would not work in US, UK,
1373.50s - 1378.50s |  or Japan. We didn't know what to do. Because another issue came up, Pwn2Own that we were
1381.24s - 1387.44s |  going to takes place in Canada. Do we have a payload that works in Canada? We, I like, it's
1387.46s - 1393.32s |  a theory. This whole like launch, not launch thing is just a theory. And technically, get apps
1393.32s - 1398.32s |  was not launched in Canada. So maybe, maybe our get apps or non-launch payload would work in
1400.00s - 1405.00s |  Canada. We're not entirely sure. It'd be nice to confirm. Well, NCC Group is a global company
1407.10s - 1411.78s |  and we have offices in Canada. So surely we can just, no, no, we're not, we're not working
1411.78s - 1416.78s |  with the Canada office for this talk. Because you cannot get the Xiaomi 13 Pro in Canada.
1418.34s - 1423.08s |  So, if you try to get the Xiaomi 13 Pro here in the US, you're going to go through eBay. You're
1423.08s - 1427.72s |  going to go through a, a seller on eBay or on Amazon or something to get the phone. Uh, in
1427.72s - 1432.72s |  fact, my phone, I know for a fact, what was a China model imported here from China, sold by a
1435.60s - 1440.60s |  Chinese guy on eBay. I could not procure the Xiaomi 13 Pro in Canada. eBay Canada, Amazon
1442.20s - 1445.98s |  Canada, none of the cell phone providers in Canada, like I could not get it in Canada.
1446.42s - 1451.42s |  So, you know, I'm in North America, I might as well just send my phone to Canada. No, no, I'm
1451.42s - 1456.26s |  not sending my phone to Canada. Because another issue came up with my schedule
1456.26s - 1461.26s |  specifically. You see, in August of 2023, uh, or 20, 2023 in general, NCC announced that
1464.14s - 1470.04s |  they were going to open an office in the Philippines. And I was chosen to go out to
1470.04s - 1476.18s |  Manila to spend the rest of 2023 in the Philippines to help set it up. Uh, fun fact, I'm
1476.18s - 1481.18s |  still in the Philippines. So, because of this, I had a very, very weird travel schedule
1484.66s - 1491.02s |  last year. Because as I said earlier, I went on a vacation, right? I come back up from
1491.02s - 1496.96s |  vacation on September 10th. And then on September 11th through 14th, I'm at my house, I'm
1496.98s - 1501.42s |  like packing, I'm like trying to get ready cause I'm going to be spending the rest of the year in
1501.42s - 1507.50s |  the Philippines. Uh, and then on Friday the 15th and I do this thing in Vermont for like a
1507.50s - 1513.20s |  race, I come back on the 17th and then again 18 through 20 I'm at home and then the 21st of
1513.20s - 1519.20s |  September I fly to the Philippines. That leaves only 7 business days where I am in the
1519.20s - 1525.32s |  US. So that's the schedule. Uh, it's a little bit hectic but it gets more hectic I
1525.34s - 1530.34s |  promise. But first, we wanna ta- I wanna talk about why those 7 days sucks. Because it is
1532.52s - 1538.06s |  too risky to send a phone to Canada, pay Canada import taxes, test and develop an exploit,
1538.06s - 1544.36s |  send the phone back to the US and then pay US import taxes all in 7 days. That is not
1544.36s - 1549.36s |  gonna happen. Well, what if I just send my phone to Canada and keep it there? Well, I I
1550.14s - 1555.14s |  the Philippines has a lot of Xiaomi stores. That's- there's literally a picture of a Xiaomi
1557.48s - 1562.42s |  store that I sent to Ilias when I found my first one. And they were selling Xiaomi 13 Pros
1562.42s - 1568.92s |  for 1,000 US dollars. I can just go to the Philippines and get a new phone, right? Well, the
1568.92s - 1573.66s |  problem is that now we're dealing with 3 different time zones. If I'm in the Philippines, he's
1573.66s - 1578.90s |  in the UK and the Canada consultants are in Eastern Standard Time. Uh, for those of you that
1578.90s - 1583.64s |  don't know, half of the time of the year, the Eastern Standard Time and the Philippines are
1583.64s - 1588.64s |  literally 12 hours- 12 hour difference. And trying to manage those time zones on top of the
1589.92s - 1595.92s |  consultants in Canada being available, that sounds like way too much fucking stress for a
1595.92s - 1602.00s |  theory. On top of that, the biggest issue, the biggest threat to any phone to phone
1602.00s - 1607.00s |  competition are the patches. So, at this point, we had a good idea as to how the patches
1609.20s - 1615.68s |  worked. Uh, first, during the first week of- of every month, a firmware gets updated to the
1615.68s - 1622.04s |  beta channel and in- and as- after that first week in the beta channel, the firmware also gets
1622.04s - 1628.36s |  put in the stable channel. With that firmware update comes a new GetApps update. Every
1628.36s - 1633.36s |  single month there is a new update for GetApps. So, the real schedule now is that after I fly
1633.76s - 1638.76s |  back to the Philippines, no one is in the US to test the exploit- or no one's in North America to
1641.50s - 1674.60s |  test the exploit- if I try sho- alright. No one's in North America. Hey, we're back. Yay!
1679.18s - 1683.52s |  Alright, yeah, like I said, no one's back in- no one's in here in North America to test stuff and
1683.52s - 1692.20s |  we have a new patch coming out sometime supposedly October 9th, right? I really, really
1692.22s - 1698.84s |  want to test this theory though. I really, really do because here's the thing. We think that
1698.84s - 1703.84s |  Canada is a non-launched region, right? Just like with UK- or UK and US, uh, and Japan. If we
1707.08s - 1712.62s |  can group- and this is just a theory we had at the moment. If we could group Canada into that
1712.62s - 1719.32s |  non-launched region and test and make sure that we- that- that theory is true, then let's say
1719.34s - 1725.22s |  that October rolls around and they release their patch, right? All we would need is Ilyas here to
1725.22s - 1730.22s |  test his UK, uh, his exploit in the UK. And if it works, then in theory it should work in the US,
1733.76s - 1740.04s |  in Japan, and in Canada. So, earlier I mentioned that it costs 1,000 US dollars to buy a new
1740.36s - 1745.36s |  phone. Another thing that costs 1,000 US dollars is to go to Canada, literally for a day,
1752.24s - 1759.14s |  literally hang out in the Marriott Hotel at Toronto Airport and test the exploit. And then fly
1759.14s - 1764.14s |  back the next day. So that's what I did. On, let's see, on September 17th I fly back for my race,
1764.52s - 1769.52s |  on September 18th I fly back to Toronto to test the exploit, on September 19th, uh, I fly
1773.60s - 1778.60s |  back home, and then on September 21 I fly to Manila. So many miles. And like I- and after a
1781.60s - 1788.60s |  few hours in Toronto it was confirmed. We did it. We- we confirmed that this was a non-launched
1788.64s - 1793.64s |  region. And so now, if our, if October rolls around, our exploit works in the UK, we should be
1796.38s - 1801.38s |  good. Everything is awesome. Oh, we are, uh, we are so excited for everything to happen and
1803.76s - 1808.76s |  we are going to get our, uh, get our first phone to own win. Right Ilyas? Yeah. So, October
1811.56s - 1818.00s |  rolls around, as expected, GetApps releases their, their update in October. It's literally
1818.04s - 1824.88s |  October 9th. I have it marked down in my calendar and we confirm that the exploit works. We
1824.88s - 1829.48s |  have our books flight for September 20th. I'm flying from the Philippines, he's flying from
1829.48s - 1834.48s |  the UK. We- all this is good to go. We're gonna fucking do this. No, hold on. One week before
1837.56s - 1842.56s |  phone to own, Xiaomi releases an out of band update to GetApps. Which happened to fucking
1843.46s - 1848.46s |  remove the file that we were going to exploit. Specifically, the file was removed from the
1853.44s - 1858.14s |  APK file itself. For those of you that are not Android, uh, that means that the file was
1858.14s - 1863.14s |  removed from the installer file of the app itself. It was no longer there. But thankfully
1865.24s - 1871.68s |  they are, Xiaomi also has shitty programmers. Because they forgot to remove the file from the
1871.70s - 1876.72s |  device if it was already there. So, in theory, assuming that we show up to phone to own and we're
1879.32s - 1885.32s |  one of the first few people to hack the phone. And like I said earlier, uh, Xiaomi, uh, ZDI
1885.32s - 1891.46s |  usually, uh, factory resets the target device per, uh, competition. They usually have
1891.46s - 1897.26s |  multiple devices. So as long as we could hack one of the initial devices before they factory
1897.28s - 1903.62s |  reset it again. Again, it's a dice roll, but there's still a chance. We still follow through. We
1903.62s - 1909.50s |  still decide, okay, this is not that big a deal. Let's fucking do this. So we fly out to Canada.
1909.50s - 1916.44s |  It is now October 20th. Him and I are both on our flights. Literally while I'm on the plane. And
1916.44s - 1922.24s |  the Saturday before phone to own, there is another GetApps update. Now this is the most
1922.26s - 1928.76s |  interesting part because they introduced a new thing in GetApps where they can modify what
1928.76s - 1935.64s |  files are on the device using Google Firebase. Which is really, really cool. And for some
1935.64s - 1941.44s |  reason they pushed our file back to the device. Like if you were moved, if you went in and
1941.44s - 1946.78s |  manually removed the file that we were going to exploit, they just pushed it back for us.
1946.80s - 1951.80s |  That's so fucking convenient. Thank you Xiaomi. Except they added one more thing. So we were
1954.10s - 1961.10s |  going to exploit the activity, join activity, as we, as Ilya said. But they happened to add
1961.10s - 1966.12s |  code to that one activity where if the intent came from any of these four browsers, the uh, Xiaomi
1966.54s - 1971.54s |  browser, uh, the Android HTML viewer, the Android NFC, or Google fucking Chrome, then
1979.58s - 1984.58s |  join activity will not launch. What the fuck Xiaomi? As you all saw in my video earlier, we
1986.92s - 1991.22s |  use specifically Google Chrome. We can't, there's no other browsers on this phone that we can
1991.26s - 1996.26s |  use. Except there is. Because if you set the region to Spain, the Opera browser is enabled
2002.38s - 2007.38s |  on the phone. So technically we had an exploit for the country of Spain specifically. Which
2011.84s - 2018.32s |  is still technically a zero day cause now it's a zero day in Spain. So we told ZDI this, we
2018.32s - 2023.34s |  told them hey, Xiaomi is doing some shitty stuff, but Spain. And ZDI goes, Spain. And we're
2027.54s - 2032.78s |  good to go. Alright, we dodged another bullet. We can now, we can do this. We can hack a
2032.78s - 2037.78s |  Xiaomi 13 Pro. The first day of the competition, Xiaomi starts disabling the ability to
2040.98s - 2045.98s |  install apps from their app store. Now, I don't know if this was a global thing, but I
2049.02s - 2055.46s |  genuinely don't know. I don't talk to many Xiaomi users after this, I don't want to. But the
2055.46s - 2060.46s |  very least, the people in Toronto area that were, that were also going to hack the Xiaomi 13
2062.74s - 2068.10s |  Pro, they corroborated it. They all saw the same issue that we saw. It was a hit or miss
2068.10s - 2073.64s |  whether an application would install. It was like a 20% chance that we could install an
2073.64s - 2080.62s |  application. And they killed my boy. This, this really genuinely hurt. That I could not
2084.26s - 2089.26s |  install Sunfish at all. It was a 0% success rate. So, on that day, there was two teams that
2092.96s - 2099.84s |  were supposed to go and hack the Xiaomi 13 Pro. Uh, it was us at NCC group and it was uh, the
2099.84s - 2104.84s |  awesome people at Team Viettel. Uh, Team Viettel went first, we went second. Uh, we
2105.84s - 2112.58s |  discussed with ZDI what happened and we're like, what the fuck do we do? Oh wait, can we
2112.58s - 2117.58s |  please just install one random app from the app store? And they go, okay. And we did. We
2121.16s - 2127.00s |  did it. Technically that works because we showed ZDI that we had malware up on the app
2127.00s - 2132.70s |  store. ZDI already heard from other contestants around the area that Xiaomi was doing
2132.72s - 2137.76s |  something very funky with their app store and they're like, fine, good enough. So, Team
2137.76s - 2142.76s |  Viettel managed to install Discord and I, we installed no pics color by number and pixel.
2145.50s - 2149.50s |  Yeah, it was that app. I literally just found another random app on the app store and we
2149.50s - 2154.50s |  installed it. And we did it! We got away! Except that's not the end of the story because the
2156.57s - 2161.57s |  next day, Xiaomi releases another update. First, they remove the file that we exploited
2168.71s - 2174.35s |  and now nothing installs from the app store. Period. The day before, those that got 20%
2174.35s - 2180.45s |  success rate on installing something, no. The next day, nothing gets installed. Period.
2180.45s - 2187.45s |  And on top of that, they added code to block Yandex and Opera. You can't make this shit up.
2190.51s - 2195.71s |  So, the rest of the week, it was just failure after failure after failure after failure.
2195.71s - 2200.75s |  Unfortunately, it's pretty obvious why nothing would install. They removed a bunch of other
2200.75s - 2206.97s |  stuff from the app. And, you know, the the lesson of this story is that during Pwn2Own
2206.97s - 2213.65s |  specifically, Xiaomi is the most secure phone in the world. If there is one phone I would have
2213.65s - 2218.59s |  on me during Pwn2Own specifically, especially here at Defcon where nothing bad happens, it's a
2218.59s - 2225.28s |  Xiaomi 13 Pro during Pwn2Own. There is one more side to this story that I think everyone
2225.28s - 2230.24s |  here should check out eventually. Uh, my friend Max Floyd, who was also a competitor last
2230.24s - 2235.42s |  year at Pwn2Own, uh, he says, and I quote, props to the Xiaomi crew who proved you can patch
2235.42s - 2240.80s |  RCE bugs completely remotely in only a few hours and also break your flagship device across
2240.80s - 2245.46s |  the country as long as you're doing it to be a dick. Not because you actually care about fixing
2245.46s - 2251.06s |  things. If you guys want, he actually talked earlier this year at OffensiveCon about his side
2251.06s - 2257.20s |  of the story as well as his exploit. I do recommend you all check it out. It's also a fun time.
2257.20s - 2262.22s |  So, after Pwn2Own, what happened? The browser blocking code got removed for some reason and
2265.42s - 2269.56s |  applications can't install just like normal. Everything works, everything is back to
2269.56s - 2274.56s |  normal. Now, both us and team Vietel never got credit from Xiaomi. Usually with a vendor
2277.06s - 2282.10s |  they're like, hey we want to acknowledge so and so working together with with ZDI to do so
2282.10s - 2287.34s |  and so. No, they said fuck you, we don't we don't want to acknowledge you. So, Zero Day
2287.34s - 2292.64s |  Initiative had to be the one to give us CVE numbers and they said something in their
2292.66s - 2299.00s |  posting that was possibly my favorite quote of this entire time. Xiaomi informed ZDI they
2299.00s - 2305.30s |  would assign a CVE but never followed through. Except they did specifically to team Vietel a
2308.66s - 2313.66s |  few days later. But not us. Where's my fucking CVE, Xiaomi? And that's it. That's the end of
2313.88s - 2318.88s |  our story. Yay. I hope they get the worst vendor response at Pony Awards. Yay. Uh, we're
2328.36s - 2333.30s |  also very introverted so we're going to take questions out there instead of up here if you
2333.30s - 2338.30s |  guys don't mind, alright? Alright, thank you for coming. Yay.