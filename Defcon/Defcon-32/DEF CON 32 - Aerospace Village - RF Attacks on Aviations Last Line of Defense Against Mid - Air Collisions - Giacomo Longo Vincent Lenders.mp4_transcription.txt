{
  "webpage_url": "local:1731742717:a34cd3c0:DEF CON 32 - Aerospace Village - RF Attacks on Aviations Last Line of Defense Against Mid - Air Collisions - Giacomo Longo  Vincent Lenders.mp4",
  "title": "DEF CON 32 - Aerospace Village - RF Attacks on Aviations Last Line of Defense Against Mid - Air Collisions - Giacomo Longo  Vincent Lenders.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.05s - 7.25s | This text was transcribed using whisper model: large-v2

 Hello, everybody, so welcome to our presentation on radio frequency attacks on the aviation's
7.25s - 11.81s |  last line of defense against media collisions.
11.81s - 17.57s |  It will be a talk on the attacks on the traffic collision avoiding system in aviation, the
17.57s - 19.81s |  so-called TCAS.
19.81s - 21.93s |  So my name is Vincent Lenders.
21.93s - 28.53s |  I'm a cybersecurity researcher for more than 20 years focusing on the security of wireless
28.53s - 33.65s |  networks and I'm also the director of the cyber defense campus in Switzerland.
33.65s - 36.53s |  I'll be giving this talk together with Giacomo.
36.53s - 37.53s |  I'm Giacomo.
37.53s - 41.09s |  I'm a third year PhD student from Italy, the University of Genoa.
41.09s - 46.01s |  And I work also on radio security, optionics and maritime systems as well.
46.01s - 49.29s |  But go on, Vincent.
49.29s - 57.97s |  So the air traffic control is a key infrastructure for safe air travel today.
57.97s - 64.69s |  With more than 30 million flights per year worldwide, the air traffic management is now
64.69s - 67.63s |  a very complex thing.
67.63s - 72.93s |  So air traffic control helps organizing and optimizing the air traffic flow.
72.93s - 79.29s |  It provides situational awareness to ground controllers and also support to pilots.
79.29s - 86.93s |  And a very important feature of the air traffic control is to prevent media collisions.
86.93s - 91.81s |  So if we look at air traffic control, there are mainly, there are different procedures
91.81s - 94.93s |  and technologies for this.
94.93s - 101.27s |  And there are mainly three technologies that I would like to introduce and are important
101.27s - 102.73s |  for air traffic control.
102.73s - 104.73s |  They are all three based on MODIS.
104.73s - 112.85s |  MODIS is a data frame format similar to the Internet as IP that allows for wireless communication
112.85s - 115.97s |  between aircraft and ground station.
116.01s - 121.37s |  So the first technology is Secondary Surveillance Radar called SSR.
121.37s - 122.89s |  The second one is ADSP.
122.89s - 128.37s |  And then the third one that will be the main focus of this presentation is the Traffic
128.37s - 129.85s |  Collisions Avoiding System.
129.85s - 132.21s |  So let me start with Secondary Surveillance Radar.
132.21s - 136.05s |  This is the oldest technology.
136.05s - 138.77s |  It's based on ground stations on radar.
138.77s - 146.57s |  So the radars, they interrogate aircraft using this MODIS format, the protocol, on
146.57s - 149.81s |  an uplink, on the 1030 MHz uplink.
149.81s - 158.57s |  And then the aircraft, they respond on a downlink on 1090 MHz, the MODIS downlink.
158.57s - 165.57s |  So these messages are very small in contrast to IP packets, which can be like 1,500 bytes.
165.57s - 170.01s |  This message is very small, 56 or 112 bits.
170.01s - 175.25s |  But they can entail a lot of information such as the velocity, altitude, and the heading
175.25s - 177.01s |  and so on of the aircraft.
177.01s - 179.01s |  So this is how this is working.
179.01s - 181.01s |  This is kind of an old technology.
181.01s - 188.27s |  It's also mandatory and used in all airspaces around the world.
188.27s - 191.73s |  Now we have the Automatic Dependent Surveillance Broadcast.
191.73s - 192.73s |  It's more recent.
192.89s - 197.37s |  It has been mandated in the last years in various airspaces.
197.37s - 200.13s |  And this is also based on MODIS.
200.13s - 206.25s |  But instead of having the radars interrogating the aircraft, we have the aircraft determining
206.25s - 211.33s |  their own position using GNSS, using, for example, GPS.
211.33s - 216.15s |  And when they know their own location, they broadcast this information over MODIS to surrounding
216.15s - 220.35s |  aircraft and also to ground stations.
220.35s - 225.11s |  So this is more precise than secondary radar.
225.11s - 226.11s |  Much more precise.
226.11s - 231.23s |  GPS gives you a few meters accuracy compared to a few hundred meters for secondary radar.
231.23s - 236.19s |  So it's welcome to also decrease the separation between the aircraft because of the higher
236.19s - 238.55s |  precision.
238.55s - 243.63s |  Now we come to the focus of this talk, which is the Traffic Alert and Collision Avoiding
243.63s - 244.95s |  System.
244.95s - 249.73s |  It's a protocol between the aircraft.
250.11s - 254.29s |  So basically, it's a distance ranging protocol based on request replies.
254.29s - 265.45s |  Also on the 1,030 megahertz uplink and on the 1,090 megahertz downlink, the responses.
265.45s - 272.25s |  So there are a few interrogations and replies that happen to basically determine if a collision
272.25s - 275.25s |  is going on and how to avoid this collision.
275.25s - 283.73s |  This is a very important system because it's the last line of defense against mid-air collisions.
283.73s - 289.73s |  If the other systems have failed, like secondary radar or ADSP, and it was not possible to
289.73s - 297.11s |  keep the separation, this one kicks in and will make sure that there are no collisions.
297.11s - 298.37s |  So why is this important?
298.37s - 300.93s |  Well, it's kind of obvious.
300.93s - 302.33s |  It's all about human life.
302.33s - 309.09s |  If there is an aircraft collision, this will lead to a catastrophic event.
309.09s - 316.25s |  We had in the 70s, for example, crashes going on also in the 80s with many deaths.
316.25s - 323.17s |  And this is why in 1987, there was this introduction of the TCAS system.
323.17s - 326.01s |  And it's now mandatory in many airspaces.
326.01s - 331.39s |  It depends on the size of the aircraft and also the number of passengers you have.
331.45s - 336.47s |  But then if you are an aircraft that has a certain size and a certain number of passengers,
336.47s - 343.45s |  you will be required to have a TCAS system in the aircraft to avoid collisions.
343.45s - 347.47s |  Now TCAS has three main core functions.
347.47s - 348.47s |  One is surveillance.
348.47s - 350.37s |  The other one is traffic advisory.
350.37s - 355.71s |  And in the most recent version of the traffic collision avoiding system, you have also resolution
355.71s - 356.71s |  advisories.
356.71s - 360.43s |  I will go into the detail of these three functions.
360.47s - 367.07s |  So here on the picture on the right, we have a typical TCAS display showing the surrounding
367.07s - 368.07s |  aircraft.
368.07s - 370.87s |  So this is the surveillance information that you have.
370.87s - 376.79s |  The aircraft periodically announce themselves and you will see this on this display.
376.79s - 383.23s |  Now when an aircraft is found, there will be interrogations to get the range, for example,
383.23s - 386.87s |  to get the altitude and the capabilities of the surrounding aircraft.
386.87s - 390.51s |  This is all information that will then appear on this display.
390.51s - 396.91s |  And if the system realized there may be a collision going on that might happen, then
396.91s - 404.51s |  there will be some traffic advisory, some TA, that is sent to the cockpit as an alarm,
404.51s - 407.97s |  alarming the pilot that there may be a collision.
407.97s - 413.83s |  And if this persists after some point, then there will be a resolution advisory.
413.83s - 421.63s |  And this is basically to indicate and give a command to the pilot to basically do something.
421.63s - 427.19s |  And in TCAS 2, there are two options basically to resolve the conflict.
427.19s - 431.91s |  TCAS 2 foresees that one aircraft should climb and the other one should descend.
431.91s - 435.47s |  And this should hopefully then prevent the collision.
435.47s - 440.79s |  So this is the key function of TCAS 2.
440.79s - 444.51s |  Now let's talk about, this talk is about the security of TCAS.
444.51s - 450.19s |  And obviously we're not the first to think about this problem, but the situation is somehow
450.19s - 456.71s |  worrying and yet to our perspective also a little bit unconvincing so far.
456.71s - 461.27s |  So there has been some warnings, there has been some risk assessments.
461.27s - 468.47s |  Many of them, publications analyzing the risks, the cyber security risks and the risks of
468.47s - 469.99s |  attacks against TCAS.
469.99s - 477.87s |  Here I'm mentioning a couple of those papers, one we have written ourselves in the past.
477.87s - 478.87s |  So these are warning signs.
478.87s - 484.15s |  There are also people, and including ourselves, that have done some simulations to basically
484.15s - 491.39s |  to better understand how pilots would react to TCAS attacks and also what are the conditions
491.39s - 497.19s |  under which TCAS attacks may work and what are the limitation of these attacks.
497.19s - 503.19s |  For example, we did some work also inviting pilots in a simulator and exposed them to
503.19s - 506.59s |  attacks and showed how they reacted to those attacks.
506.59s - 514.31s |  And then we had also some work to better understand in simulations the theoretical limitations
514.31s - 520.19s |  of these attacks and what are the conditions that are favorable to an attacker.
520.19s - 522.91s |  But these are all simulations.
523.51s - 531.15s |  More recently there has been an attempt to analyze experimentally the impact of attacks
531.15s - 534.67s |  on TCAS and these are the two papers from research.
534.67s - 541.99s |  One is a PhD student working on it, building a test bed with TCAS equipment to analyze
541.99s - 545.51s |  how the systems would react.
545.51s - 551.83s |  But our motivation for this work that Giacomo will be presenting is that despite this prior
551.83s - 558.19s |  art there are still no convincing experimental and scientific evidence that these TCAS attacks
558.19s - 559.19s |  may work.
559.19s - 566.23s |  Actually, they may trigger, for example, resolution advisories using commercial and certified
566.23s - 567.43s |  hardware.
567.43s - 574.07s |  So there was also so far no established methodology how to test attacks and to see how systems
574.07s - 576.67s |  will react in a scientific way.
576.67s - 581.19s |  And if these attacks are feasible, we would like to also better understand what are the
581.27s - 583.91s |  capabilities needed for an actor.
583.91s - 589.87s |  So we would like to understand what are the requirements to actually need it to be able
589.87s - 591.59s |  to launch such attacks.
591.59s - 603.30s |  So this was the basic motivation of our work that now Giacomo will be presenting next.
603.30s - 608.22s |  So I needed to descend because, you know, I needed to climb under Vincent.
608.22s - 612.18s |  So yeah, OK, so now the fun stuff begins.
612.18s - 614.06s |  So I start by addressing your point.
614.06s - 616.58s |  So it's a protocol from 1987.
616.58s - 618.94s |  So it's collaborative.
618.94s - 619.94s |  It's in clear.
619.94s - 622.02s |  There is no encryption, no PKI, no whatever.
622.02s - 623.02s |  So it's insecure.
623.02s - 624.02s |  We already know that.
624.02s - 625.54s |  Let's skip over that.
625.54s - 629.26s |  So the first attack that you're going to see, it's inducing a TA.
629.26s - 630.26s |  It's a very simple thing.
630.26s - 635.06s |  You just need to implement the 1.8 thousand pages of standards required to do so.
635.06s - 640.02s |  And you can find all of these standards in these three key bullet points, which means
640.02s - 642.38s |  in order to get a TA, you need to be an aircraft.
642.38s - 644.02s |  So you need to broadcast your presence.
644.02s - 647.70s |  You need to reply to interrogation properly to say that you are at the correct altitude
647.70s - 652.34s |  and in the correct position, which is our third point, being in the correct position.
652.34s - 656.54s |  So correct range, correct altitude with a consistent identity.
656.54s - 661.90s |  The second attack that you will see is about triggering a resolution advisory.
661.90s - 666.14s |  So a resolution advisory happens after a traffic advisory.
666.14s - 669.62s |  So you first need the first one and then you start a negotiation.
669.62s - 672.94s |  So you tell the other aircraft, I perceive you as dangerous.
672.94s - 674.18s |  Please do something.
674.18s - 679.94s |  And how you can choose, well, there is one conflict resolution algorithms that is used,
679.94s - 682.82s |  which is the aircraft with the lowest address always wins.
682.82s - 687.92s |  So you as an attacker can find out the address of the other aircraft and always pick whenever
687.92s - 691.50s |  the other aircraft is going to climb or descend.
691.50s - 696.42s |  Then the first attack is instead not involving an aircraft, but instead a ground station.
696.42s - 702.50s |  So how TICAS works is basically it picks up a size that it will protect.
702.50s - 707.22s |  So how much time in the future it will look depending on the altitude, on the currently
707.22s - 708.22s |  selected altitude.
708.22s - 710.90s |  This is called sensitivity and it goes in levels.
710.90s - 713.82s |  So the higher you are, the bigger this area is.
713.82s - 719.78s |  Well, if you land in Las Vegas where you have two runways close together, you might actually
719.78s - 723.54s |  end up in a situation when you point towards another aircraft.
723.54s - 730.18s |  So what they did was they allowed ground station to tell the aircraft to reduce their sensitivity.
730.18s - 731.66s |  Well, guess what?
731.66s - 736.62s |  You can send this command to any aircraft in the air to disable their TICAS with no
736.62s - 737.62s |  authentication.
737.62s - 738.62s |  So this is fun.
738.62s - 741.14s |  You can disable the anti-collision of whatever you want.
741.14s - 744.06s |  Fun in my understanding of the word, by the way.
744.06s - 747.36s |  So why did everyone fail?
747.36s - 751.78s |  So an interrogation cycle, so one interaction of the protocols goes like so.
751.78s - 754.54s |  You send something and then the other aircraft replies.
754.54s - 755.90s |  So this is very standard.
755.90s - 763.30s |  But the range that is estimated, so the relative position is done by taking this time of flight.
763.30s - 769.94s |  So the time it took to respond and subtracting 128 microseconds, that's 10 to the power of
769.94s - 771.74s |  minus six.
771.74s - 774.02s |  It's a comically short time.
774.02s - 778.78s |  Your scheduler of your operating system is running 1000 times slower than this.
778.78s - 785.86s |  So this has acted for a long time as a security feature because let's say low skilled attackers
785.86s - 790.70s |  could not manage to have this kind of latency to perform all of the steps of the protocol.
790.70s - 794.46s |  Actually, I'm lying to you, but I'm telling you so it doesn't count.
794.46s - 796.34s |  Actually, it's not 128.
796.34s - 799.50s |  It's a little bit less because it's not with respect to the start of the packet.
799.50s - 801.02s |  It's a little bit later on.
801.02s - 805.22s |  So you need to receive, understand what has been said, send the correct thing out at the
805.22s - 807.40s |  current time and reply.
807.40s - 810.82s |  Not only that, this happens over two different frequency channels.
810.82s - 815.54s |  So you need to handle coherency and you need to be always in the same spot because if you
815.54s - 820.70s |  need to do six interactions in a row to get acquired, you always need to reply consistently
820.70s - 823.06s |  and at the same time.
823.06s - 824.98s |  So it's a difficult thing.
824.98s - 829.82s |  So the first problem that we had is that a ticket system is not exactly a docker container.
829.82s - 834.14s |  You can just put an environment variable telling him where the database is and it runs.
834.14s - 836.66s |  So we had to build a test bed beforehand.
836.66s - 839.20s |  So this one is our architecture.
839.20s - 843.66s |  So the first ingredient is, of course, a tickets unit, which is what you're testing.
843.90s - 848.70s |  You also need to connect it to a control panel and a traffic display unit, which what we
848.70s - 852.18s |  sent was showing to you some antennas.
852.18s - 857.86s |  And not only that, an headset, because the traffic alerts are going to come out of it.
857.86s - 860.94s |  Then you put an attacker into there.
860.94s - 864.22s |  So two antennas, an SDR, a computer driving it.
864.22s - 868.38s |  And because we are scientists, you also need to put something to measure what is going
868.38s - 869.38s |  on.
869.38s - 872.34s |  So we have a camera that takes a look at the traffic display.
872.34s - 876.46s |  You have an avionic bus simulator that makes the tickets believe that it's flying because
876.46s - 878.22s |  otherwise it will not transmit.
878.22s - 884.24s |  And then since tampering with the anti-collision system of aircraft is, let's say, unpolite,
884.24s - 888.42s |  you need to put everything inside of a cage so that you don't get into jail while doing
888.42s - 889.42s |  so.
889.42s - 893.82s |  Well, I was out because they are from the Ministry of Defense, but I wouldn't risk anything.
893.82s - 896.24s |  So this is, as you can see, our test bed.
896.24s - 901.14s |  I'm not very good at cable management, as you can see, but it was this clusterfuck of
901.14s - 903.14s |  cables, basically.
903.14s - 905.18s |  This is what you can get out of this.
905.18s - 909.86s |  And also, our data gathering process was this very sophisticated setup with a webcam placed
909.86s - 913.92s |  on a monitor that acted as a stand.
913.92s - 915.58s |  So we got this.
915.58s - 917.18s |  So as you can see, this is OpenCV.
917.18s - 921.94s |  So this can be turned as a dual-use talk about machine learning and pattern recognition very
921.94s - 923.14s |  easily.
923.14s - 927.26s |  So we were recognizing where the aircraft was tracked and what distance was commanded
927.26s - 928.58s |  and everything else.
928.58s - 930.26s |  So technicalities.
930.26s - 935.46s |  And speaking about technicalities, so it's trivial to send some radio protocol, at least
935.46s - 938.30s |  people have said to us many times.
938.30s - 941.32s |  So let's talk about what you need to do, actually.
941.32s - 943.82s |  So you have two TCAS that interact.
943.82s - 948.82s |  So they send something on one frequency at 2 megabit per second, and they respond on
948.82s - 951.82s |  another frequency at 1 megabit per second.
951.82s - 957.46s |  So when we started this, basically three of these interactions were not available in real
957.46s - 958.46s |  time.
958.66s - 962.98s |  Two megabits is a lot for a software-defined radio implementation.
962.98s - 966.26s |  And there were no implementations doing any of these protocols.
966.26s - 972.86s |  So the first thing we needed to do was, well, first, we tested that our testbed worked.
972.86s - 976.74s |  Because if you need to attack something, you need to understand if you mounted it correctly.
976.74s - 978.42s |  Yeah, it works.
978.42s - 983.30s |  Then we started by building a decoder that, with respect, for instance, of your dump 1090
983.30s - 987.22s |  or whatever, it could run very, very fast.
988.10s - 992.98s |  We brought a transmit chain, and we got it certified by a ramp tester so that we got
992.98s - 995.06s |  our stamp.
995.06s - 998.90s |  And now you might be wondering, so you have a ramp tester, a device that does everything,
998.90s - 1001.06s |  and you're building that yourself.
1001.06s - 1004.92s |  Well, yes, you need $400,000 to buy one.
1004.92s - 1010.02s |  And also, the more difficult part of the protocol are just not implemented into there, because
1010.02s - 1011.02s |  you don't need it.
1011.02s - 1014.94s |  So you can just send dead beef to an aircraft, but you will not attack it, I guarantee to
1014.94s - 1015.94s |  you.
1016.82s - 1018.18s |  There was also this other thing.
1018.18s - 1022.82s |  So can't you just act time and reply random shit all over the airspace?
1022.82s - 1027.98s |  Well, you can't, because aircraft transmit things at random in order to not pollute the
1027.98s - 1028.98s |  airspace.
1028.98s - 1033.66s |  And also, you need to have silence around a response to get the other receiver to pick
1033.66s - 1034.66s |  it up.
1034.66s - 1036.80s |  So you cannot just float the air.
1036.80s - 1038.46s |  So we explored two ideas.
1038.46s - 1040.02s |  The first one was doing this in hardware.
1040.02s - 1044.74s |  It's a lot less expensive otherwise, but you need smart people to do it, and I'm not.
1044.74s - 1049.22s |  So we started with software-defined radio, because you can just buy something.
1049.22s - 1055.30s |  You can put some random PhD guy, and it's going also to get cheaper over time.
1055.30s - 1060.62s |  And so the idea was, can we do this with less than $10,000?
1060.62s - 1066.56s |  Of course, you need a place to do this and do all of the weird stuff, like tracking,
1066.56s - 1069.82s |  putting down, I don't know, Taylor Swift jet or something.
1069.82s - 1074.10s |  So the first thing we tried was trying with Linux Realtime.
1074.46s - 1077.86s |  And we got 190 microseconds just to reply to a single pulse.
1077.86s - 1079.34s |  So not enough.
1079.34s - 1081.50s |  So we needed to do a bunch of stuff.
1081.50s - 1086.02s |  So you take a workstation, you remove power saving, because who cares about that?
1086.02s - 1091.30s |  You remove hyper-threading, you disable many of the cores, you remove the GPU, sorry for
1091.30s - 1093.74s |  all of the machine learners in the audience.
1093.74s - 1097.62s |  And then, since we are at a security conference, you disable all of the security protections,
1097.62s - 1100.42s |  because those are slow, all of the mitigations and whatever.
1100.42s - 1102.70s |  We don't care.
1102.70s - 1105.98s |  Then you build basically your own Linux.
1105.98s - 1111.10s |  You pin the OS on one core, you pin the application on some other cores, and you remove all of
1111.10s - 1113.98s |  the power saving features, so you run busy polling.
1113.98s - 1118.62s |  And then you compile everything as if it was your Gen 2 custom Linux distribution.
1118.62s - 1124.06s |  So extreme flags, optimized for architecture, profile guided, all the jets.
1124.06s - 1127.90s |  And then, since you are a software engineer, you overcomplicate things.
1127.90s - 1130.70s |  So where do you start to overcomplicate things?
1130.70s - 1135.54s |  So you start from the reception, because you need to find out if the victim aircraft
1135.54s - 1136.86s |  has interrogated you.
1136.86s - 1141.54s |  The way is, you need to build some kind of intelligent preamble detector, so going back
1141.54s - 1146.06s |  and forth through your transforms, and then you bring up, and you understand why you studied
1146.06s - 1151.70s |  mathematics, so you bring up all of this random shit about symmetries in the Furia domain
1151.70s - 1154.18s |  and back and forth transforms.
1154.18s - 1160.30s |  Then you actually do not need to receive all of the bits that are being sent to you.
1160.30s - 1164.18s |  At one point, you just decode enough bits, and you understand what is being asked you,
1164.18s - 1168.70s |  so you build a finite state machine, and you start replying earlier, so you reduce latency.
1168.70s - 1171.14s |  I need those nanoseconds.
1171.14s - 1175.50s |  Then of course, everything stays into a cache, because you don't have the time to modulate
1175.50s - 1176.58s |  anything.
1176.58s - 1179.94s |  So you just need a lookup table and save everything into RAM.
1179.94s - 1181.74s |  Then you need to get good at programming.
1181.74s - 1186.98s |  You need to read all of that Intel manual of 1.3 thousand pages, also that one, full
1186.98s - 1190.98s |  of VML, PD, or other single instruction, multiple data instruction.
1190.98s - 1196.66s |  You remove any mutex, because those take 100 nanoseconds to run, and it's unacceptable.
1196.66s - 1202.44s |  You remove all memory allocations, and you rewrite the allocator of your program in Rust,
1202.44s - 1204.02s |  because why not?
1204.02s - 1208.02s |  And then you add some threads into the mix to overcomplicate things even more.
1208.02s - 1214.22s |  So now, after two months, you ended up with 40 microseconds more than you started with.
1214.22s - 1215.30s |  Wow.
1215.30s - 1219.12s |  So what kind of results you can get from that?
1219.12s - 1220.34s |  You can trigger RTA.
1220.34s - 1221.42s |  Oh, wow.
1221.42s - 1222.42s |  It works.
1222.42s - 1226.32s |  So as you can see, you can put an aircraft directly on the nose at the same altitude,
1226.32s - 1229.70s |  so this will be pretty spooky if I were a pilot.
1229.70s - 1234.10s |  And you can also get an array, so you can distinguish it because it's red instead of
1234.10s - 1235.10s |  yellow.
1235.10s - 1240.02s |  I'd like to point out that even though it's written no GPS position, this is in no way
1240.02s - 1244.06s |  related to GPS spoofing attacks or whatever.
1244.10s - 1247.10s |  So TCAS doesn't need GPS.
1247.10s - 1252.10s |  And then for the TCAS deactivation, what you will see on the aircraft is that it starts
1252.10s - 1259.34s |  in resolution advisory mode, then something happens, and it turns back to traffic advisory
1259.34s - 1260.34s |  only mode.
1260.34s - 1267.46s |  And this happens, you cannot reset it back to where it started unless you unplug and
1267.46s - 1271.50s |  replug the TCAS unit, which is very uncomfortable to do.
1271.50s - 1274.26s |  You can't get into an avionics bay while you're flying.
1274.26s - 1277.42s |  And we wanted to verify it, so how can you do that?
1277.42s - 1281.06s |  You fake being a tower, and you ask the aircraft, can you please tell me the sensitivity level
1281.06s - 1282.34s |  you're operating at?
1282.34s - 1286.02s |  And it's going to tell you that it decreased, so it works.
1286.02s - 1292.78s |  Then we tried to induce a collision avoidance maneuver for 30 minutes, and it worked.
1292.78s - 1297.34s |  Then the TCAS unit shut off because it didn't expect flying information with someone directly
1297.34s - 1299.98s |  in the front of your nose for 30 minutes.
1299.98s - 1301.70s |  So it's reliable.
1301.70s - 1305.86s |  And the thing that we got is that the amount of money that you require is actually quite
1305.86s - 1307.06s |  close to our target.
1307.06s - 1311.74s |  You also need one Italian PhD student that eats canned vegetables for a while, but you
1311.74s - 1313.94s |  can manage.
1313.94s - 1314.94s |  It's important.
1314.94s - 1316.66s |  Vegetables are important.
1316.66s - 1320.42s |  So about the sensitivity level attack, I can just tell you that it works.
1320.42s - 1322.22s |  Always, I don't have any graph to show you.
1322.22s - 1325.42s |  It's just going to be aligned to works.
1325.58s - 1331.50s |  Instead, our system managed to reply within 0.2 microseconds, which for something built
1331.50s - 1334.62s |  in software is smart.
1334.62s - 1340.22s |  And also the jitter, so the delay in between two different interrogations stayed within
1340.22s - 1341.86s |  this limit set by the standard.
1341.86s - 1346.06s |  Of course, it's a lot worse than real hardware, but it's very good.
1346.06s - 1350.86s |  And so this is the most important slide, which is the success rate.
1350.86s - 1356.22s |  So the level of success at one point goes to around 98%.
1356.22s - 1357.94s |  So you know that we are not bullshitting you.
1357.94s - 1361.86s |  If you see our NERF talk where they get 100%, they're lying.
1361.86s - 1363.38s |  So you know that we aren't.
1363.38s - 1367.58s |  And so we get this advantage of around 30 plus microseconds.
1367.58s - 1372.14s |  And why would you care to reply before the 128 microseconds?
1372.14s - 1376.26s |  Well, if you are an attacker and you are on the ground and you want to place an aircraft
1376.26s - 1381.30s |  at distance zero, so directly on the nose of another aircraft, you need to reply a little
1381.30s - 1385.18s |  bit earlier and let the speed of light do its work.
1385.18s - 1387.34s |  So why do you want to do that?
1387.34s - 1390.90s |  Because some distances automatically trigger a TA or an array.
1390.90s - 1396.10s |  And with the canned vegetables from before, you can manage to do this right now with hardware
1396.10s - 1399.38s |  that you can buy at a distance of 4.2 kilometers.
1399.38s - 1402.70s |  So if you are within that distance, you can do that.
1402.70s - 1409.10s |  If you buy your own quantum computer, the magical unicorn world thingy that does it
1409.10s - 1414.42s |  in zero nanoseconds, you can put this up to this theoretical limit.
1414.42s - 1419.06s |  And so we wanted also to find out if you can do that to an airliner because that's what
1419.06s - 1422.18s |  everyone wants to perform, chaos.
1422.18s - 1428.26s |  And so you can do that for an airliner flying at 950 kilometers per hour with a probability
1428.26s - 1432.58s |  of 80%, which is worrying.
1432.58s - 1434.22s |  So let's talk about the limitations.
1434.22s - 1435.42s |  Let's be straightforward.
1435.42s - 1441.62s |  So you just need to be heard power-wise, but you need to buy a power amplifier, which we
1441.62s - 1445.54s |  didn't have, but it's RF, so I guess it works.
1445.54s - 1449.42s |  And also you need a way to find out if you want to appear in a very precise position,
1449.42s - 1451.38s |  the attitude of the victim you're attacking.
1451.38s - 1455.70s |  But as you may know, you can listen for ADS-B and understand this position.
1455.70s - 1456.70s |  Done.
1456.70s - 1457.70s |  I conclude.
1457.70s - 1460.54s |  So we now know what kind of hardware we need.
1460.54s - 1463.22s |  We know what kind of things you need to buy.
1463.22s - 1465.46s |  We built a testbed for this.
1465.46s - 1471.70s |  And we succeeded basically because we recognized that general SDRs framework are not enough
1471.70s - 1474.22s |  latency-wise to perform this kind of stuff.
1474.22s - 1478.30s |  Also like Dump1090 is focused on decoding very, very well everything that is coming
1478.30s - 1480.54s |  up, but not very, very fast.
1480.54s - 1486.02s |  And also we focused on trivial technicalities like building our own memory allocator and
1486.02s - 1487.58s |  whatnot.
1487.62s - 1490.86s |  So actually the TARA is very difficult to pull off.
1490.86s - 1494.34s |  Instead, the RADOS is extremely dangerous.
1494.34s - 1497.78s |  And also we have a problem because the workstation will get faster over time.
1497.78s - 1501.42s |  So this capability will increase.
1501.42s - 1508.58s |  So it's a systemic problem about a very delicate topic.
1508.58s - 1513.54s |  So we had to disclose this in a very complex environment.
1513.54s - 1520.34s |  We have disclosed it basically to manufacturers and a bunch of authorities, both national
1520.34s - 1523.74s |  and international, that have acknowledged.
1523.74s - 1527.22s |  So manufacturer basically said, yeah, it's a problem in the standard, yeah, we're going
1527.22s - 1529.10s |  to do something about it.
1529.10s - 1537.34s |  And as it stands at the moment, there is no way to fix any of these attacks.
1537.34s - 1545.58s |  But after some kind of work, now we know that something has to be done and something
1545.58s - 1551.30s |  will happen because they are already working on new iterations of collision avoidance standards.
1551.30s - 1555.86s |  Also it's a field where it's very important, the safety of everything.
1555.86s - 1558.42s |  So it's going to happen somehow.
1558.42s - 1564.02s |  So if you want to know more, we have a scientific paper coming up using security, so join us
1564.02s - 1565.02s |  and fill in.
1565.02s - 1569.38s |  If you can't wait, you can just ask me and I will hand over to you a PDF.
1569.38s - 1573.10s |  If you are not smart on a USB key, otherwise via email.
1573.10s - 1575.58s |  So that was it.
1575.58s - 1576.30s |  Hope you liked it.