**Introduction to Kibana Bug Bounty**

- Speaker: Mikhail Shcherbakov
- Focus on remote code execution vulnerabilities due to time constraints
- Background: Finishing PhD at KTH University Stockholm; research interests in static and dynamic code analysis, and language-based security
- Experience in bug bounty programs: Microsoft, GitHub, open source projects, Elastic

**Kibana Overview**

- Part of the ILCA stack with Elasticsearch and Logstash
- Functions: data visualization and real-time analysis
- Open source project, written in TypeScript
- Bug bounty program: rewards for critical vulnerabilities between $3,000 and $7,000

**Elastic Bug Bounty Program Experience**

- Acknowledgment to Elastic Security team for their management
- Story of discovering vulnerabilities post-DEFCON in synthetic monitoring feature
- Feature allows website monitoring and report generation

**Exploiting Synthetic Monitoring Feature**

- Feature includes a script editor
- Initial attempt to run a reverse shell unsuccessful due to require restrictions
- Bypass method: using load method in Node.js process main module
- Demonstrated successful execution of a reverse shell in a demo

**Container Isolation Challenges**

- Exploitation contained within isolated containers in Kubernetes cluster
- Attempts to affect other clients or escape the container unsuccessful
- Discovered containers running in private Kubernetes clusters with natural capabilities

**ARP Spoofing Attack**

- Exploited ARP spoofing in Kubernetes to hijack DNS requests
- Demonstrated attack using Microsoft Azure's default Kubernetes
- Resulted in a successful DNS spoofing attack, rewarded with $4,000 bounty

**Prototype Pollution Vulnerabilities**

- Research focus on server-side prototype pollution vulnerabilities
- Developed toolchain to detect vulnerabilities using CodeQL
- Encountered 77 cases in Kibana, with 44 server-side cases
- Exploited vulnerabilities in config parser and Elastic Cloud Enterprise

**Prototype Pollution Exploitation**

- Prototype pollution in the config parser led to application crashes
- Explored potential for remote code execution using require gadget
- Node.js team fixed require gadget but gHunters tool detected it again

**Advanced Techniques and Conclusion**

- Explored fixed prototype pollution cases and potential to combine code snippets for exploitation
- Highlighted importance of persistence in finding remote code execution opportunities
- Encouraged further reading of research papers and blog posts for more insights