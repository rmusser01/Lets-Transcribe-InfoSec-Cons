{
  "webpage_url": "https://www.youtube.com/watch?v=120iDYzscD4",
  "title": "DEF CON 32 -  Efficient Bug Bounty Automation Techniques  - Gunnar Andrews",
  "description": "If you're a bug bounty hunter, time can literally mean money. For this reason, automation can be a vital part of how you hunt. But automation has limits. Whether this is hardware limits, target rate limits, WAFs & bot detection, and the list goes on. Successful automation techniques should EFFICIENTLY enhance your hunting. Whether it is being first to a fresh target, or finding targets other hunters haven't. We will go over some techniques and tools to get ahead of the pack, without wasting all your time and money.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1327,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.11s - 5.47s | This text was transcribed using whisper model: large-v2

 So, this is the, uh, efficient bug bounty automation techniques talk, if that isn't
5.47s - 9.35s |  the talk you're here for, you know.
9.35s - 14.23s |  So my name is Gunner Andrews, I'm an AppSec engineer by day, bug bounty hunter by night.
14.23s - 18.35s |  Um, I do a little bit of content creation on YouTube and Twitch and some other stuff
18.35s - 20.15s |  around basically the same thing.
20.15s - 24.41s |  Bug bounty hunting, recon, um, tool dev, that kind of thing.
24.41s - 28.51s |  There's three main goals for the talk that I want to go over, so three basically different
28.51s - 29.51s |  parts.
29.51s - 34.67s |  Um, the first one is the idea of resources versus findings in bug bounty automation.
34.67s - 40.09s |  You can get a lot of data really fast, um, and have zero findings, which means $0.
40.09s - 44.75s |  So we're going to talk about getting from zero to a hundred with as little cost as possible
44.75s - 49.55s |  and scaling up to actually having results that can get you bugs, which means hopefully
49.55s - 50.55s |  money.
50.55s - 52.49s |  The second part is automating collection.
52.49s - 55.99s |  So I'm going to talk about what I personally collect and how I collect it efficiently.
56.55s - 59.83s |  Um, and then the little last portion at the end is going to be kind of a portion on data
59.83s - 64.67s |  engineering for bug bounty automation, uh, to hopefully encourage some people to move
64.67s - 70.27s |  away from flat text files as much as, uh, bug bounty hunters seem to love those.
70.27s - 74.67s |  So I want to start the talk with this slide because I think it's a weird take for some
74.67s - 75.67s |  automationists.
75.67s - 82.51s |  Um, I basically don't do any brute forcing at all until I have to, uh, I monitor millions
82.51s - 84.55s |  of domains every day.
84.59s - 87.67s |  I found all of them without brute forcing anything.
87.67s - 90.95s |  I monitor a ton of end points, JavaScript files, all that kind of stuff, just like everybody
90.95s - 91.95s |  else does.
91.95s - 93.79s |  I didn't brute force for any of those.
93.79s - 98.61s |  I only brute force something when I absolutely have to, because brute forcing is guessing.
98.61s - 103.45s |  And nowadays there's just a lot of other techniques to cover before you start guessing.
103.45s - 106.67s |  When you're taking a test, the last thing you do is guess.
106.67s - 109.05s |  When you're totally screwed, then you guess.
109.05s - 114.79s |  So I'm going over all this stuff before you're screwed and you have to guess.
114.79s - 119.51s |  So I'm going to start at the beginning with Apex domains and kind of a warning about Apex
119.51s - 120.51s |  domains.
120.51s - 126.03s |  Because Apex domains are very important in bug bounty, especially for bug bounty automationists.
126.03s - 130.75s |  Seeing that wild card, star dot anything dot com means that we can hunt on everything.
130.75s - 134.11s |  There's a lot of bug bounty programs that say hunt all of our stuff no matter what.
134.11s - 139.27s |  Um, just anything that Meta owns or anything that Yahoo owns or anything like that.
139.27s - 144.07s |  So for some programs, the place to start is Apex domains, finding all of the root domains
144.15s - 147.95s |  to then put into automation, finding all of the IP space they own, that kind of stuff.
147.95s - 153.31s |  But specifically for Apex domains, these are some of the sources.
153.31s - 156.51s |  It's not the complete picture, especially if they're cloud friendly, and we'll get into
156.51s - 158.31s |  the cloud stuff later.
158.31s - 162.99s |  There is reverse whizzing, there's ASN, like checking their ASNs against certain ASN sources.
162.99s - 165.95s |  But the thing at the bottom, I'm not going to hit on this for a whole bunch, because
165.95s - 170.51s |  I personally don't like automating this a ton.
170.51s - 171.55s |  I do a little bit of it.
171.55s - 176.91s |  I write some scripts to run it, but then I manually look at the output, because I found,
176.91s - 181.67s |  and I have personally been burned multiple times on very big bugs, where I turn in a
181.67s - 187.47s |  huge bug, get really excited, and then the domain isn't in scope, right?
187.47s - 190.63s |  Maybe they shared some kind of registrar, they did some kind of thing and it happened
190.63s - 194.43s |  to slip into my automation because I automated it, and I got burned.
194.43s - 199.11s |  So these are some of the sources, I put them up there anyway, but as a warning, I personally
199.11s - 201.51s |  don't start at Apex domains for that reason.
201.51s - 207.77s |  Because it's hard to automatically 100% confirm that it's in scope.
207.77s - 213.19s |  So if you are interested in looking for Apex domains, though, automate it, and we'll talk
213.19s - 216.83s |  about some of this later, but these are some of the things I do.
216.83s - 222.23s |  So nowadays, it is very easy for everybody in this room to get a hold of enough hardware
222.23s - 225.99s |  to scan the entire IPv4 IP address space.
225.99s - 228.31s |  You don't need an ASN.
228.31s - 234.07s |  Some companies do run on IPv6 only, but it's very few, to be really honest.
234.07s - 236.93s |  I built some of my own tooling for this.
236.93s - 240.03s |  If you look on my GitHub, one of the tools is called Caduceus.
240.03s - 244.83s |  I like naming all my tools after mythological weapons, you'll see.
244.83s - 245.83s |  But there are some ports there.
245.83s - 250.19s |  I always do port 443, but there are some other ports that will have certificates on them
250.19s - 251.75s |  that are used.
251.75s - 256.99s |  Basically what Caduceus does is it does half the TLS handshake, enough to get the certificate,
256.99s - 260.75s |  and then it pulls any domain names out of the common name and subject alternative name
260.75s - 267.75s |  fields and then gives the output with what IP address it found it from and what domains.
267.75s - 273.11s |  So you can use this, scan the entire internet, and I end up with a whole list of domain names
273.11s - 275.27s |  and what IP address I got them from.
275.27s - 278.49s |  And we'll talk about this a little bit more later in depth, because this obviously works
278.49s - 280.39s |  for subdomains, too.
280.39s - 282.75s |  But the other half of it is reverse DNS lookup.
282.75s - 286.87s |  So I do reverse DNS, which is searching for PTR records, so it basically does the opposite
286.87s - 287.87s |  of DNS, right?
287.87s - 291.75s |  So instead of what IP address does this DNS name resolve to, it's the other way around.
291.75s - 294.03s |  You put an IP address and it gives you DNS names.
294.03s - 295.75s |  I do that using some of those tools.
295.75s - 298.43s |  I prefer ZDNS, but there's a bunch of good tools.
298.43s - 302.21s |  I do that across the whole IPv4 space as well.
302.21s - 305.91s |  And then those scans can also give you Apex domains.
305.91s - 308.79s |  We'll talk about it, because it can give you subdomains, too.
308.79s - 314.11s |  But for Apex domains, I've found a lot of Apex domains just looking around the internet.
314.11s - 318.27s |  You'll find something that says Yahoo on it that you've never seen before, and then
318.27s - 321.39s |  you can go back and check who it's registered to and all that kind of stuff and confirm
321.39s - 325.03s |  that it does in fact belong to Yahoo or whatever company it is, right?
325.03s - 329.83s |  The little tip at the bottom, we can mention later, too, but if you are scanning the IPv4
329.83s - 333.27s |  space, a big chunk of that is cloud providers.
333.27s - 340.55s |  If you want to take the time, scanning a cloud provider from the cloud provider is disgustingly
340.55s - 343.41s |  fast compared to everything else.
343.41s - 345.97s |  You might not like it, but it is.
345.97s - 354.53s |  So if you scan U.S. East 1 in AWS from U.S. East 1, you can finish it in, like, a minute.
354.53s - 357.25s |  But I didn't tell you that.
357.25s - 358.25s |  Okay?
358.25s - 362.21s |  So now we're going to start with the other, with what actually is just automatically for
362.21s - 364.13s |  me is automated.
364.13s - 366.61s |  Everyone likes to start with subdomains, so that's where we're going to start.
366.61s - 369.69s |  It's basically like Pokemon, right?
369.69s - 378.21s |  I full, like, wholeheartedly use passive DNS sources, because if you read the small print
378.21s - 385.01s |  for all these companies, especially the ones that run public DNS servers and big ISPs,
385.01s - 388.09s |  everyone sells their DNS data to someone.
388.09s - 392.93s |  They might say they don't sell it, but then at the end, it's loopholed because they add
392.93s - 397.97s |  their DNS data as part of some other business contract with another company.
397.97s - 401.41s |  So a lot of these companies you've heard of, like VirusTotal, Security Trails and stuff
401.41s - 405.17s |  like that, they do their own Internet scanning, sure, they might put bots out there and scan
405.17s - 410.37s |  the Internet and stuff like that, but they also buy a lot of this data from major DNS
410.37s - 413.29s |  providers that are happy to also profit from it.
413.29s - 415.97s |  So I pay for some.
415.97s - 416.97s |  You don't have to.
416.97s - 419.61s |  I'm not here to tell you to pay for any product, obviously, because I don't work for any of
419.61s - 424.13s |  them, but I do pay for some of them, because in my opinion, they've been way worth it for
424.13s - 425.49s |  me.
425.49s - 430.21s |  I always, always, always tell someone, do not just hook up a tool and use it because
430.21s - 432.09s |  it says it hits that API.
432.09s - 436.13s |  Read the docs, look at the rate limiting, look at the pagination, how many credits you
436.13s - 439.81s |  use per this or that, and just try writing it yourself first.
439.81s - 443.85s |  Because we're going to talk about it right now, but all those tools on the right, everyone
443.85s - 448.41s |  has made all these tools that hit every passive DNS source on the planet and you can put in
448.41s - 451.17s |  your keys and that's all great and they are amazing.
452.17s - 459.61s |  The people that made a mass, they're all amazing, they've made amazing tools and they work amazing,
459.61s - 464.21s |  but if you want specific things, I would write your own logic just so you 100% know what's
464.21s - 465.77s |  going on.
465.77s - 471.57s |  One of the reasons for that is because when you audit these tools, they try and make everybody,
471.57s - 476.01s |  all of you in this room, as happy as they can, all at the same time.
476.01s - 479.61s |  And to do that, sometimes you have to cut corners.
479.61s - 484.29s |  Some of those corners are, for instance, failing quietly, right?
484.29s - 486.73s |  So when you audit tools, you'll find something like this.
486.73s - 489.01s |  If anyone recognizes this, this is sub finder.
489.01s - 492.33s |  Again, if someone from project discovery is here, I love you, please talk to me, okay?
492.33s - 493.77s |  I'm sorry.
493.77s - 498.17s |  But you'll notice on like the fifth row down, I ran this.
498.17s - 502.21s |  If you run it with a dash stats flag, you'll get this output that will tell you the statistics
502.21s - 503.25s |  of your run.
503.25s - 508.53s |  I ran this against Tesla.com with dash all, meaning use all the sources you possibly can,
508.53s - 510.77s |  which is how a lot of people are encouraged to run it.
510.77s - 514.45s |  You'll notice it took 43 seconds and 43 and a half.
514.45s - 518.15s |  Well, common crawl took 43 and a half seconds.
518.15s - 519.85s |  And how many results did I get?
519.85s - 525.17s |  Negative 70,782, which makes a ton of sense.
525.17s - 529.45s |  So I ran for 43 seconds for an error, basically.
529.45s - 533.65s |  If you look at the next fastest source or the next slowest, it was 10 seconds from security
533.65s - 539.21s |  trails or 30 seconds from way back archive that also gave me nothing.
539.21s - 544.21s |  So if I cut out common crawl and way back archive, lose no results, and I would have
544.21s - 548.13s |  ran in about 10 seconds, because I think security trails is the next slowest.
548.13s - 551.49s |  So I would have ran in a fourth of the time and gotten the same things, just by paying
551.49s - 556.63s |  attention to what sources I'm using and what they're actually giving me, right?
556.63s - 559.21s |  So back to certificates, okay?
559.21s - 564.49s |  So again, I do IPv4 certificate scanning with Caduceus, which I just talked about.
564.49s - 568.53s |  You get Apex domains from that, but what you really can look for is subdomains.
568.53s - 572.85s |  Those subdomains can be used in a ton of different ways, which I will talk about in a second.
572.85s - 578.09s |  But when we talk about certificates, we cannot not talk about cert.sh and ctlogs.
578.09s - 582.45s |  So ctlogs are Merkle trees that are public to everybody, and cert.sh was made by some
582.45s - 583.45s |  really smart people.
583.45s - 587.77s |  It ingests those logs and saves them in a database that is queryable.
588.77s - 590.77s |  And you can do it directly.
590.77s - 596.01s |  The problem I found with cert.sh is I want domains before all of you have it.
596.01s - 597.01s |  Sorry.
597.01s - 598.01s |  Right?
598.01s - 603.29s |  Some of the bigger ctlogs, cert.sh actually won't have in their database queryable for
603.29s - 604.73s |  up to 48 hours.
604.73s - 607.21s |  Some are instant, some are not.
607.21s - 609.33s |  So what I did is I made my own tool.
609.33s - 610.45s |  It's also in my repo.
610.45s - 613.39s |  It's called Gungnir, also another weapon.
613.39s - 619.11s |  And all it does is it does the same thing that cert.sh does, but I already have databases
619.11s - 620.71s |  and all that other stuff later.
620.71s - 624.31s |  So it's just the Unix philosophy of ctlog scraping.
624.31s - 630.23s |  So it just scrapes the ctlogs as fast as it can with exponential backoffs in case it gets
630.23s - 635.35s |  rate limited and then it catches back up, and it will give you a domain within seconds
635.35s - 637.35s |  of that certificate getting created.
637.35s - 643.79s |  So if someone creates new site.example.com, it will show up in Gungnir in under 20 seconds.
643.79s - 645.45s |  You'll know instantly.
645.45s - 650.27s |  So if anyone puts a new service online and they want a real certificate behind it that's
650.27s - 655.43s |  backed by a certificate authority, you'll know about it basically the second the certificate's
655.43s - 657.75s |  created, no matter where they put it.
657.75s - 663.23s |  Now again, cert.sh will do that for you, and you can look historically with cert.sh, so
663.23s - 665.55s |  it's still a fantastic tool.
665.55s - 667.95s |  Whereas just if you want it, immediately.
667.95s - 669.75s |  So that's what I do.
669.75s - 671.87s |  We'll talk about virtual hosting later.
671.87s - 676.11s |  But Caduceus, like I said, Gungnir will give you certificates, but no IP address to what
676.11s - 677.11s |  they go with.
677.11s - 680.67s |  Caduceus and the certificate scanning will give me the IP address it came from as well
680.67s - 682.27s |  as all the domains.
682.27s - 683.79s |  So keep that in mind.
683.79s - 685.31s |  These are some other good things that I do.
685.31s - 688.19s |  I automate them, but I don't do them constantly.
688.19s - 692.19s |  Gwen made a very good tool called GitHub subdomains that I think he's actually rewriting, I've
692.19s - 693.39s |  heard.
693.39s - 697.83s |  I've talked about the reverse DNSing, and then I'll do light spidering, as in I'll land
697.83s - 702.51s |  on a page and pull all the second order assets, which costs me nothing and it doesn't get
702.51s - 703.51s |  you banned.
703.51s - 709.07s |  One get request has not gotten me banned yet, fingers crossed.
709.07s - 712.87s |  Virtual host scanning, I wanted to release a tool today, it will be public very soon
712.87s - 717.71s |  in my same repo, but I found a bug literally this morning, which is just terrible.
717.71s - 722.27s |  But it's going to be called Harpy, and basically what it'll do is you can take the JSON output
722.35s - 727.15s |  from Caduceus and you can pipe it right into Harpy and it will do virtual host scanning
727.15s - 731.83s |  specifically only for that IP address and the domains found on that certificate.
731.83s - 736.95s |  So it's really efficient, and it doesn't do virtual host scanning for a huge list of subdomains
736.95s - 742.43s |  against every single IP address, it's just what domains actually came from the certificate
742.43s - 743.87s |  on that IP address.
743.87s - 747.59s |  And I've already found a lot of nice stuff with it.
747.59s - 751.35s |  So I would encourage you to look at it.
751.43s - 756.19s |  So this is the other big part, is DNS resolution, because if you get stuff from passive DNS,
756.19s - 761.23s |  you are not 100% sure it resolves, right?
761.23s - 766.95s |  So there's an issue if you're going to do very high speed, very consistent resolving,
766.95s - 772.11s |  is a lot of current tooling silently fails, just like I talked about with sub finder,
772.11s - 776.07s |  or it returns surf fails, which if you're not looking for those, it will just drop,
776.07s - 780.07s |  but surf fails can actually, if you guys are into like subdomain takeovers and stuff, those
780.07s - 781.95s |  are nice to know about.
781.95s - 786.99s |  If you attempt to resolve one time, like if you get a domain from one of these APIs and
786.99s - 790.67s |  you try and resolve it once, I promise you, you're missing assets.
790.67s - 795.27s |  I promise you right now, if you don't have a running retry list of I'll try this for
795.27s - 800.23s |  the next five days or something, I promise you, you're missing assets.
800.23s - 805.31s |  So the trickest has a list of trusted resolvers that are public and out there and that kind
805.31s - 809.67s |  of stuff, and I know a lot of people use those, it's what I started with, but I moved on,
810.19s - 813.67s |  they have rate limits, they have timeouts, and they have a bunch of different issues.
813.67s - 817.01s |  I actually wasn't going to talk about this, but I'll just do it anyway.
817.01s - 823.03s |  So I look for subdomain takeovers personally, not in a bug bounty presence, but in a different
823.03s - 824.83s |  engagement for consulting.
824.83s - 830.99s |  I actually found a whole handful of takeovers that every public resolver on trickest's list
830.99s - 837.27s |  actually says it's a no error, and what we'll talk about next actually gave it a surf fail,
837.27s - 840.59s |  it was a surf fail, they were all takeoverable Azure assets.
840.59s - 846.67s |  So I'm not sure why, because I'm not a DNS expert by any means, but the public resolvers,
846.67s - 850.79s |  because they have to be on the edge and all that kind of stuff and very fast, can have
850.79s - 854.15s |  other things behind the scenes that might mess up what you as a bug bounty hunter are
854.15s - 855.95s |  trying to do.
855.95s - 858.79s |  So this is what I did instead.
858.79s - 863.11s |  So there's a tool or a set of tools called PowerDNS.
863.11s - 867.21s |  They have three main tools, they have an authoritative server, which we don't really care about,
867.25s - 871.93s |  they have a tool called PowerDNS Recursor, which is a recursive DNS resolver we definitely
871.93s - 878.73s |  care about, and they have a tool called DNSdist, which is just a load balancer for DNS servers.
878.73s - 880.05s |  Sounds pretty nice.
880.05s - 885.85s |  So with very little dev effort, you can create a virtual IP so all of your cluster has the
885.85s - 891.69s |  same IP using something like Keepalived and using DNSdist and Recursor, which all work
891.69s - 895.17s |  together because they're the same company and it's basically plug and play, you can
895.17s - 901.73s |  make your own DNS resolution cluster that has unlimited rate limits, can be tuned to
901.73s - 907.15s |  your exact needs, whatever caching you want, using this, you can attempt to resolve a domain
907.15s - 912.41s |  as many times as you want, you don't hit rate limits, you can put it into Prometheus or
912.41s - 915.69s |  any other kind of monitoring and monitor your own stack and make sure your stuff is working
915.69s - 920.53s |  as you think it's working, and then to solve the problem of attempting to resolve multiple
920.53s - 924.27s |  times, I actually use caching, I use Redis, you can use Memcache, you can use whatever
924.27s - 929.61s |  you want, using just sorted sets with timestamps or anything else or the number of retries,
929.61s - 933.69s |  whatever you want to do, it's lightning fast, you can pull it automatically, you're not
933.69s - 937.57s |  pulling from a DB, you don't have to worry about a schema, you can just keep a running
937.57s - 940.97s |  list of these are all the domains I've seen, this is how many times I've tried it or the
940.97s - 944.57s |  last time I've seen it, whatever you want to do, that kind of stuff is what I do, so
944.57s - 949.01s |  I can see when I resolve stuff last, how many times I've tried it, if it hasn't, that kind
949.01s - 952.13s |  of stuff, and it's really fast, right out of the box.
952.13s - 957.13s |  Those are the records that I look for for bug bounty, I don't pull them all, so using
957.13s - 965.09s |  this stack, just for reference, I spend about $25 a month on my cluster, and just two days
965.09s - 971.97s |  ago I was able to ramp it up with no errors and no packet drops to write about 125,000
971.97s - 978.33s |  queries per second, so I do a couple hundred million, like 600 to 800 million requests
978.33s - 984.13s |  a day to that cluster, and it works pretty nice.
984.13s - 988.77s |  Support scanning, now we're getting into the good stuff, okay, kind of.
988.77s - 993.87s |  So there's active and there's passive, now I hold an opinion on this, this is a purely
993.87s - 1000.25s |  opinion post, there are active tools out there, but there is a passive tool that I learned
1000.25s - 1005.05s |  about from Jason Haddix, if he's in this room, but it's called SMAP, and all it does
1005.05s - 1011.13s |  is it takes your Nmap flags, whatever, but it does it all against Shodan, not, it doesn't
1011.13s - 1015.21s |  actively port scan, so if you want to port scan a bunch of IPs, it actually does it against
1015.21s - 1021.97s |  Shodan, so what I do is I run everything through SMAP with Shodan, and then all the ports that
1021.97s - 1028.01s |  it says are up, I then actively check with mass scan, Naboo, Nmap, whatever you want
1028.01s - 1032.97s |  to use, way less traffic, I've gotten banned zero times, and SMAP is right a lot of the
1032.97s - 1038.05s |  time, because Shodan is pretty good, so you can still find all those ports on the right
1038.05s - 1042.09s |  with all kinds of juice and all kinds of stuff without scanning every single port on every
1042.09s - 1046.97s |  single IP until you eventually get abuse reports and get banned off of a cloud provider.
1046.97s - 1049.01s |  I've never done that.
1049.01s - 1055.97s |  Okay, web servers and endpoints, same thing scanning the web, so I obviously only do web
1055.97s - 1061.85s |  fingerprinting on stuff that resolved, so again, do DNS resolution first, I I I'm assuming
1061.85s - 1065.01s |  that's pretty basic, but we're going to start with that, again, you don't want to get blocked,
1065.01s - 1070.13s |  you don't want to get banned, so slow scanning is an idea, always watch your user agent,
1070.13s - 1073.65s |  a lot of these tools make their own custom user agents and they're all blocked, okay,
1073.65s - 1078.49s |  there's probably someone from Akamai or someone else in this room, they block HTTPX, they
1078.49s - 1083.85s |  block all that stuff that come with the custom user agents, go to Chrome, download Chrome,
1083.85s - 1088.85s |  look in the request, find the the most recent user agent and just paste that into your tooling
1088.85s - 1094.45s |  and like once a month, make sure it still matches, you're golden, all right?
1094.45s - 1099.37s |  Some of the other things that we're not supposed to talk about are proxies and lambdas, right?
1099.37s - 1104.93s |  AWS lambda, every time you spin up a lambda, comes with a brand new IP address out of AWS's
1104.93s - 1108.69s |  IP pool, it's a huge IP pool and each one is new.
1108.69s - 1112.65s |  I know Shubbs has talked about it, I know Shadow Clone has been out there for a ton,
1112.65s - 1118.89s |  if you are going to do high speed scanning on the web, brute forcing, directories, whatever
1118.89s - 1124.97s |  it may be, split it up with serverless architecture, it's cheap, I'm not supposed to tell you that,
1124.97s - 1128.45s |  people don't like it, do it anyway, okay?
1128.45s - 1131.33s |  This is DEF CON, it's kind of the point, okay?
1131.33s - 1135.77s |  But on the flip side, one git request gets you a ton of data, again, it will get you
1135.77s - 1141.01s |  any second order resources, JavaScript files, S3 buckets, whatever it may be, it will get
1141.01s - 1144.97s |  you the title, status code, you'll follow redirects, whatever that may be, you'll get
1144.97s - 1149.97s |  your CSP from it, you'll get a lot of cookies from it, so to be fair, on the flip side,
1149.97s - 1154.49s |  one git request gets you a ton of information, right?
1154.49s - 1160.09s |  So you don't have to scan the web, and I personally don't, because basically every request you
1160.09s - 1165.89s |  send nowadays, you risk incurring wrath from someone, especially because bug bounty tests
1165.89s - 1169.65s |  in prod, because we're gangster, all right?
1169.65s - 1176.53s |  So for endpoints, there are passive sources, varying results, obviously if you hit a brand
1176.53s - 1181.61s |  new endpoint from Gungnir or something like that, and you go look for it in Gal or Waymore,
1181.61s - 1185.21s |  which hits some of these passive sources, there's not going to be anything there.
1185.21s - 1188.17s |  But if you find some old stuff, something might be there.
1188.17s - 1193.77s |  So it's worth looking, again, it costs you nothing, I have two minutes, okay, we're going
1193.77s - 1195.29s |  to have to hustle.
1195.29s - 1198.11s |  So spidering and crawling is hard to do.
1198.11s - 1202.87s |  When you kick off spidering, find stuff that looks interesting, headless works best, okay,
1202.87s - 1204.43s |  actually I'm doing pretty good.
1204.43s - 1206.39s |  So this is the data engineering side.
1206.39s - 1212.13s |  So subdomains versus IP addresses, they're both extremely useful for those reasons.
1212.13s - 1213.51s |  So use both.
1213.51s - 1217.35s |  I track subdomains and IPs and I cross reference them.
1217.35s - 1218.39s |  Track both.
1218.39s - 1223.15s |  Do not just make subdomains your primary key in a database, do not just make IPs, do both,
1223.15s - 1224.15s |  please.
1224.15s - 1225.15s |  For those reasons.
1225.15s - 1226.15s |  Okay?
1226.19s - 1228.63s |  So look into data engineering, please.
1228.63s - 1229.63s |  This is a plug.
1229.63s - 1230.63s |  Okay?
1230.63s - 1234.31s |  There are two books on the right side and a list of topics under them.
1234.31s - 1240.23s |  I highly recommend, those are both audio books on Audible, you can listen to them and fall
1240.23s - 1243.83s |  asleep, I've never done it, right?
1243.83s - 1244.91s |  Read them, okay?
1244.91s - 1247.99s |  They are boring, they are technical, but it's so good.
1247.99s - 1252.63s |  You're going to end up with so much data and if you don't use the data or just put it in
1252.63s - 1257.51s |  flat files in Postgres, you're going to regret it, I promise you, okay?
1257.51s - 1262.39s |  So please take a picture of this slide, more data is more bugs, but only if you use it
1262.39s - 1265.19s |  correctly, okay?
1265.19s - 1269.91s |  This slide is automation's advantage, again, we can cruise through this, take a picture,
1269.91s - 1274.19s |  whatever, this is what you want out of your automation, this should be your mission statement
1274.19s - 1276.23s |  right here.
1276.23s - 1281.71s |  This is what I do, feel free to take a picture of it, this is basically my workflow.
1281.79s - 1287.75s |  That's the second page of the workflow, it's a long workflow, okay?
1287.75s - 1292.35s |  The last thing I want to say is the people on this slide right here have been huge with
1292.35s - 1296.79s |  me learning this stuff and there's so many more people to list, I see some of you out
1296.79s - 1303.27s |  there, but anyone who has interacted with me, thank you so much, these people are people
1303.27s - 1308.67s |  I interact with every day, find them, look their names up, everyone in this space is
1308.67s - 1313.47s |  great, don't do automation in a vacuum, there's bugs for everybody, share your stuff, talk
1313.47s - 1318.87s |  to people, and this is a really crappy slide, if you want to reach out further, that's all
1318.87s - 1320.15s |  I got, I think I made time.