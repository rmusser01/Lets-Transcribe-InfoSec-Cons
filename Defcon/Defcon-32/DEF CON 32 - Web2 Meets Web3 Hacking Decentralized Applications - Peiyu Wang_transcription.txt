{
  "webpage_url": "https://www.youtube.com/watch?v=QipdGm6HffM",
  "title": "DEF CON 32 - Web2 Meets Web3  Hacking Decentralized Applications - Peiyu Wang",
  "description": "Dapps (decentralized applications) are a type of application in the blockchain space that integrate both Web2 and blockchain components, presenting unique security challenges. Drawing from years of experience hacking Dapps, this session will share real-world examples of Dapp vulnerabilities and attack vectors. Topics covered include an introduction to Dapps, Dapp threat modeling, and Dapp vulnerability case studies, providing valuable insights and resources for newcomers and seasoned Web2 pentesters looking to enhance their Web3 application hacking skills.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1455,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.14s - 5.70s | This text was transcribed using whisper model: large-v2

 Yeah, I hope my talk can give you guys a taste of Web3 security.
5.70s - 9.34s |  So my name is Pei-Yu Wang, I'm a security engineer.
9.34s - 17.74s |  So what I do is application penetration testing, mostly Web3 applications, and I also do smart
17.74s - 20.22s |  contract audits and security research.
20.22s - 26.34s |  My past talks at DEF CON are in Blockchain Village, which I talk about exploiting crypto
26.34s - 29.22s |  wallets and DeFi scams and rob pools.
29.22s - 35.86s |  So outside of work, I'm a DeFi ape, I'm a mincoin trader.
35.86s - 37.46s |  Blockchain and the apps.
37.46s - 44.58s |  So since the first DeFi summer in 2020, the blockchain ecosystem has exceptional growth.
44.58s - 46.62s |  There's a lot of things being built.
46.62s - 52.26s |  And one way to catalyze them is applications, develop tools, infrastructure, and protocols,
52.26s - 54.98s |  which is the blockchain itself.
54.98s - 58.38s |  So here's AppSite Village, and let's talk about applications.
58.38s - 62.70s |  So the most common AppSite-heavy Web3 products are the following.
62.70s - 67.26s |  The first one is centralized exchanges, such as Coinbase, Binance, which you guys are probably
67.26s - 70.06s |  familiar with, and then data platform.
70.06s - 75.34s |  So the raw data for blockchain transactions are extremely hard for people to read.
75.34s - 80.94s |  So there's an application like Etherscan that helps people to read data, read transaction
80.94s - 81.94s |  data.
81.94s - 83.30s |  And there's a wallet.
83.30s - 88.34s |  So wallet is a type of application that holds the private key and performs a signing request
88.34s - 89.62s |  when requested.
89.62s - 93.62s |  The most popular wallet probably is the wallet MetaMask.
93.62s - 95.06s |  And then there's Dapps.
95.06s - 100.86s |  So the definition I give Dapp is a wide range of applications that include the functionality
100.86s - 105.30s |  that implements through the on-chain smart contract.
105.30s - 110.58s |  So all four types of applications play a very important role in the application space in
110.70s - 111.70s |  blockchain.
111.70s - 116.06s |  And they all have their own unique type of services.
116.06s - 119.58s |  Today I will talk about the one with Dapps.
119.58s - 124.38s |  So throughout this presentation, I will be talking about a lot of things.
124.38s - 128.02s |  So I want to start by explaining them in Web2 terms.
128.02s - 129.62s |  So first, smart contract.
129.62s - 134.62s |  Smart contract, you can think of it's a backend API server that runs on blockchains.
134.62s - 135.62s |  Privileged functions.
135.62s - 137.98s |  So inside smart contracts, there's a lot of functions.
138.22s - 142.94s |  Some functions can only be called by, say, admin or owner address.
142.94s - 150.26s |  Those functions typically are actions, operations, and then there are transactions.
150.26s - 155.66s |  Transaction you can think of it's like a bundle of POST requests that's sent to the smart
155.66s - 156.66s |  contract.
156.66s - 163.42s |  Transaction hash is a unique identifier for each transaction where you can pull the transaction
163.42s - 166.50s |  information out by using the transaction hash.
166.50s - 167.50s |  So gas.
167.50s - 172.74s |  So imagine a web server that charges a certain amount of fee for each POST request.
172.74s - 173.74s |  That's like...
173.74s - 179.94s |  So each blockchain transaction will charge some sort of crypto assets.
179.94s - 184.42s |  And when there's a lot of people sending these POST requests to a smart contract, the more
184.42s - 188.94s |  you pay, the faster your transaction will be executed.
188.94s - 193.90s |  So blockchain is formed by block by block, and each block, you can think of it contains
194.50s - 196.62s |  multiple POST requests.
196.62s - 200.50s |  And each block has a set amount of time in between.
200.50s - 205.58s |  You can think of a batch of POST requests get executed block by block, and there's a
205.58s - 207.06s |  certain time in between.
207.06s - 212.66s |  So blockchain RPC is the communication channel that's exposed by blockchain nodes.
212.66s - 217.98s |  So the outside entity can talk to the blockchains.
217.98s - 223.06s |  And NFT is a type of digital asset in the form of an image with ownership information
223.06s - 228.18s |  stored on the blockchain, and image data and metadata stored on it.
228.18s - 231.38s |  So this is a general workflow for the app.
231.38s - 238.74s |  The app you see there is Uniswap, probably the most popular and most used app.
238.74s - 243.70s |  So you go to a website, there's a connect button, and you click that.
243.70s - 248.10s |  That will trigger a connection request pop up from the wallet.
248.10s - 252.70s |  And if you trust the application, you can click X so that your wallet is going to connect
252.70s - 254.54s |  with the Dapp.
254.54s - 258.02s |  And after the connection is established, you can start using the Dapp.
258.02s - 265.74s |  In this example, I exchanged 0.01 Ether to 24 USDT, and I can click the swap.
265.74s - 269.02s |  And that transaction gets sent to the extension wallet.
269.02s - 272.82s |  And once you click the confirm, which means you sign the transaction, and that transaction
272.82s - 277.78s |  will be sent to the blockchain, and then that transaction will get executed, and the token
277.78s - 280.22s |  will be swapped.
280.22s - 282.50s |  Next I'll talk about Dapp architecture.
282.50s - 290.06s |  So this is standard Web 2.0 applications, where you have client-side app, and then you
290.06s - 294.30s |  have server-side components, like web server API database, I'm sure everyone is familiar
294.30s - 295.30s |  with that.
295.30s - 299.66s |  And Dapp, I put into three categories.
299.66s - 303.30s |  The first one is API-less Dapp.
303.30s - 312.42s |  What it means is that on the server-side, there's no API, and the main logic is inside
312.42s - 315.10s |  the smart contracts.
315.10s - 323.14s |  So for example, the example I gave Uniswap, the early version of Uniswap is API-less Dapp,
323.14s - 328.18s |  where the token exchange information is calculated by a smart contract, and the front-end just
328.18s - 330.90s |  helps with user interactions.
330.90s - 336.90s |  So in this type of Dapp, the attack surface of the application site is quite limited.
336.90s - 341.90s |  And this type of Dapp typically deals with the React framework, and React has SSS building
341.90s - 344.82s |  protection there, so it's hard to find SSS there.
344.82s - 350.50s |  And then unless you can completely take over the site by, say, using DNS hijacking, the
350.50s - 352.98s |  application site, the attack surface is very limited.
352.98s - 356.98s |  And typically when this kind of application gets exported, it's often the vulnerability
356.98s - 359.90s |  from the smart contract.
359.90s - 362.98s |  Now the second one is API-enabled Dapp.
362.98s - 367.42s |  So compared to the last one, this one on the server-side has service APIs.
367.42s - 370.90s |  And one example is, say, NFT creation Dapp.
370.90s - 378.30s |  So the server has API allow users to upload images, or like NFT metadata JSON to the back-end,
378.30s - 382.26s |  and then the back-end is going to return a URL, and you can use that URL to talk to the
382.26s - 384.74s |  smart contract.
384.74s - 389.62s |  The attack surface for this type of Dapp is increased, but the vulnerability on the application
389.62s - 392.98s |  site is mostly like Web2 related.
392.98s - 395.10s |  And now move to the full-scale Dapps.
395.10s - 400.62s |  So full-scale Dapps, the back-end is going to talk to the smart contract, like read data
400.62s - 402.66s |  or send transactions.
402.66s - 410.08s |  So oftentimes in the full-scale Dapp, the smart contract will have privileged functions,
410.08s - 414.76s |  and the account that can call those privileged functions, those private keys, are stored
414.76s - 415.76s |  in the back-end server.
415.76s - 421.08s |  So if you have a way to, say, for example, compromise a server or have triggers on, like,
421.08s - 428.28s |  an arrow, you're likely able to, say, obtain that key from the server and completely transfer
428.28s - 433.14s |  out all the money from the smart contract in damages.
433.14s - 438.58s |  So the majority of Dapps in 2024 are, like, a full-scale Dapp, compared to, like, 2020,
439.14s - 443.62s |  by summer, there's some, like, APS, APLS Dapp.
443.62s - 447.02s |  One example of, like, a full-scale Dapp is cross-chain bridge.
447.02s - 457.46s |  So cross-chain bridge allows a user to transfer to cross-chain bridge, for example, to a token
457.46s - 460.06s |  from, like, Polygon.
460.06s - 466.98s |  Because blockchain, the smart contract blockchain cannot talk to each other, it's cross-chain.
466.98s - 472.50s |  So this type of application must require a blockchain component.
472.50s - 480.54s |  So how bridge works is, on a source chain, the back-end monitors that deposit event and
480.54s - 481.54s |  processes it.
481.54s - 486.90s |  And if everything looks good, all the privileged functions in the destination chain smart contract
486.90s - 487.90s |  can be adopted.
487.90s - 493.17s |  So let's talk about Dapps thread modeling.
493.17s - 500.01s |  So from a thread modeling perspective, there are three assets in Web 3.0, the first one
500.01s - 507.85s |  is private key, if you can get those, you can have full control over the assets in the
507.85s - 508.85s |  address.
508.85s - 509.85s |  Or you can...
509.85s - 514.75s |  The second one is signatures.
514.75s - 531.15s |  So for certain type of tokens, if you can have the special message signed by the...
531.15s - 538.51s |  And there's a lot of signing those type of message, and then...
538.51s - 540.23s |  The last one is API keys.
540.23s - 549.31s |  So API keys is for those, like, such as, like, centralized exchanges, those API keys,
549.31s - 555.12s |  you can...
555.12s - 566.30s |  I talk about, like, I will start to talk about client-side attack by mentioning a term already,
566.30s - 567.38s |  Dapp workflow session.
567.38s - 573.90s |  I talk about, like, if a user wants to use a Dapp, the Dapp must connect to their wallet.
573.90s - 579.74s |  And there's a best practice in Web 3.0 that users should only connect their wallet to
579.74s - 581.34s |  the Dapp they trust.
581.34s - 582.34s |  And then once...
582.34s - 588.02s |  And when users trust the Dapp, they will just sign whatever, like, things that they want
588.02s - 589.02s |  the user to sign.
589.02s - 594.86s |  So if any vulnerability that exists in client-side vulnerability inside the Dapp that has a lot
594.86s - 602.27s |  of user connected wallet, and it's very popular, the severity is gonna increase, like, dramatically.
602.87s - 606.87s |  Client-side attack perspective, there are, like, three things that can happen.
606.87s - 611.52s |  The first one is malicious transactions.
611.52s - 620.04s |  How that can happen is when the attacker can modify the JavaScript code, for example, like,
620.04s - 629.27s |  cross-site scripting, hijacking, it's possible to have those malicious transactions to take
629.27s - 630.99s |  out all the security.
630.99s - 638.99s |  And if hijacking JavaScript is not possible, and if hijacking is possible, another option
638.99s - 642.63s |  is to deceive the user.
642.63s - 648.63s |  The last one is users to...
648.63s - 656.03s |  And for already connected wallet website, everything that can initialize will have critical
656.03s - 657.03s |  vulnerability.
657.03s - 662.11s |  So as it says, right, in Web 2.0, even you have, like, account takeover, it's, like,
662.11s - 669.23s |  a high, maybe, like, a low critical, but in Web 3.0, it's definitely gonna be critical.
669.23s - 670.23s |  So let's talk about server-side.
670.23s - 675.07s |  So from a server-side perspective, there's, like, sort of, like, four things the attacker
675.07s - 676.07s |  will want to do.
676.07s - 679.07s |  The first one is stealing the keys from the server.
679.07s - 686.05s |  Basically, you're stealing the key from the project, and there's just sort of a lot of
686.05s - 688.41s |  ways you can protect the Dapp.
688.41s - 693.13s |  And the second one is stealing crypto assets from other users' accounts or admins' accounts.
693.49s - 702.89s |  They will probably buy, like, broken access control, or you can spend assets more than
702.89s - 703.89s |  your actual balance.
703.89s - 707.37s |  That can probably happen, like, business logic error or risk condition.
707.37s - 712.05s |  And for NFTs, as I mentioned, those, like, images are sort of, like, off-chain.
712.05s - 717.05s |  And if those images are turned down, those NFT value are gonna drop, like, dramatically,
717.05s - 721.07s |  and that's what can happen when, like...
721.27s - 730.57s |  Web 3.0, anything that can touch this money has a critical severity, because, you know,
730.57s - 736.54s |  removing or stealing users' money.
736.54s - 742.18s |  So in the last session, I talked about how Web 2.0 attacks better and have higher severity
742.18s - 743.18s |  in Web 3.0.
743.18s - 753.44s |  In the next sessions, I will talk about kind of, like, unique better attack services.
753.44s - 757.92s |  I think due to constraint, I cannot go over, like, each sub-item one by one.
758.12s - 767.00s |  In short, deep applications that incorrectly process transactions, they can come in conflict.
767.00s - 773.12s |  And it's possible to initial attack against backend components through our contract.
773.12s - 780.10s |  And if the application is larger to handle different assets' costs, it's incorrect, it
780.10s - 783.74s |  can also be attacked.
783.74s - 790.30s |  So the first case I want to talk about is waste control in gas via unrestricted APIs.
790.34s - 795.46s |  So this application is a conventional tool here that requires users to register a wallet
795.46s - 796.46s |  for participation.
796.46s - 806.78s |  So how they register is there's an API, which user can provide their own chain address,
806.78s - 812.28s |  and then the backend is called a wallet.
812.28s - 817.60s |  It can only be called, like, a small device or something like that.
817.60s - 818.60s |  So what's the issue?
818.60s - 824.25s |  I'm giving you a different mic.
824.25s - 842.50s |  Oh, wow!
842.50s - 843.50s |  Great.
843.50s - 851.54s |  So, wow, the case study just started, so you didn't miss anything.
851.54s - 852.54s |  Okay.
852.54s - 853.54s |  Yeah.
853.54s - 860.06s |  So the finding here is that, wow, that's amazing, is so the APIs accept any assumed address
860.06s - 863.30s |  as long as the address data is in the correct format.
863.30s - 867.18s |  So each time the API is called, the backend is going to send a transaction to a small
867.18s - 868.42s |  contract.
868.42s - 871.42s |  And as I talk about, each transaction can cost gas.
871.42s - 874.14s |  Gas is, like, you can think of as money.
874.14s - 878.70s |  So the way to exploit this is, like, I can generate a bunch of, like, random assumed
878.70s - 883.86s |  address and keep calling the API to let the admin wallet keep sending transactions to
883.86s - 888.58s |  small contract and eventually consume all the users in the admin's wallet.
888.58s - 893.42s |  So this not only consume all the users, but allow, like, and prevent, like, other users
893.42s - 896.22s |  to register.
896.22s - 899.06s |  So this is, like, the transaction log when I do the testing.
899.06s - 900.34s |  So this is in the test net.
900.34s - 904.18s |  So there's no actual, like, assets lost.
904.18s - 908.38s |  So I write a script to generate a bunch of address and put the request into, like, Burberry
908.38s - 910.46s |  repeater and then just send it.
910.46s - 915.66s |  And then when I go to user scan, I see those, like, records.
915.66s - 919.82s |  The second one is poor transaction time had only lead to denial of service attack.
919.82s - 925.10s |  So this can actually happens in any dApp that have API to trigger the backend to send a
925.10s - 930.86s |  transaction and keep the connection open while waiting for the on-chain transaction
930.86s - 932.46s |  execution results.
932.46s - 936.94s |  So the example code snippet is I generate using, like, CGVTs.
936.94s - 940.86s |  So it's basically an API called deposit.
940.86s - 946.26s |  And when user call this API, it's going to trigger the backend to send a deposit transaction
946.26s - 948.02s |  to the small contract.
948.02s - 954.52s |  And the code will wait for the transaction executed and then send a response to the users.
954.52s - 959.96s |  So what's the problem here is that, for example, on a certain main net, the block time is 12
959.96s - 965.88s |  seconds, which means the HTTP connection will remain open for at least 12 seconds.
965.88s - 970.88s |  If the chain is congested, the time can be much longer.
970.88s - 977.72s |  So to exploit these APIs, like, only one single machine is required to send a bunch of, like,
977.72s - 981.52s |  API requests and to occupy all the connection slot.
981.52s - 986.08s |  And the server is not going to handle any, like, more requests.
986.08s - 990.24s |  The next one is poor transaction time handling lead to risk conditions.
990.24s - 995.24s |  So this is gaming, like a GameFight dApp that allow user to purchase, like, in-game items
995.24s - 997.84s |  using crypto assets.
997.84s - 1003.44s |  So deposit workflow by user deposit crypto assets into the game's small contract and
1003.44s - 1008.96s |  then backend retrieve those deposit informations from the small contract to increase the user's
1008.96s - 1011.28s |  in-game balance.
1011.28s - 1015.48s |  And what's the interesting part is the withdrawal crypto workflow is the withdrawal workflow
1015.48s - 1020.32s |  work by users submit a withdrawal API request to the backend and the backend verify user's
1020.32s - 1025.80s |  balance and call the privilege function withdraw in a small contract.
1025.80s - 1030.76s |  And after the transaction is finished, the token will arrive in user's on-chain wallet
1030.76s - 1035.08s |  and the backend is going to update the user balance to zero.
1035.08s - 1043.60s |  So what's the problem here is that the backend update the user balance only after the transaction
1043.60s - 1045.32s |  successfully executed.
1045.32s - 1049.88s |  And it doesn't log the transaction balance when it sends the on-chain transactions.
1049.88s - 1055.72s |  So for example, in Serum, like, 12-second block time, user have 12-second window to
1055.72s - 1060.02s |  spend their, like, in-game, like, currencies.
1060.02s - 1064.78s |  So they can basically in those time periods, they can buy a hundred worth of, like, in-game
1064.78s - 1067.58s |  items and then wait for the transaction to finish.
1067.58s - 1070.66s |  And those token will be arrived in their wallets.
1070.66s - 1074.70s |  This way the user can basically purchase all the in-game item for free.
1074.70s - 1080.82s |  And a risk condition can also happen in like Web 2.0, but the time window for that in Web
1080.82s - 1081.82s |  2.0 is much smaller.
1081.82s - 1085.54s |  But in Web 3.0, the time window in this case is at least 12 seconds.
1085.54s - 1089.10s |  So it's much easier to pull off.
1089.18s - 1094.94s |  The next one is bridge contract, bridge backend, lack of smart contract address validations.
1094.94s - 1099.04s |  So I talk about how bridge work briefly, previous slide.
1099.04s - 1104.46s |  So for this particular bridge, the workflow is like user deposit tokens into smart contract
1104.46s - 1107.62s |  on the source chain and obtain a transaction hash.
1107.62s - 1112.14s |  And then the user submit a transaction hash to the backend through APIs, and the backend
1112.14s - 1118.58s |  fetch the information with that transaction hash to validate the deposit.
1118.58s - 1123.66s |  And if anything goes correctly, the bridge backend is going to call the privilege function
1123.66s - 1128.46s |  in the smart contract on the destination chain and release the fund to the user.
1128.46s - 1133.26s |  So for this kind of bridge, the backend actually needs to validate tons of stuff.
1133.26s - 1137.46s |  And in that particular application, it needs to validate, for example, the transaction
1137.46s - 1139.76s |  status is successful.
1139.76s - 1146.86s |  And it needs to get the information of the deposit amount, the sender, receiver address.
1146.86s - 1151.70s |  And if anything is not validated correctly, it can cause the bridge to become vulnerable.
1151.70s - 1157.98s |  And in this case, the backend does not verify the smart contract that received the token
1157.98s - 1163.10s |  is the one operated by the project.
1163.10s - 1169.42s |  So to exploit this vulnerability that Teflo will be, I am going to deploy a malicious smart
1169.42s - 1173.70s |  contract on the blockchain that basically share the same functionality as the legitimate
1173.70s - 1174.82s |  smart contract.
1174.82s - 1179.68s |  And I make a token deposit into that fake bridge contract and obtain a transaction hash.
1179.68s - 1184.86s |  And I submit a transaction hash to the bridge backend through APIs and wait for the bridge
1184.86s - 1186.88s |  backend to process the hash.
1186.88s - 1193.44s |  And because I'm missing the address validations, he thinks the address is correct.
1193.44s - 1199.02s |  And then it's going to release the tokens to the users on the destination chain.
1199.02s - 1205.14s |  And when that happens, and after that, the user can withdraw his tokens sent to the fake
1205.14s - 1208.30s |  contract because he had full control of that.
1208.30s - 1212.50s |  And if this vulnerability gets exploited, all the tokens in the destination chain smart
1212.50s - 1214.90s |  contract can be stolen.
1214.90s - 1216.14s |  So the last case.
1216.14s - 1220.78s |  So this is like a lightweight crypto trading application where users can deposit assets
1220.78s - 1222.78s |  and perform token swap.
1222.78s - 1225.86s |  The backend uses Fireblock as custodian services.
1225.86s - 1231.46s |  How the deposit works is the user requests a deposit address through APIs.
1231.46s - 1234.16s |  And then the backend is going to get one from Fireblock.
1234.16s - 1237.82s |  And then the user is going to deposit a crypto asset to the address.
1237.82s - 1243.30s |  And then the backend periodically curates the Fireblock.getTransaction API.
1243.30s - 1249.18s |  And if it sees the deposit transactions, it's going to give the user the in-app balance.
1249.18s - 1254.34s |  So when we are doing the testing, we deposit like 0.1 metatoken to the deposit address.
1254.86s - 1257.10s |  And the balance increased by 1.1.
1257.10s - 1260.22s |  And we were so confused because this is not like double or 10 times.
1260.22s - 1262.42s |  It just, it's like increased by one.
1262.42s - 1267.34s |  So we go to the on-chain, the Polygon scam and see there's only like 0.1 metatoken arrived
1267.34s - 1268.82s |  in the address.
1268.82s - 1275.06s |  However, we found a record of like a scam NFT airdropped into that address.
1275.06s - 1280.14s |  So it's quite common for scammers to airdrop like NFTs with like phishing site link in
1280.14s - 1284.10s |  the token information to a newly added address within the blockchain.
1284.10s - 1290.54s |  Newly added address means the address like received like a crypto with value for the
1290.54s - 1292.38s |  first time.
1292.38s - 1298.30s |  So the backend treat that value list NFT as a valid, like a magic deposit.
1298.30s - 1299.94s |  So this is a whiteboard testing.
1299.94s - 1307.48s |  And we found out the root cause is that the backend just doesn't, when it parses the information
1307.48s - 1310.62s |  returned by Fireblock, it failed to check the token type.
1310.62s - 1317.50s |  So to exploit these issues, we deploy a ERC-1155 NFT and make 99 NFT with no value to the address
1317.50s - 1322.86s |  and which caused our account to increase like 99 metatoken.
1322.86s - 1325.50s |  So to summarize the state of like dApp security.
1325.50s - 1329.54s |  So right now with the advance of like blockchain ecosystem, dApp becomes like more and more
1329.54s - 1333.86s |  complex and some of them start integrating heavy Web2 components.
1333.86s - 1337.74s |  And often vulnerability are introduced in dApp because a lot of developers either lack
1337.74s - 1341.82s |  of Web3 security knowledge or Web2 security knowledge.
1341.82s - 1347.10s |  And Web2 vulnerability in Web3 application often has like increased severity because
1347.10s - 1349.90s |  it can touch monies.
1349.90s - 1354.54s |  And unlike small contract export where it's like publicly viewable, the exploitation of
1354.54s - 1359.78s |  the backend might have less exposure because no one can see it, but it can still happen.
1359.78s - 1364.62s |  So to secure a dApp, especially a dApp with like heavy backend components, it is like
1364.62s - 1370.38s |  as important to get penetration testing compared as like getting like audits for your small
1370.38s - 1371.38s |  contract.
1371.38s - 1373.98s |  This is the last slide.
1373.98s - 1379.86s |  So if you want to get into dApp hacking, I would suggest like you first be decent at
1379.86s - 1384.10s |  Web2 application hacking because at the end of day, there's tons of Web2 components and
1384.10s - 1388.06s |  you need to be familiar with the architecture of different type of dApps.
1388.06s - 1391.14s |  That way you will know what the attack services are for this app.
1391.14s - 1394.50s |  And the best way to do it is play around with dApp to experiment then.
1394.50s - 1400.26s |  An investment of like $100 of crypto probably going to waste in gas is going to be enough.
1400.26s - 1405.34s |  And to understand like basic concept of blockchain, include those like Web2 technology, you don't
1405.34s - 1408.02s |  really need to understand how blockchain work.
1408.02s - 1412.26s |  And then you learn the solidity of small contract language so you can understand small contract.
1412.26s - 1415.20s |  And sometimes you can find some like hidden attack services.
1415.20s - 1419.90s |  And it's not necessarily require you to know like how to do a secure audit of small contract.
1419.90s - 1421.94s |  That's a completely different topic.
1421.94s - 1426.02s |  And go find a dApp and hack it legally.
1426.02s - 1430.46s |  So I believe starting hacking dApp is probably one of the best way for like Web2 website
1430.46s - 1433.50s |  hackers that pivot into Web3 security.
1433.50s - 1438.26s |  And if you want to ask me like why like Web3 security, I mean like look at this bounty
1438.26s - 1439.26s |  like $10 million.
1439.26s - 1443.02s |  Well, I don't think this can ever happen in Web2.
1443.02s - 1446.30s |  So yeah, I guess people love money.
1446.30s - 1447.30s |  All right.
1447.30s - 1448.30s |  So that's my talk.
1448.30s - 1451.74s |  I hope you guys enjoy and learn something about Web3 security.
1451.74s - 1451.98s |  Thank you.