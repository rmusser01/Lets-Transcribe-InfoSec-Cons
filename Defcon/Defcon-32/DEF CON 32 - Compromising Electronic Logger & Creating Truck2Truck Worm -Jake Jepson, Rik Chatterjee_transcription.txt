{
  "webpage_url": "https://www.youtube.com/watch?v=dnAkvpl48zY",
  "title": "DEF CON 32 - Compromising Electronic Logger & Creating Truck2Truck Worm -Jake Jepson, Rik Chatterjee",
  "description": "Presented by Jake Jepson and Rik Chatterjee, two Systems Engineering Master's students at Colorado State University, this talk delves into the critical security implications within the trucking industry, particularly focusing on Electronic Logging Devices (ELDs). These devices, integral to compliance with Hours of Service regulations, present unique cyber-physical threats due to their networked nature and lack of standardized security protocols.\n\nThe presentation will walk through examining potential remote exploits via wireless ELD compromise, leading to cyber physical control payloads and even wormable scenarios. Key vulnerabilities identified include insecure defaults and poor security practices shown on a commercially available ELD. These vulnerabilities not only expose truck networks to potential unauthorized control but also highlight systemic issues in device certification and security oversight.\n\nThe talk will cover their journey from acquiring and reverse engineering ELDs, discovering their common architectures and weaknesses, to demonstrating proof of concept attacks that underline the urgent need for industry-wide security reforms. Notably, Jepson will discuss his first CVE, detailing the coordinated disclosure process and subsequent manufacturer response.\n\nThis session is semi-technical, ideal for cybersecurity professionals and amateurs alike, interested in vehicle network protocols, and embedded systems security. Prior knowledge of network protocols such as CAN and J1939, along with an understanding of firmware reverse engineering, will enhance the learning experience, but is not required. Tools and techniques used include network scanners, reverse engineering platforms like Ghidra, and various wireless communication methods.\n\nBy attending this presentation, participants will not only understand the specific security flaws affecting heavy vehicles but also appreciate the broader implications for embedded systems security in transportation. This talk is a call to action for improving security practices and regulatory standards in an increasingly interconnected world.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1180,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.02s - 6.78s | This text was transcribed using whisper model: large-v2

 That was quite the introduction for compromising an electronic logging device and creating
6.78s - 9.90s |  a truck-to-truck worm, but that's what we're going to be talking about.
9.90s - 16.30s |  So my name is Jake, this is Rick, and Rick, take it away.
16.30s - 18.66s |  Thanks Jake.
18.66s - 25.06s |  So we are systems engineering master's students from Colorado State University and we work
25.06s - 34.64s |  with Dr. Jeremy Daly and primarily concentrate our research on cyber security of heavy vehicles.
34.64s - 39.88s |  And there's a video of the work we have done, hopefully it plays.
39.88s - 54.08s |  Alongside the truck, you reflash the electronic device, which is running its software with
54.08s - 60.24s |  a malicious firmware that will slow down the truck once it starts executing.
60.24s - 64.32s |  We were successful in this attack, the car broke up alongside it.
64.32s - 69.44s |  About 30 seconds later, the truck begins to slow down and the car pulls out.
69.44s - 74.96s |  This is a wireless attack, it gives us the freedom to explore creative attack vectors,
74.96s - 75.96s |  including flying a drone.
75.96s - 79.76s |  Critical infrastructure is becoming more and more connected, including trucks.
79.76s - 82.44s |  One of the reasons is due to the ELD mandate.
82.44s - 86.60s |  When the ELD mandate first came out, it did not have much security in it.
86.60s - 89.04s |  It couldn't use many security improvements.
89.04s - 93.92s |  And so here at Colorado State University, we are exploring the security of heavy vehicles
93.92s - 98.96s |  as well as the security of the devices attached to the heavy vehicles, such as the electronic
98.96s - 103.26s |  log.
103.26s - 109.78s |  So basically what we did is, as far as we know, the first wireless drive-by attack on
109.78s - 112.30s |  a truck.
112.30s - 120.42s |  And I was driving the truck, Ray got to drive the smooth Tesla by it.
120.42s - 125.98s |  And what he did was basically flash the ELD that was plugged into the truck while the
125.98s - 128.58s |  car was driving by the truck.
128.58s - 134.76s |  And after about 30 seconds, after the firmware was loaded, the device rebooted.
134.76s - 140.14s |  Basically what happened was a car pulled ahead and the truck started to slow down.
140.14s - 145.26s |  And what we found and what we did was that the accelerator pedal stopped working.
145.26s - 151.78s |  It was stuck in idle, and that's why we could not move the truck any forward.
151.78s - 159.53s |  So a bit of background on what happened, why we did, and why we chose to do that.
159.53s - 164.89s |  So first big question that comes up is, why do we do research on commercial vehicles?
164.89s - 170.71s |  Well, one simple answer to that thing is they're very important to the supply chain.
170.71s - 175.03s |  And I think the pandemic gave us a good lesson on why it's important to the supply chain.
175.03s - 181.27s |  The shortages were pretty obvious, what lack of trucks on the road can do.
181.27s - 187.47s |  And they are considered part of critical infrastructure for that very same reason.
187.47s - 189.03s |  What's under the hood of trucks?
189.03s - 193.31s |  Well, basically modern trucks are very much electronical.
193.31s - 199.19s |  They have lots of embedded computers inside them, around 150 ECUs, as we call them, electronic
199.19s - 203.31s |  controller units to control functions of modern trucks.
203.31s - 207.95s |  They use a lot of different network protocols like CAN, CAN FD, LIN, and even the most recent
207.95s - 212.55s |  ones have started using automotive Ethernet for some purposes.
212.55s - 218.79s |  In most trucks here in the United States, they say J1939 is the standard of choice.
218.79s - 225.85s |  And most trucks on the road do use that standard for communication between these ECUs.
225.85s - 230.05s |  Now what are electronic logging devices and how do they come into trucks?
231.05s - 237.13s |  Well, it was started off as a mandate for commercial trucks and most of them use it
237.13s - 240.61s |  ever since the mandate in 2017.
240.61s - 246.93s |  The goal of an ELD is to record hours of service because paper logs are not reliable enough.
246.93s - 252.69s |  Truckers would more often than not be honest in those paper logs and keep driving more
252.69s - 254.77s |  than the allotted hours.
254.77s - 259.33s |  And the goal of electronic logging devices was to basically get rid of that and have
259.33s - 263.17s |  a device log your hours of service.
263.17s - 269.13s |  The big problem with that was in the entire mandate that was out there, there was no mention
269.13s - 271.81s |  of security at all.
271.81s - 277.53s |  The process for getting your own ELD was make one, self-certify it, and you can start selling
277.53s - 280.73s |  it out to each of the trucks.
280.73s - 285.89s |  There are about 880 ELDs as of this time that are out there.
285.89s - 290.29s |  So a lot of different variants from a few different manufacturers.
290.29s - 294.61s |  And the goal of the ELD is once again, they go into the diagnostic port of a truck, similar
294.61s - 300.49s |  to that of a car, and they log data.
300.49s - 305.17s |  One of the fundamental issues with this thing is that more often than not, they require
305.17s - 311.69s |  both read and write access to the internal network of a commercial vehicle to do that.
311.89s - 318.05s |  That write access may create a problem if exploited.
318.05s - 324.05s |  The other thing is that ELDs don't work as standalone devices, and more often there are
324.05s - 330.25s |  other apps or other devices that are connected over Wi-Fi, Bluetooth, or sometimes even over
330.25s - 337.92s |  cellular to get the data of the ELDs that the ELDs record from a modern truck.
337.92s - 344.84s |  Now, when we start looking at ELDs from an attacker's perspective, the main goal is to
344.84s - 352.52s |  somehow go in there, compromise the ELD, and write bad messages so that you can do something
352.52s - 354.84s |  bad with the truck.
354.84s - 360.40s |  The initial landscape looks very difficult because there are around 880, and launching
360.40s - 366.44s |  a successful attack on 880 different variants is extremely difficult.
366.44s - 371.92s |  The other big problem is most trucks have started incorporating gateways, which basically
371.92s - 374.04s |  act as firewalls.
374.04s - 378.68s |  They sit between your diagnostic port and the internal components, which need to be
378.68s - 382.00s |  shielded from attacks.
382.00s - 386.72s |  The other thing is that it's a device that plugs in, so plugging it out would stop the
386.72s - 389.19s |  attack.
389.19s - 394.95s |  So, a typical threat scenario would involve two things, either short-range access over
394.95s - 400.43s |  Bluetooth or Wi-Fi, or long-range access via cellular networks.
400.43s - 405.75s |  But doing a deeper dive into the world of ELDs reveals something entirely different.
405.75s - 413.23s |  Actually, there are only a few distinct ELDs, let's say about 10 of them, and most of them
413.23s - 418.75s |  are basically rebranded clones of one another, and there is significant code reuse among
418.75s - 420.75s |  all the ELDs.
421.55s - 426.51s |  Okay, that takes out 880 and leaves us with 10 to look at.
426.51s - 432.07s |  The other problem is gateways, but gateways have become popular most recently, and trucks
432.07s - 433.67s |  run for a lot of time.
433.67s - 438.79s |  They run for 20, 30 years on the road, and gateways are relatively modern.
438.79s - 442.87s |  So most trucks out on the road today don't have gateways.
442.87s - 447.39s |  So there is the question of having a firewall inside a truck is gone.
447.39s - 453.67s |  Even the ones that do have gateways, they can be subjected to some configuration errors,
453.67s - 459.07s |  and recently our team has discovered some diagnostic protocol flaws that allows you
459.07s - 464.19s |  to write messages in a way that can bypass a firewall and go into the parts of the truck
464.19s - 469.95s |  where it should not go and actually cause some harm.
469.95s - 475.35s |  The other thing about ELDs is that if something bad happens, the first thing a diagnostic
475.35s - 480.99s |  technician would do is remove the ELD to plug their own maintenance tool there to
480.99s - 483.75s |  find out what's wrong with the truck.
483.75s - 487.99s |  So actually finding out the issue becomes a big problem if an attack is launched to
487.99s - 496.67s |  an ELD, and thus we introduce in this research a novel approach of actually compromising
496.67s - 501.43s |  an ELD and creating a truck-to-truck warm.
501.43s - 506.43s |  With that, I would like to hand it over to Jake to go into the in-depths of this research.
506.43s - 511.43s |  Just so I can see cameras.
511.43s - 515.95s |  Alrighty, so since it's DEF CON, instead of just going over what we found, I'm also going
515.95s - 519.35s |  to go over how we did it, because it's a bit of a journey.
519.35s - 527.19s |  This was the first, like, big thing that I've reverse-engineered, and therefore it, in comparison
527.19s - 529.27s |  to, like, CTFs and stuff like that.
529.71s - 536.27s |  All right, so real quickly, I want to make it clear that I'm not up here to shame the company.
536.27s - 538.99s |  In my opinion, all companies have security vulnerabilities.
538.99s - 545.03s |  Some might not have been found yet, but this company did a great job in their response.
545.03s - 551.75s |  So we did a responsible disclosure with them, and they ended up putting out a patch, and
551.75s - 555.63s |  in our opinion, they responded pretty well.
555.75s - 561.39s |  So one day, Dr. Daly, which is our advisor, just went on to Amazon, and he bought some
561.39s - 563.07s |  of these devices.
563.07s - 567.31s |  It's actually, screens are up there, it's actually the little disk, right?
567.31s - 572.83s |  So it's about this big, and the reason he bought them is that they all look very similar.
572.83s - 573.83s |  And they were.
573.83s - 577.87s |  They were the exact same devices being sold by many different major brands.
577.87s - 582.39s |  So the devices are IO6, IO1020 micro-ELDs.
582.39s - 587.55s |  We found that this device was sold by, like, 50 plus different brands, and this is kind
587.55s - 590.13s |  of commonplace in the ELD industry.
590.13s - 594.67s |  So as Rick mentioned before, these devices come with additional wireless networks on
594.67s - 595.67s |  them.
595.67s - 600.95s |  So this one had Bluetooth and GPS, which were mentioned in the manual, but what was interesting
600.95s - 605.95s |  is that when you first powered it on, it actually popped up a Wi-Fi network as well, which is
605.95s - 610.67s |  curious because why would you go through all the effort of programming the Wi-Fi if you
610.67s - 612.51s |  don't mention it in the manual?
612.51s - 619.07s |  So that's kind of the first thing that kind of was a clue initially, and if you go ahead
619.07s - 623.35s |  and look at the picture of the PCB, that's the PCB of the board.
623.35s - 628.75s |  It's an ESP32-based device, and that port right there is kind of what we're going to
628.75s - 629.75s |  talk about next.
629.75s - 633.15s |  So it was labeled PROG, which we assumed was likely programming.
633.15s - 637.03s |  It's an ESP32 device, so doing a little bit of hardware reverse engineering, figuring
637.03s - 639.91s |  out what pins, what communication, what programs to use.
639.91s - 644.27s |  We're eventually able to check the e-fuses on it, and checking the e-fuses allowed us
644.27s - 648.19s |  to determine that it had no protections on it at all, so we could go ahead and just dump
648.19s - 651.67s |  the firmware off of it, and the first thing we're going to do with the firmware is run
651.67s - 657.13s |  strings on it, and normally you don't hit the jackpot with just strings, but in this
657.13s - 658.71s |  case we did.
658.71s - 665.79s |  So as looking through strings, I come across that SSID, and then two lines down, I see
665.79s - 670.83s |  what I can only describe as a Wi-Fi password, and that is what we found.
670.83s - 674.39s |  It was the hard-coded default Wi-Fi password for this device.
674.39s - 679.11s |  We continue scrolling down, and we start seeing stuff about web servers, and these endpoints
679.11s - 685.83s |  of slash upload.php, talking about OTAs and flashing, but it needs a key, and as we go
685.83s - 691.31s |  down a little bit more, we see something that starts with a one, and it ends with a six,
691.31s - 694.03s |  and I'll let you figure out what's in between that.
694.03s - 700.11s |  And that was the hard-coded key that protected the over-the-air updates for this device.
700.11s - 706.20s |  All right, so once we now got onto the Wi-Fi network, of course we can go ahead and do
706.20s - 707.68s |  an NMAP scan.
707.68s - 711.92s |  The NMAP results there are incomplete, but essentially it would find three services.
711.92s - 717.92s |  We had a Telnet service on port 23, we had SSH, well, NMAP thought it was SSH on port
717.92s - 723.24s |  22, I did not think it was that, and then we had an HTTP server on port 80.
723.24s - 728.08s |  So if we look at the screenshot of the HTTP server, we can see it's listing serial version,
728.08s - 732.72s |  and then we have that key, and then a little bit of foreshadowing, we have a firmware-mal,
732.72s - 735.56s |  standing for a malicious firmware that we created.
735.56s - 739.92s |  All righty, so this slide is, of course, the part that takes the longest.
739.92s - 741.96s |  This is the reverse engineer.
741.96s - 744.44s |  We found a device that has these vulnerabilities.
744.44s - 748.44s |  We went ahead and did a little bit of testing to confirm it's not doing firmware signing,
748.44s - 751.64s |  and that we could actually upload a modified binary to it.
751.64s - 753.18s |  But now, what do we do with that?
753.18s - 756.98s |  So at this point, we need to reverse engineer the binary, figure out how it works, to the
756.98s - 761.14s |  point that we can create a malicious firmware for it, and get it to do what we want it to
761.14s - 762.14s |  do.
762.14s - 772.26s |  So this was on ESP32, so the code for it is Extensa, and Extensa was not well-supported.
772.26s - 776.50s |  It's now officially supported by Ghidra, but at the time, it was not on any of the major
776.50s - 779.98s |  ones that I at least had the money for.
779.98s - 782.02s |  And so we were looking at community support.
782.02s - 785.78s |  And the best community support was for Ghidra at the time, but it still needed a lot of
785.78s - 786.78s |  work.
786.78s - 791.20s |  So after spending weeks fixing up the decomp and going through all that, I had a bunch
791.20s - 792.66s |  of flows.
792.66s - 795.82s |  And it's kind of hard to describe what I mean by flows, but essentially, I had a bunch of
795.82s - 796.82s |  functions.
796.82s - 797.82s |  They all kind of connected to each other.
797.82s - 802.34s |  It was clear what their purpose was, but I was missing the thing that connected them
802.34s - 805.66s |  and the main function, and that was a giant thing.
805.66s - 806.66s |  I still don't have main.
806.66s - 811.34s |  So I did what any good hacker would do, is I went snooping, and I learned that there's
811.34s - 812.82s |  an Expressive Forms.
812.82s - 817.26s |  I created an account, logged on, and after looking around, I found that there is an account
817.26s - 819.50s |  called io6llc.
819.50s - 825.94s |  And I guess that was probably related to someone that was working at that company.
825.94s - 828.74s |  And most of their questions and that stuff were pretty normal.
828.74s - 835.42s |  They were either reporting bugs, or they were asking about help for certain things.
835.42s - 840.92s |  But on one of them, they posted a full crash dump, which was beautiful, because if we look
840.92s - 844.80s |  at the crash dump, we can see it's talking about having a bunch of different threads,
844.80s - 847.60s |  and it actually gives names to each of those threads.
847.60s - 852.20s |  And so if I cross-reference those strings that we were looking at earlier, and I look
852.20s - 856.88s |  at where those names are used, I came across a function that ended up being main, and it
856.88s - 859.32s |  just wasn't decompiled correctly.
859.32s - 864.00s |  So now that I had that, I was actually able to get the full picture of how it all worked,
864.00s - 868.16s |  and we went from there.
868.16s - 872.64s |  So quick overview of the vulnerabilities that were discovered through the reverse engineer.
872.64s - 878.48s |  We already talked about the default network credentials, and we had this web server that
878.48s - 883.62s |  seemingly was unused by these resellers, but it was always on and it was always there.
883.62s - 886.84s |  We had Bluetooth and Wi-Fi being on at the same time.
886.84s - 888.80s |  Firmware wasn't being signed.
888.80s - 892.44s |  Firmware updates were protected by the weak password.
892.44s - 897.76s |  And then what I ended up finding was that service on port 22 was actually a debug service.
897.76s - 905.32s |  It essentially acted as an echo server, which we had no use for, and it was beautiful, because
905.32s - 910.58s |  it gave us a giant function to go ahead and put our malicious code in that would always
910.58s - 911.58s |  get called.
911.58s - 912.84s |  It was in its own thread.
912.84s - 916.12s |  We didn't have to make any trampolines out for space or anything like that.
916.12s - 922.08s |  And so we went ahead and just put in a pretty simple little bit of malicious code, and it's
922.08s - 925.72s |  what you kind of see on the screen up there.
925.72s - 930.64s |  And so essentially, this would check a status variable, and once the status variable was
930.64s - 935.12s |  equal to certain conditions, we knew that CAN was initialized, and it actually had a
935.12s - 936.64s |  connection to the CAN bus.
936.64s - 940.84s |  And then at this point, we just went ahead and spammed TSC1 messages.
940.84s - 944.60s |  TSC1 messages are Torque Speed Control 1 messages.
944.60s - 950.42s |  They are a J1939 message that are essentially there to allow you to tell the engine to go
950.42s - 952.02s |  to a certain torque.
952.46s - 956.66s |  In the video, you saw us slowing down the truck, because for safety reasons, we're going
956.66s - 962.42s |  to slow down the truck, but we could have also sped up the truck as well.
962.42s - 967.76s |  In terms of how long it takes, it's a wireless attack, so if you're really close to the device,
967.76s - 968.76s |  it goes pretty quickly.
968.76s - 971.56s |  It can go in like 30 seconds, the entire thing.
971.56s - 975.56s |  But the farther you move away, the longer it takes.
975.56s - 979.90s |  We also found that the service on port 23 was this Telnet service, and this provided
979.92s - 985.28s |  a pretty comprehensive API that not only allowed you to do all the normal ELD stuff, but it
985.28s - 991.36s |  also allowed you to go ahead and change those defaults.
991.36s - 995.48s |  Unfortunately, those weren't being used, and then we found something interesting.
995.48s - 999.88s |  As we were looking through a function that was essentially the main command handler,
999.88s - 1004.46s |  we can see that most of the commands are a pretty normal string compare between essentially
1004.46s - 1006.56s |  the command and whatever your input is.
1006.94s - 1012.86s |  But if you go all the way down to the bottom, and you see these five consecutive if statements,
1012.86s - 1018.26s |  and you match all of these very specific criteria, you'll see it goes all the way down to a send
1018.26s - 1021.42s |  can function, and that's what it would allow you to do.
1021.42s - 1026.90s |  This secret function would allow you to arbitrarily wirelessly send whatever can messages you
1026.90s - 1032.22s |  want as if you were connected over Bluetooth, Wi-Fi, anything like that.
1034.34s - 1039.78s |  All right, so while I was doing this, I didn't have much experience with ESP32s, but I know
1039.78s - 1043.58s |  that they're loved in the IoT community, and one of the things I knew about them is that
1043.58s - 1051.26s |  they could simultaneously be an access point and a station, or a client and an access point,
1051.26s - 1052.26s |  essentially.
1052.26s - 1056.50s |  And so this would allow us to create a worm, a device that would not only be able to execute
1056.50s - 1061.66s |  the attack, but could also scan for and spread to other devices.
1061.66s - 1065.92s |  So we get a lot of truck deliveries to our building where we were working, and we didn't
1065.92s - 1069.60s |  really think it was worth it to build this full cyber weapon on the actual device.
1069.60s - 1073.36s |  So we switched over to dev boards, and on these dev boards, we developed this worm.
1073.36s - 1077.72s |  And essentially, it works exactly like how it would on the actual devices.
1077.72s - 1081.72s |  It just goes ahead, uses the default credentials to log in, perform an over-the-air update,
1081.72s - 1084.76s |  and copy itself onto the new device.
1084.76s - 1086.48s |  So is this realistic?
1086.48s - 1087.84s |  I would argue yes.
1087.84s - 1089.52s |  Trucks congregate a lot.
1089.52s - 1093.98s |  They have truck stops, gas stations, rest stops, ports, distribution centers, hubs.
1093.98s - 1098.34s |  And if you've ever been on the highway, sometimes they take a really long time to pass each
1098.34s - 1099.84s |  other.
1099.84s - 1105.58s |  We found that with the normal ESP32 dev boards, we were able to get a total distance of about
1105.58s - 1108.46s |  120 feet in a dense parking lot.
1108.46s - 1112.34s |  So this is between all of the different cars that were parked there.
1112.34s - 1117.02s |  So that's about 12 parking spaces.
1117.02s - 1120.52s |  Now, the other thing that we found, that for many trucks, the diagnostic port is also
1120.52s - 1124.84s |  left on all the time, which means that it can continually spread, even while the driver
1124.84s - 1129.32s |  is sleeping in one of those large sleeper trucks.
1129.32s - 1130.56s |  So this is fixed, right?
1130.56s - 1135.32s |  This ability for us to drive up alongside of a truck that's using these popular ELD
1135.32s - 1140.52s |  devices, reflash it, and then control the vehicle, causing it to speed up, slow down,
1140.52s - 1143.12s |  spread a worm, something like that is fixed.
1143.12s - 1145.44s |  Well, IO6 responded great.
1145.44s - 1150.94s |  They went ahead and they pushed out a patch to fix these issues, and they overall responded
1150.94s - 1153.24s |  well to the vulnerability report.
1153.24s - 1158.74s |  But these vulnerabilities arose from government-mandated, self-certified devices that lacked sufficient
1158.74s - 1160.14s |  security standards.
1160.14s - 1165.18s |  So we argue that since government regulators have little incentive to get security right,
1165.18s - 1167.70s |  the problem is not fixed until that changes.
1167.70s - 1168.50s |  Thank you.