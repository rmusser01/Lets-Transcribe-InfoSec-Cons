{
  "webpage_url": "https://www.youtube.com/watch?v=WG_oXtUTEoI",
  "title": "DEF CON 32 - Transforming AppSec  Protecting 'Everything as Code' - Kunal Bhattacharya",
  "description": "The continuous adoption of emerging technological trends like Mobile, IoT, Cloud, Blockchains, and now GenAI has transformed application security from simple threat modeling and SAST/DAST scans to comprehensive proactive prevention and real-time detection of security anomalies. This panel will discuss the dynamic nature of AppSec as the lines between traditional infrastructure and cloud environments blur. We will explore the importance of maintaining a comprehensive security posture within 'everything as code' ecosystems, emphasizing proper configuration and secret management to secure infrastructure effectively.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2698,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.11s - 3.11s | This text was transcribed using whisper model: large-v2

 Hi, my name is Kunal Bhattacharya.
3.11s - 6.11s |  I'm a senior security leader and advisor.
6.11s - 9.11s |  My security journey has been pretty long.
9.11s - 13.11s |  Before I came into security, I've done a bunch of different things.
13.11s - 18.11s |  I was a developer, was a sysadmin, was a QA architect.
18.11s - 22.11s |  I finally moved to security and never looked back.
22.11s - 27.11s |  I also have had the privilege of building a homegrown bug bounty program
27.11s - 31.11s |  before the likes of HackerOne. I don't know if they are the sponsor.
31.11s - 36.11s |  And then eventually moved into a lot of the security stuff.
36.11s - 42.11s |  And I just consider myself to be a lifelong learner.
42.11s - 50.11s |  Apart from security, I guess I'm an avid runner, swimmer, dad, whatever.
50.11s - 55.11s |  Yeah, so that's me. Sarah, you want to introduce yourself?
55.11s - 57.11s |  Hey, everyone. My name is Sarah Dharzadeh.
57.11s - 59.11s |  I lead vulnerability management at DocuSign.
59.11s - 64.11s |  I've been in the vulnerability management space specifically for about five years
64.11s - 67.11s |  and really passionate about infrastructure security,
67.11s - 71.11s |  about patch automation, and also emergent vulnerability response.
71.11s - 73.11s |  As it relates to everything as code,
73.11s - 78.11s |  my first introduction to everything as code was infrastructure as code.
78.11s - 81.11s |  When I was building patch workflows in AWS,
81.11s - 85.11s |  utilizing everything, all of my resources were deployed using CloudFormation.
85.11s - 90.54s |  So I'm really passionate about this talk as well.
90.54s - 93.54s |  Hi, everyone. My name is Shaka Aman,
93.54s - 97.54s |  and I'm the CEO and co-founder of Backslash Security.
97.54s - 103.08s |  Backslash is doing reachability-based AppSec.
103.08s - 109.08s |  What do I want for AppSec?
109.08s - 111.08s |  How about now? Better?
111.08s - 120.91s |  Hi. Can you hear me at the back? Perfect.
120.91s - 125.91s |  So, again, Shaka Aman, co-founder and CEO of Backslash Security.
125.91s - 131.91s |  Previously, I was leading the engineering team of a company called Aqua Security,
131.91s - 135.91s |  including the product management for putting out there
135.91s - 138.91s |  very nice open-source tools for the community,
138.91s - 141.91s |  like Trivi, CubeHunter, if you're using some of those.
141.91s - 145.91s |  And most of my career I spent with the enterprise leading engineering team,
145.91s - 150.91s |  mainly at SAP, both in Germany and Tel Aviv.
150.91s - 152.91s |  Happy to be here today.
152.91s - 157.15s |  Thank you, Shahal.
157.15s - 159.15s |  Before I introduce myself,
159.15s - 162.15s |  it's an absolute honor and privilege to be here
162.15s - 166.15s |  and sharing stage with these seasoned leaders.
166.15s - 170.15s |  But I do want to take 10 seconds to express silent gratitude
170.15s - 172.15s |  to our awesome volunteers.
172.15s - 177.15s |  So let's have a big round of applause for our volunteers.
177.15s - 185.13s |  You know, they spend a lot of hours for these operations to run smoothly.
185.13s - 188.13s |  And I really want to make sure their efforts
188.13s - 193.13s |  and all the hard work they put shouldn't get unrecognized.
193.13s - 200.46s |  So thank you again, all the awesome volunteers of DEF CON.
200.46s - 202.46s |  Everyone, my name is Trukti.
202.46s - 205.46s |  I'm director of product security at DocuSign.
205.46s - 211.46s |  And before entering the awesome field of software security,
211.46s - 214.46s |  18 years back, I was a mobile game developer.
214.46s - 218.46s |  So I'm a developer turned cybersecurity professional.
218.46s - 220.46s |  And I absolutely love doing security.
220.46s - 222.46s |  I don't know what else I'll do.
222.46s - 224.46s |  It's a passion. It's a purpose.
224.46s - 227.46s |  I even call this is my Ikegai.
227.46s - 229.46s |  When I'm not doing security,
229.46s - 234.46s |  I like to paint, do nature work, and meditate.
234.46s - 236.46s |  So that's about me.
236.46s - 239.46s |  Thanks, everyone, for the introduction.
239.46s - 241.46s |  We have some veterans here.
241.46s - 244.46s |  So quickly jumping to the topic.
244.46s - 247.46s |  AppSec, it's a very loaded term these days.
247.46s - 251.46s |  And people ask me, what is AppSec?
251.46s - 255.46s |  And why do you want to transform it?
255.46s - 257.46s |  So what is AppSec?
257.46s - 260.46s |  It is application security, as everyone knows.
260.46s - 265.46s |  I want to talk about how AppSec has been in the past
265.46s - 267.46s |  and what we are seeing now as trends.
267.46s - 272.46s |  And what do we anticipate how things will be going forward?
272.46s - 276.46s |  Probably like a prediction from the veterans here.
276.46s - 281.46s |  With that said, we'll get to the questions that I had.
281.46s - 284.46s |  What are the key challenges in securing everything as code?
284.46s - 286.46s |  Nowadays, everything is code.
286.46s - 287.46s |  Policy is code.
287.46s - 289.46s |  Code is code, for sure.
290.46s - 295.46s |  Including things like ISE, GitOps, serverless.
295.46s - 297.46s |  What are the bigger challenges that exist today?
297.46s - 301.06s |  Sarah, do you want to take that?
301.06s - 305.06s |  So I'd say before the popularization of everything as code,
305.06s - 308.06s |  I think things were a lot more straightforward and clean-cut.
308.06s - 313.06s |  I think in terms of separation of roles and duties,
313.06s - 317.06s |  the network engineer versus the application developer
317.06s - 319.06s |  versus security versus ops.
319.06s - 323.06s |  Those had very specific clean-cut roles and responsibilities.
323.06s - 327.06s |  And the understanding of what their assets were
327.06s - 331.06s |  and how they applied to them was also really straightforward.
331.06s - 334.06s |  And then on the security side, similarly,
334.06s - 336.06s |  because of that same asset delineation,
336.06s - 340.06s |  I think knowing what we were going to run assessments on
340.06s - 342.06s |  tended to be a lot more straightforward.
342.06s - 344.06s |  We knew what we were going to run, where we were going to run it,
344.06s - 348.06s |  how we were going to run it, what those scans were going to produce.
348.06s - 354.06s |  And that made things a lot more easy to process.
354.06s - 358.06s |  In terms of today, I see three main challenges with everything as code.
358.06s - 364.06s |  I think the first thing is that there's really no longer that separation of duties.
364.06s - 368.06s |  So everybody is sort of speaking in similar languages.
368.06s - 371.06s |  Some may be more familiar with those languages than others.
371.06s - 376.06s |  A lot of people are going to be learning completely new languages,
376.06s - 378.06s |  all of us at the same time.
378.06s - 382.06s |  And that can present challenges in terms of understanding who owns what,
382.06s - 385.06s |  how do we get the right context to the right people,
385.06s - 390.06s |  and who's going to ultimately do remediation work.
390.06s - 392.06s |  In terms of other challenges that I see,
392.06s - 397.06s |  I think data is another big one on the security side.
397.06s - 403.06s |  With everything as code, we are just producing a crap ton of data,
403.06s - 405.06s |  especially on the vulnerability management side.
406.06s - 410.06s |  Unfortunately, I think a lot of security budgets don't include a ton of money
410.06s - 414.06s |  for really awesome data architects to help us make sense of it all.
414.06s - 418.06s |  So how do we normalize and correlate all of this data?
418.06s - 421.06s |  How do we build complex data models?
421.06s - 427.06s |  How do we ensure that we have good performance against all of our data sets?
427.06s - 429.06s |  That's another really big challenge.
429.06s - 430.06s |  Yeah.
430.06s - 431.06s |  That's it.
431.06s - 433.06s |  Some big things in mind.
433.06s - 434.06s |  Thanks, Sarah.
434.06s - 435.06s |  That was very good.
435.06s - 438.06s |  You talked about the data side, which, of course, goes into AI.
438.06s - 441.06s |  So I'm just going to hold on until I get to that.
441.06s - 446.06s |  But, Trupti, what are your views on this?
446.06s - 452.57s |  I think our high-tech industry has seen numerous emerging trends.
452.57s - 457.57s |  How many of you remember evolution of iPhone and iPhone-based application,
457.57s - 459.57s |  the mobile era?
459.57s - 462.57s |  How many of you remember the IoT era?
462.57s - 468.88s |  And then how many of you remember the cryptocurrency era?
468.88s - 472.88s |  Who actually thought they will make enough money that they can retire?
472.88s - 473.88s |  Good.
473.88s - 475.88s |  All of you are smart.
475.88s - 478.88s |  And then recently we saw the Gen AI era, right?
478.88s - 484.88s |  So all these emerging trends, and as we move from monolith to microservice
484.88s - 489.88s |  and low-code, no-code type of architectural style enterprise application
489.88s - 493.88s |  deployed in cloud, what is one thing common?
493.88s - 496.88s |  Everything is accessible via API.
496.88s - 497.88s |  Everything is API-based.
497.88s - 498.88s |  What does that mean?
498.88s - 501.88s |  Everything has become code, right?
501.88s - 506.88s |  So no matter what newer technology comes, everything is code nowadays.
506.88s - 511.88s |  And we are supposed to launch our products where APIs are available.
511.88s - 518.88s |  So I see for product security, Kunal, that we as a security engineer,
518.88s - 521.88s |  product security engineer, we are supposed to quickly learn
521.88s - 526.88s |  about the emerging technologies, not only how to secure them,
526.88s - 531.88s |  but the business logic context and whatnot, and stay ahead of the game.
531.88s - 533.88s |  That's the biggest challenge I see.
533.88s - 536.88s |  What about you, Shahar?
536.88s - 538.88s |  Yeah, maybe I'll add to that.
538.88s - 541.88s |  You know, in the past, things used to be very simple.
541.88s - 544.88s |  I remember my days back at SAP.
544.88s - 547.88s |  It was a clear separation between the application guys
547.88s - 548.88s |  and the infrastructure guys.
548.88s - 550.88s |  It was like a huge wall.
550.88s - 553.88s |  When you're done with developing, you just throw it over the wall
553.88s - 556.88s |  to the infrastructure guys.
556.88s - 559.88s |  They'll need to deploy it, make sure it's secure, et cetera.
559.88s - 565.88s |  And now, with the beasts coming from the infrastructure world
565.88s - 571.88s |  into the application space, living in the Git as a code artifact,
571.88s - 574.88s |  it brings a very different mindset, not only technology,
574.88s - 576.88s |  to the different parts.
576.88s - 580.88s |  So maybe just to give one example.
580.88s - 585.88s |  In a raise of hands, how many of you have worked with containers?
585.88s - 587.88s |  Right, so it's becoming very popular.
587.88s - 592.88s |  But it's not that obvious that developers need to take part
592.88s - 597.88s |  in the infrastructure layer of the base image, for example.
597.88s - 600.88s |  It contains stuff that was not in our responsibility.
600.88s - 602.88s |  You know, as developers, we just want things to work.
602.88s - 605.88s |  Once they work, we're fine, we're happy.
605.88s - 609.88s |  We don't just start looking into vulnerabilities in the operating system,
609.88s - 610.88s |  in the core.
610.88s - 613.88s |  When it works, we're happy.
613.88s - 617.88s |  So the challenge is now responsibility have shifted left,
617.88s - 619.88s |  have shifted to where the code lives,
619.88s - 622.88s |  also for artifacts that traditionally
622.88s - 625.88s |  was not part of the engineering responsibilities.
625.88s - 628.88s |  And I think this is one of the biggest challenges
628.88s - 631.88s |  to understand that infrastructure has moved
631.88s - 634.88s |  and is being maintained in another part of the house.
634.88s - 639.88s |  Now, while this is challenging from security point of view,
639.88s - 642.88s |  it brings a lot of opportunities and speed
642.88s - 644.88s |  into the development hands, right?
644.88s - 647.88s |  If you build your new terraform, cloud formation,
647.88s - 649.88s |  base images yourself in the team
649.88s - 652.88s |  and you have good practices to handle them,
652.88s - 654.88s |  you don't need to wait for infrastructure guys
654.88s - 657.88s |  to upgrade your VMs, upgrade your base images, etc.
657.88s - 659.88s |  You control that.
659.88s - 663.88s |  So, you know, as they say, you need brakes in your car
663.88s - 666.88s |  to run faster, right?
666.88s - 669.88s |  Because without having brakes, you wouldn't go that fast.
669.88s - 672.88s |  The same with security and infrastructure, in my opinion.
672.88s - 674.88s |  As long as you have the right brakes,
674.88s - 677.88s |  you can go as fast as you want with engineering,
677.88s - 680.88s |  building and upgrading the artifacts
680.88s - 682.88s |  also for the infrastructure part.
682.88s - 684.88s |  So these are the two things that are,
684.88s - 687.88s |  two insights coming to mind when talking about it.
687.88s - 689.88s |  Yeah, thanks, Shahar and Dhrupti.
689.88s - 692.88s |  Since you talked about the developer part,
692.88s - 695.88s |  one question that comes to mind is basically,
695.88s - 698.88s |  how do you guys see the developer education
698.88s - 700.88s |  in terms of application security?
701.88s - 704.88s |  Because coming from a development background,
704.88s - 707.88s |  I feel it gives a different perspective
707.88s - 710.88s |  when you can actually see things from a developer perspective
710.88s - 712.88s |  and then protect it.
712.88s - 715.88s |  But at the same time, there's also emphasis
715.88s - 718.88s |  that needs to be laid on developer education.
718.88s - 721.88s |  And when we talk about everything as code,
721.88s - 723.88s |  things like ISE,
723.88s - 725.88s |  I think, Shahar, you touched upon it a little bit,
725.88s - 727.88s |  saying that you just throw it over the fence
727.88s - 729.88s |  to operations previously.
729.88s - 733.88s |  I've still seen that happen with ISE code.
733.88s - 735.88s |  Oh, this is just a template.
735.88s - 737.88s |  It's not really code.
737.88s - 741.88s |  And I've seen security engineers or leaders fight saying,
741.88s - 742.88s |  it is code.
742.88s - 745.88s |  And how do you guys see that in that context?
745.88s - 748.88s |  Yeah, maybe I hope we're not going to start a fight
748.88s - 750.88s |  between Dhrupti and myself,
750.88s - 752.88s |  but we see things very differently.
752.88s - 753.88s |  So from my perspective,
753.88s - 756.88s |  leading engineering team for the last 20 years,
756.88s - 761.88s |  I think the exercise of educating developers,
761.88s - 765.88s |  being more security aware, kind of failed.
765.88s - 767.88s |  I mean, let's face it.
767.88s - 771.88s |  Developers, they don't care about security for good reasons.
771.88s - 774.88s |  They're passionate about developing features,
774.88s - 775.88s |  about going fast,
775.88s - 780.88s |  about the functionality that they bring to the world,
780.88s - 781.88s |  and they get paid for that.
781.88s - 784.88s |  So it's always a burden or a hustle for them
784.88s - 787.88s |  to treat security in the right way.
787.88s - 789.88s |  We expect them to do that, right?
789.88s - 791.88s |  So, and not only security.
791.88s - 794.88s |  When we talk to developers these days,
794.88s - 797.88s |  they feel like everything is being shifted left.
797.88s - 799.88s |  There's no QA paradigm anymore.
799.88s - 801.88s |  They need to do it themselves.
801.88s - 802.88s |  They need to do security.
802.88s - 804.88s |  They need to do documentation of the code.
804.88s - 806.88s |  So out of their, you know,
806.88s - 810.88s |  100% of writing code and creating functionality,
810.88s - 812.88s |  they need to spend a lot of time on that.
812.88s - 813.88s |  This is a challenge.
813.88s - 818.88s |  So I think shifting left might have gone too much,
818.88s - 824.88s |  expecting developers to create security on their part.
824.88s - 825.88s |  I don't think that's fair.
825.88s - 827.88s |  I think the gates may have shifted left,
827.88s - 831.88s |  and that's very right to put it as part of the CICD, et cetera.
831.88s - 835.88s |  But the wisdom and the expertise of doing the right policies,
835.88s - 836.88s |  the right security,
836.88s - 838.88s |  it's still with the AppSec team,
838.88s - 840.88s |  with the DevSecOps guys.
840.88s - 844.88s |  It's a profession to be an application security person.
844.88s - 847.88s |  This is why we've chosen to be in that profession.
847.88s - 851.88s |  And if you're able in a program
851.88s - 855.88s |  to get the wisdom of security into the policies
855.88s - 860.88s |  and let alone the developers to work under these policies,
860.88s - 861.88s |  that's the balanced way,
861.88s - 863.88s |  not just giving them more and more education
863.88s - 867.88s |  about SQL injection, past reversal, you name it.
867.88s - 868.88s |  I mean, they got it.
869.88s - 873.88s |  Second point is that you can educate 99% of your developers,
873.88s - 877.88s |  but your security program is only as strong
877.88s - 879.88s |  as your weakest developer, right?
879.88s - 881.88s |  So you can have one new guy,
881.88s - 883.88s |  a junior guy who joined the development team,
883.88s - 884.88s |  just added a code.
884.88s - 886.88s |  He didn't know exactly how to do that.
886.88s - 888.88s |  He was not educated yet,
888.88s - 891.88s |  but you've compromised your entire production
891.88s - 893.88s |  because of this particular code.
893.88s - 895.88s |  So this is where I am right now
895.88s - 897.88s |  with my thinking around development
897.88s - 899.88s |  and AppSec responsibility.
899.88s - 902.88s |  And I'll let Drupty very nicely contradict me.
906.58s - 909.58s |  So Shahar, I do understand your concerns
909.58s - 912.58s |  about shifting security left completely,
912.58s - 914.58s |  but let me ask the audience,
914.58s - 918.58s |  how many of you think we can scale product security,
918.58s - 920.58s |  application security without developer?
920.58s - 922.58s |  Please raise your hand.
923.58s - 925.58s |  Not a single hand.
926.58s - 929.58s |  So thank you, audience, for being with me.
931.58s - 933.58s |  Okay, all right.
935.58s - 937.58s |  So, you know, when we provide
937.58s - 940.58s |  our developers generic security trainings,
940.58s - 942.58s |  obviously they are not going to get, you know,
942.58s - 945.58s |  full knowledge that is needed
945.58s - 948.58s |  to take those security decisions.
948.58s - 951.58s |  So the security champions program that I have designed,
951.58s - 953.58s |  I always make sure,
953.58s - 955.58s |  depending on the developer's role,
955.58s - 958.58s |  the kind of technology they are using,
958.58s - 962.58s |  provide that customized contextual training to them
962.58s - 964.58s |  so that they understand the attacks
964.58s - 966.58s |  which are related to their technology,
966.58s - 969.58s |  their application, their SDLC,
969.58s - 973.58s |  and they can understand the actionable remediation guidance.
973.58s - 975.58s |  What I have seen in my last 10 years
975.58s - 978.58s |  of running security champions program,
978.58s - 980.58s |  when we provide that level of customized
980.58s - 983.58s |  targeted knowledge to our developers,
983.58s - 986.58s |  they exactly know how to solve the problem,
986.58s - 989.58s |  how to identify security problem and fix it right away.
989.58s - 993.58s |  And sometimes developers are so smart,
993.58s - 996.58s |  they have identified deeper level of issues
996.58s - 998.58s |  that product security engineers have not.
998.58s - 1000.58s |  Because product security engineers
1000.58s - 1002.58s |  go from application to application,
1002.58s - 1004.58s |  one system to another system,
1004.58s - 1008.58s |  they rarely develop that deeper level of context.
1008.58s - 1011.58s |  So I have seen very successful cases.
1011.58s - 1015.58s |  One of the thing that my good friend Sarah brought up,
1015.58s - 1017.58s |  if you want to have security checks
1017.58s - 1020.58s |  before every PR merge,
1020.58s - 1022.58s |  can we have security engineers do that?
1022.58s - 1023.58s |  Absolutely not.
1023.58s - 1026.58s |  In this way, security becomes the bottlenecks.
1026.58s - 1028.58s |  We can't match the speed of innovation.
1028.58s - 1033.58s |  So I really think if product security invest enough time
1033.58s - 1035.58s |  building and delivering
1035.58s - 1037.58s |  those contextual trainings to our developer,
1037.58s - 1041.58s |  they absolutely love and welcome this level of knowledge.
1041.58s - 1043.58s |  And last thing,
1043.58s - 1045.58s |  it's not the developers that we need to target,
1045.58s - 1048.58s |  we also need to educate our product managers
1048.58s - 1050.58s |  on how to match business requirement
1050.58s - 1052.58s |  with security requirement.
1052.58s - 1055.58s |  We also need to educate our TPMs,
1055.58s - 1056.58s |  engineering managers,
1056.58s - 1059.58s |  so that they know how to prioritize security backlog
1059.58s - 1062.58s |  and systematically reduce risk.
1062.58s - 1069.34s |  I would say that I agree with both of you
1069.34s - 1070.34s |  in different ways.
1071.34s - 1073.34s |  Realistically, yes.
1073.34s - 1075.34s |  I don't think that you're going to have...
1075.34s - 1077.34s |  I don't think your dev team is going to be very happy
1077.34s - 1080.34s |  if your team of five application security engineers
1080.34s - 1082.34s |  are the bottleneck for six to 12 hours
1082.34s - 1084.34s |  waiting for a PR to be merged
1084.34s - 1086.34s |  because it's in the pipeline,
1086.34s - 1087.34s |  there's a gate check,
1087.34s - 1090.34s |  and they either don't have the context
1090.34s - 1091.34s |  to figure it out themselves
1091.34s - 1095.34s |  or they need a validation or an exception,
1095.34s - 1096.34s |  and they're just waiting.
1096.34s - 1097.34s |  That's not realistic.
1098.34s - 1099.34s |  And so to that regard,
1099.34s - 1100.34s |  I agree with you.
1100.34s - 1102.34s |  I think it cannot just be
1102.34s - 1103.34s |  application security engineers
1103.34s - 1105.34s |  and vulnerability management engineers
1105.34s - 1108.34s |  that are performing these tasks
1108.34s - 1111.34s |  and doing the validation.
1111.34s - 1113.34s |  However, I do also think that
1113.34s - 1114.34s |  on the training side,
1114.34s - 1116.34s |  on effectiveness of training,
1116.34s - 1119.34s |  I think realistically in the future,
1119.34s - 1120.34s |  I wouldn't be surprised
1120.34s - 1123.34s |  if most formal structured training
1123.34s - 1125.34s |  was really minimized
1125.34s - 1127.34s |  while constant learning
1127.34s - 1129.34s |  through things like co-pilot, et cetera,
1129.34s - 1131.34s |  were much more relevant
1131.34s - 1133.34s |  and those reminders in the IDE
1133.34s - 1134.34s |  and your linters
1134.34s - 1137.34s |  were used as the primary source of training
1137.34s - 1141.34s |  on the fly with your actual application code.
1141.34s - 1144.34s |  Yeah, training is definitely a very key component.
1144.34s - 1145.34s |  I remember one of the organizations
1145.34s - 1146.34s |  that I was at,
1146.34s - 1150.34s |  we tried to gamify the whole training.
1150.34s - 1152.34s |  We put together something
1152.34s - 1154.34s |  on the theme of Game of Thrones
1155.34s - 1156.34s |  so we had night commanders
1156.34s - 1158.34s |  and all of that,
1158.34s - 1160.34s |  which went pretty cool.
1160.34s - 1162.34s |  So it really depends upon
1162.34s - 1164.34s |  the organization culture.
1164.34s - 1165.34s |  But one other thing
1165.34s - 1167.34s |  that I would like to say is
1167.34s - 1168.34s |  when you talk about shift left,
1168.34s - 1169.34s |  that's overtly used
1169.34s - 1171.34s |  and sometimes abused.
1171.34s - 1173.34s |  But Shahar, what you were talking about
1173.34s - 1175.34s |  is basically putting it towards the right.
1175.34s - 1176.34s |  I think it's all a cycle.
1176.34s - 1179.34s |  So sometimes you need to shift right
1179.34s - 1180.34s |  to actually shift left.
1180.34s - 1182.34s |  I know it sounds counterproductive,
1182.34s - 1183.34s |  but this is the trend
1183.34s - 1185.34s |  that I've been seeing for some time
1185.34s - 1188.34s |  because let's say you're starting off a program
1188.34s - 1190.34s |  at the very early phases.
1190.34s - 1191.34s |  You want to stop the bleed.
1191.34s - 1192.34s |  So in that case,
1192.34s - 1194.34s |  you want to put things to the right
1194.34s - 1196.34s |  so that you're able to protect your crown jewels
1196.34s - 1199.34s |  and then gradually try to find it earlier
1199.34s - 1200.34s |  in the cycle.
1200.34s - 1203.34s |  So I think both are right to a certain extent.
1203.34s - 1205.34s |  Yeah, I have a thought.
1205.34s - 1208.34s |  After hearing to all the panelists
1208.34s - 1209.34s |  and moderator,
1209.34s - 1211.34s |  I genuinely think that we need
1211.34s - 1213.34s |  to strengthen our right
1213.34s - 1215.34s |  while shifting left like a boss
1215.34s - 1218.34s |  and have a really strong governance program
1218.34s - 1221.34s |  so that even if our awesome developers
1221.34s - 1224.34s |  who are our unsung security warriors
1224.34s - 1227.34s |  miss on certain vulnerabilities or fixes,
1227.34s - 1229.34s |  we should be able to catch it.
1229.34s - 1230.34s |  So yeah, I'm going to reiterate,
1230.34s - 1232.34s |  let's strengthen our right
1232.34s - 1235.34s |  while shifting left like a boss.
1237.34s - 1238.34s |  Thanks, Shruti.
1238.34s - 1240.34s |  I know you're very passionate about this.
1240.34s - 1242.34s |  Moving on,
1242.34s - 1244.34s |  how can organizations leverage,
1244.34s - 1245.34s |  we talked about the pipeline, right?
1245.34s - 1247.34s |  How can organizations leverage automation
1247.34s - 1250.34s |  and a CI-CD pipeline,
1250.34s - 1253.34s |  especially in the context of everything as tech,
1253.34s - 1256.34s |  things like ISE and GitOps and things?
1258.34s - 1259.34s |  Yeah, maybe I can start.
1259.34s - 1260.34s |  So as mentioned,
1260.34s - 1265.34s |  I think that the trend of having more visibility
1265.34s - 1266.34s |  in the pipeline
1266.34s - 1269.34s |  to what's going on in terms of security
1269.34s - 1270.34s |  is welcome.
1270.34s - 1273.34s |  And I didn't see many brave organization
1273.34s - 1274.34s |  that actually forces
1274.34s - 1278.34s |  and stops the build for the developers
1278.34s - 1279.34s |  just for having them,
1279.34s - 1281.34s |  you know, fixing their security stuff
1281.34s - 1283.34s |  because there are just too many of those.
1283.34s - 1284.34s |  You would allow that
1284.34s - 1286.34s |  if you have five or four in the CI-CD,
1286.34s - 1288.34s |  okay, we'll stop, we understand.
1288.34s - 1291.34s |  But then if their request is to stop your build
1291.34s - 1295.34s |  and go ahead, fix your 1500 vulnerability issues,
1295.34s - 1297.34s |  I just wanted to add another button
1297.34s - 1298.34s |  to the application.
1298.34s - 1299.34s |  That's not going to work.
1299.34s - 1303.34s |  And, you know, sometimes we hear the dynamic
1303.34s - 1305.34s |  that application security teams ask
1305.34s - 1307.34s |  to prioritize the issues.
1307.34s - 1308.34s |  And you know what?
1308.34s - 1310.34s |  Let's just prioritize them.
1310.34s - 1313.34s |  Now, here's the thing with priorities.
1313.34s - 1317.34s |  That's sometimes humanly impossible.
1317.34s - 1320.34s |  Just think about a list of 10 items
1320.34s - 1323.34s |  that you would like to prioritize.
1323.34s - 1324.34s |  That's a small list.
1324.34s - 1325.34s |  It seems manageable.
1325.34s - 1326.34s |  We do it every day.
1326.34s - 1328.34s |  But if you want to do it right,
1328.34s - 1330.34s |  there are more than 3 million options
1330.34s - 1334.34s |  to prioritize a 10 items list, right?
1334.34s - 1336.34s |  That's the numbers.
1336.34s - 1337.34s |  That's the math behind it.
1337.34s - 1338.34s |  So just imagine what happens
1338.34s - 1341.34s |  when you look at a thousand items list
1341.34s - 1343.34s |  and you ask them to prioritize.
1343.34s - 1345.34s |  So we've all settled
1345.34s - 1350.34s |  on a stateless generic prioritization system
1350.34s - 1353.34s |  like CVSS, EPSS from the outside.
1353.34s - 1354.34s |  Okay, you know what?
1354.34s - 1355.34s |  Let's just do the critical.
1355.34s - 1357.34s |  But then the frustration is that
1357.34s - 1358.34s |  there's no real correlation
1358.34s - 1361.34s |  between my intimate understanding
1361.34s - 1363.34s |  of the risk of the application
1363.34s - 1365.34s |  and the CVSS scoring outside.
1365.34s - 1366.34s |  So here's another triage
1366.34s - 1369.34s |  that needs to go for each one of them.
1369.34s - 1371.34s |  So it all comes down to the numbers
1371.34s - 1373.34s |  that you need to handle.
1373.34s - 1376.34s |  You cannot just move everything left
1376.34s - 1377.34s |  if you have not cleaned up
1377.34s - 1379.34s |  with the right policies.
1379.34s - 1380.34s |  What do you want to fix
1380.34s - 1381.34s |  that it's actionable
1381.34s - 1382.34s |  for the developer teams?
1382.34s - 1384.34s |  I think that's the right balance.
1384.34s - 1385.34s |  If you figure that out,
1385.34s - 1387.34s |  this will be a working,
1387.34s - 1390.34s |  a successful shift left program.
1390.34s - 1392.82s |  Thank you, Shahar,
1392.82s - 1395.82s |  for bringing up the prioritization part.
1395.82s - 1398.82s |  I want to focus on two other things.
1398.82s - 1400.82s |  Before automating your CICD,
1400.82s - 1402.82s |  make your SREs and DevOps folks
1402.82s - 1404.82s |  your best friend.
1404.82s - 1408.82s |  Try to get inventory of your CICD.
1408.82s - 1411.82s |  Not all organization have unified CICD,
1411.82s - 1413.82s |  especially organizations
1413.82s - 1415.82s |  which have legacy systems
1415.82s - 1418.82s |  or organizations which are very heavy
1418.82s - 1420.82s |  on merger acquisition.
1420.82s - 1423.82s |  So we may have multiple flavors of CICD.
1423.82s - 1426.82s |  So get the asset inventory first.
1426.82s - 1427.82s |  Try to figure out
1427.82s - 1429.82s |  how does your CICD look like.
1429.82s - 1431.82s |  And then second thing is
1431.82s - 1433.82s |  many CICD pipelines
1433.82s - 1436.82s |  have some inherent native security controls.
1436.82s - 1437.82s |  For example,
1437.82s - 1439.82s |  GitHub has branch protection.
1439.82s - 1442.82s |  So definitely leverage those
1442.82s - 1445.82s |  before buying another third-party commercial tool.
1445.82s - 1447.82s |  Sarah?
1447.82s - 1449.82s |  Yeah.
1449.82s - 1453.82s |  I would say that I think generally
1453.82s - 1455.82s |  there is so much that CICD
1455.82s - 1457.82s |  and policy as code
1457.82s - 1458.82s |  and infrastructure as code
1458.82s - 1460.82s |  has really opened up the door
1460.82s - 1464.82s |  for infrastructure security specifically.
1464.82s - 1466.82s |  Immutability wasn't even like a topic
1466.82s - 1468.82s |  that was possible before that.
1468.82s - 1470.82s |  And so it's really awesome
1470.82s - 1472.82s |  to see the sustainability
1472.82s - 1475.82s |  that is kind of embedded in that
1475.82s - 1478.82s |  and how you use infrastructure as code
1478.82s - 1481.82s |  and everything as code in your pipelines.
1481.82s - 1483.82s |  I think I would also agree
1483.82s - 1485.82s |  that it's hard.
1485.82s - 1486.82s |  It's complex.
1486.82s - 1487.82s |  The cloud is complex.
1487.82s - 1489.82s |  It's going to take a lot of work
1489.82s - 1491.82s |  to figure out the right set of rules.
1491.82s - 1494.82s |  You have to be really intentional about that.
1494.82s - 1496.82s |  You have to probably roll it out pretty slowly.
1496.82s - 1498.82s |  You have to think about exceptions
1498.82s - 1500.82s |  and how you're going to scale exceptions.
1500.82s - 1502.82s |  It's probably not going to be
1502.82s - 1505.82s |  by individuals, people responding to exceptions.
1505.82s - 1507.82s |  So how are you going to do that at scale?
1507.82s - 1511.82s |  And that's a huge topic in enterprise security
1511.82s - 1513.82s |  and application security.
1513.82s - 1515.82s |  Yeah, totally makes sense.
1515.82s - 1518.82s |  Kind of segwaying into something
1518.82s - 1520.82s |  which is what you talked about, Sarah,
1520.82s - 1522.82s |  and I think, Shahar, you talked about earlier as well,
1522.82s - 1525.82s |  which is around ESE.
1525.82s - 1529.82s |  And in the context of the lines getting blurred
1529.82s - 1531.82s |  with application code, infrastructure code,
1531.82s - 1534.82s |  everything as code,
1534.82s - 1537.82s |  where does vulnerability management really fit in?
1537.82s - 1540.82s |  Is the concept of unified vulnerability management
1540.82s - 1542.82s |  something that would really work?
1542.82s - 1544.82s |  Because I worked in organizations
1544.82s - 1546.82s |  where you have different SLAs
1546.82s - 1548.82s |  for application-level vulnerabilities
1548.82s - 1551.82s |  and infrastructure-level vulnerabilities.
1551.82s - 1554.82s |  Does this concept of unified vulnerability management
1554.82s - 1556.82s |  really resonate in today's world
1556.82s - 1558.82s |  with everything becoming code?
1558.82s - 1560.82s |  Sarah?
1560.82s - 1563.82s |  No, yes, maybe, probably.
1563.82s - 1567.82s |  I think that's a really hard question to answer.
1567.82s - 1570.82s |  I think, in general,
1570.82s - 1571.82s |  you have to know what you mean
1571.82s - 1574.82s |  by unified vulnerability management.
1574.82s - 1577.82s |  Are we talking about unifying the tooling sets
1577.82s - 1579.82s |  of what's performing assessments?
1579.82s - 1583.82s |  Or are we talking about unifying data and reporting?
1583.82s - 1585.82s |  Those are two separate concepts entirely.
1585.82s - 1588.82s |  And I think, with tooling,
1588.82s - 1592.82s |  it really depends on your business's structure
1592.82s - 1596.82s |  and requirements, to your point, Tripti.
1596.82s - 1597.82s |  And I think, a lot of times,
1597.82s - 1599.82s |  that's going to be a lot harder,
1599.82s - 1604.82s |  especially as you grow in size of your company.
1604.82s - 1606.82s |  I think it's going to be a lot harder to optimize that,
1606.82s - 1610.82s |  but I think it's a worthwhile endeavor for a lot of cases
1610.82s - 1612.82s |  because the complexity of all these scans
1612.82s - 1615.82s |  becomes very, very nebulous.
1615.82s - 1617.82s |  But what's probably more realistic
1617.82s - 1620.82s |  in terms of unification is unification of data.
1620.82s - 1623.82s |  I mean, ultimately, a lot of this stuff
1623.82s - 1625.82s |  is the same conceptually.
1625.82s - 1627.82s |  There is a thing that we have found,
1627.82s - 1629.82s |  and it needs to be fixed,
1629.82s - 1631.82s |  and it needs to be fixed at this time frame,
1631.82s - 1633.82s |  and it needs to be fixed by this person.
1633.82s - 1637.82s |  And that is something that can be unified.
1637.82s - 1639.82s |  But I did talk about some of the data challenges
1639.82s - 1641.82s |  embedded into that,
1641.82s - 1644.82s |  but that's where I would kind of lean into.
1644.82s - 1647.82s |  Just to provide a little bit more color to the question,
1647.82s - 1649.82s |  when I talk about unified volume management,
1649.82s - 1651.82s |  definitely data is one aspect.
1651.82s - 1653.82s |  But when I say volume management,
1653.82s - 1656.82s |  most organizations are policy-driven.
1656.82s - 1661.82s |  So you have a policy of saying that any issue,
1661.82s - 1664.82s |  any vulnerability needs to be fixed in,
1664.82s - 1667.82s |  let's say, one day or two days for critical,
1667.82s - 1672.82s |  five days for high and medium, so on and so forth.
1672.82s - 1676.82s |  So my question was mainly in the context of,
1676.82s - 1678.82s |  do you have the same SLAs?
1678.82s - 1680.82s |  And if so, can you put the same logic?
1680.82s - 1683.82s |  So, for example, the difference that I would see
1683.82s - 1687.82s |  in infrastructure-level vulnerabilities would be,
1687.82s - 1689.82s |  you just need to upgrade.
1689.82s - 1691.82s |  But there could be thousands of upgrades
1691.82s - 1692.82s |  that you would need to do,
1692.82s - 1694.82s |  which is where the automation comes into play,
1694.82s - 1696.82s |  versus, let's say, on the application level,
1696.82s - 1698.82s |  you actually need a design fix.
1698.82s - 1701.82s |  So does it really make sense to unify it?
1701.82s - 1702.82s |  So that's the...
1705.82s - 1707.82s |  No.
1707.82s - 1711.82s |  I don't think total unification of SLAs and activities
1711.82s - 1712.82s |  makes sense.
1712.82s - 1715.82s |  I think there are certain things
1715.82s - 1718.82s |  that you can potentially unify around that,
1718.82s - 1722.82s |  but perhaps things that you're finding in code
1722.82s - 1724.82s |  before it goes into an image
1726.82s - 1728.82s |  might have a different risk
1728.82s - 1731.82s |  compared to things that are already actively running
1731.82s - 1732.82s |  on a container image,
1732.82s - 1735.82s |  and you probably need to prioritize those differently,
1735.82s - 1736.82s |  for sure.
1736.82s - 1738.82s |  So I think there's a lot of, again, complex rule sets
1738.82s - 1740.82s |  that have to be embedded,
1740.82s - 1743.82s |  and your teams are going to have to sit down
1743.82s - 1746.82s |  and identify what those rule sets really look like
1746.82s - 1749.82s |  in the context of your business's risk tolerance.
1750.82s - 1752.82s |  Yeah, I agree with that.
1752.82s - 1754.82s |  Many times, organization,
1754.82s - 1757.82s |  for the sake of compliance teams and GRC teams,
1757.82s - 1759.82s |  if there are any GRC teams here,
1759.82s - 1761.82s |  please don't hate me.
1761.82s - 1765.82s |  So, yeah, for the sake of convenience,
1765.82s - 1767.82s |  people like to have same SLAs
1767.82s - 1769.82s |  for application security vulnerabilities
1769.82s - 1772.82s |  as well as infrastructure security vulnerability,
1772.82s - 1776.82s |  but if you look at the remediation phases,
1776.82s - 1778.82s |  application security vulnerability
1778.82s - 1780.82s |  sometimes are very hard to fix,
1780.82s - 1782.82s |  especially if it's going to require
1782.82s - 1784.82s |  design and architecture change,
1784.82s - 1785.82s |  and at that time,
1785.82s - 1788.82s |  we really have to be with our developers on their side
1788.82s - 1790.82s |  defending, you know,
1790.82s - 1793.82s |  why it's going to take four months or five months
1793.82s - 1794.82s |  and what it takes,
1794.82s - 1795.82s |  because oftentimes,
1795.82s - 1797.82s |  those who have never written code
1797.82s - 1799.82s |  or never done any development,
1799.82s - 1802.82s |  they don't understand what it takes to fix things, right?
1802.82s - 1804.82s |  So I genuinely think that we should have
1804.82s - 1806.82s |  different set of SLA
1806.82s - 1809.82s |  depending on the remediation efforts required.
1809.82s - 1813.26s |  Yeah, maybe I'll just add to that shortly.
1813.26s - 1816.26s |  I think from management perspective,
1816.26s - 1818.26s |  they really like to have one, you know,
1818.26s - 1819.26s |  single pane of glass
1819.26s - 1821.26s |  on a certain business unit or product,
1821.26s - 1822.26s |  but they can see,
1822.26s - 1825.26s |  they don't care if you have 500 or 300 issues,
1825.26s - 1826.26s |  they want to see the trend.
1826.26s - 1828.26s |  You used to have 500,
1828.26s - 1829.26s |  one quarter later,
1829.26s - 1831.26s |  you have 200 or 300,
1831.26s - 1834.26s |  so it's nice to capture them together in one tool,
1834.26s - 1836.26s |  but from pragmatic approach,
1836.26s - 1838.26s |  I think these are all different beasts.
1838.26s - 1839.26s |  If you find, you know,
1839.26s - 1842.26s |  a virtual machine you need to fix
1842.26s - 1843.26s |  or to patch
1843.26s - 1845.26s |  or a container-based image
1845.26s - 1847.26s |  or a vulnerability in the code
1847.26s - 1849.26s |  where you just need to clean up a parameter
1849.26s - 1851.26s |  and that could be very quickly,
1851.26s - 1852.26s |  it really needs to be aggregated
1852.26s - 1854.26s |  from tool set perspective
1854.26s - 1857.26s |  where the actionable item happens, right?
1857.26s - 1860.26s |  So developers should have their own view
1860.26s - 1861.26s |  on what's fixable for them.
1861.26s - 1862.26s |  If they cannot do anything
1862.26s - 1865.26s |  about patching a certain package
1865.26s - 1866.26s |  from the infrastructure,
1866.26s - 1868.26s |  why should they care about it?
1868.26s - 1870.26s |  Why should they even handle that?
1870.26s - 1872.26s |  So reporting is important,
1872.26s - 1873.26s |  but where the data sits,
1873.26s - 1878.26s |  it really depends how you structure your program.
1878.26s - 1881.26s |  And you talked about context being king, right?
1881.26s - 1883.26s |  So I think context also matters a lot,
1883.26s - 1886.26s |  especially when you talk about,
1886.26s - 1887.26s |  you know, for example,
1887.26s - 1890.26s |  a library which needs to be upgraded
1890.26s - 1893.26s |  that would technically be under an SCA.
1893.26s - 1896.26s |  And if that library is actually being utilized
1896.26s - 1898.26s |  or a function in the library is being utilized,
1898.26s - 1900.26s |  would you really want to patch it if it's not?
1900.26s - 1903.26s |  I mean, that's the challenge that we run into, right?
1903.26s - 1905.26s |  A lot of times.
1905.26s - 1907.26s |  Thanks, Shah.
1907.26s - 1909.26s |  So going to the next steps,
1909.26s - 1912.26s |  which is around AI, as I promised,
1912.26s - 1914.26s |  do you see AI,
1914.26s - 1916.26s |  and this is a very generic kind of question
1916.26s - 1919.26s |  when we talk about for the future, right?
1919.26s - 1922.26s |  We have been seeing AppSec being in the same state
1922.26s - 1926.26s |  of morasses for maybe 20 years now,
1926.26s - 1928.26s |  where we have SCA tools,
1928.26s - 1930.26s |  we have SAS tools,
1930.26s - 1933.26s |  which are kind of struggling
1933.26s - 1935.26s |  because there's a lot of context,
1935.26s - 1938.26s |  which is really hard to get.
1938.26s - 1941.26s |  Do we see AI as a panacea,
1941.26s - 1942.26s |  which will solve these problems
1942.26s - 1946.26s |  and bring us towards this glorious green future?
1946.26s - 1948.26s |  Yeah, maybe I'll start.
1948.26s - 1950.26s |  So in a nutshell,
1950.26s - 1953.26s |  I think we're going into as an industry
1953.26s - 1957.26s |  to the AI era with our eyes wide open.
1957.26s - 1959.26s |  I mean, we've been there before
1959.26s - 1960.26s |  with the machine learning trends,
1960.26s - 1962.26s |  this will save everything, right?
1962.26s - 1965.26s |  And now every company would put an AI sticker
1965.26s - 1968.26s |  on what they can do.
1968.26s - 1971.26s |  However, I think there are very specific use cases
1971.26s - 1972.26s |  that AI can help us.
1972.26s - 1975.26s |  It's not just a generic behind the scenes
1975.26s - 1977.26s |  under the hood functionality,
1977.26s - 1978.26s |  it's very specific.
1978.26s - 1979.26s |  I mean, let's face it,
1979.26s - 1982.26s |  in the last two decades,
1982.26s - 1984.26s |  the industry with all the money
1984.26s - 1987.26s |  put into the industry of application security,
1987.26s - 1988.26s |  vendors, et cetera,
1988.26s - 1992.26s |  kind of failed fixing the same old things.
1992.26s - 1996.26s |  If you look at the top trending vulnerabilities right now,
1996.26s - 1997.26s |  same thing.
1997.26s - 2000.26s |  I mean, SQL injection, number three,
2000.26s - 2002.26s |  out of bound memory,
2002.26s - 2004.26s |  RAID is one,
2004.26s - 2005.26s |  sorry, RAID is one,
2005.26s - 2007.26s |  RAID is seven.
2007.26s - 2008.26s |  This is the ranking, right?
2008.26s - 2010.26s |  We've seen CrowdStrikes,
2010.26s - 2012.26s |  out of bound recently,
2012.26s - 2014.26s |  past reversal, still trending.
2014.26s - 2015.26s |  With all the tools that we have,
2015.26s - 2016.26s |  that's the same thing,
2016.26s - 2018.26s |  we cannot get rid of them as an industry.
2018.26s - 2021.26s |  So I think something fundamental should change
2021.26s - 2023.26s |  with our expectation from code writing
2023.26s - 2025.26s |  in that perspective.
2025.26s - 2027.26s |  All the recent attacks,
2027.26s - 2029.26s |  same holes in the application,
2029.26s - 2031.26s |  everything stays the same.
2031.26s - 2032.26s |  I think there,
2032.26s - 2034.26s |  before we even talk about AI,
2034.26s - 2036.26s |  and I'll touch it in a second,
2036.26s - 2038.26s |  there are so many things that we can do right now
2038.26s - 2041.26s |  in order to improve the current situation
2041.26s - 2042.26s |  because many people,
2042.26s - 2043.26s |  many CISOs,
2043.26s - 2046.26s |  head of app security we talked to,
2046.26s - 2049.26s |  kind of settled with the current situation.
2049.26s - 2051.26s |  So 90% of my code is coming
2051.26s - 2054.26s |  probably from open source, right?
2054.26s - 2057.26s |  But just recently the industry realized
2057.26s - 2060.26s |  that out of the 90%,
2060.26s - 2062.26s |  90% of the packages you bring in
2062.26s - 2065.26s |  are not being used by your team, right?
2065.26s - 2067.26s |  And all the scanners you'll go to
2067.26s - 2068.26s |  will tell you
2068.26s - 2070.26s |  you need to fix those vulnerabilities
2070.26s - 2071.26s |  although they're not reachable.
2071.26s - 2073.26s |  So the poor developer,
2073.26s - 2075.26s |  he just brought in a framework
2075.26s - 2077.26s |  in order to use a certain functionality.
2077.26s - 2078.26s |  This framework brought
2078.26s - 2080.26s |  all the transitive dependencies with it,
2080.26s - 2082.26s |  around 100, sometimes more.
2082.26s - 2085.26s |  And now he has tons of vulnerabilities in the code,
2085.26s - 2086.26s |  but no one cares about it
2086.26s - 2088.26s |  because these areas of the code
2088.26s - 2090.26s |  are not reachable, kind of dead.
2090.26s - 2091.26s |  So how about just focusing
2091.26s - 2093.26s |  on what really is being accessed,
2093.26s - 2095.26s |  being approached, et cetera?
2095.26s - 2097.26s |  So these are important problems
2097.26s - 2099.26s |  we should solve as an industry.
2099.26s - 2101.26s |  When it comes to AI,
2101.26s - 2103.26s |  I think we can do
2103.26s - 2104.26s |  a lot of interesting things
2104.26s - 2106.26s |  when it comes to patching
2106.26s - 2108.26s |  and fixing the problems.
2108.26s - 2110.26s |  So no company will allow
2110.26s - 2111.26s |  that any of its code line
2111.26s - 2115.26s |  will go into an AI engine,
2115.26s - 2118.26s |  let's say JetGPD, whatever, LLM,
2118.26s - 2120.26s |  and the code, the IP of the company
2120.26s - 2122.26s |  will be extracted there.
2122.26s - 2123.26s |  But there is a wisdom there
2123.26s - 2125.26s |  that will help you fix and remediate
2125.26s - 2128.26s |  and create automatically PR requests
2128.26s - 2130.26s |  for your developers.
2130.26s - 2131.26s |  And I think we're going to see that
2131.26s - 2133.26s |  coming in the next couple of years.
2133.26s - 2135.26s |  This is kind of obvious use case
2135.26s - 2137.26s |  we can leverage.
2137.26s - 2140.26s |  Subti, you have any thoughts?
2140.26s - 2142.26s |  AI?
2142.26s - 2144.26s |  No.
2144.26s - 2146.26s |  I think AI has been around
2146.26s - 2148.26s |  since 1960s,
2148.26s - 2149.26s |  and we have seen different flavors
2149.26s - 2151.26s |  like deep learning,
2151.26s - 2154.26s |  then the most recent Gen AI.
2154.26s - 2156.26s |  And if you look at
2156.26s - 2158.26s |  some of the security vendors,
2158.26s - 2159.26s |  AI has always been part
2159.26s - 2162.26s |  of their product strategy.
2162.26s - 2164.26s |  They have been using AI
2164.26s - 2165.26s |  to do a better accurate
2165.26s - 2167.26s |  vulnerability correlation.
2167.26s - 2170.26s |  Then we see a lot of Gen AI usage
2170.26s - 2173.26s |  to produce contextual security reports.
2173.26s - 2176.26s |  So I think we should totally use
2176.26s - 2177.26s |  different flavors of AI
2177.26s - 2179.26s |  depending on the use case.
2179.26s - 2182.26s |  What really scares me is
2182.26s - 2184.26s |  allowing our AI agent
2184.26s - 2186.26s |  to do auto remediation.
2186.26s - 2189.26s |  I think that's a nice goal to have.
2189.26s - 2191.26s |  That's a nice state to aspire.
2191.26s - 2192.26s |  But we have to move
2192.26s - 2194.26s |  in that direction very slowly.
2194.26s - 2197.26s |  So let it take three years, five years.
2197.26s - 2200.26s |  Today, I am not ready.
2200.26s - 2202.26s |  That's fair.
2202.26s - 2205.26s |  I try to not be like Rara,
2205.26s - 2207.26s |  to be honest.
2207.26s - 2209.26s |  But I do think, I mean,
2209.26s - 2211.26s |  we already see a lot of people
2211.26s - 2214.26s |  utilizing AI related ID components.
2214.26s - 2216.26s |  And I think those are legitimate.
2216.26s - 2219.26s |  I think the thing about AI
2219.26s - 2221.26s |  and considering like auto fixes
2221.26s - 2223.26s |  to PRs, et cetera,
2223.26s - 2225.26s |  all those things need context.
2225.26s - 2227.26s |  And so if your organization
2227.26s - 2229.26s |  does not have its fundamentals,
2229.26s - 2231.26s |  correct, around asset management,
2231.26s - 2233.26s |  et cetera, your AI
2233.26s - 2235.26s |  is not going to generate
2235.26s - 2238.26s |  anything better than you could
2238.26s - 2239.26s |  or at scale.
2239.26s - 2241.26s |  So that's sort of how it feels.
2241.26s - 2243.26s |  Get your fundamentals correct first.
2243.26s - 2247.86s |  I think not only with the promise of AI
2247.86s - 2249.86s |  we'll get some cool new feature
2249.86s - 2250.86s |  for the security program,
2250.86s - 2252.86s |  it brings a lot of risks
2252.86s - 2254.86s |  into our domain as well, right?
2254.86s - 2256.86s |  I mean, there's a psychological effect
2256.86s - 2259.86s |  of a developer copy paste a code
2259.86s - 2261.86s |  from a, you know,
2261.86s - 2263.86s |  gen AI generated code.
2263.86s - 2264.86s |  It feels like it's safe.
2264.86s - 2265.86s |  It's like it takes it
2265.86s - 2267.86s |  from a very safe place,
2267.86s - 2269.86s |  but no one can assure you
2269.86s - 2270.86s |  this code won't hurt you
2270.86s - 2272.86s |  more than any other piece of code.
2272.86s - 2274.86s |  And the number of lines of code
2274.86s - 2276.86s |  will exponentially grow
2276.86s - 2277.86s |  with what brings into
2277.86s - 2278.86s |  the new application, et cetera.
2278.86s - 2280.86s |  And we need to put the right gates
2280.86s - 2282.86s |  for this AI copy paste,
2282.86s - 2285.86s |  just like when the internet started
2285.86s - 2286.86s |  and copy paste from Google
2286.86s - 2288.86s |  pieces of code were being
2288.86s - 2290.86s |  somehow regulated.
2290.86s - 2291.86s |  You can't really stop that
2291.86s - 2292.86s |  or control that,
2292.86s - 2293.86s |  but you need to have
2293.86s - 2296.86s |  the right policies to handle that.
2296.86s - 2297.86s |  Thanks.
2297.86s - 2298.86s |  Sorry, I just wanted to keep
2298.86s - 2301.86s |  some time for questions.
2301.86s - 2302.86s |  Go ahead.
2302.86s - 2304.86s |  Just one last remark.
2304.86s - 2305.86s |  Like everybody's worried
2305.86s - 2306.86s |  about security risk
2306.86s - 2308.86s |  coming from AI generated code.
2308.86s - 2309.86s |  I'm more worried about
2309.86s - 2312.86s |  the legal risks.
2312.86s - 2314.86s |  That's fair too.
2314.86s - 2315.86s |  Sorry, I want to keep
2315.86s - 2316.86s |  a little bit more time for questions,
2316.86s - 2318.86s |  but I think when you let
2318.86s - 2319.86s |  four AppSec people sit,
2319.86s - 2322.86s |  we can talk for hours.
2323.86s - 2328.58s |  But if anyone has any questions,
2328.58s - 2333.78s |  please use the mic.
2333.78s - 2335.78s |  So my question's for Shahar.
2335.78s - 2336.78s |  What's up?
2336.78s - 2337.78s |  So I'm an electrical engineer
2337.78s - 2339.78s |  and I did software development
2339.78s - 2341.78s |  for Department of Defense
2341.78s - 2343.78s |  application for avionics systems
2343.78s - 2344.78s |  and weapons systems.
2344.78s - 2345.78s |  So our software killed people.
2345.78s - 2346.78s |  We want to make sure
2346.78s - 2347.78s |  it's killed the right people,
2347.78s - 2349.78s |  not the wrong people.
2349.78s - 2352.78s |  When I switched over to IT,
2352.78s - 2354.78s |  totally different level of,
2354.78s - 2356.78s |  and I'm professional,
2356.78s - 2357.78s |  professional developer was
2357.78s - 2360.78s |  much lower bar than what,
2360.78s - 2361.78s |  you know, I'm not dealing
2361.78s - 2362.78s |  with engineers.
2362.78s - 2363.78s |  I'm dealing with sometimes
2363.78s - 2366.78s |  people I would call
2366.78s - 2370.16s |  basically got their coding degree
2370.16s - 2372.16s |  from some, you know,
2372.16s - 2373.16s |  fly-by-night place
2373.16s - 2375.16s |  and stuff and I can program.
2375.16s - 2376.16s |  So my question is,
2376.16s - 2377.16s |  is how do we get
2377.16s - 2378.16s |  on the engineering side?
2378.16s - 2379.16s |  Because to me,
2379.16s - 2380.16s |  software vulnerability
2380.16s - 2382.16s |  is nothing more than a bug.
2382.16s - 2384.16s |  It's a bad coding practice
2384.16s - 2387.16s |  that the developer programmed in.
2387.16s - 2388.16s |  They don't know about it.
2388.16s - 2389.16s |  They don't understand about it,
2389.16s - 2391.16s |  but it's going to cause a problem.
2391.16s - 2393.16s |  So how do we get to a point
2393.16s - 2395.16s |  where our developers more,
2395.16s - 2397.16s |  and I don't mean to mean professionalism
2397.16s - 2398.16s |  or, you know,
2398.16s - 2399.16s |  that they're not acting correctly,
2399.16s - 2401.16s |  but they don't understand
2401.16s - 2403.16s |  the coding practices
2403.16s - 2405.16s |  as well as they should be,
2405.16s - 2406.16s |  in my opinion.
2406.16s - 2407.16s |  I mean, this is all,
2407.16s - 2408.16s |  I'm very biased towards
2408.16s - 2410.16s |  being an engineer and stuff,
2410.16s - 2412.16s |  but at the same time,
2412.16s - 2413.16s |  our IT industry,
2413.16s - 2415.16s |  and we see a lot of breaches
2415.16s - 2416.16s |  and people are getting hurt
2416.16s - 2417.16s |  actually hurt,
2417.16s - 2418.16s |  maybe not killed,
2418.16s - 2421.16s |  although maybe.
2421.16s - 2422.16s |  How do we bring that
2422.16s - 2423.16s |  from an engineering standpoint?
2423.16s - 2424.16s |  Because you're saying,
2424.16s - 2425.16s |  well, we need to maybe not
2425.16s - 2426.16s |  shift left so much.
2426.16s - 2428.16s |  To me, it is the developer
2428.16s - 2430.16s |  who is the core problem
2430.16s - 2432.16s |  and not necessarily
2432.16s - 2433.16s |  the app sec people
2433.16s - 2434.16s |  who are going through
2434.16s - 2435.16s |  and say, hey,
2435.16s - 2436.16s |  you're finding these problems.
2436.16s - 2437.16s |  These are feedback mechanisms
2437.16s - 2438.16s |  that say the developer
2438.16s - 2439.16s |  is not developing
2439.16s - 2442.16s |  to a good practice.
2442.16s - 2443.16s |  So what do you say about that?
2443.16s - 2444.16s |  Yeah, that's very true.
2444.16s - 2446.16s |  So first of all,
2446.16s - 2447.16s |  thanks for your question.
2447.16s - 2449.16s |  And, you know,
2449.16s - 2450.16s |  life and death,
2450.16s - 2452.16s |  it's something that,
2452.16s - 2453.16s |  you know,
2453.16s - 2455.16s |  it's part of a defense system.
2455.16s - 2458.16s |  Me coming from similar areas
2458.16s - 2459.16s |  in my history,
2459.16s - 2460.16s |  I know exactly
2460.16s - 2461.16s |  what you're talking about.
2461.16s - 2462.16s |  But in these domains,
2462.16s - 2464.16s |  probably want to get top developers
2464.16s - 2466.16s |  for writing the code.
2466.16s - 2469.16s |  And I didn't mean that
2469.16s - 2470.16s |  app sec people
2470.16s - 2471.16s |  would go and clean up the mess
2471.16s - 2473.16s |  after the developers.
2473.16s - 2475.16s |  This was not my intention.
2475.16s - 2476.16s |  But if you have
2476.16s - 2478.16s |  certain practices
2478.16s - 2479.16s |  that you want to make sure
2479.16s - 2480.16s |  are happening
2480.16s - 2481.16s |  in your environment,
2481.16s - 2482.16s |  you need to have
2482.16s - 2483.16s |  the right policies
2483.16s - 2484.16s |  that once the code
2484.16s - 2485.16s |  is being compiled,
2485.16s - 2487.16s |  the code is being built,
2487.16s - 2489.16s |  the alerts for these policies
2489.16s - 2490.16s |  will be back
2490.16s - 2491.16s |  to the developers.
2491.16s - 2492.16s |  I'll give you one example,
2492.16s - 2493.16s |  something that we've practiced
2493.16s - 2494.16s |  recently.
2494.16s - 2495.16s |  Some developers,
2495.16s - 2496.16s |  that may look
2496.16s - 2499.16s |  a very innocent thing to do,
2499.16s - 2501.16s |  are referencing packages
2501.16s - 2502.16s |  from third party open sources
2502.16s - 2504.16s |  they bring in directly
2504.16s - 2507.16s |  and not from the manifest file.
2507.16s - 2508.16s |  It's hard to find that
2508.16s - 2509.16s |  and it seems like
2509.16s - 2511.16s |  a very innocent thing to do.
2511.16s - 2512.16s |  However,
2512.16s - 2513.16s |  when you have patched
2513.16s - 2514.16s |  to the latest version
2514.16s - 2515.16s |  that has no vulnerabilities,
2515.16s - 2517.16s |  these ghost packages
2517.16s - 2518.16s |  or phantom packages
2518.16s - 2520.16s |  will be left behind.
2520.16s - 2521.16s |  So now you need to make sure
2521.16s - 2522.16s |  when you're building the software,
2522.16s - 2523.16s |  there's a warning
2523.16s - 2525.16s |  for this particular developer.
2525.16s - 2526.16s |  Hey, David,
2526.16s - 2527.16s |  go ahead and make sure
2527.16s - 2528.16s |  that you fix
2528.16s - 2529.16s |  in this line of code,
2529.16s - 2531.16s |  this ghost package reference
2531.16s - 2532.16s |  and fix it.
2532.16s - 2534.16s |  And not just that generic,
2534.16s - 2535.16s |  the industry settled
2535.16s - 2536.16s |  for a generic explanation.
2536.16s - 2537.16s |  Hey,
2537.16s - 2539.16s |  you may have a SQL injection
2539.16s - 2540.16s |  in your code.
2540.16s - 2542.16s |  It needs to be super specific
2542.16s - 2544.16s |  in how you structure
2544.16s - 2545.16s |  your build processes
2545.16s - 2546.16s |  in order to direct
2546.16s - 2547.16s |  the right person
2547.16s - 2549.16s |  with the right actionable item.
2549.16s - 2550.16s |  And next time,
2550.16s - 2551.16s |  he'll care about it
2551.16s - 2552.16s |  because he sees
2552.16s - 2554.16s |  it's very concrete for him.
2554.16s - 2555.16s |  I hope that helps.
2555.16s - 2556.16s |  Yeah,
2556.16s - 2557.16s |  I'm just going to add
2557.16s - 2558.16s |  one more line.
2558.16s - 2559.16s |  I don't think developers
2559.16s - 2560.16s |  are the problem.
2560.16s - 2561.16s |  The real problem
2561.16s - 2563.16s |  is in university education.
2563.16s - 2564.16s |  We have courses
2564.16s - 2566.16s |  to learn algorithms,
2566.16s - 2567.16s |  different programming languages,
2567.16s - 2568.16s |  databases,
2568.16s - 2569.16s |  but none of those
2569.16s - 2570.16s |  cover security
2570.16s - 2572.16s |  as part of that technology, right?
2572.16s - 2574.16s |  So when that will start happening,
2574.16s - 2575.16s |  we'll see fewer
2575.16s - 2577.16s |  and fewer vulnerabilities.
2577.16s - 2578.16s |  But at the same time,
2578.16s - 2579.16s |  what about the
2579.16s - 2580.16s |  gazillion legacy software
2580.16s - 2582.16s |  which is out there?
2582.16s - 2583.16s |  That's going to take
2583.16s - 2585.16s |  a lot of time.
2585.16s - 2586.16s |  Thanks.
2586.16s - 2587.16s |  I'm getting the
2587.16s - 2588.16s |  two-minute part.
2588.16s - 2590.16s |  But like I said,
2590.16s - 2591.16s |  we can talk forever,
2591.16s - 2592.16s |  but we can,
2592.16s - 2593.16s |  you know,
2593.16s - 2594.16s |  we will be outside
2594.16s - 2595.16s |  and maybe we can talk
2595.16s - 2596.16s |  to people if they're...
2596.16s - 2597.16s |  So Shahar,
2597.16s - 2598.16s |  you had mentioned,
2598.16s - 2599.16s |  you know, along lines
2599.16s - 2600.16s |  our investments
2600.16s - 2601.16s |  into security
2601.16s - 2602.16s |  really haven't worked.
2602.16s - 2603.16s |  We keep on seeing
2603.16s - 2604.16s |  the same faults, right?
2604.16s - 2605.16s |  So in my experience,
2605.16s - 2606.16s |  a lot of times
2606.16s - 2608.16s |  I'm seeing that
2608.16s - 2609.16s |  I think our investments
2609.16s - 2610.16s |  can work,
2610.16s - 2611.16s |  but we have a tendency
2611.16s - 2612.16s |  of promoting people
2612.16s - 2614.16s |  who are top developers.
2614.16s - 2615.16s |  They stop developing
2615.16s - 2616.16s |  because we push them
2616.16s - 2617.16s |  into management.
2617.16s - 2618.16s |  And I think that
2618.16s - 2619.16s |  is one issue.
2619.16s - 2620.16s |  And the other issue
2620.16s - 2621.16s |  I've seen is that
2621.16s - 2623.16s |  once an organization
2623.16s - 2624.16s |  gets to a point
2624.16s - 2625.16s |  where they have
2625.16s - 2626.16s |  very little vulnerabilities,
2626.16s - 2627.16s |  they've basically
2627.16s - 2628.16s |  got rid of a lot
2628.16s - 2629.16s |  of their vulnerability
2629.16s - 2630.16s |  technical debt,
2630.16s - 2631.16s |  they then say,
2631.16s - 2632.16s |  okay, this team,
2632.16s - 2633.16s |  experience team,
2633.16s - 2634.16s |  we don't need you anymore.
2634.16s - 2635.16s |  We're going to outsource
2635.16s - 2636.16s |  to a much lower cost.
2636.16s - 2637.16s |  So it's a cycle
2637.16s - 2638.16s |  that keeps occurring.
2638.16s - 2639.16s |  So I don't think
2639.16s - 2640.16s |  it's the investment.
2640.16s - 2641.16s |  I think it's the lack
2641.16s - 2642.16s |  of continuing investment
2642.16s - 2643.16s |  into security.
2643.16s - 2644.16s |  And when it comes to tools,
2644.16s - 2645.16s |  I love what you said,
2646.16s - 2647.16s |  about putting
2647.16s - 2648.16s |  fandom packages in.
2648.16s - 2649.16s |  I hate that phrase.
2650.16s - 2651.16s |  It drives me absolutely nuts
2651.16s - 2652.16s |  to use dependency management.
2652.16s - 2653.16s |  If your teams aren't using
2653.16s - 2654.16s |  dependency management,
2654.16s - 2655.16s |  shame on you.
2657.16s - 2658.16s |  Yeah, thank you so much.
2658.16s - 2659.16s |  I think that I can
2659.16s - 2660.16s |  very much relate
2660.16s - 2661.16s |  to what you said
2661.16s - 2662.16s |  about promotions.
2662.16s - 2663.16s |  And this is something
2663.16s - 2664.16s |  that I learned
2664.16s - 2665.16s |  with my career
2665.16s - 2666.16s |  building teams.
2666.16s - 2667.16s |  If you have an amazing developer
2667.16s - 2668.16s |  and you take him
2668.16s - 2669.16s |  and be a manager
2669.16s - 2670.16s |  of a team,
2670.16s - 2671.16s |  you lose twice.
2671.16s - 2672.16s |  You just lost
2672.16s - 2673.16s |  your best developer
2673.16s - 2674.16s |  and you got
2674.16s - 2675.16s |  an okay manager
2675.16s - 2676.16s |  right there.
2676.16s - 2678.16s |  So he needs to be empowered,
2678.16s - 2679.16s |  get the right compensation,
2679.16s - 2681.16s |  to continue doing
2681.16s - 2682.16s |  what he loves to do
2682.16s - 2684.16s |  and be a great developer
2684.16s - 2685.16s |  on whatever level
2685.16s - 2686.16s |  he needs to be,
2686.16s - 2688.16s |  but keeps to that profession.
2688.16s - 2690.16s |  That's my point of view.
2690.16s - 2691.16s |  It's an HR problem.
2694.16s - 2695.16s |  Thanks everyone.
2695.16s - 2696.16s |  Thank you.