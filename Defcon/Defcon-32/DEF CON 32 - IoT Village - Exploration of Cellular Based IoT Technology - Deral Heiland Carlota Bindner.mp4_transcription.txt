{
  "webpage_url": "local:1732052971:3c3094ce:DEF CON 32 - IoT Village - Exploration of Cellular Based IoT Technology - Deral Heiland  Carlota Bindner.mp4",
  "title": "DEF CON 32 - IoT Village - Exploration of Cellular Based IoT Technology - Deral Heiland  Carlota Bindner.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 3.04s | This text was transcribed using whisper model: large-v2

 Today's presentation, Exploration of Cellular Based IoT
3.04s - 7.04s |  Technology. In this particular presentation, in this research
7.04s - 11.68s |  that me and Carlotta did, we did not focus on the cellular
11.68s - 16.02s |  comms. We focused on figuring out how and what data is going
16.02s - 19.36s |  out of cellular comms by doing interchip communication
19.36s - 24.26s |  analysis via USB and UART and also how to control the cellular
24.26s - 28.10s |  environment and cellular module to do cool things via direct
28.10s - 36.32s |  interaction in the circuit board level. There we go. So my
36.32s - 39.46s |  name is Darryl Hyland. I'm a research lead at Rapid7 working
39.46s - 45.36s |  on IoT technology. And my name is Carlotta Bindner and I'm a
45.36s - 54.32s |  lead security researcher at Thermo Fisher Scientific. So I
54.32s - 57.16s |  just want to do a quick shout out to a friend of mine, Damian
57.16s - 61.30s |  out of France. Some of the stuff that he did at this conference
61.30s - 64.86s |  in Paris a number of years ago dealing with circuit board
64.86s - 68.66s |  overlay to track out circuit runs at interesting points to
68.66s - 71.06s |  tap into the circuit board was kind of cool and I've used it
71.06s - 74.56s |  ever since. So let's go ahead and start off with the
74.56s - 79.98s |  presentation and turn this over to Carlotta. So while Darryl
79.98s - 82.74s |  mentioned that we are focused on the interchip communications,
82.74s - 86.08s |  just to give you an idea about the type of technology that's
86.08s - 89.52s |  being used by the cellular devices that we picked, we
89.52s - 94.28s |  focused on NB-IoT and LTE-M devices. These two protocols in
94.28s - 98.84s |  particular have been developed specifically towards IoT there
98.84s - 103.68s |  and we're going to step quickly through these two. Oh, there we
103.68s - 109.72s |  go. So NB-IoT is also known as narrow band IoT. As you can see
109.72s - 114.16s |  on the download and upload speeds, it's relatively low. It
114.16s - 117.46s |  also only supports half duplex communication. Both of the this
117.46s - 121.74s |  is intense intended because instead of using the high
121.76s - 126.60s |  bandwidth that would cost a lot of money and also power, it's
126.60s - 128.84s |  geared towards the IoT devices that are going to be deployed
128.84s - 134.28s |  remotely or battery powered. I got to point it in the right
134.28s - 138.56s |  direction. And then we have LTE-M which is machine type
138.56s - 143.06s |  communication. Again, it has slightly higher speeds available
143.06s - 147.54s |  than NB-IoT and supports full duplex communication. So this is
147.54s - 151.24s |  best used in cases where like we're going to be transferring
151.26s - 155.86s |  large amounts of data like video, audio, as opposed to NB-IoT
155.86s - 158.56s |  which is popular for like sensors where the small amounts of data
158.56s - 164.50s |  are being transferred. Now, the original NB-IoT and LTE-M were
164.50s - 169.28s |  released in release 14 from the three GPP. Um, and in
169.28s - 171.88s |  consecutive releases, they've done things to improve the
171.88s - 177.18s |  efficiency, um, to help extend battery life. Uh, the original
177.22s - 181.40s |  release only supported 4G so they've added 5G support. Um,
181.40s - 185.90s |  and then add, they've added a small cell support which is,
185.90s - 189.10s |  these are small cellular nodes that would be deployed in a sort
189.10s - 192.90s |  of mesh type network that allows for high bandwidth via like
192.90s - 199.77s |  volume deployment. And now I'll hand it over to Daryl for
199.77s - 200.57s |  interaction with hardware.
200.57s - 207.62s |  Okay, I'll take a clicker. So, um, when we're getting ready to
207.62s - 210.90s |  engage cellular based technology, the actual hardware,
210.90s - 216.90s |  uh, Damian had demonstrated this at, uh, Hack in Paris. And what
219.08s - 222.64s |  we want to do is we want to figure out how to interact in
222.64s - 226.82s |  circuit. And often tracing out the key components, key
226.82s - 230.98s |  locations, whether it's runs, circuit runs, various ways we
230.98s - 235.42s |  can tap into the communications on the device. We think about it
235.42s - 239.36s |  actually doing overlay. So we take images of both sides,
239.36s - 244.97s |  reverse one of them and overlay it on the device. So that we can
244.97s - 248.23s |  actually see all the components at the same time. It's really
248.23s - 252.51s |  helpful for understanding at least the external layers of an
252.51s - 256.21s |  actual circuit board. And then when we get into the cellular
256.21s - 259.89s |  modules, the ability to overlay the cellular module in the
259.89s - 263.95s |  orientation of the land grid arrays and we can see the land
264.01s - 267.85s |  grid array structure. In this land grid array structure, we
267.85s - 271.75s |  can see the areas that are yellow and kind of coral color
271.75s - 274.99s |  are kind of the key areas we want to see. The serial comms,
274.99s - 279.53s |  the USB comms. And by doing that, it gives us the ability to
279.53s - 283.77s |  start thinking of where are the most likely points of access for
283.77s - 287.53s |  these devices. Versus just randomly checking everything
287.53s - 290.21s |  around the board, trying to figure out where it's at. By
290.23s - 294.01s |  figuring the orientation on the circuit board, we can be more
294.01s - 297.31s |  logical in our efforts to identify where to hook to
297.31s - 303.41s |  everything. And also notice that as I mentioned, the yellow and
303.41s - 308.25s |  the actual coral color, the items of the most interest are
308.25s - 311.85s |  always out around the outer edge. And how does that play
311.85s - 317.33s |  out? So here is a circuit, a cellular module has been pulled
317.35s - 320.15s |  off. In this particular case, we can see everything running
320.15s - 324.29s |  around the outer edge. All the stuff that's inside is typically
324.29s - 329.33s |  ground planes are not connected in almost every case. So what
329.33s - 334.03s |  happens when we engage a device where there's nothing on the
334.03s - 337.57s |  surface of the board and they've managed to route all the most
337.57s - 341.87s |  critical communication underneath a sub layer in the
341.87s - 344.95s |  circuit board. So I started playing around with that idea.
344.97s - 349.01s |  How would we look at this? So what we did is we noticed on a
349.01s - 352.17s |  lot of these cellular modules, if we turn it on the edge and
352.17s - 356.41s |  magnify it, we kind of quickly see, we can see up underneath
356.41s - 360.81s |  the edge of it. We can see some of the land grid arrays. So what
360.81s - 365.29s |  we did was we went out and bought acupuncture needles. And
365.29s - 371.03s |  using acupuncture needles, we literally inserted them
371.05s - 375.61s |  underneath the edge of the chip to engage the communications
375.61s - 380.59s |  that we're after. Making it possible for us to not need to
380.59s - 383.89s |  actually chip off or cut through the layers of the board or other
383.89s - 387.25s |  things in that particular case. And it came to be very
387.25s - 390.93s |  effective. Now, it doesn't necessarily work on all modules.
390.93s - 393.83s |  This particular module, the critical connection points are
393.83s - 397.27s |  only about a quarter millimeter or half a millimeter from the
397.27s - 402.15s |  edge of the actual cellular module device. Some of the
402.15s - 406.23s |  larger modules, we found out it was three or four millimeters up
406.23s - 409.69s |  underneath the edge, which is really not that far. But the
409.69s - 412.39s |  problem is, the larger the module, it has a tendency to
412.39s - 416.17s |  have more of a cupping effect. So it closes down that edge so
416.17s - 418.77s |  you can't always get to it. So if you're going to look at a
418.77s - 421.77s |  cellular module on a board and you're thinking about needing to
421.77s - 425.47s |  do this, just roll it up on edge. Is there a gap there? If
425.47s - 428.71s |  there's any gap between that cellular module's board and the
428.71s - 434.84s |  circuit board you're looking at, use acupuncture needles. Now,
434.84s - 438.10s |  also note, acupuncture needles, you can't solder to them.
438.10s - 441.64s |  They're stainless. So, uh, I found out that you can get some
441.64s - 446.78s |  good crimp, crimping units and, and, and butt connectors and
446.78s - 449.18s |  connect them up pretty good so they will be electrically
449.18s - 453.22s |  sound. So we're going to go ahead and move on to AT
453.26s - 455.36s |  commands. Carlotta's going to talk about.
455.36s - 459.86s |  So now that you have, if you have hardware access to the
459.86s - 464.76s |  cellular module, how do you communicate with it? Uh, cellular
464.76s - 468.40s |  modules, you, much like many other modems, use AT commands.
468.40s - 471.84s |  So AT commands were originally created for the HACE 300 modem
471.84s - 475.28s |  back in the 1980s. And as technology, you know, continued
475.28s - 478.68s |  to advance dial up and cellular, they continue to use AT
478.68s - 481.42s |  commands. AT stands for attention and these commands are
481.42s - 485.52s |  used for the debugging, configuration of the modem, you
485.52s - 489.42s |  know, making it connect up to the cellular network. When
489.42s - 492.60s |  looking at AT commands, there are sort of four categories of
492.60s - 495.76s |  how you can use AT commands. First, there's the test command.
495.76s - 498.76s |  The test command is sort of like a help menu for an AT command.
498.76s - 502.60s |  You issue an AT test command to, with a equals and a question
502.60s - 506.24s |  mark and the cellular modem will respond with the parameters and
506.24s - 510.24s |  the values that you can then submit to the cellular module to
510.26s - 513.84s |  run the command. Then you have the read command. Uh, the read
513.84s - 516.14s |  command will actually return the current values and the
516.14s - 519.14s |  configurations if you, for that particular command, if you were
519.14s - 523.34s |  to issue it to the cellular module. Uh, then you have write
523.34s - 526.38s |  commands. These are how you actually perform configurations
526.38s - 529.16s |  after learning how to, you know, use the test, using the test
529.16s - 533.06s |  command on that AT command. And finally, you have execute, which
533.06s - 536.62s |  would be to actually cause the, uh, cellular module to perform
536.64s - 544.78s |  some sort of action. Now, during our research, we reviewed
544.78s - 547.52s |  various different modules from different manufacturers and most
547.52s - 551.78s |  manufacturers actually release AT command manuals specific to
551.78s - 555.56s |  the, uh, the version of cellular module that you're using, uh,
555.56s - 558.76s |  for development purposes and configuration. Um, in the
558.76s - 562.16s |  manuals, we, uh, noticed that a lot of the different
562.16s - 564.46s |  manufacturers, they have the sort of standard AT commands
564.46s - 567.00s |  that are out there, but then they also have their custom
567.02s - 570.16s |  syntax that usually used for configuration of specific
570.16s - 572.82s |  features that are available with the module that the manufacturer
572.82s - 580.22s |  has, you know, configured. So, what can we do with AT commands?
580.22s - 582.48s |  Well, one of the big things at the beginning was just being
582.48s - 585.02s |  able to perform information gathering and enumeration
585.02s - 588.82s |  against the cellular modules that we had access to. Um, one
588.82s - 591.26s |  of the most interesting commands that we did find and it's a
591.26s - 594.46s |  generic one and available on all of the cellular modules that we
594.46s - 598.20s |  interacted with was the AT clock command. And what this does is
598.22s - 601.52s |  literally asks the cellular module, what AT commands do you,
601.52s - 605.28s |  I have access to? What do you support? Um, although I, we
605.28s - 609.16s |  will, I will, uh, circle back to that one in particular. Then, I
609.16s - 611.96s |  mean, the AT commands you can get the manufacturer
611.96s - 614.36s |  information, the model, the firmware version that the
614.36s - 618.40s |  cellular module's running and just to give you an idea, we
618.40s - 624.94s |  have a quick demo on AT commands. There we go. So, we
625.94s - 630.96s |  booted up the device. It's responded with a ready. And
633.82s - 636.92s |  here's that AT clock command. As you can see, it spit out a ton
636.92s - 639.60s |  of AT commands that are available with this particular
639.60s - 643.06s |  module. So, then you could go start doing running test
643.06s - 650.25s |  versions of those commands to get more information. Then we
650.25s - 653.59s |  issued, this particular command returns the IMEI. So, just like
653.59s - 656.75s |  in your cell phone, there's an IMEI associated with every
656.79s - 660.39s |  cellular device. And then the next one was the IMSI, which is
660.39s - 664.43s |  used for like authentication up to the APN, billing, location.
664.43s - 669.43s |  Um, this command returns the information about what band and
671.11s - 674.31s |  channel the device is currently running on. So, it's running on
674.31s - 679.85s |  LTE4. And then here's a custom command from QuackTel and it's
679.85s - 682.69s |  used for actually configuring this, the more advanced features
682.69s - 688.61s |  available on the device. And one of the things about like these
688.61s - 691.51s |  more advanced commands or even just basic commands, especially
691.51s - 694.25s |  the custom ones from the manufacturers, the manuals
694.25s - 697.79s |  provide so much information about what each of them does and
697.79s - 700.63s |  what the responses will be. So, in this case, we're checking if
700.63s - 704.57s |  the web services are on, uh, when the device boots up and
704.57s - 707.89s |  they are not, uh, indicated by the zero at the end of the web
707.89s - 712.07s |  services. And then we checked the WLAN services. So, and the
712.07s - 718.76s |  one indicates that it is on when the device boots up. So, in
718.76s - 721.30s |  addition to information gathering, we can also open
721.30s - 726.40s |  sockets. Uh, cellular modules support HDP. They support FTP
726.40s - 733.53s |  and various other TCP IP protocols. So, as part of our
733.53s - 737.41s |  research, we actually created some scripts to make it easier
737.41s - 740.07s |  to get through all the AT commands available. Um, one in
740.07s - 743.11s |  particular is the ATquery.py script, which is available on
743.11s - 746.71s |  Daryl's GitHub. Um, this particular script allows us to
746.71s - 751.19s |  either run a test or a read on a file containing all, a whole list
751.21s - 755.01s |  of AT commands. So, we scraped AT command manuals, AT clack
755.01s - 757.83s |  output, and combined that and then we're able to actually
757.83s - 760.25s |  just iterate quickly through all the various commands to
760.25s - 763.13s |  determine, okay, what does this cellular module actually
763.13s - 767.33s |  support? Um, because we did find that in some cases, while the AT
767.33s - 770.97s |  clack output was there and even the cellular, uh, the manual
770.97s - 773.97s |  associated with that module has, you know, AT list, AT commands
773.97s - 776.87s |  listed, some of them were not included in either of those
776.89s - 785.22s |  resources. So, here's a quick demo of the AT command query
785.22s - 795.35s |  script. So, we're going to check and make sure that the device
795.35s - 798.83s |  that we have a FTDI to USB device connected, which is then
798.83s - 803.77s |  connected to that, uh, it's a field camera. And then in the AT
803.77s - 807.97s |  query script, you can actually configure the, you know, the FTDI
807.97s - 811.67s |  USB device that's there and the baud rate associated with the,
811.75s - 817.69s |  uh, the cellular modem. And our script does, we did add a quick
817.69s - 821.39s |  help menu. Uh, you can configure the version, the manufacturer of
821.39s - 824.07s |  the cellular module, whether you want to run a read or a test on
824.07s - 830.42s |  it. And here we're just confirming that the device is on
830.42s - 833.62s |  and ready to go before running the script. Otherwise, you're
833.62s - 838.58s |  not going to get anything. And as you can see, it starts
838.58s - 841.78s |  outputting the, uh, you know, results to the screen. It also
841.78s - 844.46s |  saves it to a file that you could then parse through. In
844.50s - 848.18s |  this case, we ran a test, so it's going through the whole
848.18s - 851.98s |  list of AT, uh, commands that are in the text file and checking
851.98s - 857.38s |  to see which ones are valid. And if you get, you know, an error
857.38s - 860.68s |  that it's an invalid command, the, the module doesn't support
860.68s - 866.86s |  it and doesn't know what to do with it. So, what types of
866.86s - 869.90s |  communications are actually supported by cellular modules?
869.90s - 873.40s |  During our research, uh, we found that with the, especially
873.40s - 876.80s |  the field camera that we've been using for the demos, uh, it
876.80s - 881.68s |  actually primarily used U.S. high, high speed interchip USB
881.68s - 884.84s |  to actually perform the AT commands issued, but it still
884.84s - 889.18s |  had an active UART. So, these are the two main communication
889.18s - 891.72s |  methods that cellular modules are going to use to try and to
891.72s - 895.72s |  be able to take in commands. Um, and in the case of UART, there's
895.72s - 898.82s |  usually an external UART used for debugging. Uh, during
898.82s - 901.60s |  research, we found that the output of that would just
901.60s - 904.90s |  indicate sort of the cellular modem booting up, but wouldn't
904.90s - 908.60s |  actually take type, any type of input. And then the interchip
908.60s - 912.04s |  UART, which would be between the cellular module and a CPU would
912.04s - 916.04s |  actually be the place that you would possibly see, uh, you
916.04s - 919.72s |  know, it would be a primary use case for receiving AT commands.
919.72s - 923.46s |  But during our research, we found that all we saw was on
923.46s - 926.46s |  boot up, we'd see a ready. And then during power down, there
926.46s - 929.16s |  would be a message that it was being powered down. The AT
929.16s - 934.36s |  commands were not actually being sent via the UART. And now I'll
934.36s - 936.62s |  hand it back to Daryl for USB capture and decoding.
936.62s - 945.92s |  Thank you. So, we're still on time, which is good. So, um, the
945.92s - 947.98s |  field cameras she was talking about, it's kind of like one of
947.98s - 952.46s |  these. Uh, one of you put out in a field to capture, uh, wildlife
952.46s - 955.76s |  photos and stuff like that that we were using. Uh, in this
955.76s - 959.46s |  particular case. So, one of the things I always wanted to do is,
959.46s - 963.60s |  uh, capture, uh, USB. And there's a number of tools out
963.60s - 967.16s |  there for capturing USB, but most of those are in line. So,
967.16s - 969.76s |  I just start hunting around and try to find one because what we
969.76s - 974.60s |  want to do is sniff USB in circuit. And there's very few
974.60s - 979.88s |  devices that do that. So, um, on this particular device, this
979.88s - 984.52s |  interchip device, we kind of map out the USB from the actual cell
984.52s - 987.72s |  module. We need to figure out where it's at. I've opened up a
987.72s - 991.76s |  number of devices that utilize USB and found that, uh, not all
991.78s - 995.26s |  of them, but many of them, they actually were bringing the USB
995.26s - 998.96s |  to the surface and putting terminator resistors in there.
998.96s - 1001.46s |  And we got a, got a picture here showing those terminating
1001.46s - 1005.26s |  resistors, impedance matching resistors. Uh, at least that's
1005.26s - 1007.80s |  what they appeared by. I eventually ended up measuring
1007.80s - 1012.24s |  them, found out they were really zero ohm resistors. So, they
1012.24s - 1017.24s |  were actually purely as a pass through. So, uh, what we needed
1017.26s - 1022.44s |  to do is to be able to attach into a USB bus, you can rarely
1022.44s - 1025.64s |  connect straight into it. You will actually load the circuit
1025.64s - 1028.74s |  down and communications will fail. With a particular
1028.74s - 1033.02s |  manufacturer of device that we use to sniff this data, they
1033.02s - 1037.48s |  recommend it using a 20 to 40 ohm resistor. So, in this case,
1037.48s - 1041.78s |  we actually soldered straight to the circuit board a 32, 33 ohm
1041.78s - 1046.60s |  resistors so that we can tap into. And we're able to tap into
1046.62s - 1050.56s |  those devices. And, uh, the device we happened to use was a
1050.56s - 1055.80s |  Beagle, a Beagle 480. It's not a cheap device. It's about 12,
1055.80s - 1058.66s |  13 hundred dollars. But if you're doing this work
1058.66s - 1061.90s |  professionally, this works really well. It's kind of
1061.90s - 1064.98s |  amazing how well it works for capturing interchip
1064.98s - 1069.54s |  communications for USB. And we can show it here where we
1069.54s - 1073.78s |  actually hooked the device up. In this particular case, um, in
1073.80s - 1077.54s |  the mini, if you're tapping into the USB communication lines,
1077.54s - 1082.24s |  often the power lines associated with that, the 5 volts that
1082.24s - 1086.34s |  tells the, it's fed with the USB also, doesn't show up. It's not
1086.34s - 1090.48s |  on the surface you can connect into. So the black and red wires
1090.48s - 1093.32s |  you see there are me just feeding a 5 volt power supply,
1093.32s - 1097.52s |  external power supply. So my Beagle thinks the entire USB is
1097.52s - 1101.80s |  functioning. Uh, there's some software changes you can make
1101.82s - 1105.22s |  that the vendor has to actually turn that off. I have not done
1105.22s - 1108.92s |  that yet. I probably won't in case I ever need it. But let's
1108.92s - 1114.20s |  go ahead and, uh, look at actually capturing USB traffic
1114.20s - 1119.76s |  in this particular case. So, uh, they have their application that
1119.76s - 1122.40s |  comes with it. I know this is small, but we're going to kind
1122.40s - 1126.58s |  of blow in or, or, or sink into some of the more critical stuff.
1126.58s - 1131.34s |  Jump over here real quick. So we can see we, we've hooked up, we
1131.36s - 1134.86s |  power up the device, we quickly see a lot of USB handshake data
1134.86s - 1138.70s |  taking place. Uh, and now it's connected out. And what we want
1138.70s - 1142.36s |  to do is we configure the device to only show data. Cause that's
1142.36s - 1145.90s |  all we care about. I don't care about the USB stuff. So you
1145.90s - 1148.48s |  quickly, you can see in there that you're seeing a lot of
1148.48s - 1152.10s |  those AT commands being transferred. Some of the stuff
1152.10s - 1155.18s |  that Carlotta run, you actually see there as it's setting up the
1155.18s - 1158.82s |  communication channel, uh, with the cellular's APN and all that
1158.86s - 1166.56s |  type of stuff. So again, a lot of interesting serial number
1166.56s - 1170.06s |  data, configuration data, firmware version data that are
1170.06s - 1172.46s |  running on the device. All this kind of data is kind of set out
1172.46s - 1176.06s |  there, requested on the device. But we get into, we can see it
1176.06s - 1179.94s |  collected out. That was it's, uh, uh, APN that it connected to.
1179.94s - 1183.30s |  It was a special one. It's not a private, but it's a special one.
1183.30s - 1185.98s |  So then what we want to do is this device is connecting out
1185.98s - 1190.08s |  and actually communicating real data out. It's taking photos and
1190.08s - 1193.02s |  sending them out. And that's what I wanted to see. So we
1193.02s - 1197.46s |  quickly, uh, search for this whole bucket thing and we start
1197.46s - 1202.60s |  finding things like, uh, certificates, keys, passwords.
1202.60s - 1206.60s |  We see this device clear, basically clear text, passwords,
1206.60s - 1211.60s |  keys, everything connecting out to an actual S3 bucket to
1211.60s - 1215.84s |  communicate all this data. With all, everything we ever would
1215.84s - 1220.48s |  need to know as a, uh, a tester how this thing's connecting out
1220.48s - 1224.82s |  to its back end systems. Again, as you can see, versus trying to
1224.82s - 1229.32s |  do stuff over cellular, which is encrypted, interchip comms often
1229.32s - 1233.76s |  contains no encrypted data. And you can intercept that data and
1233.76s - 1238.54s |  gain access, uh, uh, a large amount of interesting stuff. I
1238.54s - 1242.60s |  think this screen showed it actually sending out, uh, uh,
1242.60s - 1249.34s |  data actually associated with, um, the actual, um, configuration
1249.34s - 1256.02s |  on the, on the device. So again, in this particular device, and
1256.02s - 1260.58s |  Carlott had mentioned this, both of the circuits were in, in use.
1260.58s - 1263.76s |  Both of them were hooked up. Both the USB and the main UART
1263.76s - 1267.96s |  were actually functioning on this or connected up. That's not
1267.96s - 1274.24s |  always the case. Often a device that will support both USB and
1274.24s - 1278.04s |  all main UART communications often won't have both of them
1278.04s - 1281.20s |  connected up. One of them will be dummied off and the other
1281.20s - 1284.10s |  one's the only one connected in circuit. In those particular
1284.10s - 1287.82s |  cases, in this case, which we'll show a little later, we're able
1287.82s - 1290.82s |  to connect into the UART and control it. I think some of the
1290.82s - 1294.48s |  examples already showed that because they still connected it
1294.48s - 1298.62s |  to the main CPU on the device. Which is kind of cool. It made
1298.62s - 1301.44s |  it easier for us. I didn't have to get into where, weird stuff
1301.44s - 1305.42s |  with, uh, uh, sticking pins up underneath the body of the thing.
1305.42s - 1308.62s |  We're able to just cut the actual circuits that do that type
1308.62s - 1313.02s |  of stuff. So I'm going to turn this over to Carlotta and she's
1313.02s - 1316.30s |  going to talk to us about connecting up and understanding
1316.30s - 1319.96s |  serial communications through interchip and how we interact
1320.04s - 1327.88s |  with that. Okay. So in the case of interchip communications for
1327.88s - 1330.68s |  our cellular module, as I previously mentioned, it's going
1330.68s - 1333.92s |  to be connecting over to a, to the CPU of the device. And in
1333.92s - 1337.12s |  the case of this trail camera, it was using an EG91, which we
1337.12s - 1341.32s |  have here. Uh, the thing is for the actual UART communications,
1341.32s - 1345.16s |  there's two separate lines going. So the, the, there's one
1345.16s - 1348.30s |  line where the CPU is transmitting and then the, uh,
1348.30s - 1351.20s |  cellular module is receiving. And then the cellular module is
1351.22s - 1354.06s |  receiving on a separate line from the, the responses from
1354.06s - 1357.72s |  that cellular module. So in order to actually get a full
1357.72s - 1360.06s |  picture of the communications that are going between these two
1360.06s - 1365.70s |  devices, we need two FTDI to USB devices, one receiving on one
1365.70s - 1368.50s |  line and then one on the other to get a full picture of the
1368.50s - 1372.10s |  communications. Now this is only to be able to listen in on those
1372.10s - 1375.14s |  communications. And that's how we saw the, you know, when on
1375.14s - 1377.44s |  power up that the cellular module is sending a ready and
1377.44s - 1382.39s |  then on power down, it was sending a power down. Now in
1382.41s - 1385.97s |  order to actually be able to inject those AT commands like
1385.97s - 1389.11s |  you saw in the AT query script, uh, demo that was run and
1389.11s - 1391.99s |  everything, uh, we actually have to sever those connections
1391.99s - 1395.89s |  between the CPU and the, that cellular module and put ourself
1395.89s - 1400.29s |  pretty much in the place of the CPU. So we'd not, we'd only need
1400.29s - 1404.47s |  one FTDI to use USB device in this case. And just like regular
1404.47s - 1407.43s |  UART, you'd hook up the transmit to the receive on the cellular
1407.43s - 1410.31s |  module. And then the FTDI is received to the transmit on the
1410.33s - 1416.82s |  cellular module. So here is, you know, three images here. On the
1416.82s - 1420.66s |  far left, we've identified that transmit and receive for the
1420.66s - 1424.00s |  cellular module and the line that's going between it and the
1424.00s - 1428.40s |  CPU. In the center there, we've actually soldered wires to two
1428.40s - 1432.40s |  different sides because on that far right image, we've actually
1432.40s - 1436.98s |  cut the traces between the two. Now in order to be able to
1436.98s - 1439.38s |  continue to be able to listen in possibly on the
1439.38s - 1442.94s |  communications, we built a breakout board. So the side
1442.94s - 1445.20s |  that's connected to the CPU is connected to the breakout board
1445.20s - 1448.84s |  as is the side that we have the cellular module. So they can
1448.84s - 1452.52s |  continue to function as normal, uh, as long as, so in the center
1452.52s - 1455.98s |  there you can see that there are toggle switches. Uh, if they're
1455.98s - 1458.28s |  in the on position, the communications can continue
1458.28s - 1461.66s |  between the, those two parts fine, but we can then turn them
1461.66s - 1465.26s |  off and then connect to just one of the FTDI devices as you can
1465.26s - 1468.80s |  see in the image and then issue those AT commands to the cellular
1468.82s - 1474.40s |  module. And I will hand it back over to Daryl to talk about
1474.40s - 1475.90s |  injected targeted attacks.
1475.90s - 1482.99s |  Okay. To kind of mention a little bit on, uh, something
1482.99s - 1487.89s |  else to add to the, uh, serial communication. Uh, we also, I
1487.89s - 1491.43s |  also, uh, a couple years ago released a paper on interchip
1491.43s - 1496.27s |  communication analysis and we released a proof of concept code
1496.27s - 1499.71s |  called a Karen proxy. Now it wouldn't work in this case
1499.71s - 1502.45s |  because we haven't set it up to handle ASCII, but when we're
1502.47s - 1505.87s |  dealing with devices where there's no ASCII data, but just
1505.87s - 1509.77s |  hex data going over, a Karen proxy would give us the ability
1509.77s - 1514.49s |  to cut the circuit, throw the switches and route both sides
1514.49s - 1519.09s |  back into a Python code script that would actually capture data
1519.09s - 1524.29s |  going in both directions, allow you to replay data, capture and
1524.29s - 1528.89s |  replay data, and also capture replay data and actually set
1528.91s - 1532.81s |  filters to say, when you see this hex string, replace it this
1532.81s - 1535.81s |  one. Still a proof of concept. We can probably use some more
1535.81s - 1539.05s |  development, but it, it takes this to a new level. And I was
1539.05s - 1542.29s |  just talking to the guy this last week about let's add the
1542.29s - 1545.85s |  ability to throw ASCII in there, use standard carriage return
1545.85s - 1548.99s |  structures, which is often what we see when we're talking about
1548.99s - 1554.29s |  communication over the main, uh, AT, or the main UART
1554.33s - 1558.63s |  communication to cellular modules. So, uh, in this part
1558.63s - 1563.77s |  here, AT commands, so we wanted to start thinking about what can
1563.77s - 1567.01s |  we do here? So we've, we've, we've looked at these devices,
1567.01s - 1571.35s |  we can capture all the USB communications, which is a wealth
1571.35s - 1573.55s |  of information if you're doing any kind of assessment or
1573.55s - 1578.09s |  testing on a device, and then we can actually send AT commands,
1578.09s - 1581.79s |  but what can we do? Again, we're still in the early stage of
1581.79s - 1584.93s |  this, but I have an example in here of something I thought was
1584.93s - 1589.09s |  kind of cool as, uh, proving the potential capability. But I want
1589.09s - 1593.43s |  to start talking about, this is how we've tapped into this
1593.43s - 1599.71s |  device. So we have the device here, it's a trail camera. USB
1599.71s - 1603.81s |  is what it uses primarily for all of its communication. The
1603.81s - 1607.75s |  serial communication between the primary processor is in use, so
1607.75s - 1611.43s |  who cares if it's connected to the CPU? So we cut it and we
1611.53s - 1615.07s |  hook up to it that way so we can pretty much send commands at
1615.07s - 1619.23s |  will while the device is powered up. Again, I don't think, if you
1619.23s - 1624.43s |  remember one of the, uh, videos earlier, you've seen power down.
1624.43s - 1626.31s |  Like any of these devices, they're not going to stay
1626.31s - 1629.21s |  powered up. So they'll stay powered up for a certain period
1629.21s - 1632.15s |  of time and then they'll do a time cycle. And they'll actually
1632.15s - 1635.11s |  shut down the conserved batteries. So when you're testing
1635.11s - 1637.21s |  them, you kind of have to deal with the fact that it's doing
1637.21s - 1640.35s |  this, but with AT commands, potentially you could shut all
1640.37s - 1642.85s |  that functionality off, especially if you're feeding an
1642.85s - 1646.25s |  external power supply versus batteries into it. So that's how
1646.25s - 1651.55s |  we tapped into it. So one of the things we wanted to do is, this
1651.55s - 1655.49s |  particular module, as Carlotta had mentioned, when we pulled
1655.49s - 1659.43s |  down all the AT commands that are available, looked AT command
1659.43s - 1662.73s |  manuals, it didn't really show anything about socket
1662.73s - 1666.81s |  capability. But when we run our test script against it, we found
1666.83s - 1670.67s |  out socket capability was available. In this particular
1670.67s - 1675.25s |  case, it's QIOpen and QIClose where we can actually set up
1675.25s - 1679.11s |  real sockets. In the first one there, we show that we connected
1679.11s - 1683.35s |  out to a port over an IP and it actually failed and it came back
1683.35s - 1687.65s |  with, what is that number, I think it's 566, and basically
1687.65s - 1692.25s |  says the socket's not open. I think this actually shows it at
1692.25s - 1695.79s |  the bottom. It came back with a zero on that particular port. So
1695.81s - 1700.01s |  we start thinking about this, hey, what can we do with that?
1700.01s - 1703.15s |  One, with these sockets you can do a lot of things. But what if
1703.15s - 1707.79s |  we wanted to do like a port scan? You know? Can we use the
1707.79s - 1711.69s |  device to port scan some of the back end stuff? And here's all
1711.69s - 1715.47s |  of the ATQIOpen error messages that come back. So we get a
1715.47s - 1719.47s |  wealth of information based on this information, whether the
1719.47s - 1725.47s |  socket's available, it's open, it's closed, or some other error
1726.67s - 1729.25s |  When I was initially working for this, I got some of the command
1729.25s - 1731.65s |  structure backwards. I was throwing all kinds of weird
1731.65s - 1734.61s |  errors. I'm like, why ain't this thing working? Finally figured
1734.61s - 1738.35s |  it out after I sat down with a manual that talked about QIOpen.
1738.35s - 1742.83s |  Got the structure right and we kind of moved on from there. So
1742.83s - 1745.29s |  here's the actual code that we're going to show here in a
1745.29s - 1748.73s |  minute. It's a simple Python script. This is actually on our
1748.73s - 1751.73s |  GitHub also, so if you want to play around with it. The yellow
1751.73s - 1754.71s |  stuff's kind of like the, kind of the important stuff. So
1754.73s - 1758.79s |  basically we can set up the USB port that we want to connect
1758.79s - 1763.43s |  through for the TLL. And then we can go into the IP addresses,
1763.43s - 1766.57s |  port numbers, and the bottom is open, close the circuit. So
1766.57s - 1770.47s |  let's open and close the socket and see what happens. So let's
1770.47s - 1775.47s |  go ahead and run a quick demo. So again, this demo is not
1775.47s - 1778.81s |  pointed to anyone's back end system. We're doing it as a
1778.81s - 1783.09s |  proof of concept. So I pointed at NMAPS, NMAPS server. The one
1783.09s - 1786.37s |  they allow you to run scans with with NMAP. So I wouldn't
1786.37s - 1793.32s |  like make anyone mad. And let's go ahead and run this. So we
1793.32s - 1796.52s |  turn the device on. First thing we want to do, let's make sure
1796.52s - 1804.56s |  that it's actually up and ready. Make sure I have all my
1804.56s - 1811.80s |  connections right. Turn the unit on. See my grubby little fingers
1811.80s - 1820.30s |  there? We got it ready. So now we can run the command. And
1820.34s - 1823.30s |  initially this thing is going to go out and we can literally
1823.30s - 1826.38s |  point it at any IP address, any number of ports, any number of
1826.38s - 1831.28s |  IP addresses. And instantly it starts returning data. So we'll
1831.28s - 1836.46s |  see a 00 come back. That port's open. We see a 566 come back.
1836.46s - 1840.22s |  That port's closed. So from here we're actually able to do port
1840.22s - 1845.06s |  scans to this device. I think there's a wealth of more things
1845.06s - 1848.04s |  we could do where we can actually control these cellular
1848.04s - 1852.02s |  modules to do some of this stuff. And let's go ahead and
1852.02s - 1856.49s |  let it finish running. I think that's pretty straightforward
1856.49s - 1860.03s |  what we got there. We're able to do port scans. I think 22 is
1860.03s - 1866.47s |  open. 80 is open. 1337 I think is open or something like that.
1866.47s - 1870.81s |  So a couple of the weird ports, a couple of common ports. But
1870.81s - 1873.75s |  now we've done a port scan. We've basically taken a trail
1873.75s - 1877.95s |  camera and while this is taking place we did not alter the trail
1877.99s - 1881.89s |  camera's function. It contended communicating out to the S3
1881.89s - 1886.23s |  bucket functioning normal. We just asked it to do a port scan
1886.23s - 1890.03s |  using its socket capability. And we were successful in doing
1890.03s - 1897.03s |  that. So where's this come into play? So if I'm doing, if I'm
1897.03s - 1900.37s |  going to be assessing a target for a company that uses cellular
1900.37s - 1905.41s |  backhaul for its communications and let's say they're using a
1905.41s - 1910.21s |  private APN. That private APN goes out. It goes through a VPN.
1910.21s - 1915.19s |  It hits either some closed cloud service or it hits their actual
1915.19s - 1919.29s |  internal company network through this VPN. And no one on the
1919.29s - 1922.83s |  internet has access to it. So no matter what data you get, you
1922.83s - 1926.43s |  can't attack those back end systems or test the overall
1926.43s - 1932.77s |  ecosystem of the technology. But if we engage the device itself
1932.81s - 1936.57s |  with what we showed here, it gives us the ability to actually
1936.57s - 1939.11s |  go through that tunnel that's already been set up by the
1939.11s - 1944.35s |  device through the private APN to the back end services. And
1944.35s - 1948.11s |  initially we can do a port scan on devices back there. Next we
1948.11s - 1951.59s |  can actually, once we have those ports, we can set up sockets and
1951.59s - 1955.79s |  start communicating to those devices in the area that is
1955.79s - 1960.37s |  supposed to be trusted or secured because we're looking at
1960.37s - 1964.11s |  companies that are looking at security purely from a machine
1964.11s - 1967.61s |  to machine environment in a closed back end which they would
1967.61s - 1970.95s |  think would be secure. In this case we can actually prove
1970.95s - 1974.61s |  that's not the case. We can use the device, control the device
1974.61s - 1978.05s |  and set up our own connections and own tunnels to the back end.
1978.05s - 1982.19s |  So the first image is what we conceive of a private APN. The
1982.19s - 1985.03s |  second one is more of a public APN and that's kind of where this
1985.05s - 1989.33s |  device was. So it kind of allowed us to actually go out
1989.33s - 1993.67s |  and uh and port scan and map in this case. But I have run into a
1993.67s - 1997.41s |  number of devices that were on private APNs where we could not
1997.41s - 2000.37s |  get access. And it's kind of the driving force around this
2000.37s - 2006.51s |  research. How do we build out a knowledge base so pen testers,
2006.51s - 2010.61s |  IOT testers can go to that next level and look at the overall
2010.61s - 2014.09s |  ecosystem effectively. And interchip communication and
2014.09s - 2017.25s |  control is the best way to get there in my opinion. And I'm
2017.25s - 2020.45s |  hopeful we got that over to you guys and you're able to get
2020.45s - 2027.53s |  something out of this. Here is uh the actual um data. So that's
2027.53s - 2030.17s |  the GitHub and stuff like that that you can actually get to.
2030.17s - 2034.63s |  A couple papers. We actually published a paper last week uh
2034.63s - 2038.67s |  on this subject. So bring it down and check it out. We talk
2038.67s - 2042.55s |  about uh a lot more in that paper. At least from uh the
2042.57s - 2046.61s |  subject of engaging interactively on the hardware
2046.61s - 2050.51s |  and how to trace things out effectively. Uh we get into uh
2050.51s - 2054.85s |  dechipping, taking chips off and actually rerouting circuits on
2054.85s - 2058.73s |  the board. And then putting the cellular modules back on. Things
2058.73s - 2062.93s |  like that. Uh so we cover a lot of other cool stuff. So check
2062.93s - 2066.13s |  out that paper. So I don't know if we have time for questions.
2066.13s - 2069.83s |  We're probably out but we're going to be around. So grab us
2069.85s - 2073.45s |  when we get packed up off stage. And I'd be glad to talk about
2073.45s - 2076.84s |  more things with you. Thank you.