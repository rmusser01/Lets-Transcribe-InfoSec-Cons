**Presentation Overview**
- Techniques for **process injection** using advanced **return-oriented programming (ROP)**
- Challenges in identifying the **target binary** due to difficult string comparisons in ROP
- Universal solution for reliable **string comparison via ROP**
- Creation of patterns for different **WinAPIs** using **PUSHAD** instruction and **sniper** approach

**Speakers**
- **Dr. Bramal Brizendine**: Director of the Verona Lab, creator of Shell Wasp, Jop Rocket, and Rop Rocket
- **Shiva Shashank Kusuma**: Research assistant with a master's in computer science, pursuing a master's in cyber security

**Research Focus**
- **Shellcodeless ROP**: Utilizing ROP gadgets for process injection without traditional shellcode
- **Pattern Creation**: Developing unique patterns for different **WinAPIs** to facilitate process injection
- **Emphasis on Broad Applicability**: Research aimed at being applicable to various binaries and techniques

**ROP Techniques**
- **Push Add**: Populating registers with predefined values and loading them onto the stack
- **Move Dereference**: Precisely writing values to the stack and adjusting as needed
- **Chaining APIs**: Using ROP chains to link different **APIs** and manage return values

**Process Injection Methodology**
- **Structure Building**: Constructing structures byte by byte using ROP
- **Value Storage**: Saving important values and retrieving them later to avoid repeated API calls
- **Novel Combinations**: Combining move dereference and push add for efficient ROP chain patterns

**Practical Implementation**
- **Load Library and Get Proc Address**: Using ROP patterns to manage library loading and address retrieval
- **Snapshot and PID Identification**: Utilizing **Create Tool Help 32 Snapshot** for process identification
- **Custom Function Creation**: Writing custom enumeration functions directly to memory for process identification

**Demo Highlights**
- **Process Identification**: Locating and targeting specific processes using custom functions
- **Memory Injection and Execution**: Injecting shellcode into external processes and executing using **Create Remote Thread**

**Conclusion**
- Methodology for building an enumerate processes function via ROP
- Aim to provide a rich set of patterns for various process injection techniques
- Encouragement to explore the **ROP Rocket tool** for further understanding