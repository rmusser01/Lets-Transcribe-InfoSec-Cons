{
  "webpage_url": "local:1731742421:3ee67bdc:DEF CON 32 - Aerospace Village - How I Developed a Low - Cost Raspberry Pi Based Device for ADS - B Spoof - Angelina Tsuboi Fly Catcher.mp4",
  "title": "DEF CON 32 - Aerospace Village - How I Developed a Low - Cost Raspberry Pi Based Device for ADS - B Spoof - Angelina Tsuboi Fly Catcher.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.43s - 4.43s | This text was transcribed using whisper model: large-v2

 Hello, everyone. Thank you so much for coming to my talk today.
4.43s - 9.43s |  Today I'll be speaking a little bit about ADS-B security and a personal project I've worked on
9.43s - 14.43s |  on the intersection of aviation and signals intelligence called Flycatcher.
14.43s - 19.84s |  So a quick overview of the device I created.
19.84s - 23.84s |  It's called Flycatcher, and it's made for effective ADS-B monitoring
23.84s - 28.84s |  and detecting foreign instances of aircraft spoofing.
28.84s - 32.84s |  It's low-cost and reliable. It's created using the Raspberry Pi.
32.84s - 38.84s |  And it's compatible with multiple software-defined radio signal sources.
38.84s - 43.84s |  And I created my own convolutional neural network that parses ADS-B inputs
43.84s - 49.84s |  in order to detect for reliable and unreliable aircraft signals.
49.84s - 51.84s |  A little bit about my background.
51.84s - 57.84s |  I'm still upstarting in my cybersecurity field, but I've been a software developer for about a decade.
57.84s - 61.84s |  And I've been focusing on aerospace security for the past few years
61.84s - 65.84s |  with an emphasis on aviation due to my piloting experience.
65.84s - 70.28s |  And a little bit of recap on what ADS-B is.
70.28s - 73.28s |  It stands for Automatic Dependent Surveillance Broadcast,
73.28s - 79.28s |  and it's a mandated technology for performing surveillance and signals intelligence on airplanes.
79.28s - 82.28s |  And if we break the acronym down, it's automatic,
82.28s - 86.28s |  meaning it doesn't require any manual input from the pilot itself.
86.28s - 90.28s |  It's dependent, meaning that it requires GPS signals from satellites
90.28s - 94.28s |  in order to transmit the aircraft's information and positioning.
94.28s - 100.28s |  It's meant for surveillance, so it contains complete comprehensive information
100.28s - 102.28s |  about the data of the aircraft transmitted itself,
102.28s - 106.28s |  such as its airspeed, positioning, altitude, and so forth.
106.28s - 110.28s |  And lastly, it continuously beacons out and broadcasts data,
110.28s - 115.28s |  allowing for ground-based ATC or other pilots to receive that information
115.28s - 121.28s |  in order to triangulate where the aircraft is positioned in the sky.
121.28s - 128.26s |  So here's an imagery conceptual overview of how ADS-B works.
128.26s - 134.26s |  All ADS-B signals are derived from the Global Navigational Satellite System,
134.26s - 138.26s |  which provides positioning information to the aircraft itself,
138.26s - 145.26s |  which is then beaconed out via the ADS-B out hardware components internally on the airplane.
145.26s - 150.26s |  And once that information is beaconed out via packets on the 1090 MHz protocol,
150.26s - 155.26s |  it can be received by other airplanes alongside ground-based receivers and antennas,
155.26s - 163.41s |  alongside air traffic control, in order for those receivers to figure out where the airplane is positioned.
163.41s - 166.41s |  So this technology works using three core components
166.41s - 170.41s |  that allow for ADS-B to be broadcasted on airplanes.
170.41s - 175.41s |  There's the GPS receiver that receives the positioning information from the satellites themselves,
175.41s - 180.41s |  and then the ADS-B packets are transmitted via the transponder on the plane,
180.41s - 184.41s |  which is required on all planes, and it typically uses the MODE-S protocol
184.41s - 188.41s |  in order to send comprehensive data about the plane itself.
188.41s - 191.41s |  And internally on the plane, it has an ADS-B in,
191.41s - 198.41s |  allowing for continuous monitoring by the pilots themselves of other air traffic in the vicinity.
198.41s - 207.45s |  Although ADS-B is relied on by a wide range of airplanes and pilots worldwide,
207.45s - 209.45s |  it has some core vulnerabilities.
209.45s - 212.45s |  It is unauthenticated and unencrypted.
212.45s - 216.45s |  Unauthenticated meaning that there is no verification of the transmission,
216.45s - 219.45s |  so any ground-based hacker can transmit ADS-B packets,
219.45s - 222.45s |  and it will automatically be received as a packet.
222.45s - 228.45s |  There's no amount of verification alongside its unencrypted nature,
228.45s - 235.11s |  making it transparent to anyone who tunes into that frequency.
235.11s - 241.11s |  This reveals a lot of attack vectors, especially on the communications end.
241.11s - 247.11s |  The four core ones are jamming, spoofing, replay attacks, and message injection.
247.11s - 254.11s |  Jamming is when a ground-based transmitter can flood the ADS-B frequency with a bunch of garbled data.
254.11s - 259.11s |  There's also spoofing, where it's more of a selective-based jamming attack,
259.11s - 263.11s |  where you can custom fabricate data packets and then transmit it.
263.11s - 266.11s |  This can effectively create something called a ghost plane,
266.11s - 273.11s |  where a ghost airplane would show up and pop up on the ADS-B feed that isn't really a plane itself.
273.11s - 279.11s |  There's replay attacks, where you capture ADS-B packets from an earlier time and then replay it,
279.11s - 285.11s |  so you're effectively creating a duplicate airplane that is then transmitted and then received.
285.11s - 287.11s |  And then there's also message injection,
287.11s - 291.11s |  where you play around with the ADS-B packets individually themselves
291.11s - 299.11s |  in order to mess with specific telemetry like the altitude, airspeed, positioning, and so forth.
299.11s - 305.11s |  The one I chose to focus on for this project is spoofing because I enjoyed its customized nature.
305.11s - 310.11s |  A lot of spoofing can be detected using artificial intelligence,
310.11s - 316.11s |  and I wanted to pursue that kind of modality for detecting spoofed airplanes for this project.
316.11s - 325.74s |  So how spoofing on ADS-B works is that a ground-based hacker can transmit ghost aircraft into the sky
325.74s - 330.74s |  by creating custom fabricated packets that mimic the ADS-B protocol,
330.74s - 337.74s |  and these spoofed airplanes can be tracked by other airplanes in the sky alongside ground-based receivers.
337.74s - 345.76s |  So I went through a four-step build process as I was constructing this device.
345.76s - 353.76s |  Firstly, I set up an ADS-B reception ground station using four components that I'll be outlining later.
353.76s - 358.76s |  I went about constructing a device so it was portable and I could stow it on the back of an airplane.
358.76s - 367.76s |  Then I went about training a deep neural network in order to detect for instances of aircraft spoofing.
367.76s - 373.76s |  And then lastly, I stowed the device itself on the back of a sport cruiser
373.76s - 377.76s |  and flew it around the South Bay in order to get access to data,
377.76s - 384.58s |  in order to train the artificial intelligence machine learning model that I created.
384.58s - 391.58s |  So one thing I wanted to mention is there's a wide range of credible data sources in order to get access to ADS-B data
391.58s - 393.58s |  that you can actually access right now.
393.58s - 396.58s |  There's ADS-B Exchange, FlightAware, ADS-B Hub.
396.58s - 402.58s |  For this project, I wanted to go about manually getting these transmitted signals,
402.58s - 405.58s |  so I set up my own ADS-B reception ground station.
405.58s - 412.58s |  This consisted of a FlightAware Pro Stick Plus SDR as my software-defined radio option
412.58s - 419.58s |  in order to get specialized ADS-B signals, which relies on the RTL2832U chipset,
419.58s - 423.58s |  which is really configurable with a lot of dumb 1090 decoders.
423.58s - 428.58s |  I used a 1090 megahertz rubber ducky antenna for a cheap and reliable setup.
428.58s - 435.58s |  The Raspberry Pi in order to analyze the ADS-B packets alongside the FlightAware GUI display
435.58s - 440.58s |  in order to have a visual output of the ADS-B display data I was getting.
440.58s - 448.57s |  Once you're able to receive the ADS-B signals that are propagated on the 1090 megahertz frequency,
448.57s - 451.57s |  you need to go about decoding these signals.
451.57s - 456.57s |  The signals I chose to decode were the ones transmitted on the mode S.
456.57s - 458.57s |  There's different modes of ADS-B.
458.57s - 462.57s |  There's A, C, and S. S is the most comprehensive of all the modes
462.57s - 468.57s |  and contains advanced mode with comprehensive data about the aircraft itself.
468.57s - 472.57s |  And on the bottom is a mesh structure breakdown of ADS-B packets.
472.57s - 478.57s |  You can see it starts with the first few bits outlining the downlink format.
478.57s - 481.57s |  There is the transponder capability, the iCal designation,
481.57s - 486.57s |  which all aircraft has its own iCal identifier to identify it,
486.57s - 491.57s |  alongside its message taking up the 33 to 88-bit sequence,
491.57s - 498.06s |  alongside with a parity ID appended to the end of it.
498.06s - 504.06s |  The way I integrated DUM1090 was I embedded it directly on the Raspberry Pi itself.
504.06s - 510.06s |  As soon as the 1090 megahertz ADS-B antenna was able to retrieve the signals,
510.06s - 514.06s |  it fed it through the DUM1090 decoder software protocol,
514.06s - 517.06s |  which you can download and install directly onto the Pi.
517.06s - 521.06s |  And then it creates a JSON output, which you can parse and visualize
521.06s - 526.24s |  on a wide range of GUI sources.
526.24s - 529.24s |  I also wanted to add some sort of plotting and visualization
529.24s - 532.24s |  for both my ground station and the device itself.
532.24s - 537.24s |  So once the JSON output was tabulated by the DUM1090 decoder,
537.24s - 541.24s |  I fed it into the FlightAware visualization dashboard
541.24s - 546.77s |  in order to see the live ADS-B broadcasts.
546.77s - 550.77s |  Once I was able to get a sufficient ground station running
550.77s - 553.77s |  and it was able to pick up some sort of signals,
553.77s - 557.77s |  I wanted to convert it into a device so I could make it portable
557.77s - 560.77s |  and have it bestowed on the back of an airplane
560.77s - 565.77s |  in order to get access to more comprehensive data in a wide range of locations.
565.77s - 569.77s |  Here's a build outline of materials that I used.
569.77s - 573.77s |  I used the Raspberry Pi 3B, a custom case enclosure,
573.77s - 577.77s |  alongside a TFT display case on top,
577.77s - 581.77s |  alongside my 1090 MHz rubber ducky antenna.
581.77s - 586.46s |  The final build looks something like that.
586.46s - 592.46s |  It was good because it had a battery case attached to the bottom of it,
592.46s - 595.46s |  making it so I could use it wherever I wanted to.
595.46s - 598.46s |  It was highly portable, it didn't take up that much space,
598.46s - 600.46s |  and it was a durable design.
600.46s - 608.64s |  So once the device was constructed, I went about architecting the algorithm
608.64s - 611.64s |  that was supposed to be classifying for spoofed airplanes.
611.64s - 615.64s |  There's a wide range of indicators of spoofed aircraft.
615.64s - 622.64s |  Here's a graph of the altitude and speed graph of a typical and genuine aircraft.
622.64s - 627.64s |  You can see that it outlines the main phases of flight itself.
627.64s - 633.64s |  You can see in the beginning it will have an ascension as the airspeed goes up
633.64s - 636.64s |  and the altitude goes up as the airplane is taking off.
636.64s - 641.64s |  You can see the cruising indication near the middle of the flight.
641.64s - 647.64s |  And then finally you see a decrease of all the values as the airplane is landing.
647.64s - 656.64s |  You can check for spoofed airplanes by checking for inconsistencies of telemetry values,
656.64s - 662.64s |  such as positioning, if it has weird GPS coordinates that don't outline its phase of flight
662.64s - 668.64s |  or its location or it just abruptly pops up in different locations, that's an indication.
668.64s - 672.64s |  There's also altitude, if there's a lot of variance in the altitude being displayed
672.64s - 676.64s |  on some of the ADS-B plotline charts.
676.64s - 681.64s |  Also identification, spoofed airplanes are not really identified,
681.64s - 685.64s |  so within the ADS-B message structure itself you'll see a null
685.64s - 692.64s |  or you won't see a lot of values for any of the identification fields in the data packet.
692.64s - 701.16s |  Once I was able to get the feature vectors derived from the ADS-B inputs,
701.16s - 707.16s |  I went about creating a dense neural network in order to classify for these spoofed signals.
707.16s - 711.16s |  A dense neural network overlays a neural network itself,
711.16s - 716.16s |  which is an artificial intelligence model that's derived from the human brain
716.16s - 719.16s |  and it consists of multiple interconnected layers.
719.16s - 723.16s |  In a dense one, you'll see all the layers connected together.
723.16s - 729.16s |  As each neuron processes the input from the feature vectors, it applies some weight and bias to it
729.16s - 735.16s |  and then it passes the result through an activation function in order to make an accurate guess
735.16s - 743.02s |  of whether an airplane is spoofed and running it through a binary classifier.
743.02s - 752.02s |  I went about creating the DNN by custom coding a Python script that utilized the TensorFlow library
752.02s - 756.02s |  in order to accurately detect for this spoofed airplane.
756.02s - 763.02s |  I used the ReLU activation functions at each of the three layers consisting of the DNN.
763.02s - 767.02s |  Those were three densely connected interconnected nodes
767.02s - 773.02s |  and the final layer contained a sigmoid function in order to make a binary classification,
773.02s - 782.73s |  zero indicating that the airplane was not spoofed and one being that the airplane was spoofed.
782.73s - 785.73s |  As for the training data I used for the model,
785.73s - 791.73s |  I used historical ADS-B records from a wide range of ADS-B data sources.
791.73s - 798.73s |  ADS-B Exchange had ADS-B datasets going back to the 2000s that I was able to leverage.
798.73s - 803.73s |  FlightAware being another great source and OpenSky.
803.73s - 809.73s |  I was able to download archives of the ADS-B data from CSB records they had in the past
809.73s - 815.73s |  and I was able to get data from my own ground station alongside the device itself.
815.73s - 820.73s |  What I did was I would take all those signals and once it passed through the DUM1090 decoder,
820.73s - 826.73s |  I saved all the data into a CSB record for it to be put into the model.
826.73s - 835.74s |  As for testing the device itself, I really wanted to get a wide range of data from a lot of locations
835.74s - 841.74s |  and although it could have traveled to different locations via car or anything in order to get the data,
841.74s - 845.74s |  I wanted to go full on with this project,
845.74s - 850.74s |  so I put the device on the back of a sport cruiser which is a single engine airplane
850.74s - 857.74s |  and I flew it around a lot of different areas within the South Bay area in Los Angeles
857.74s - 860.74s |  and you can see that's a picture of me loading it on the sport cruiser
860.74s - 864.74s |  and me flying the plane to all those different locations.
864.74s - 870.99s |  As for the data collection process, the device just sat on the back of the airplane
870.99s - 876.99s |  and it was continuously monitoring the ADS-B signals around me using a 1090 megahertz antenna
876.99s - 881.99s |  and it was just keeping a file in the Raspberry Pi itself
881.99s - 886.99s |  which contained ADS-B records of all the airplanes nearby.
886.99s - 897.23s |  As for the scan locations in this project, I went pretty much all the South Bay Los Angeles area,
897.23s - 903.23s |  Santa Monica, Torrance, Malibu, Palisades, Burbank, and downtown Los Angeles.
903.23s - 906.23s |  I made sure to go through pretty popular airspaces.
906.23s - 909.23s |  LAX was really popular.
909.23s - 911.23s |  Burbank was also popular.
911.23s - 918.23s |  I also went to local airports like Santa Monica Airports, Van Nuys,
918.23s - 922.23s |  in order to get a wide range of data because especially at commercial airports,
922.23s - 927.23s |  you'll get 747s but you won't get single engine airplanes
927.23s - 934.23s |  while if I went to a more local airport, I would get a bigger range or a bigger breadth of data
934.23s - 940.23s |  because that's where you get multi-engines, helicopters, single engine airplanes.
940.23s - 946.23s |  So I wanted to have data that reflected both general aviation and commercial aviation as well.
946.23s - 954.76s |  Once I was able to collect and tabulate this data in a CSV format,
954.76s - 959.76s |  I fed it into the deep neural network model I created using TensorFlow
959.76s - 965.76s |  and then in order to get a visual plot of the classification once the spoofed aircraft was classified,
965.76s - 972.76s |  I used a library called Folium in order to make a visual plot of the spoofed airplanes.
972.76s - 978.02s |  Build improvements going forward.
978.02s - 983.02s |  One is using more proper signals intelligence techniques.
983.02s - 987.02s |  This was a pretty straightforward scan of it.
987.02s - 990.02s |  So it wasn't really analyzing the signals themselves.
990.02s - 993.02s |  It was analyzing the data contained within the signals.
993.02s - 1000.02s |  But another approach of detecting for ADS-B spoofing is looking for the first phase of the retrieval process
1000.02s - 1002.02s |  where you analyze the signals themselves.
1002.02s - 1007.02s |  And one modality of doing this is a technique called RSSI fingerprinting.
1007.02s - 1012.02s |  RSSI indicating the signal strength of the aircraft.
1012.02s - 1014.02s |  ADS-B out transmission.
1014.02s - 1019.02s |  So as each airplane transmits the ADS-B message using its ADS-B out,
1020.02s - 1024.02s |  it will have its own unique RSSI identifier.
1024.02s - 1032.02s |  And this could be a more proper technique of analyzing each of the individual RF characteristics of the signals themselves
1032.02s - 1040.02s |  and you can localize the signals where they come out of in order to identify the airplanes.
1040.02s - 1044.02s |  And typically when you're doing RSSI fingerprinting for a spoofed plane,
1044.02s - 1048.02s |  you get more deviations and deflections of the RSSI signal.
1048.02s - 1051.02s |  While for a valid plane, you'll have more of a consistent output.
1051.02s - 1056.02s |  So that would be a signals intelligence way of improving this build.
1056.02s - 1059.02s |  And secondly is to use more refined algorithms.
1059.02s - 1065.02s |  I use the DNN for this approach, but there's a lot of exploration with other models that could be done.
1065.02s - 1073.02s |  So using other deep learning models like recurrent neural networks or long short term memory networks could be sufficient
1073.02s - 1081.02s |  alongside adding reinforcement techniques in order to improve the accuracy of the current convolutional network.
1081.02s - 1087.02s |  The tests I ran with this convolutional network reflected accuracy rates of 90%,
1087.02s - 1091.94s |  but that could be improved using these approach.
1091.94s - 1095.94s |  Additional enhancements would be the training data itself.
1095.94s - 1099.94s |  One huge constraint with this project was the training data,
1099.94s - 1102.94s |  because a lot of the training data for the spoofed data set,
1102.94s - 1105.94s |  so there was a valid data set and there was a spoofed data set.
1105.94s - 1115.94s |  The valid data set was very easy to get because there's huge tabulated records of ADSB messages that are from a wide range of sources.
1115.94s - 1117.94s |  But when you're dealing with spoofed sources,
1117.94s - 1122.94s |  I can only get it from very specialized people within the aviation signals intelligence techniques.
1122.94s - 1125.94s |  And you're also dealing with the legality issue in that regard,
1125.94s - 1130.94s |  because it's really hard to get access to spoofed data you can train a model on.
1130.94s - 1137.94s |  So I would say for half the spoof signals, half of them had to be generated myself.
1137.94s - 1146.94s |  So I had to go into the perspective of a person who would be spoofing these signals in order to manually generate ADSB messages
1146.94s - 1149.94s |  that would be spoofed in nature in order to train this model.
1149.94s - 1161.94s |  However, having more realistic data in order to train this data set would make this neural network model more accurate.
1161.94s - 1170.94s |  And one way for increasing the accuracy rate of another way of doing it would also be using a technique called data augmentation,
1170.94s - 1176.94s |  which would further refine the approach of manually generating these spoofed signal messages
1176.94s - 1180.94s |  that I could directly feed into the neural network itself,
1180.94s - 1187.94s |  allowing me to have a more comprehensive data array of spoof signals that I could train this model on.
1187.94s - 1196.06s |  Thank you. That's about it. If you have any questions, feel free to come up or ask them right now.
1196.06s - 1201.06s |  That's my contact information. But thank you so much for coming today.