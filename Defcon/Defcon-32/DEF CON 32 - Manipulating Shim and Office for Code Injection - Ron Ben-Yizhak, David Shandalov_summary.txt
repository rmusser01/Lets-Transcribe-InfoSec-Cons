**Talk Overview**
- **Title**: DEF CON 32 - Manipulating Shim and Office for Code Injection
- **Speakers**: Ron Ben-Yizhak and David Shandalov
- **Duration**: 2472 seconds
- **Channel**: DEFCONConference
- **Upload Date**: October 16, 2024

**Introduction to the App Compatibility Framework**
- Designed for **backwards compatibility** in Windows
- **Shim database files (SDB)** are used to fix compatibility issues
- **Main file**: sysmain.sdb, maintained by Microsoft
- Users can install custom SDB files via **registry paths**

**Attack Surface Research on Microsoft Office**
- Focus on **RPC interfaces** of OfficeClickToRun.exe
- Found method for **DLL injection and privilege escalation**
- **Conditions** for attack include specific compatibility settings

**Reverse Engineering and Shim Infrastructure**
- Detailed reverse engineering of the driver and **undocumented structures**
- Discovered technique for applying a **malicious shim** without registry modification

**Novel Attack Techniques**
- Utilized **Opportunistic Lock** and **App Compatibility Mechanisms**
- Investigated **Office Click-to-Run** service for code injection
- Developed methods to bypass detection by security products

**Detailed Attack Execution**
- **Malicious DLL** injection technique using RPC calls
- Explored **directory traversal** to manipulate file paths
- Demonstrated privilege escalation from **admin to system**

**App Compatibility and Cache Control**
- **Undocumented API**: anti-app-help-cache-control
- Examined interactions with **ahcache.sys** driver
- Explored **cache manipulation** to enforce SDB file reading

**Shim Data Structure and Process Creation**
- Reverse engineering of **shim data structure**
- Process for **applying unauthorized fixes** using manipulated shim data

**Demonstrations and Implications**
- Described file-less and registry-less **DLL injection**
- Highlighted **limitations** such as process state requirements
- Showed **real-time demonstration** of injection technique

**Detection and Mitigation Strategies**
- Monitor **RPC calls** and **opportunistic lock requests**
- Track **file system activity** for suspicious DLL creation
- Implement security policies to restrict **memory write operations**

**Community Involvement**
- Encouraged further research on **shim data structures**
- Suggest exploring additional **attack vectors** and techniques

**Conclusion**
- Presented comprehensive methodology for attack surface research
- Demonstrated how to leverage system components for **complex attacks**
- Encouraged community to build on the findings to advance the field.