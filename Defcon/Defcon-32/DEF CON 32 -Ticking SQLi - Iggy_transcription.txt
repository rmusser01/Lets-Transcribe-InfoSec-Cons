{
  "webpage_url": "https://www.youtube.com/watch?v=bVKtcu82a8w",
  "title": "DEF CON 32 -Ticking SQLi - Iggy",
  "description": "Explore the intricacies of time-based SQL injection through the lens of Operation GhostShell. This session delves into the methods used by attackers to exploit time delays for data extraction, highlighting real-world examples and the impact of these breaches on major universities. Attendees will gain a deep understanding of the technical aspects, see live demonstrations, and learn practical defense strategies to safeguard against such vulnerabilities. Perfect for security professionals seeking to enhance their knowledge of advanced SQLi techniques and mitigation.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1508,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.66s - 7.68s | This text was transcribed using whisper model: large-v2

 Alright folks, it is that time. If you have a seat that is in between you, please collapse
7.68s - 14.18s |  down. Specifically you sir, thank you very much. If you would bring it in close. Alright
14.18s - 18.96s |  with that we are gonna go ahead and kick everything off. I would like to introduce Iggy to the
18.96s - 20.96s |  stage. Thank you.
20.96s - 35.44s |  So hello DEF CON and welcome to my talk called Ticking SQLI. And we will begin. So what's
35.44s - 41.36s |  in it for you today? Today we will explore types of SQL injection. We will focus a bit
41.36s - 48.40s |  on time based SQL injection. We will see the impact team Ghost Shell did in the past using
48.40s - 53.08s |  these kinds of techniques. We will understand why it's still relevant today and you will
53.08s - 60.20s |  have a good time with a pretty much good presenter today. So who am I? My name is Igor but please
60.20s - 66.60s |  call me Iggy. It's my nickname since childhood. I'm a security engineer at Axonius. One sentence
66.60s - 74.56s |  about Axonius is it's a cyber security asset management platform that maps all your digital
74.56s - 79.72s |  assets across your organization, normalize them, deduplicate them and give you comprehensive
79.72s - 85.24s |  insights about them and much more. And why I'm here today? I'm here today because I love
85.24s - 92.32s |  learning stuff and especially in cyber security. Since from low level to high level, from lock
92.32s - 98.88s |  picking to RFIDs and I'm studying a lot and for my studies I came to this idea to talk
98.88s - 104.28s |  about this topic today. And the last thing about me, it's the first time I'm presenting
104.28s - 110.00s |  so thank you AppSecVillage for giving me this opportunity today to be in such an honorable
110.00s - 117.28s |  stage as AppSecVillage and DEF CON. I truly appreciate it. And we'll begin. We'll begin
117.28s - 123.88s |  by introducing what is SQL injection. SQL injection is a technique where attackers insert
123.88s - 130.88s |  malicious SQL code into some input fields. It can be login forms, search boxes or URL
130.88s - 139.00s |  parameters and they do it mainly to retrieve sensitive information from the database for
139.00s - 147.32s |  the application. They can retrieve sensitive information, delete tables and a lot of things
147.32s - 154.16s |  that we'll see in the next slides. But the bottom line here is the attackers using some
154.16s - 159.92s |  malicious SQL payload to manipulate the web application and the database behind it to
159.92s - 175.84s |  retrieve some and to do some sensitive operations. The example that I like the most to show what
175.88s - 181.20s |  it is SQL injection is to see how it looks through the code. We have a query where the username
181.20s - 186.76s |  and the password flows to its parameters. In the UI it looks something like this. You get a
186.76s - 193.68s |  login form. It's like to demonstrate the most basic type of SQL injection. You have the
193.68s - 199.72s |  username, you can enter admin and some malicious payload to the password that basically means
199.72s - 207.68s |  a single quote and some old condition that always evaluates to true. This flows to the query.
207.68s - 213.52s |  The username gets the admin and the password gets some payload that always evaluates to true
213.52s - 219.80s |  and by that the attacker can bypass the authentication because it's sending it to the web
219.80s - 229.91s |  application that's sending it to its database and it retrieves authentication bypass. We have
229.91s - 236.95s |  some different types of SQL injection. First type called in-band or classic what essentially
236.95s - 244.55s |  it means that you see the results of your payload directly in HTTP response. Actually it also
244.55s - 252.03s |  can be served as self-category but I want to stick as many resources I'll state in it. So we
252.03s - 257.47s |  have the in-band that you see the response directly into the web application. It also divided
257.51s - 267.51s |  into two categories. One of them is error-based. Error-based what it means is that you rely on
267.51s - 276.31s |  errors that you retrieve from the database to see some sensitive information and you have a
276.31s - 282.31s |  union-based type. What it means in general we will in a second see demonstration for this but in
282.31s - 290.63s |  one sentence union-based is concatenating two data, two data or tables into one that contains
290.63s - 297.95s |  both of them or we can say that it's two select statements that combined into one result. We
297.95s - 306.15s |  combine to some expected data additional concatenation of a table that retrieves sensitive
306.19s - 313.99s |  information. We will see it in the next slides. So to demonstrate error-based SQL injection we
313.99s - 321.99s |  can see that we we should try to probe the application. Most of the times we will try through
321.99s - 326.83s |  one single quote and two single quotes is the most type of entry points but you have additional
326.83s - 333.19s |  entry points and comments and you starting to get a sense of some error-based attack when you
333.19s - 341.95s |  get from the one single quote uh five hundred internal server error and and for the double
341.95s - 347.27s |  single quotes uh two hundred okay. What it means that the SQL query behind it in the backend
347.27s - 355.35s |  cannot uh uh process the uh the query correctly because it's not expected to receive five
355.35s - 361.15s |  hundred internal server error and if you close it in single quotes it suddenly is okay. So there
361.15s - 367.03s |  are some probably manipulation that you can do on on the SQL. So we'll try to do some
367.03s - 373.39s |  manipulation. We can send a curl command that uh looks a bit messy but it's very simple. It's
373.39s - 378.95s |  uh trying to convert the version uh function that you send to the database to retrieve its
378.95s - 385.35s |  version. You try to convert it to an integer and compare it to one just the so the well
385.35s - 390.43s |  closed will operate correctly. Uh it will look something like this when it flows to the
390.43s - 400.43s |  query and you get the error uh conversion conversion failed. You get the MySQL that the
400.43s - 406.07s |  server uses MySQL with a specific version and by this by this will retrieve a sensitive
406.07s - 411.35s |  information. Uh I want to state here that uh something important. I stick to this example
411.35s - 416.09s |  of uh of retrieving the version of the database in many additional slides that you will see
416.09s - 420.73s |  later. I like this example because it's not too basic and not too advanced. It's something in
420.73s - 425.73s |  the middle so it's easy to show it but in this techniques you can do something even more
425.73s - 431.21s |  advanced to retrieve hash passwords and so on. So but we'll stick to the version because it's
431.21s - 438.41s |  truly a real world example on one hand but on the other hand it's not too complex. So now we'll
438.41s - 443.41s |  move to the union based as we showed before and this uh presenting uh expected regular uh
446.15s - 452.15s |  curl command to a server that I build. We send query equals to Alice and we'll retrieve some
452.15s - 458.33s |  expected information. But when we try to manipulate with a union uh attack we will edit a
458.33s - 463.33s |  union select the first oh the user that is currently connected to the database uh through the
464.33s - 469.33s |  web application uh we of course need to encode it and send it to the server and that's what we
472.97s - 479.97s |  get. We get the Alice the query equals to Alice as we see so before and we get the current user
479.97s - 485.17s |  that's connected to the database for the web application and this is information that not
485.17s - 490.19s |  supposed to be retrieved especially so easy so this is how union based attack looks like.
491.19s - 498.19s |  After that we have many resources uh dividing into these categories uh one of them is out of
498.19s - 503.19s |  band I won't uh elaborate about it too much because it's something not so popular but to say it uh to
506.57s - 511.81s |  explain it in one or two sentences out of band attacks are the kind of attacks that you cannot
511.81s - 516.91s |  communicate with the web application the server directly and you need to utilize some external
516.93s - 523.33s |  server to exfiltrate data through the database and you use uh some HTTP request and DNS
523.33s - 530.11s |  queries to exfiltrate this data but it's something much uh not so common so we won't elaborate
530.11s - 535.11s |  about it too much. Uh the third kind uh inferential or blind uh type of SQL injection is in
537.25s - 543.69s |  general a bit of the opposite of the in band of course it's type of attacks that you cannot um uh
543.71s - 548.91s |  see your payload or the results of your payload directly in the webpage and you need to infill the
548.91s - 555.15s |  results of your payload uh from the behavior of the web application. It is divided to two
555.15s - 560.15s |  categories one of them is boolean based uh I will explain that by example uh but generally
563.49s - 569.53s |  speaking it's evaluates your payload to true or false uh in some way of behavior of the web
569.57s - 576.31s |  application and like that you can infill the results uh to see example of it uh I will show you by
576.31s - 581.31s |  demonstrating on B-Web it's a buggy web application it's a cool application to practice on you can
583.55s - 588.55s |  see here a payload of substring uh to the version of the database uh in short what it means it's uh
590.89s - 595.89s |  takes the version, checks the fields character and compare it's uh to six in this case and comments
596.29s - 601.29s |  all the rest. We flow it to the search field and we see that the movie does not exist. But when we
607.47s - 613.53s |  change the six to a five and we'll flow it again to the search box we get that the movie does
613.53s - 618.71s |  exist. So we can infill by that that when you're comparing to fives the first character of the
618.71s - 624.59s |  version of the database is starting with a five. And this kind of uh in this kind of blind SQL
624.59s - 629.59s |  injections uh you need uh enumerate uh enumerate uh each character and uh until you get the whole
632.67s - 640.64s |  picture uh but that's how it looks like. And the last type of uh influential blind that we'll focus
642.98s - 648.98s |  a bit more today called time based. Time based is in a way it's similar to Boolean based but it relies
648.98s - 653.98s |  on a time delays that you get from the server and that's how you can infill your uh SQL payload uh
654.48s - 659.48s |  by sending a time delay of for example uh ten seconds the database is delayed with this it's
662.72s - 668.52s |  response for ten seconds and that's how you can infill if your payload was evaluated to true or
668.52s - 676.12s |  false. Uh and that's how a time blind SQL injection will look like. Uh to my web server I added uh a
679.70s - 685.00s |  parameter of elapsed time to see how much it takes to the server to respond. So in particular
685.02s - 690.02s |  query uh where it equals to Alice the elapsed time was immediate but when we try to run a time based
692.70s - 697.70s |  payload uh uh for example that will look like this with uh closing single quote uh so the SQL uh
700.30s - 705.84s |  payload will operate uh normally and a sleep command that causes the the server to delay for five
705.84s - 710.84s |  seconds we encode it and we will uh construct in the URL sending it back and we can suddenly see that
715.02s - 720.32s |  with the sleep command of five seconds the elapsed time was five seconds. So in general what it
720.32s - 725.32s |  means that the time delay was successfully executed. Uh before we continue about time delays I want to
727.00s - 732.00s |  elaborate a bit about tools to be connected. Uh there are many tools to uh uncover SQL injection
734.50s - 739.50s |  one of them is a bit less popular uh called Havij. I decided to include it because when I research
740.14s - 745.14s |  about Tim Goschel uh some resources stated they use this tool and I never met it before and it's a
749.32s - 754.32s |  tool that was used back then uh few years ago but it's still uh people can use it today but it's much
755.66s - 760.66s |  less popular or good tool. Uh we have uh many dust tools like uh uh personally here is uh a
761.66s - 766.66s |  belt suit by Paul Swigel that can scan your site uh it's a dust tool and find SQL injection as we
773.04s - 779.18s |  see here in the picture that I scanned my uh web server. But the most uh common tool for SQL
779.18s - 784.18s |  injection and uncovering them is called SQL map. Uh I'm so happy that I uh zoomed in on what's
784.88s - 789.88s |  relevant so SQL map will look something like this. Uh you'll run SQL command on the URL that you
793.88s - 798.86s |  want to scan. In this example we see batch command that what it means is uh non-interactive
798.86s - 803.86s |  command that uh won't interfere in the process of executing and please retrieve us the database
805.62s - 810.64s |  version. When we run it we can see that uh SQL map uncovers that we have a Boolean based uh time
811.10s - 816.10s |  based and union union attack seal and we see the stuff that we wanted to retrieve that the
819.34s - 824.34s |  database uses uh SQLite behind the curtain. Uh to show you of course SQL map can do a bit more
826.78s - 831.78s |  advanced stuff like in this example uh we can execute SQL map with uh time delay of five
832.44s - 837.44s |  seconds. I'll run it with a batch command as before and leave please uh return us the banner of
843.48s - 848.48s |  the database and we can see that it successfully works. We can retrieve the banner of uh the
850.92s - 857.83s |  two equals to eight point three point zero. And before I continue to the next slides I want to
857.91s - 863.95s |  emphasize something important that uh for my personal opinion we cannot realize on uh many
863.95s - 870.09s |  automation tools. Uh we always need to have the ability to write our own scripts to some
870.09s - 875.79s |  particular cases we don't need to be afraid and like in a perfect world we need to master a
875.79s - 882.07s |  combination of the two. We can master the automating tools and writing our own scripts. And a
882.07s - 888.35s |  script of uh executing time delay can look something uh simple as as this. We can have a
888.35s - 894.33s |  script with of course some constants and uh some expected parameters but in general it will be
894.33s - 900.13s |  divided to three functions. One function that will check the delay of the HTTP response and
900.13s - 905.97s |  will record it. The second function will extract the version character it uh takes the position
905.97s - 911.91s |  that we are checking in our payload uh it compares it to the character, character uh
911.91s - 917.21s |  enumerates for all the ASCII's. It compares to the position in the version that we want to
917.21s - 922.23s |  retrieve. If it got the sleep time then it means that we successfully executed it or if not uh it
924.55s - 929.57s |  didn't work. And the first function it's uh uh continues to enumerate all the next indexes in
930.43s - 937.61s |  the version number and recalls the version that we are retrieving of the database. And
937.61s - 944.62s |  eventually it will look something like this when we're running it. Extracting the database
944.62s - 952.62s |  version. So it's very simple, simple as that uh as we can see. Uh to move to a bit uh more real
957.06s - 964.06s |  world examples I want to show you uh few stuff. One of them a real world example uh of a
964.06s - 970.62s |  guy called Mola here is uh YouTube and uh his uh site. I really like to learn about uh real
970.62s - 976.02s |  world examples because it uh really demonstrates what's what's we need, what's truly
976.02s - 983.16s |  important. And here he claims that he earned a bounty of five thousand dollars uh finding the
983.16s - 990.04s |  next payload that you will see to in a first billing uh site. He uh what he claims that he did
990.06s - 996.80s |  to execute this bounty he ran a sleep command that we saw before uh concatenated to some uh
996.80s - 1003.14s |  parameter that the site had uh per page equals to one and executed time delay. He got truly uh
1003.14s - 1009.44s |  five seconds delay. Then he executed this payload. This this payload is exactly as the substring
1009.44s - 1015.42s |  we saw before. The mid is equals to the substring but uh particular to my SQL version. And it
1015.44s - 1020.54s |  checks the version fills character uh if it equals to five go to sleep for fifteen seconds. If
1020.54s - 1027.58s |  not return zero. And in this case he doesn't he didn't get uh any delay. But when he uh changed
1027.58s - 1033.42s |  the five to eight he could successfully gain uh fifteen seconds delay and by that he gained the
1033.42s - 1042.04s |  bounty. Just to show you a bit more real world examples uh one of them uh looks something like
1042.08s - 1048.52s |  this. It's some bounty that uses XOR interesting uh payload that always evaluates to true. And
1048.52s - 1055.16s |  some bounty that was discovered in department of uh defense uh in HackerOne system. The second
1055.16s - 1062.14s |  one was uh pretty simple uh concatenation to uh expected parameters of uh sleep seven seconds
1062.14s - 1067.14s |  also disclosed to HackerOne um and found in the automatic uh website. And the third one my
1067.82s - 1072.82s |  favorite uh combines uh script, union, and sleep commands. Uh some build uh combination of
1078.12s - 1086.41s |  both of all of them. Uh ah and the third bounty gained uh what I found from uh resources when I
1089.35s - 1094.35s |  checked it uh got bounty of two thousand and one hundred dollars. So uh all of the stuff that we
1094.71s - 1099.71s |  seen was utilized by uh Tim Goshell in the past uh they used a lot of SQL injection
1104.55s - 1110.29s |  especially time delays. Something even uh what they did uh they was they were operating uh in
1110.29s - 1116.67s |  two thousand and twelve. And they utilized even simpler uh SQL commands that we SQL injection
1116.67s - 1123.27s |  commands than than what we saw before. And as I said they were operating in two thousand and
1123.29s - 1128.33s |  twelve. They are not related to APT39 or some Iranian government. They actually were a
1128.33s - 1133.33s |  hacktivist group. Um I'm just curious how many people of you uh know what hacktivism is? Please
1136.27s - 1141.27s |  raise your hands. Okay okay not bad. Approximately half. So hacktivism is uh when you attacking
1144.31s - 1150.59s |  group that uh trying to promote some uh political change or some social agenda that you believe
1150.67s - 1156.95s |  in and you promote it by hacking. And that's what Tim Goshell were. They were a hacktivist
1156.95s - 1163.65s |  collective. And just to see what they did and who they were uh they started to operate in two
1163.65s - 1168.63s |  thousand and twelve. They hacked the University of Arkansas uh because some one of the guys
1168.63s - 1175.33s |  there uh called Zoom was arrested. So they hacked it in terms of protest. Uh after the dead
1175.35s - 1182.85s |  Melox uh uh was will appealed was appealed. Uh dead Melox was the admin of the group. He
1182.85s - 1188.15s |  appealed in their uh main communication channel uh in Facebin stating that he doesn't in
1188.15s - 1192.63s |  ironic way that he doesn't want to fight with FBI or CIA or something like this. But on the
1192.63s - 1197.63s |  other hand we we leak bunch of stuff uh in the uh coming year. So as he promised he started uh
1198.61s - 1203.61s |  they started to uh make additional hacking projects. Uh they uh had the project Dragonfly
1208.41s - 1215.15s |  where they hacked uh China government and leaked uh thousands of uh sensitive information.
1215.15s - 1221.13s |  Uh it included like hash passwords, some personal data and like everything they got. Later
1221.13s - 1226.27s |  Hellfire in project Hellfire they hacked uh governments, financial sectors and uh other
1226.27s - 1231.35s |  companies. In project West Wing they focused on universities around the globe from
1231.35s - 1236.35s |  Harvard, Stanford to University of Rome in Tokyo. And they even declared a war uh in project
1238.55s - 1243.55s |  Black Star against Russia. Uh in in all of these projects they hacked like uh they uh leaked
1248.43s - 1253.43s |  uh thousands to millions of uh records from uh personal information to hash passwords as I
1253.73s - 1258.73s |  said before but many of this information was publicly already disclosed. Still on this other
1261.83s - 1267.33s |  hand it was uh sensitive information that truly was uh released but what they achieved from
1267.33s - 1272.35s |  it it uh they achieved their main cause to raise uh awareness to their hacktivism and to their
1274.05s - 1279.89s |  operations. So later they in project White Fox they basically hacked everyone to raise
1279.91s - 1284.91s |  awareness to hacktivism and they uh introduced their uh new cool logo. Later came Sunrise
1289.25s - 1294.25s |  hacked South Africa. Uh 2015 introduced a new term of dark hacktivism that raising the normal
1295.75s - 1300.75s |  hacktivism into cyber warfare levels in a much more scale. And in 2016 this story came to an end
1302.39s - 1308.23s |  when the dead Melox the leader came clean. He came clean to some uh newspaper uh send them an
1308.25s - 1313.81s |  email that hi it's me I'm uh Eugene the man who behind the dead Melox the leader of Tim
1313.81s - 1320.39s |  Goshell he sent his passport and even a picture. They still didn't believe them him so he posted
1320.39s - 1325.19s |  on his Twitter account to the uh next web the journal that he came clean to that hello it's
1325.19s - 1331.92s |  truly me. So why why they did what they did uh as typical for hacktivism for example Westwind
1332.76s - 1337.76s |  the hack to uh raise awareness oops raise awareness to the foreign standards of the education
1342.70s - 1347.70s |  today. In Black Star they uh uh claimed that the Russian is a government of tyranny and uh and
1350.34s - 1355.34s |  regret they uh criticized their government. In White Fox uh essentially they wanted to promote
1355.68s - 1360.68s |  hacktivism worldwide and draw attention to the freedom of uh information and they had many
1364.88s - 1369.88s |  other causes like even on Japan they wanted to piss them off just just as it is. So why the hell
1372.38s - 1377.86s |  the I want you all of you to know this today. I know that you are thinking SQL injection is old
1377.86s - 1384.86s |  and Tim Goshell was operated in 2012 but I will show you that what is old is still worth gold. Uh
1384.88s - 1390.22s |  we can see some statistics you know as top 10 uh SQL injection is part of the injection section
1390.22s - 1399.10s |  it's still on the top uh in many years it was the first one and now it's like the third one. Ah
1399.10s - 1404.10s |  whoops I didn't like confuse me for a second. Yes? There was? Okay. NVD is ranking uh SQL
1406.54s - 1411.54s |  injection uh ranking it uh in the second place for many many years. Uh it considered one of the
1412.16s - 1417.16s |  most stubborn weaknesses ranked in the third place uh by Mitre and um GitHub security
1422.30s - 1427.34s |  advisor also stating that and it's truly stated that SQL injection is not relevant to model
1427.34s - 1432.92s |  languages like Vue, React, Python and stuff like this but for my opinion what important to know
1432.92s - 1438.42s |  here that the concepts or uh the mindset that you set for yourself when you are learning about
1438.44s - 1444.84s |  these attacks can be implemented to many other fields because they are all related uh you can use
1444.84s - 1451.12s |  similar techniques to other attacks. And if I still didn't convince you, you can earn bug
1451.12s - 1457.22s |  bounties easily using those kinds of techniques like this one uh was disclosed critical
1457.22s - 1464.05s |  vulnerability to Department of Defense and so we are coming to an end and I want to leave you
1464.05s - 1469.11s |  with some homework. I don't want to state here uh 10 resources but I want to state one and good
1469.15s - 1475.09s |  one that uh I use, I don't get money by Boltzweigle by the way, I truly recommend them because
1475.09s - 1480.09s |  it's free resource uh theoretical and practical combined, very recommended and it dives deep. So
1482.67s - 1489.67s |  to recap, it's hard to make a 25 minute lecture because I want to talk about many stuff and I only
1489.67s - 1495.71s |  have 25 minutes so I tried my best and if you gain even one small little thing today I will be
1495.71s - 1500.75s |  genuinely happy and that's it if you want to connect with me like LinkedIn and Twitter and that's it.