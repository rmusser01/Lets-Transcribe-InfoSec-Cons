{
  "webpage_url": "local:1731742599:63f39c60:DEF CON 32 - Aerospace Village - Offensive Security Testing - Safeguarding the Final Frontier - Andrzej Olchawa.mp4",
  "title": "DEF CON 32 - Aerospace Village - Offensive Security Testing - Safeguarding the Final Frontier - Andrzej Olchawa.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 1.60s | This text was transcribed using whisper model: large-v2

 Hi, everyone.
1.60s - 2.76s |  My name is Andy.
2.76s - 5.00s |  I'm going to present you with some offensive security
5.00s - 7.96s |  testing.
7.96s - 10.00s |  In this presentation, I will briefly
10.00s - 12.76s |  introduce you to the ground segment
12.76s - 16.16s |  and the software that we use on it.
16.16s - 18.16s |  I will focus on one particular software, which
18.16s - 20.72s |  is the mission control system.
20.72s - 25.08s |  And I will show you some vulnerabilities
25.08s - 28.20s |  which we have found on those software applications
28.20s - 30.80s |  and then give you a couple of demos on how
30.80s - 33.92s |  we managed to exploit them.
33.92s - 38.32s |  So ground segment consists of many interconnected components
38.32s - 38.88s |  or elements.
38.88s - 44.56s |  You can see on this orange part where
44.56s - 50.16s |  exactly it lies in the space mission.
50.16s - 51.96s |  It consists of different elements.
51.96s - 55.04s |  All those elements perform different functions,
55.04s - 57.24s |  but they all depend on each other,
57.24s - 59.80s |  either by receiving input from or sending outputs
59.80s - 62.04s |  to other components.
62.04s - 63.52s |  However, most of those components,
63.52s - 65.48s |  they don't require any user interaction.
65.48s - 67.56s |  And this is what brings us to the mission control
67.56s - 72.72s |  system, which is the main interface.
72.72s - 75.72s |  It is the main interface between the ground station
75.72s - 78.36s |  and other components.
78.36s - 81.16s |  It also serves as primary interface
81.16s - 84.80s |  between the spacecraft controllers
84.80s - 89.00s |  and the spacecraft itself, which I would argue
89.00s - 92.48s |  is it makes it the most vulnerable system
92.48s - 94.84s |  in the whole ground segment.
94.84s - 97.72s |  As you know, the weakest link of every information system
97.72s - 100.28s |  is humans.
100.28s - 103.12s |  So for decades, the space missions
103.12s - 107.52s |  were operated from dedicated mission control rooms,
107.52s - 114.08s |  accessible only by the spacecraft controllers.
114.08s - 119.20s |  And this, however, has changed recently, mainly due to COVID.
119.20s - 122.12s |  And the organization started opening up and letting
122.12s - 124.56s |  their users or their spacecraft operators
124.56s - 128.08s |  to conduct operations remotely.
128.08s - 130.60s |  So this, of course, creates a new attack surface
130.60s - 132.48s |  for the mission control system, which
132.48s - 135.24s |  is usually very outdated software
135.24s - 139.48s |  and vulnerable to typical vulnerabilities
139.48s - 141.64s |  which we have on any other software
141.64s - 144.20s |  that we use on a daily basis.
144.20s - 147.24s |  So what is being done about it?
147.24s - 149.56s |  From the space community perspective,
149.56s - 155.88s |  obviously, we expand strategies to include security aspects.
155.88s - 158.24s |  We impose security policies.
158.24s - 160.44s |  And then we also introduce security requirements
160.44s - 163.24s |  to our systems.
163.24s - 166.60s |  However, I don't think it's going to be enough at this point.
166.60s - 170.08s |  And as we'll see later, there is one very specific element
170.08s - 174.20s |  that is missing into the actions, which is
174.20s - 176.80s |  the offensive security testing.
176.80s - 183.64s |  So every organization has their own mission control system.
183.64s - 188.52s |  They try to develop their own software because, as they say,
188.52s - 189.80s |  the space is hard, right?
189.80s - 192.88s |  So they have to do it themselves.
192.88s - 196.04s |  So some of that software is open source.
196.04s - 198.52s |  So what we have done, we decided to have a look at it
198.52s - 204.08s |  and see how they perform from the vulnerability standpoint.
204.08s - 206.48s |  And here is what we have found out.
206.48s - 208.64s |  For full disclosure, all those vulnerabilities
208.64s - 213.08s |  have been already disclosed using the contacting
213.08s - 216.36s |  the vendor, and they have been already addressed.
216.36s - 221.88s |  And all of them have CVE assigned.
221.88s - 224.24s |  So on NASA OpenMCT, we have found
224.24s - 227.28s |  a couple of vulnerabilities, such as prototype pollution,
227.32s - 231.00s |  XSS, and CSRF.
231.00s - 234.00s |  On the IMCS, which is another mission control system,
234.00s - 237.00s |  it is one of the more established ones,
237.00s - 239.40s |  we have found a few more vulnerabilities,
239.40s - 242.44s |  such as directory traversal, arbitrary file deletion,
242.44s - 247.60s |  session hijacking, and a few XSS vulnerabilities.
247.60s - 250.80s |  And then on NASA AIT Core, we have found,
250.80s - 252.44s |  and NASA AIT Core is like a framework
252.44s - 255.84s |  to develop ground segment software
255.84s - 257.12s |  by different missions.
257.12s - 261.24s |  We have found SQL injection, a few local code executions,
261.24s - 265.48s |  and also realized that the encryption in the communication
265.48s - 267.96s |  is completely missing.
267.96s - 270.80s |  So as you've seen before, most of those vulnerabilities
270.80s - 275.08s |  did not have that much of an impact on the mission.
275.08s - 277.36s |  However, this is where the training of vulnerabilities
277.36s - 279.04s |  come in play.
279.04s - 281.24s |  And in case of the IMCS, we decided
281.24s - 284.28s |  to combine a directory traversal, session hijacking,
284.28s - 286.00s |  and XSS.
286.00s - 289.32s |  And that led us to quite severe sensitive information
289.32s - 294.36s |  disclosure, because now when the XSS is triggered,
294.36s - 296.08s |  the attackers can actually retrieve
296.08s - 301.08s |  any arbitrary file that is stored on the IMCS server.
301.08s - 305.76s |  So let's have a look at a typical scenario.
305.76s - 309.20s |  So this is at a very high level overview of a space mission.
309.20s - 310.48s |  You have a space segment.
310.48s - 313.96s |  From right to left, you have a space segment.
313.96s - 315.04s |  There is a ground station.
315.04s - 317.68s |  There is the IMCS, which is the mission control system
317.68s - 322.68s |  and subject that is used by Bob to send telemetry,
322.68s - 326.44s |  send telecommands, and receive telemetry from spacecraft.
326.44s - 328.80s |  We also have Alice that is working with Bob.
328.80s - 331.88s |  And the whole organization has a publicly-facing website.
331.88s - 336.64s |  Now, we also have an attacker that has a C2 server.
336.64s - 340.04s |  Now, as it usually goes, there is a recon and phishing
340.04s - 341.40s |  campaign.
341.40s - 345.48s |  The adversaries learn about Alice from the public website.
345.48s - 351.01s |  They decide to target her with a phishing campaign.
351.01s - 353.41s |  Alice takes the bait.
353.41s - 355.17s |  Unfortunately, she either clicks on a link
355.17s - 357.01s |  or opens a Word document.
357.01s - 360.57s |  And that deploys the C2 beacon on her workstation,
360.57s - 367.09s |  this way making her workstation compromised.
367.09s - 369.37s |  The attackers now have access to her workstation.
369.37s - 373.05s |  They learn about Bob from her emails.
373.05s - 375.45s |  And they decided to target Bob with an internal phishing
375.45s - 376.49s |  campaign.
376.49s - 379.85s |  They sent him an email with some payload
379.85s - 382.45s |  that would trigger the XSS.
382.45s - 385.37s |  And they do it as Alice.
385.37s - 387.17s |  So Bob trusts Alice.
387.17s - 390.93s |  He executes the payload that triggers the XSS.
390.93s - 395.13s |  That XSS then, because there is a session hijacking
395.13s - 400.89s |  vulnerability and the traversal director vulnerability
400.89s - 404.17s |  that triggers the, this lets the attackers
404.17s - 411.89s |  to retrieve any arbitrary file on the ICS server.
411.89s - 414.33s |  Now, if Bob has access to the internet,
414.33s - 416.49s |  the files can be directly retrieved and sent
416.49s - 418.29s |  to attacker workstation.
418.29s - 423.45s |  Otherwise, if Bob is behind the firewall or is using VPN,
423.45s - 427.01s |  we can use Alice's workstation as a proxy
427.01s - 431.71s |  and then retrieve the files using the C2 beacon.
431.71s - 434.03s |  So I have prepared a short demo of how that
434.03s - 439.14s |  would look like in practice.
439.14s - 443.90s |  So what you will see here, this is the exploit we developed.
443.90s - 449.86s |  It generates a payload that will end up being sent to the Bob.
449.86s - 452.06s |  And Bob will actually use that payload.
452.06s - 456.06s |  And because he thought that it was received from Alice,
456.06s - 457.26s |  load it on the MCS.
457.26s - 463.67s |  And then that would trigger our exploit chain.
463.67s - 466.35s |  So first, this exploit generates the payload,
466.35s - 472.07s |  which is called xvjs and also starts the HTTP server.
472.07s - 478.31s |  Bob is going to load that file on the MCS server.
478.31s - 480.75s |  Imagine that is one of the telemetry displays
480.75s - 487.57s |  that Alice decided to share with him.
487.57s - 492.65s |  So he knows the file and he decides to open it.
492.65s - 494.57s |  And that's all he sees.
494.57s - 499.73s |  Now, under the hoods, there was an XSS trigger
499.73s - 501.85s |  that would retrieve the file and then send it back
501.85s - 503.57s |  because of the directed traversal
503.57s - 507.09s |  and send back the content to the HTTP server
507.09s - 513.70s |  that was started by the attacker.
513.70s - 516.90s |  So here, like in any example for proof of concept,
516.90s - 523.30s |  you can see we got the access to XC password file content.
523.30s - 526.02s |  So combining those vulnerabilities
526.02s - 526.98s |  is actually quite easy.
526.98s - 547.69s |  So the whole exploit is easy.
547.69s - 550.49s |  So next up is the vulnerability chain,
550.49s - 554.37s |  the exploit chain for NASA IIT Core.
554.37s - 556.61s |  Combining one of the local execution,
556.61s - 558.61s |  a code execution and missing encryption,
558.61s - 561.93s |  we managed to conduct a man-in-the-middle attack
561.93s - 568.85s |  and inject our own payload into the communication string,
568.85s - 571.93s |  which then is triggered on the telemetry client
571.93s - 576.13s |  and then is executed, giving us the reverse shell.
576.17s - 579.57s |  So I'll quickly start another demo
579.57s - 587.22s |  and explain what you see like this.
587.22s - 590.00s |  Okay.
590.00s - 592.80s |  Okay, so basically what you see here on the left side,
592.80s - 597.64s |  you have on the top left side, you have telemetry client.
597.64s - 603.16s |  On the left bottom side, you have telemetry simulator.
603.16s - 606.84s |  That is both are provided by the IIT Core.
606.84s - 608.96s |  On the right side, you have our exploit on the top
608.96s - 611.84s |  and then on the bottom side, on the right bottom,
611.84s - 615.56s |  you have the NASCAS list that is going to grab the,
615.56s - 618.80s |  or is going to receive the reverse shell.
618.80s - 626.97s |  So we start the telemetry client first on the left side.
626.97s - 629.09s |  Now, this is what would normally be happening
629.09s - 636.04s |  on the mission control or on the ground station.
636.04s - 638.84s |  Then we start telemetry simulator,
638.84s - 642.99s |  which will generate some telemetry packets
642.99s - 645.63s |  as if they were coming down from spacecraft.
645.63s - 648.59s |  We start our NASCAS listener,
648.59s - 650.87s |  and you can see on the left-hand side,
650.87s - 652.87s |  we already have started receiving some telemetry
652.87s - 664.86s |  from the simulator.
664.86s - 666.98s |  Then we run our exploit
666.98s - 669.38s |  that is conducting the man-in-the-middle attack.
669.38s - 672.50s |  And then the first frame, so we have injected our frame,
672.50s - 673.98s |  and the first frame, so the first frame
673.98s - 677.34s |  that is sent from telemetry simulator to the ground station
677.34s - 680.62s |  is caught by the man-in-the-middle attack.
680.62s - 682.22s |  There we injected our payload,
682.22s - 685.46s |  which you can see down here as well.
685.46s - 687.98s |  And that was actually executed, and it was triggered,
687.98s - 692.02s |  and it gave us the reverse shell
692.02s - 697.52s |  to the telemetry client running on the mission control.
697.52s - 721.50s |  So that's another proof of concept.
721.50s - 729.78s |  Sorry about that.
729.78s - 733.58s |  So just for reference, this is speed
733.58s - 737.18s |  between static and dynamic analysis,
737.18s - 740.54s |  which we have done on those systems.
740.54s - 742.42s |  It is still important to conduct static analysis
743.22s - 744.66s |  because, as you can see, the low-hanging fruits
744.66s - 747.58s |  and many other vulnerabilities are found using those,
747.58s - 751.86s |  but static analysis will not catch everything,
751.86s - 755.06s |  so you have to conduct the dynamic analysis,
755.06s - 758.26s |  and then you have to try to conduct the exploitation phase.
760.54s - 761.66s |  In case of SCOS2000,
761.66s - 763.74s |  SCOS2000 is one of the main mission control systems
763.74s - 766.78s |  developed by European Space Agency.
766.78s - 769.74s |  We haven't done any extensive analysis on the system,
769.74s - 771.38s |  any vulnerability research.
771.38s - 773.22s |  We only run the flow finder on it,
773.22s - 778.10s |  and using the static code analysis, you can see.
778.10s - 780.18s |  I'm pretty sure that at least one of those
780.18s - 783.50s |  almost 2,500 buffer overflow vulnerabilities
783.50s - 787.86s |  would be exploitable.
787.86s - 791.62s |  So in conclusion, the point I'm trying to make
791.62s - 793.14s |  is that the space applications
793.14s - 795.18s |  are still not properly being tested
795.18s - 798.90s |  from the offensive security standpoint.
798.90s - 802.30s |  The best way is to hire a service to do it properly,
802.30s - 805.74s |  or you can also try to do it yourself,
805.74s - 806.66s |  but you have to do it,
806.66s - 809.10s |  and you have to include it in your frameworks,
809.10s - 813.42s |  and you should do it before the adversaries do it for you.
815.14s - 816.14s |  So as I mentioned before,
816.14s - 818.42s |  all that research was already published,
818.42s - 820.74s |  so here you can find...
820.74s - 823.30s |  I guess the slides will be provided afterwards,
823.30s - 826.42s |  so we can have a look at the publications.
826.42s - 828.34s |  Otherwise, if you want the links today,
828.34s - 830.26s |  you can hit me up after the talk,
830.26s - 831.46s |  and I'll give it to you.
833.10s - 834.34s |  And that was it.
834.34s - 835.34s |  Thank you very much.