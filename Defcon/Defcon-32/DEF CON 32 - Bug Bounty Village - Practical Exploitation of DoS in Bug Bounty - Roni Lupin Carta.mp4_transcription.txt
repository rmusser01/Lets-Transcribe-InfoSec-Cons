{
  "webpage_url": "local:1731783575:7f8e6eed:DEF CON 32 - Bug Bounty Village - Practical Exploitation of DoS in Bug Bounty - Roni Lupin Carta.mp4",
  "title": "DEF CON 32 - Bug Bounty Village - Practical Exploitation of DoS in Bug Bounty - Roni Lupin Carta.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 3.80s | This text was transcribed using whisper model: large-v2

 So, I'm happy to introduce Ronnie Carta
3.80s - 5.56s |  and talk about practical exploitation
5.56s - 8.74s |  in denial of service and bug bounties.
8.74s - 14.11s |  Ronnie, thanks.
14.11s - 17.23s |  Hi everyone, I'm really happy to be there today.
17.23s - 20.51s |  This is the first ever Bug Bounty Village
20.51s - 23.67s |  and it's a true honor to do the first talk ever.
23.67s - 25.39s |  Well, with some technical difficulties
25.39s - 27.93s |  of not having an HDMI cable, but no worries.
27.93s - 28.83s |  We are there now.
30.25s - 32.11s |  So, the talk is about practical exploitation
32.11s - 34.65s |  of denial of service in bug bounty program.
34.65s - 36.41s |  So, first of all, my name is Ronnie.
36.41s - 37.77s |  I go by the nickname Lupin.
37.77s - 39.61s |  I'm the co-founder of Lupin Homes.
39.61s - 42.53s |  We are a security research and development company
42.53s - 46.05s |  and I'm coming from the best city in the world, Grenoble.
46.05s - 48.91s |  It's in the French Alps, lot of skiing, beautiful place.
50.49s - 52.57s |  I love denial of service.
52.57s - 55.05s |  I love denial of service because you can actually
55.05s - 57.89s |  try to slow down or considerably take down
57.89s - 59.93s |  an entire product environment.
59.93s - 62.91s |  And so, the goal of denial of service in bug bounties
62.91s - 66.99s |  is to basically try to find the most business impact.
66.99s - 69.47s |  Imagine like a website not having traffic anymore.
69.47s - 72.07s |  That will be a huge bummer for the company.
73.27s - 77.79s |  And so, denial of service and the difference
77.79s - 79.31s |  between denial of service and DDoS
79.31s - 82.75s |  is basically denial of service is from one single machine.
82.75s - 86.83s |  But DDoS, the additional D is for distributed, of course.
86.83s - 89.23s |  So, it means that we require a series of different machines
89.23s - 91.45s |  to be able to take down our target.
91.45s - 93.97s |  This is basically all about the resource
93.97s - 95.33s |  that you have on your machine
95.33s - 98.97s |  against the resources that you have on your target.
98.97s - 102.53s |  So, if the attacker has more resources on its machine,
102.53s - 106.33s |  then it can basically take down the target.
106.33s - 109.51s |  But in DDoS, you might have amplification
109.51s - 112.05s |  or multiplicating factor in order to be able
112.05s - 113.93s |  to completely take down the machine.
113.93s - 116.33s |  So, that's what we're going to talk about today.
117.31s - 119.75s |  A little bit of definition debates here.
121.11s - 122.59s |  Basically, there is a whole debate
122.59s - 124.83s |  about denial of service being an availability
124.83s - 126.85s |  or integrity impact.
126.85s - 130.35s |  So, basically, the impact of the DDoS
130.35s - 132.19s |  is not a vulnerability class,
132.19s - 134.43s |  but more like an impact, I will say.
134.43s - 137.31s |  And we can say that deleting a resource
137.31s - 140.87s |  is in a sense denied, but the CVSS documentation
140.87s - 142.75s |  says that the deletion of a resource
142.75s - 145.33s |  is integrity and not availability at all.
145.33s - 147.71s |  So, that whole blob of documentation,
147.71s - 150.47s |  if you want to read it, is what the CVSS says.
150.47s - 153.31s |  So, basically, it says that availability
153.31s - 156.31s |  is the performance and operation of the service itself
156.31s - 159.71s |  and not the availability of the data.
159.71s - 161.79s |  For those who have been doing bug bounty hunting,
161.79s - 165.51s |  you know that you are debating a lot about CVSS
165.51s - 167.15s |  and you need to read all the documentation.
167.15s - 169.59s |  So, be mindful of that if you want
169.59s - 171.75s |  to argue with CVSS programs.
172.73s - 176.49s |  So, when DDoS is relevant, basically,
176.49s - 179.05s |  it is relevant for every feature
179.05s - 181.81s |  where there is a strong dependency.
181.81s - 184.65s |  This means that it's a feature that a lot of users
184.65s - 187.29s |  are going to use, or maybe there's a dependency
187.29s - 191.13s |  on the machines that you are targeting.
191.13s - 193.69s |  For instance, if you can take an entire ETS cluster
193.69s - 196.65s |  in production, well, that might be super impactful.
198.01s - 200.09s |  But yeah, I know what you are going to say.
200.11s - 202.27s |  The denial-of-service is totally out of scope.
202.27s - 205.27s |  Actually, on HackerOne default templates for program,
205.27s - 208.47s |  it's marked as out of scope by default.
208.47s - 209.91s |  And there's a reason for that,
209.91s - 213.51s |  because companies, in usual, do not like denial-of-service.
213.51s - 216.07s |  Not because of the low impact,
216.07s - 217.79s |  because it's not security availability,
217.79s - 221.43s |  but because, actually, if you let all your bug hunters
221.43s - 223.23s |  completely take down your website,
223.23s - 226.25s |  it might be a huge problem for them.
227.19s - 230.43s |  Basically, it's not because denial-of-service
230.43s - 232.03s |  has low impact, but because sometimes
232.03s - 233.87s |  it has too much impact.
233.87s - 236.63s |  But we can test denial-of-service responsibly
236.63s - 239.69s |  and actually make a few bucks with it.
241.35s - 243.59s |  In order to test denial-of-service responsibly,
243.59s - 246.47s |  you need to find the gadget of the program
246.47s - 247.67s |  to fully exploit it.
248.51s - 250.55s |  This means that, for instance, if you have a request
250.55s - 252.75s |  that takes more than 10 seconds,
252.75s - 255.53s |  this might be a cool gadget in order to take down
255.95s - 257.19s |  the entire product environment,
257.19s - 259.31s |  but you do not need to actually take it down
259.31s - 262.27s |  to just see that one request takes more than 10 seconds.
262.27s - 264.51s |  And also, if you are allowed,
264.51s - 266.51s |  you can still try to take down
266.51s - 267.87s |  the non-production environment,
267.87s - 270.95s |  so staging, integration, sandbox, et cetera.
270.95s - 274.75s |  But if there is something to know about this entire talk,
274.75s - 277.19s |  please, always ask the programs
277.19s - 279.75s |  before even searching for denial-of-services,
279.75s - 281.43s |  because programs need to be aware
281.43s - 284.23s |  of what kind of tests you are going to do
284.25s - 285.69s |  in order for them to monitor.
285.69s - 288.33s |  And if everything is going to fire,
288.33s - 290.69s |  they need to identify that you are the one doing the test
290.69s - 291.73s |  and just call you and say,
291.73s - 294.07s |  hey, I think there is a problem here.
296.01s - 299.17s |  And denial-of-service is all about program's maturity.
300.33s - 304.73s |  Some companies do not care about denial-of-service's risk
304.73s - 306.09s |  because they, I don't know,
306.09s - 310.05s |  they don't have user traffic or stuff like that.
310.05s - 312.41s |  But actually, some programs will allow you
312.43s - 315.53s |  to completely take down their prod environment.
315.53s - 318.39s |  And I'm serious, they are completely allowing
318.39s - 320.31s |  to take down their dub-dub-dub environment,
320.31s - 321.69s |  so this is amazing.
322.61s - 324.79s |  Before starting going on all the different techniques,
324.79s - 328.19s |  I need to thank Rezo, Zach, Ixo, Snorlax,
328.19s - 330.63s |  Bifed, BonsoirD, and DoomerHunter.
330.63s - 331.71s |  Those are amazing hunter.
331.71s - 334.27s |  We did all this research together
334.27s - 335.95s |  on the span of two years,
335.95s - 338.83s |  so I needed to quickly show that to them.
338.83s - 340.35s |  Amazing people to follow, too.
341.35s - 344.97s |  Okay, let's start with a quick vulnerability.
344.97s - 346.81s |  This one is really fun.
346.81s - 349.49s |  So one evening, we were hacking with Snorlax,
349.49s - 353.45s |  and there was this application that was sending service,
353.45s - 355.97s |  like it was service to send chat messages.
355.97s - 358.29s |  And so with Snorlax, when we are hunting together,
358.29s - 361.13s |  we have this game where the goal
361.13s - 364.45s |  is to basically try to XSS the other one.
364.45s - 367.13s |  So we were contacting one another, sending messages,
367.13s - 369.69s |  and we were like, the first that got XSS wins it.
370.61s - 372.33s |  But at some point, we were doing a test,
372.33s - 374.85s |  and my page completely goes blank.
374.85s - 377.09s |  And I was like, ah, maybe I lost internet.
377.09s - 379.13s |  But I was still hearing Snorlax on Discord,
379.13s - 381.33s |  and I was like, there's something weird, right?
381.33s - 386.07s |  Until he tells me, hey, Lupin, is your page blank, too?
387.45s - 391.29s |  So those are the payloads that we sent at this moment.
391.29s - 394.45s |  So try to think about which one did manage
394.45s - 397.25s |  to make the page entirely blank.
397.25s - 400.47s |  Do you have it?
400.47s - 401.99s |  Yeah, this is the one.
402.77s - 405.57s |  And so to understand why this payload
405.57s - 407.53s |  made the page completely blank,
407.53s - 408.53s |  basically, you need to understand
408.53s - 412.97s |  that the service was using a library called sanitize-html.
412.97s - 416.47s |  So basically, it's some kind of dump purify
416.47s - 419.61s |  that will try to sanitize every XSS
419.61s - 421.57s |  that you are going to send.
421.57s - 424.67s |  And this library actually tried to sanitize
424.67s - 427.49s |  every href attribute in your frontend.
427.49s - 430.53s |  So for instance, if you have a JavaScript schema,
430.55s - 433.17s |  it will try to remove it from the href.
434.15s - 436.75s |  However, in this payload, where is the href?
436.75s - 438.43s |  There is a problem here.
438.43s - 442.39s |  And so the library actually called the function no-t-href,
442.39s - 446.47s |  and take an argument href and do a dot replace on it.
446.47s - 448.43s |  However, when it's undefined,
448.43s - 450.95s |  it completely crashed the entire frontend.
450.95s - 453.63s |  Okay, that was a pretty cool one.
453.63s - 456.55s |  And so for every kind of client-side
456.55s - 457.83s |  that have service smartphone data,
457.83s - 460.11s |  I would say that the impact is not that huge.
460.61s - 464.33s |  It's all depending on the target.
464.33s - 466.49s |  Overall, with this specific technique
466.49s - 471.21s |  of malformed data html, we did $350 bounty,
471.21s - 472.53s |  but that's just the start.
473.77s - 476.25s |  If you want to actually search for more
477.45s - 480.13s |  malformed data in the frontend,
480.13s - 482.37s |  you can, there was a cool vulnerability
482.37s - 484.73s |  where we had like a POST request,
484.73s - 487.33s |  and we could send any invalid JSON
487.33s - 488.97s |  that was validated by the backend,
488.99s - 491.79s |  but it was a completely malformed JSON.
491.79s - 494.23s |  And so when the frontend was using it,
494.23s - 496.83s |  it will also completely crash.
496.83s - 500.15s |  And so the malformed JSON was like really simple.
500.15s - 505.07s |  It was using two back quotes at the same time,
505.07s - 506.19s |  two escape back quotes.
506.19s - 509.03s |  And so it was somehow accepted by the backend,
509.03s - 512.23s |  but when you were doing a JSON.parse on the frontend,
512.23s - 514.63s |  it will completely crash.
514.63s - 518.43s |  And so this technique actually worked on TikTok,
518.85s - 520.37s |  and we got paid with XO for that.
520.37s - 522.49s |  So that was a cool one,
522.49s - 525.49s |  but there were some cooler techniques now.
525.49s - 529.77s |  Okay, so that guy here is one of the biggest problem
529.77s - 531.17s |  for all developers.
532.29s - 534.33s |  The N plus one problem.
534.33s - 539.17s |  Basically, this technique, I actually knew about it
539.17s - 541.97s |  because my brother, who is a backend developer,
541.97s - 544.69s |  told me about, like we were talking about
544.69s - 547.25s |  in our services and how I was trying to exploit them.
547.27s - 549.59s |  And he was like, do you know what's an N plus one problem?
549.59s - 550.43s |  And I was like, no.
550.43s - 551.95s |  And he told me that basically,
551.95s - 555.51s |  an N plus one problem was database anti-pattern
555.51s - 559.95s |  when one query leads to N additional queries
559.95s - 562.95s |  causing inefficient data retrieval.
562.95s - 567.39s |  So basically, an attacker can exploit N plus one queries
567.39s - 569.95s |  to trigger numerous call to the database
569.95s - 572.67s |  and potentially overwhelm the system.
572.67s - 575.11s |  And the impact of an N plus one query
575.11s - 577.23s |  often scales with the data size.
577.23s - 578.77s |  So the more data that you have,
578.77s - 582.15s |  the more DOS capability you can have on your target.
583.45s - 585.81s |  So how to detect an N plus one query?
585.81s - 587.01s |  Basically, you find an endpoint
587.01s - 588.57s |  that creates data in the API.
589.49s - 592.41s |  You find a request that gets all the data at the same time,
592.41s - 594.05s |  so usually a get request.
594.05s - 596.69s |  And if there is pagination, try to increase the limit.
596.69s - 598.17s |  For instance, you have some get request
598.17s - 599.77s |  that is page equal 10.
599.77s - 602.83s |  Try to put 10,000 and see what's going to happen.
603.73s - 606.93s |  And if the more data you add in the backend,
606.93s - 609.57s |  the more time delay there is in the response,
609.57s - 611.27s |  then you have an N plus one error.
612.65s - 614.73s |  I also created a BURP extension
614.73s - 618.01s |  that I'm going to release right after this talk.
618.01s - 619.49s |  That's called Tridos.
619.49s - 623.49s |  And basically, it's going to search in your proxy passively
623.49s - 626.53s |  all the requests that takes more than X seconds,
626.53s - 629.89s |  where X is a threshold that you set yourself.
629.89s - 632.21s |  I personally put it to three seconds.
632.63s - 636.31s |  This is a good way to actually identify queries
636.31s - 639.03s |  that might take a lot of time on the backend
639.03s - 642.87s |  and that you can actually use for your exploitation.
642.87s - 647.87s |  So let's take an example of an N plus one problem.
648.51s - 650.55s |  There was an app that could accept
650.55s - 653.59s |  to create as many objects as we wanted.
653.59s - 655.23s |  The JSON blob was something like that,
655.23s - 657.11s |  where you had a list of users.
657.11s - 662.03s |  And then on each user, on each array of the list,
662.87s - 664.57s |  you can create a new user.
664.57s - 666.99s |  And then there was another sub-object
666.99s - 669.37s |  with another array with new objects.
669.37s - 671.67s |  So that's basically an N plus one problem,
671.67s - 673.43s |  when one request can create
673.43s - 676.05s |  as many sub-objects as you want.
677.19s - 679.05s |  And so how did we exploit that?
679.05s - 682.61s |  Well, we sent the request to create all those objects,
682.61s - 686.93s |  and we created approximately 10,000 objects in the backend.
686.93s - 691.35s |  And then our GET request to retrieve all the objects
691.35s - 693.97s |  took 10 seconds per request.
693.97s - 696.79s |  So that's a really, really good sign
696.79s - 698.79s |  that you have an N plus one problem.
698.79s - 703.27s |  We took that request, we put it into an intruder on Burp,
703.27s - 705.27s |  and we set it with null payloads,
705.27s - 706.75s |  thank your current request,
706.75s - 710.27s |  and we basically set it to run indefinitely.
710.27s - 714.24s |  And the result?
714.24s - 716.32s |  Complete crash.
716.32s - 718.80s |  Overall, this technique, not only single-vulnerability,
718.80s - 723.20s |  but overall, we did $46,000 in bounty.
724.04s - 724.88s |  There was an LHE this week,
724.88s - 727.80s |  so we can add 10,000 more to this slide.
727.80s - 732.46s |  I think that $30,000 of this was Snorlax alone,
733.32s - 734.64s |  because he's so good
734.64s - 737.20s |  at just taking one technique and spread it.
737.20s - 740.12s |  I think he did $15,000 per vulnerability,
740.12s - 742.44s |  so in two vulnerabilities, $30,000.
742.44s - 743.60s |  That guy is insane.
745.28s - 749.60s |  Okay, let's talk about network-based denial of services.
749.60s - 752.12s |  Have you ever been in that situation
752.12s - 753.76s |  where you have a blind SSRF
753.76s - 756.16s |  and you don't know what to do with it,
756.16s - 758.60s |  and that you are desperate for a technique
758.60s - 762.12s |  that will help you transform this sometimes informative
762.12s - 764.40s |  vulnerability into a higher crit?
764.40s - 766.56s |  Well, we have a technique for you.
768.30s - 771.08s |  Basically, do you guys know something called
771.08s - 772.62s |  slow low-risk attack?
772.62s - 775.70s |  Well, basically, we are going to try to do something
775.70s - 778.96s |  really similar where we are going to try to make
778.96s - 782.66s |  the packet hang on the network level as much as possible.
782.66s - 784.88s |  We can do it with several ways.
784.88s - 788.04s |  You can make your server hang
788.04s - 790.52s |  and just time out after 10 seconds,
790.52s - 792.74s |  or you can create a request loop.
793.60s - 796.00s |  So, what do I mean by request loop?
796.00s - 798.44s |  Well, you have your server that has a path
798.44s - 801.46s |  that will reject 301 on path two,
801.46s - 804.22s |  and then the path two will reject again on path one,
804.22s - 807.72s |  so we create an infinite loop of redirects.
808.04s - 811.48s |  The goal is to make the server time out
811.48s - 812.88s |  as much as possible.
812.88s - 817.92s |  So, we have a kind of schema happening.
817.92s - 820.58s |  And the goal of that technique is actually to fill
820.58s - 822.92s |  all the available sockets of the server
822.92s - 826.96s |  so it couldn't actually treat the next request
829.00s - 831.68s |  until we have this bottleneck happening
831.68s - 834.12s |  and there is no available sockets anymore.
837.31s - 839.67s |  For this technique, I think it was on
839.67s - 841.19s |  two separate vulnerabilities.
842.03s - 843.27s |  We made 15K.
843.27s - 845.63s |  So, it's actually a great technique to transform
845.63s - 848.43s |  blind SSRF into a critical.
848.43s - 850.87s |  Again, every time that we take down product environments,
850.87s - 853.11s |  we always ask for the programs.
853.11s - 854.93s |  Really be mindful of that.
854.93s - 858.39s |  But that's a pretty cool one if you're ever stuck.
860.05s - 863.45s |  Okay, let's go to sign in denial of services.
864.91s - 867.79s |  This one was really cool because we had a target
867.79s - 870.35s |  with an employee webpage.
870.79s - 872.51s |  Basically, when we see an employee webpage,
872.51s - 875.47s |  we try password stuffing or brute forcing
875.47s - 878.83s |  with simple combination, injection, et cetera, et cetera.
878.83s - 882.31s |  But why this target was particularly interesting for us
882.31s - 886.63s |  is because it was a target with more than 1,000 employees.
886.63s - 888.83s |  There was no rate limiting on the login.
888.83s - 890.31s |  No 2FA at all.
890.31s - 893.39s |  And they were using firstname.lastname for the user.
893.39s - 895.79s |  So, we could pull everything on LinkedIn
895.79s - 899.07s |  and we had a great world list to work with.
899.07s - 900.87s |  So, what do we do?
900.87s - 903.17s |  We managed to automate the attack.
903.17s - 904.91s |  No rate limiting at all.
904.91s - 906.83s |  And then, no login found.
906.83s - 908.57s |  Wait, no login found?
909.43s - 911.59s |  But we still got a crit.
911.59s - 915.81s |  Okay, guess what protection they implemented
915.81s - 917.43s |  for brute forcing attack.
917.43s - 919.71s |  Is it A, delay the next attempt?
919.71s - 921.39s |  B, capture?
921.39s - 923.37s |  C, ban the IP address?
923.37s - 930.64s |  Or D, ban the employee account?
930.64s - 932.98s |  There is actual documentation on the internet
933.32s - 935.98s |  that says that this is the right thing to do.
935.98s - 937.54s |  So, yeah.
937.54s - 938.38s |  What happened?
938.38s - 939.86s |  600 account locked.
940.74s - 943.82s |  They had the LTAP integration with the ID.
943.82s - 946.78s |  So, Active Directory completely down.
946.78s - 949.26s |  No access to the VPN anymore.
949.26s - 952.66s |  Completely take down of the internet environment.
952.66s - 953.68s |  So funny.
954.94s - 957.18s |  I would say that the impact of this technique
957.18s - 961.22s |  is actually like a three out of five.
961.22s - 964.94s |  But it's because the presence in the wild is also reduced.
964.94s - 966.38s |  I don't think that a lot of companies
966.38s - 968.18s |  are doing that anymore.
968.18s - 969.84s |  But pretty cool bug.
971.36s - 974.70s |  Okay, let's go to another type of DOS.
974.70s - 976.38s |  Disconception DOS.
976.38s - 977.70s |  So, this story is quite cool.
977.70s - 980.76s |  It started because I read this asset notes research.
980.76s - 982.70s |  If you guys don't know asset notes,
982.70s - 985.60s |  you should read every blog post of them.
985.60s - 986.66s |  It's amazing.
986.66s - 989.08s |  And there was this blog post from 2019
989.08s - 990.78s |  called Discovering a Zero Day
991.26s - 994.58s |  Getting Code Execution on Modular AWS Network.
994.58s - 997.02s |  So, how did asset note achieve that?
997.02s - 1000.18s |  Basically, there was an instance called web page test.
1000.18s - 1002.42s |  And it was completely open source.
1002.42s - 1003.46s |  So, they read the code.
1003.46s - 1005.02s |  And there was this piece of code
1005.02s - 1007.42s |  where you could extract a zip file
1007.42s - 1008.86s |  that was given by the user.
1008.86s - 1012.06s |  And then with some kind of quick race condition,
1012.06s - 1015.08s |  you could actually call a PHP file.
1015.08s - 1017.54s |  And so, for this race condition to work,
1017.54s - 1019.86s |  you need to set up an intruder
1019.86s - 1022.90s |  and just run as many requests as possible.
1024.14s - 1025.92s |  What happened when I tried it?
1027.14s - 1029.54s |  The backend didn't have enough e-notes
1029.54s - 1030.86s |  to take the charge of requests.
1030.86s - 1033.38s |  So, every time it was creating a zip file
1033.38s - 1037.14s |  and trying to extract it, it was allocating e-notes.
1037.14s - 1041.64s |  And so, the disk was full in like maybe two, three seconds.
1041.64s - 1044.28s |  So, yeah, I took down the instance.
1044.28s - 1047.30s |  And I thought that this instance wasn't used by anyone
1047.30s - 1048.46s |  until someone told me,
1048.46s - 1050.54s |  hey, all the pipelines are down.
1050.54s - 1052.60s |  And so, every time they were running a pipeline,
1052.60s - 1054.44s |  they were going to that instance.
1055.48s - 1056.32s |  That's cool.
1057.32s - 1059.22s |  So, total crash of the server.
1059.22s - 1060.30s |  No access to the disk.
1060.30s - 1061.66s |  They needed to clean everything,
1061.66s - 1064.18s |  wipe out, restart the server.
1064.18s - 1065.58s |  That was a cool one.
1065.58s - 1068.74s |  I would say that, again, the impact is reduced
1068.74s - 1070.30s |  because of the presence in the world.
1070.30s - 1072.04s |  So, it's a three out of five.
1073.90s - 1075.30s |  Cache poisoning.
1075.30s - 1076.30s |  That's a good one.
1077.18s - 1080.42s |  So, one day, for this anecdote,
1080.42s - 1083.18s |  at Lupienzo Homes, we were developing a new feature
1083.18s - 1085.54s |  for our tool, Depi, in research mode.
1085.54s - 1088.74s |  Research mode, for us, is when we want to test an idea
1088.74s - 1091.98s |  and spread it to see if it should be incorporated
1091.98s - 1094.98s |  into our tool for our customers.
1094.98s - 1098.58s |  And so, the idea was, what if registries,
1098.58s - 1100.02s |  when you install a dependency,
1100.02s - 1102.46s |  and have two factories used by the clients
1102.46s - 1105.46s |  were vulnerable to cache poisoning in our service?
1105.46s - 1107.42s |  It's a good thing to try.
1107.42s - 1109.34s |  So, we developed a proof concept,
1109.34s - 1112.46s |  and on the first run, we managed to get a hit
1112.46s - 1114.46s |  on registry.npmjs.org.
1114.46s - 1117.10s |  And I was like, no.
1117.10s - 1118.26s |  That didn't happen.
1118.26s - 1119.30s |  Like, no way.
1120.90s - 1122.62s |  So, we thought it was a fault positive,
1122.62s - 1125.60s |  and lo and behold, it worked.
1126.86s - 1129.58s |  So, what is CPDOS?
1129.58s - 1132.70s |  CPDOS is a web attack technique described
1132.70s - 1137.62s |  by Portuga, Portuga actually made it really, really famous.
1137.62s - 1139.78s |  Again, if you didn't read in your life
1139.78s - 1142.74s |  a James Kettle research, you should do it.
1142.74s - 1145.90s |  This guy is amazing, always breaking the internet.
1145.90s - 1148.66s |  And basically, it involves exploiting vulnerabilities
1148.66s - 1151.02s |  in the web caching system in order to deliver
1151.02s - 1154.18s |  malicious content to the users.
1154.18s - 1157.94s |  So, the methodology is to first understand
1157.94s - 1161.46s |  how the cache keys of our target is working,
1161.50s - 1165.54s |  and then understand how the output of the request
1165.54s - 1168.10s |  is linked to your HTTP input.
1168.10s - 1171.30s |  So, for instance, is the cache key inside the path,
1171.30s - 1175.18s |  the headers, or maybe some of the post requests.
1175.18s - 1176.82s |  Once you identify the cache key,
1176.82s - 1179.34s |  try to understand how you can manipulate it
1179.34s - 1181.66s |  in order to cache unwanted content.
1181.66s - 1184.94s |  So, it could be a malicious content like an XSS payload,
1184.94s - 1189.02s |  or it could just take down the page for all the users.
1190.02s - 1194.38s |  So, the case of registry.mpmjs.org was pretty cool.
1194.38s - 1196.86s |  Basically, my assumption is that the cache key
1196.86s - 1199.50s |  was actually the full path,
1199.50s - 1203.86s |  and when we added our malicious header,
1203.86s - 1206.98s |  it will create a 404 error.
1206.98s - 1210.18s |  But however, the cache key is still remaining the same,
1210.18s - 1213.66s |  and so it will just override the cache key with a 404.
1214.98s - 1218.90s |  So, at this point, we could deny packages.
1219.78s - 1223.38s |  That's a screenshot of my script running in the back,
1223.38s - 1225.58s |  and I'm trying to do an npm install,
1225.58s - 1226.58s |  and then that's it.
1226.58s - 1229.42s |  We got a 404 in production environment.
1229.42s - 1231.26s |  So, that was kind of cool.
1231.26s - 1234.06s |  Don't worry, I did it on a package that I created myself.
1234.06s - 1236.54s |  I didn't take down anything, hopefully.
1237.70s - 1241.06s |  And so, the impact was a complete denial
1241.06s - 1243.86s |  of any npm package in the world.
1243.86s - 1247.18s |  Imagine Express as 30 million plus downloads per week.
1248.18s - 1250.94s |  Actually, there was a lot of mitigation in place
1250.94s - 1253.90s |  on GitHub and npm side,
1253.90s - 1257.82s |  but what's quite cool about VT.
1257.82s - 1262.82s |  And so, first, they awarded a $500 informative,
1263.78s - 1267.02s |  but then they actually did an awesome work
1267.02s - 1268.86s |  to reconsider the severity,
1268.86s - 1273.86s |  and they added a $10,000 bounty for this npm crash.
1274.58s - 1276.58s |  So, I was so happy.
1277.50s - 1280.62s |  Especially for something that we didn't do on purpose again.
1282.38s - 1285.38s |  Okay, let's go to another cool attack vector
1285.38s - 1286.86s |  for denial of services.
1286.86s - 1289.26s |  Everything related to GraphQL.
1289.26s - 1291.78s |  So, why are we talking about GraphQL today?
1291.78s - 1295.86s |  Because it has a huge adoption in the last few years,
1295.86s - 1298.10s |  and there is so many denial of services
1298.10s - 1300.34s |  in the default configuration.
1300.34s - 1305.30s |  But when I say so many, I say so many.
1305.30s - 1309.22s |  First case of denial of services on GraphQL
1309.22s - 1311.22s |  is a circular definition.
1311.22s - 1313.42s |  Basically, a circular definition occurs
1313.42s - 1318.42s |  when an object references itself directly or indirectly.
1319.66s - 1322.42s |  For instance, here we have a type user
1322.42s - 1324.10s |  that has a best friend user,
1324.10s - 1328.58s |  but imagine if your best friend is also best friend with you.
1328.58s - 1330.58s |  You are basically referencing yourself.
1330.58s - 1332.58s |  So, we have a circular definition here.
1333.58s - 1336.26s |  But no need to check for the introspection
1336.26s - 1339.02s |  and actually understand the structure of your target.
1339.02s - 1340.90s |  GraphQL is vulnerable by default
1340.90s - 1342.86s |  in the introspection schema.
1342.86s - 1344.62s |  So, you can just do an introspection
1344.62s - 1346.22s |  and actually dust your target
1346.22s - 1348.74s |  without understanding their data structure.
1348.74s - 1352.29s |  That's insane.
1352.29s - 1354.89s |  And so, there's another kind of technique
1354.89s - 1357.25s |  called GraphQL batching that is pretty cool.
1357.25s - 1361.33s |  Basically, the goal is to compile a lot of different requests
1361.33s - 1363.53s |  in the same HTTP requests.
1364.01s - 1368.45s |  Again, this could be used to actually dust your target.
1368.45s - 1371.65s |  We're going to talk about this a little bit later.
1371.65s - 1373.65s |  Something really similar to GraphQL batching,
1373.65s - 1376.33s |  there is aliases, where basically you can use
1376.33s - 1380.05s |  different aliases for the same request,
1380.05s - 1382.17s |  but also use different arguments.
1382.17s - 1385.57s |  So, that also could be a huge attack factor
1385.57s - 1387.45s |  for denial of service.
1387.45s - 1390.81s |  So, quick tip for batching and aliases
1391.33s - 1393.49s |  to actually try to find gadget.
1393.49s - 1394.77s |  What I call gadget,
1394.77s - 1396.89s |  although it's the right definition,
1396.89s - 1399.53s |  but what I call gadget for this specific vulnerability
1399.53s - 1403.77s |  is to find a query in the structure of your target
1403.77s - 1408.13s |  that takes already 200 milliseconds up to 500 milliseconds.
1408.13s - 1412.13s |  Sometimes more, when you don't optimize anything, I guess.
1413.45s - 1417.69s |  And use this specific query in every batching request
1417.69s - 1420.13s |  that you do or in every aliases.
1420.45s - 1423.01s |  This will allow you to send a lot of requests
1423.01s - 1425.81s |  to maybe the disk operation that it does,
1425.81s - 1427.73s |  the memory, db, it really depends
1427.73s - 1429.81s |  on how the backend implemented it.
1430.81s - 1433.57s |  But this could take you a batching
1433.57s - 1435.45s |  that takes five seconds per request
1435.45s - 1437.77s |  up to five minutes per request.
1437.77s - 1442.69s |  So, this is a good way to multiply and amplify your dos.
1444.49s - 1448.13s |  And there is this one, the GraphQL directives.
1448.13s - 1450.11s |  So, what's a directive?
1450.95s - 1454.31s |  It's a way for GraphQL to decorate a part of the schema
1454.31s - 1457.59s |  and actually to do an operation on top of it
1457.59s - 1459.39s |  or additional configuration.
1460.39s - 1461.75s |  And there is a technique called
1461.75s - 1464.55s |  GraphQL directive overloading,
1464.55s - 1467.23s |  where basically you can just make that payload,
1467.23s - 1471.03s |  repeat the at eight as many times as you like,
1471.03s - 1475.67s |  and it will totally crash the server somehow.
1475.71s - 1479.59s |  But we had a cool story on the Google console
1480.79s - 1482.35s |  with evolving that.
1482.35s - 1486.59s |  So, let's imagine that a directive could be used
1486.59s - 1488.63s |  for, again, our type user,
1488.63s - 1490.83s |  and you can query every user
1490.83s - 1494.39s |  with an afro-admin or afro-user.
1494.39s - 1498.91s |  So, that's the way that normally we could use a directive.
1499.79s - 1502.23s |  But then Google was using the directive
1502.23s - 1505.27s |  in a very, very strange way.
1505.83s - 1509.35s |  Basically, you add the query list operation, for instance,
1509.35s - 1512.43s |  and then you see that we have directive
1512.43s - 1515.53s |  add signature with bytes inside.
1515.53s - 1517.79s |  And what they were doing,
1517.79s - 1521.59s |  they were actually signing the body of the request
1521.59s - 1524.53s |  from within the GraphQL requests.
1525.47s - 1528.67s |  And every time that we wanted to modify any variables
1528.67s - 1532.29s |  or anything in a schema, we will get an error.
1532.29s - 1535.33s |  So, when we are trying to attack a backend,
1535.33s - 1538.45s |  we really want to modify the request in our proxy.
1538.45s - 1540.29s |  So, that was a huge bummer
1540.29s - 1543.61s |  because it means that everything was totally signed.
1543.61s - 1547.81s |  So, we tried to see if we could sign our own requests,
1547.81s - 1551.01s |  but the problem is that they were outcoding everything
1551.01s - 1552.01s |  in the JavaScript.
1552.01s - 1554.13s |  So, generating everything on the build
1554.13s - 1556.01s |  and putting this in the JavaScript.
1556.01s - 1557.81s |  And so, they actually told us
1557.81s - 1562.25s |  that they were using a secret that was a passphrase,
1563.09s - 1565.21s |  and it was also outcoded inside the code base,
1565.21s - 1568.21s |  so they awarded $1,000 for that.
1568.21s - 1572.09s |  But that was a fun one, but nothing related to DOS.
1572.09s - 1573.81s |  But there is something interesting.
1573.81s - 1576.97s |  How they can sign the body
1576.97s - 1579.81s |  and put the signature inside the body.
1579.81s - 1583.09s |  This means that there is something in the GraphQL
1583.09s - 1585.81s |  that is not being checked correctly, right?
1585.81s - 1588.13s |  That is not inside the signature.
1588.13s - 1591.41s |  And normally, it's just the signature itself.
1591.41s - 1593.13s |  So, this means that we can add
1593.13s - 1595.89s |  as many signatures as possible,
1595.89s - 1597.37s |  and every time that we had a signature,
1597.37s - 1599.21s |  they were running the check
1599.21s - 1601.61s |  of the entire body all over again.
1602.53s - 1607.21s |  So, we wrote a script where we will add 10 directive,
1607.21s - 1609.57s |  500, 1,000, up to a million,
1609.57s - 1613.23s |  and check the request every time.
1613.23s - 1614.29s |  What happened?
1614.29s - 1618.89s |  The first 10 directive, 0.9 seconds to answer.
1618.89s - 1621.45s |  500 directive, one second.
1621.45s - 1624.25s |  We had 5,000 directive, 2.7.
1624.25s - 1626.69s |  10,000, 2.6, don't know what happened here.
1627.81s - 1632.81s |  50,000, 6.5, and then up to 1,109,000 seconds.
1633.17s - 1638.17s |  So, we had one minute 40 per request, which is huge.
1639.61s - 1641.85s |  This vulnerability was found with Rezo,
1641.85s - 1645.53s |  and Google actually gave us a 6K bounty for that.
1645.53s - 1650.53s |  And I think that compared to the presence in the wild,
1651.21s - 1654.53s |  the impact is really high for that kind of stuff.
1654.53s - 1659.37s |  And overall, for all the GraphQL DOS that we did in the,
1659.37s - 1660.33s |  oh, I'm sorry.
1660.33s - 1661.89s |  Also, pro-tips, pro-tip.
1661.89s - 1663.29s |  Yeah, this one is important.
1664.37s - 1666.99s |  GraphQL exposes WebSockets,
1666.99s - 1669.81s |  depending on the configuration and on the backend,
1669.81s - 1674.81s |  but this WebSocket server usually do not have any WAF
1675.09s - 1678.13s |  or any check, and people often forget that it exists.
1678.13s - 1679.93s |  So, if you have rate limiting in place
1679.93s - 1683.21s |  and that you want to exploit any GraphQL DOS,
1683.21s - 1684.93s |  you can just go to the WebSocket,
1684.93s - 1686.73s |  and there is no security anymore.
1686.73s - 1691.41s |  And if you like, actually, GraphQL hunting,
1691.41s - 1694.37s |  if you go to the WebSocket,
1694.37s - 1696.01s |  you can also have introspection
1696.01s - 1698.41s |  and other GraphQL configurations.
1698.41s - 1701.73s |  So, it might actually give you a lot more attack surface.
1701.73s - 1703.89s |  So, that's another GraphQL pro-tip.
1703.89s - 1706.81s |  And overall, with all the GraphQL denial-of-services,
1706.81s - 1710.37s |  we made a 70K bounty.
1710.37s - 1712.41s |  So, every time you see GraphQL,
1712.41s - 1717.44s |  just say to yourself, we can take it down.
1717.44s - 1719.88s |  Okay, I had to rush a little bit this presentation
1719.88s - 1722.86s |  because we were having this HTML problem,
1722.86s - 1725.04s |  so let's go straight to the conclusion.
1725.04s - 1726.44s |  Let's talk about the timeline
1726.44s - 1730.10s |  of this entire denial-of-service research.
1730.10s - 1733.52s |  The first denial-of-service that we found with Snorlax
1733.56s - 1738.56s |  was in 2022, and the last one that we found was last week.
1738.92s - 1743.18s |  But the main focus of the entire research
1743.18s - 1745.88s |  was during eight months last year.
1745.88s - 1747.90s |  So, most of the bounties were made
1747.90s - 1749.32s |  in a span of eight months.
1750.92s - 1753.18s |  And so, how much bounty overall
1753.18s - 1757.30s |  we made with this entire research?
1757.30s - 1762.30s |  We made almost $150,000 in bounty, which is a lot.
1762.62s - 1765.10s |  Which is a lot, I would say,
1765.10s - 1767.54s |  for a technique that is out of scope.
1769.10s - 1771.18s |  Something that is actually quite interesting
1771.18s - 1774.98s |  is that I think that this could be a main vulnerability
1774.98s - 1776.18s |  for a lot of bug hunters,
1776.18s - 1778.06s |  but I would say it's better to use it
1778.06s - 1781.06s |  like as a side golden goose.
1781.06s - 1784.66s |  So, for instance, if you like to find a lot of vulnerabilities
1784.66s - 1787.34s |  and then at one point you have no ideas anymore,
1787.34s - 1789.54s |  just look for a DOS, you'll find one,
1789.54s - 1791.98s |  send it, make a quick bug out of it.
1792.66s - 1794.26s |  I think it's a good way to do it.
1795.14s - 1798.10s |  Before finishing this presentation,
1798.10s - 1801.26s |  I needed to do a huge shout out to Idnama.
1801.26s - 1803.56s |  She's our graphical designer.
1803.56s - 1807.04s |  When I asked her, hey, can you do this entire presentation
1807.04s - 1810.50s |  for DEF CON, she was like, what do you want me to do again?
1810.50s - 1813.46s |  2,000 memes, a lot of reference, a lot of things.
1813.46s - 1815.18s |  I think she did an amazing job.
1815.18s - 1817.42s |  So, huge shout out to her.
1818.46s - 1821.34s |  Thanks a lot, everyone, for attending this presentation.
1821.42s - 1822.82s |  I hope you liked it.
1822.82s - 1825.66s |  And if you have any question later,
1825.66s - 1827.64s |  I will be happy to answer them.