{
  "webpage_url": "https://www.youtube.com/watch?v=Dh220NQIkaQ",
  "title": "DEF CON 32 - Redefining V2G: How to use your vehicle as game controller -Timm Lauser, Jannis Hamborg",
  "description": "Modern cars are a complex networks of computers put on four wheels. For security research, it is important to understand the car's internal network and exposed interfaces. But what else could you use this knowledge for? You probably guessed it from the title \ud83d\ude42. So we developed a tool to turn our research car into a game controller.\n\nIn this talk, we present Vehicle-to-Game (V2G), a Python-based project that enables the usage of cars as game controllers. V2G can run either directly on a laptop or turn a Raspberry Pi Zero WH into a Bluetooth gamepad. In addition, V2G can either be used over the OBD2-diagnostic port or by directly accessing the internal CAN-busses of the car.\n\nOur project can be a great starting point if you always wanted to tinker around with your car or want to learn about the CAN bus or diagnostic communication (UDS). To make V2G work with your car, some reverse engineering of CAN messages or diagnostic communication will be required (as well as additional hardware to connect to the CAN bus). Otherwise, if you can get this running, you can be sure that you own a more expensive game controller than your neighbors.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2339,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

1.20s - 3.20s | This text was transcribed using whisper model: large-v2

 Hello DEF CON!
3.20s - 4.20s |  Hi!
4.20s - 13.66s |  I hope you enjoy your time here, we definitely do.
13.66s - 16.66s |  It's actually our first time here at DEF CON
16.66s - 21.66s |  and thus we are very proud and excited to present to you our talk
21.66s - 26.66s |  Redefining V2G, how to use your vehicle as a game controller.
27.66s - 31.66s |  So, why do we need to redefine the acronym V2G?
31.66s - 39.39s |  Well, let me tell you a story.
39.39s - 45.39s |  Once upon a time, our professor told us we should do some research about V2G.
45.39s - 50.39s |  And what he means by that is that we look at vehicle-to-grid communication,
50.39s - 54.39s |  the communication between the car and the charge point
54.39s - 61.39s |  and also the backend and even the power grid for bi-directional charging, for example.
61.39s - 65.39s |  Well, that's actually a pretty cool research topic.
65.39s - 69.67s |  But do you know what's even cooler?
69.67s - 71.67s |  Using your car as a game controller.
71.67s - 77.67s |  So, that's why we developed this little project called Vehicle-to-Game.
77.67s - 82.67s |  But before we get started with that, a short introduction of ourselves.
82.67s - 87.67s |  My name is Tim, I'm a PhD student at Darmstadt University of Applied Sciences in Germany.
87.67s - 91.67s |  And I mainly do automotive security.
91.67s - 94.67s |  So, also a lot of theoretical stuff.
94.67s - 99.67s |  I look at protocols and standards and do a formal analysis of these standards
99.67s - 104.67s |  to see if they meet certain security goals.
104.67s - 107.67s |  Yeah, hello from my side too.
107.67s - 112.67s |  I'm Janis, I'm also a PhD student at our small automotive research group
112.67s - 118.67s |  called ACSD, Automotive Cyber Security Darmstadt.
118.67s - 120.67s |  It's located in Germany.
120.67s - 124.67s |  I finished my master's at the end of the last year
124.67s - 129.67s |  and now I'm a PhD student about resilience in the automotive topic,
129.67s - 132.67s |  but also for IoT systems.
132.67s - 138.67s |  Means what happens if an ECU in a car breaks or is going to be compromised,
138.67s - 141.67s |  how you can migrate functionality to another ECU
141.67s - 148.67s |  and strengthen the safety inside the car by such a resilience concept.
148.67s - 152.67s |  Our research group is also very focused on teaching.
152.67s - 155.67s |  We have a lecture called Automotive Security
155.67s - 159.67s |  and therefore we have to motivate students, of course,
159.67s - 165.67s |  and that's why we have created this motivating and beginner-friendly talk
165.67s - 171.67s |  and our project V2G to get students excited and motivated
171.67s - 175.67s |  about the topic of automotive research.
175.67s - 179.67s |  Maybe the most important member of our research group is our research car.
179.67s - 181.67s |  It's a Volkswagen ID.3.
181.67s - 183.67s |  It's an electric vehicle.
183.67s - 185.67s |  And since, of course, we are Germans,
185.67s - 193.52s |  so we have to do research on the Volkswagen, I think.
193.52s - 197.52s |  Usually the initial step of the automotive research,
197.52s - 202.52s |  but also other security research, is considering attack vectors.
202.52s - 206.52s |  And that's what we have to do also for the automotive context.
206.52s - 209.52s |  You can see there are various attacks.
209.52s - 211.52s |  It's a huge attack surface.
211.52s - 214.52s |  First of all, you have long-range attacks, you have short-range attacks,
214.52s - 218.52s |  but you have also physical attack possibilities.
218.52s - 220.52s |  For the long-range attacks, for example,
220.52s - 226.52s |  the cellular communication between the car and the back end of the OEM,
226.52s - 229.52s |  for example, for over-the-air updates.
229.52s - 234.52s |  In newly upcoming cars, you have also the V2X communication,
234.52s - 239.52s |  cars communicating to each other about their location, about their speed.
239.52s - 242.52s |  You have cars communicating with road signs
243.52s - 250.52s |  to get a status about allowed speed, for example, of this street section.
250.52s - 252.52s |  You have short-range attacks.
252.52s - 255.52s |  That's more or less classical cyber security,
255.52s - 260.52s |  considering Bluetooth, Wi-Fi connection for your infotainment system
260.52s - 264.52s |  between the smartphone, for example, for playing via Apple CarPlay,
264.52s - 268.52s |  for example, the music on your car.
268.52s - 272.52s |  Maybe the most interesting and car-specific attack vectors
272.52s - 274.52s |  are these physical attacks.
274.52s - 278.52s |  That's the bus systems inside the car.
278.52s - 283.52s |  There are several of them, but we want to focus on two,
283.52s - 286.52s |  and we'll go into them a little bit later in detail,
286.52s - 289.52s |  because we need them for our V2G project,
289.52s - 294.52s |  getting all information required for our game controller out of this car.
294.52s - 301.66s |  Here you can see our two main research cars.
301.66s - 303.66s |  We are focused on electric vehicles.
303.66s - 306.66s |  On the left side, you can see our Volkswagen ID.3.
306.66s - 310.66s |  On the right side, you can see the Tesla Model 3.
310.66s - 313.66s |  We use them for practical research.
313.66s - 316.66s |  Tim also introduced them as theoretical research.
316.66s - 318.66s |  I'm also more theoretical part,
318.66s - 321.66s |  but you cannot do the whole time theoretical research,
321.66s - 324.66s |  so you have to do tinkering around with a car.
324.66s - 326.66s |  It's also good for the motivation.
326.66s - 330.66s |  There's a lot of information you just get when you look at the actual car,
330.66s - 332.66s |  because the manufacturers won't tell you.
332.66s - 334.66s |  Also, for students, it's quite cool
334.66s - 339.66s |  to do research on the actual cars and projects.
340.66s - 343.66s |  We have equipped our cars with lots of techniques
343.66s - 346.66s |  to get information about them.
346.66s - 351.66s |  We'll show you in the following how we have done this.
351.66s - 353.66s |  That's the back of the Volkswagen ID.3.
353.66s - 356.66s |  We've equipped this with lots of measurement techniques.
356.66s - 359.66s |  On the right, you can see so-called vector boxes.
359.66s - 362.66s |  They're from a German company called Vector.
362.66s - 364.66s |  That's why we call them vector boxes.
364.66s - 369.66s |  They're for capturing different buses inside a car.
369.66s - 372.66s |  We have equipped the car in a way
372.66s - 377.66s |  that we can get a holistic view of all relevant buses in this car.
377.66s - 380.66s |  On the left side, you can also see
380.66s - 384.66s |  some interesting parts for the electrical engineers.
384.66s - 388.66s |  We have equipped the car with so-called LEM sensors.
388.66s - 391.66s |  They are current-measuring sensors via induction.
391.66s - 396.66s |  You can clip them on the high-voltage system wires
396.66s - 398.66s |  to measure the current.
398.66s - 401.66s |  The idea behind this holistic view
401.66s - 405.66s |  between physical and messages inside the car
405.66s - 409.66s |  is that we can compare those data
409.66s - 414.66s |  and get correlations between the actual physical measurements
414.66s - 419.66s |  and the recorded, for example, canvas data.
419.66s - 425.34s |  As I've already introduced, from a theoretical way,
425.34s - 428.34s |  there's also a practical attack surface, of course.
428.34s - 435.34s |  On the left side, you can see classical key fob attacks using an SDR.
435.34s - 439.34s |  Maybe all of you have heard about the roll jam attack.
439.34s - 444.34s |  You jam the signal of the key fob because it's using a rolling code
444.34s - 447.34s |  and the owner of the car will press a second time
447.34s - 451.34s |  and you have recorded both signals
451.34s - 456.34s |  and you resend the older one because the car hasn't heard this already.
456.34s - 460.34s |  So you have a newer one for the car unlocking this in the future
460.34s - 463.34s |  without the owner getting any notice about this.
463.34s - 468.34s |  In the middle, you can see for automotive and classical attack surfaces
468.34s - 474.34s |  also unsoldering the chips where the firmware is located on
474.34s - 476.34s |  because you have physical access to your car.
476.34s - 481.34s |  If you own the car, you can do anything you like with it, more or less.
481.34s - 485.34s |  So that's why we have unsoldered the EMMC chip
485.34s - 489.34s |  to get in contact with the firmware.
489.34s - 492.34s |  That's the same we've done with the key fob.
492.34s - 496.34s |  You can see here there was the memory chip.
496.34s - 503.34s |  And maybe another interesting part is that you can directly connect
503.34s - 507.34s |  with here you can see such a vector box to the internal buses of the car.
507.34s - 511.34s |  Here you can see one such an ECU
511.34s - 518.34s |  and we have connected this box with the CAN bus of the ECU controlling messages.
518.34s - 525.34s |  But before we go there for a little bit in detail how these messages look like
525.34s - 529.34s |  first we have to understand what this CAN bus actually is.
529.34s - 533.34s |  How can we talk to those cars?
533.34s - 540.74s |  For a game controller, we require, as I've already mentioned,
540.74s - 544.74s |  information about specific actuators of the car.
544.74s - 546.74s |  For example, the steering wheel.
546.74s - 551.74s |  We later want to transfer the angle of the steering wheel to our virtual game controller.
551.74s - 554.74s |  So we have to get this information out of the car.
554.74s - 557.74s |  And this information is transferred via the CAN bus.
557.74s - 567.49s |  The topology of such a car looks like follows.
567.49s - 569.49s |  It's a very condensed view.
569.49s - 572.49s |  It's a very simplified view of our Volkswagen ID.3
572.49s - 579.49s |  where you can see there's a main gateway ECU and several domains.
579.49s - 583.49s |  Each domain consists of several other ECUs
583.49s - 586.49s |  and each of those domains is separated in a way
586.49s - 591.49s |  based on the criticality of those functionalities in the ECUs.
591.49s - 595.49s |  For example, in the drive domain you can see
595.49s - 598.49s |  that's located the engine ECU but also the brake ECU.
598.49s - 600.49s |  They're all safety relevant.
600.49s - 603.49s |  So they're very critical for the safety behavior of the car.
603.49s - 608.49s |  On the left side you can see a separated domain with less criticality
608.49s - 612.49s |  for example the light controlling inside the car.
612.49s - 620.90s |  The special thing in this topology is that those domains are separated
620.90s - 622.90s |  based on this gateway ECU.
622.90s - 631.90s |  The gateway ECU is responsible for shielding the inside of the car against the outside
631.90s - 636.90s |  because, maybe you know this from combustion engines,
636.90s - 640.90s |  the outside of the car is connected with a so-called OBD2 port.
640.90s - 642.90s |  It's for diagnosis.
642.90s - 646.90s |  If you bring your car to a garage they will plug there in
646.90s - 649.90s |  and you want to prevent that via the OBD2 port.
649.90s - 652.90s |  Everyone can read everything of the car.
652.90s - 657.90s |  So that's why such a gateway ECU is introduced into this topology.
657.90s - 661.90s |  But this strongly depends on the actual car you want to consider.
661.90s - 671.58s |  That's just for the Volkswagen ID.3 and the group of vehicles from Volkswagen.
671.58s - 674.58s |  Now we get a little bit into detail about this CAN bus.
674.58s - 677.58s |  The CAN bus was developed by Bosch in 1986.
677.58s - 683.58s |  It's a dual wire twisted pair cable and as I said before it's a bus topology.
683.58s - 685.58s |  What does it mean?
685.58s - 693.58s |  The bus topology means that the ECUs are connected to the same wire or wire pair
693.58s - 698.58s |  and all ECUs get the same state of information in the respective time frame.
698.58s - 704.58s |  We have a frequency in this CAN bus and all this information is distributed
704.58s - 710.58s |  in this time frame to all ECUs connected to this CAN bus.
710.58s - 713.58s |  It's also a multi-master protocol.
713.58s - 718.58s |  It means that all ECUs can send and receive on demand
718.58s - 722.58s |  and there's no master required to control them.
722.58s - 730.18s |  Now we have the foundations how this CAN bus works.
730.18s - 735.18s |  Now we get to gain access to this physical CAN bus inside the car.
735.18s - 742.18s |  Maybe the most convenient way is to find just a repair manual or a wiring diagram of the car.
742.18s - 744.18s |  They are usually available for garages.
744.18s - 747.18s |  For Volkswagen you can get them online.
747.18s - 751.18s |  If you claim you are a garage then you can buy it.
751.18s - 757.18s |  Otherwise you have to find it out by yourself but this can become very, very hard.
757.18s - 761.18s |  So very common having such a wiring diagram.
761.18s - 769.18s |  Based on this wiring diagram you can find a good exposed position of an interesting CAN bus
769.18s - 771.18s |  where you can connect to.
771.18s - 777.18s |  For example here you can see the Tesla Model 3 which is in the mid console of the car.
777.18s - 786.18s |  There's one of three CAN buses which you can easily open and connect to ready to buy adapter.
786.18s - 789.18s |  You can buy those adapters easily on eBay for example.
789.18s - 794.18s |  And then you can gain access to this CAN bus.
794.18s - 798.18s |  If you don't want to destroy your car or altering this
798.18s - 804.18s |  there are also less intrusive techniques called contactless CAN readers.
804.18s - 808.18s |  They read CAN messages based on induction of the signal.
808.18s - 811.18s |  And that's more or less looks like a crocodile.
811.18s - 814.18s |  That's why some products called CAN crocodile.
814.18s - 817.18s |  You clamp the CAN wires high and low.
817.18s - 824.18s |  Those dual wires between the clamp of the contactless CAN reader.
824.18s - 827.18s |  And you can read those messages.
827.18s - 831.18s |  So you have gained access to the physical layer.
831.18s - 835.18s |  You have read those physical signals of the CAN bus.
835.18s - 839.18s |  Now you have to transfer them into software.
840.18s - 844.18s |  For the Raspberry Pi for example.
844.18s - 848.18s |  A CAN head where those physical CAN signals are interpreted
848.18s - 852.18s |  and transferred to the kernel of the Raspberry Pi.
852.18s - 858.18s |  There are also other options available which can conveniently be used
858.18s - 862.18s |  where you can connect your CAN bus directly via USB to your PC.
862.18s - 867.18s |  This also works for Windows so maybe it's for part of you interesting.
867.18s - 872.18s |  So now we have transferred the message to the software part of our project.
872.18s - 875.18s |  And that's where Tim continues.
875.18s - 878.18s |  Alright, so very conveniently in the Linux kernel
878.18s - 881.18s |  there's already a CAN driver built in.
881.18s - 884.18s |  And if you want to work with that there's CANutils
884.18s - 888.18s |  which has all the basic tools to use that.
888.18s - 892.18s |  Also if you want to do more advanced stuff for scripting
892.18s - 895.18s |  you can use for example PythonCAN as a really good library.
895.18s - 897.18s |  That's what we use for our project.
897.18s - 901.18s |  There's also CAN tools for more advanced command line tools.
901.18s - 906.18s |  If you're into GUIs there's SavvyCAN which is a really good open source GUI tool.
906.18s - 909.18s |  And of course there are a lot of commercial tools.
909.18s - 912.18s |  We talked about all this vector stuff before.
912.18s - 914.18s |  But let's stick with the very basics.
914.18s - 920.18s |  So you install CANutils and then there's this condom command
920.18s - 923.18s |  which will just print out all of the CAN messages on the bus.
923.18s - 928.18s |  It looks somehow like this but probably a lot faster if you're on a real car.
928.18s - 931.18s |  So for a Tesla for example it might be on one bus
931.18s - 934.18s |  it's I think like 3,000 messages a second.
934.18s - 937.18s |  So it can be quite a lot.
937.18s - 942.18s |  One step back even if you connect to this.
942.18s - 947.18s |  So for Linux the CAN interface is like any other network interface
947.18s - 951.18s |  if your adapter is compatible with SocketCAN.
952.18s - 956.18s |  The only difference is that you don't have network manager
956.18s - 960.18s |  to directly get your interface up and running.
960.18s - 963.18s |  And you also need a bitrate.
963.18s - 969.18s |  So you have to tell the computer how fast the bus operates.
969.18s - 974.18s |  And you can measure that by using an oscilloscope of course.
974.18s - 978.18s |  Luckily for automotive it's usually 500 kilobits per second.
978.18s - 980.18s |  So you can also try that.
980.18s - 989.18s |  And just as a disclaimer there are also more modern standards
989.18s - 991.18s |  like improvements on the CAN standards.
991.18s - 993.18s |  For example CAN FD.
993.18s - 997.18s |  And there you will also need to have the data rate for example.
997.18s - 1001.18s |  But let's assume standard CAN for now.
1001.18s - 1004.18s |  And then we've already seen the CANup command.
1004.18s - 1008.18s |  I just want to walk very quickly through what you can see here.
1009.18s - 1011.18s |  That's one single message picked out.
1011.18s - 1015.18s |  You see the interface in the front.
1015.18s - 1019.18s |  If you have multiple CAN interfaces connected that's important.
1019.18s - 1024.18s |  Then the CANID and the data length and the data.
1024.18s - 1029.18s |  And the thing is this CANID if you are used to IP
1029.18s - 1034.18s |  you're usually used to having a source and a destination address.
1034.18s - 1037.18s |  The CANID is actually neither.
1037.18s - 1040.18s |  Think of it more like a publisher subscribed topic.
1040.18s - 1049.18s |  So it will tell you how to define or how to interpret the bits in the data part.
1049.18s - 1051.18s |  Also it's the priority of the message.
1051.18s - 1056.18s |  So the lower the ID the higher the priority.
1056.18s - 1061.18s |  And this data can be really arbitrarily defined.
1061.18s - 1064.18s |  The information in there is called signals.
1064.18s - 1070.18s |  It can be 1 bit, it can be 5 bit, it can be all 8 bytes.
1070.18s - 1073.18s |  So that's up to the manufacturer to define that.
1073.18s - 1081.18s |  And that's why we usually need some reverse engineering to make sense of this information.
1081.18s - 1086.18s |  So you might want to get started.
1086.18s - 1090.18s |  But maybe you do not want to remove all the plating of your car.
1090.18s - 1096.18s |  It sounds like a lot of work to figure out all the wiring and stuff.
1096.18s - 1100.18s |  So that's actually how we started.
1100.18s - 1104.18s |  But if you don't want to do that there's also the way the garages do that.
1104.18s - 1107.18s |  So Janis already spoilered it.
1107.18s - 1113.18s |  You have this OBD2 connector for vehicle diagnostics.
1114.18s - 1120.18s |  And this connector is usually very conveniently located somewhere in the driver area of your vehicle in front.
1120.18s - 1125.18s |  And you can just plug in a diagnostic connector there.
1125.18s - 1130.18s |  It's usually an OBD2 dongle which connects via Bluetooth to a diagnostic device.
1130.18s - 1134.18s |  And will read out data like that.
1134.18s - 1138.18s |  And the protocol to do this is called UDS, Unified Diagnostic Services.
1138.18s - 1142.18s |  And it's basically a request response protocol.
1142.18s - 1147.18s |  The diagnostic tester will, for example, in our case we want the steering wheel angle.
1147.18s - 1150.18s |  So it will ask, is you responsible for that?
1150.18s - 1152.18s |  Can you give me the steering wheel angle?
1152.18s - 1154.18s |  And it will respond with the correct value.
1154.18s - 1158.18s |  So that's on top of the CAM protocol.
1158.18s - 1163.18s |  It can also be IP but usually CAM or both.
1163.18s - 1168.18s |  And in between there's actually another protocol which is called ISOTP.
1168.18s - 1171.18s |  And which allows to basically combine multiple CAM edges.
1171.18s - 1176.18s |  They are limited to 8-byte to one message in UDS.
1176.18s - 1181.18s |  So you can send longer data.
1181.18s - 1186.18s |  But that comes with the difference that now we also...
1186.18s - 1191.18s |  I told you before that this is not like source and destination address to Kennedy.
1191.18s - 1195.18s |  But for UDS it's actually the destination address now.
1195.18s - 1199.18s |  So there's also, if you want to read data, there's also a data identifier.
1199.18s - 1201.18s |  Which identifies which data it is.
1201.18s - 1207.18s |  So you can have now multiple different interpretations for data with the same kind of ID.
1207.18s - 1210.18s |  And data can be split over multiple CAM frames.
1210.18s - 1212.18s |  Just watch out for that.
1212.18s - 1216.18s |  Alright, and with that I think we should have everything ready to go.
1216.18s - 1217.18s |  Yeah, I think so.
1217.18s - 1219.18s |  We have considered the physical layer.
1219.18s - 1222.18s |  We have considered the transfer to the software.
1222.18s - 1225.18s |  We have considered how we can interpret those CAM messages.
1225.18s - 1228.18s |  So we have all together to create our game.
1228.18s - 1234.18s |  And as a small in-between motivation, that's the actual result.
1234.18s - 1237.18s |  You can see Tim sitting in our Volkswagen ID.3.
1237.18s - 1243.18s |  In front we have placed a big monitor playing Need for Speed Most Wanted from 2008.
1243.18s - 1246.18s |  With the actual car.
1246.18s - 1250.85s |  Thank you.
1250.85s - 1258.08s |  You can see a little bit more of our V2G experience.
1258.08s - 1260.08s |  On the left side you can see our setup.
1260.08s - 1263.08s |  A laptop where the game is actually running.
1263.08s - 1269.08s |  In front of the car we have placed a huge monitor for a very immersive experience for the driver.
1269.08s - 1272.08s |  But also for all other people inside the car.
1272.08s - 1276.08s |  On the right side you can see me playing again Need for Speed Most Wanted.
1276.08s - 1279.08s |  And you can see I'm very focused on this game.
1279.08s - 1286.08s |  So, as I said, it's very immersive and it's a very cool experience sitting in such an equipped car.
1288.55s - 1294.55s |  But how can we now connect the laptop, the game, with the car?
1294.55s - 1297.55s |  You can see on the right the topology again.
1297.55s - 1302.55s |  Therefore we have several possibilities to connect the car.
1302.55s - 1304.55s |  First, we can use wires.
1304.55s - 1309.55s |  We can use the USB-based P-CAN Pro, for example.
1309.55s - 1314.55s |  Connecting, as one possibility, to the internal CAN bus.
1314.55s - 1319.55s |  Therefore we have to figure out which CAN bus relevant messages are located on.
1319.55s - 1323.55s |  We have to find the relevant messages.
1323.55s - 1329.55s |  Figuring out the relevant signals of the CAN messages, as Tim already explained.
1329.55s - 1334.55s |  And there's an overwhelming number of CAN messages on this internal bus.
1334.55s - 1337.55s |  As Tim said, several thousands per second.
1337.55s - 1341.55s |  So it's quite difficult to figure this stuff out.
1342.55s - 1348.55s |  Also, the whole breakout box stuff we've shown to you is required to get access to those internal buses.
1348.55s - 1354.55s |  So the more convenient solution is connecting directly to the OBD2 port.
1354.55s - 1359.55s |  And use the diagnostic services for pulling those informations.
1359.55s - 1363.55s |  And getting conveniently just the requested information.
1363.55s - 1368.55s |  But since we live in 2024, wires are a little bit outdated.
1368.55s - 1371.55s |  We have created a Raspberry Pi head.
1371.55s - 1379.55s |  Which allows us to emulate an Xbox 360 controller with a Raspberry Pi Zero.
1379.55s - 1382.55s |  Connecting directly to the OBD2 port of the car.
1382.55s - 1388.55s |  And this Raspberry Pi connects via Bluetooth to the laptop, emulates this controller.
1388.55s - 1393.55s |  And the laptop can stand outside the car and runs the game.
1393.55s - 1396.55s |  For this setup we use UDS.
1396.55s - 1403.38s |  Now a little bit into detail of the actual hardware we use for it.
1403.38s - 1410.38s |  The lower layer of this, you can see it's a classical Raspberry Pi Zero with no modifications.
1410.38s - 1415.38s |  Above that we have located the Raspberry Pi CAN head.
1415.38s - 1422.38s |  Which is responsible for converting those physical CAN signals to a software readable CAN message.
1423.38s - 1429.38s |  And the top layer, we have created a self-designed PCB.
1429.38s - 1437.38s |  For connecting to this OBD2 port of the car.
1437.38s - 1442.38s |  From this OBD2 port we only use four connections.
1442.38s - 1447.38s |  The 12V, the ground, the CAN high and CAN low connection.
1447.38s - 1455.38s |  The CAN high and CAN low connection is directly transferred via this PCB to the lower CAN head.
1455.38s - 1458.38s |  Which converts this message.
1458.38s - 1464.38s |  But the more interesting part of this PCB is the 12V, 5V DC-DC conversion.
1464.38s - 1469.38s |  So we can very conveniently connect this dongle to our car.
1469.38s - 1474.38s |  Without the requirement for a power bank and power supply of the Raspberry Pi.
1474.38s - 1477.38s |  As a short disclaimer, we are no electrical engineers.
1477.38s - 1482.38s |  So if you have any recommendation about this, feel free to contact us.
1482.38s - 1485.38s |  We are quite happy about recommendations.
1485.38s - 1494.38s |  This circuit for 12V, 5V DC-DC conversion is just taken out of the datasheet of the used IC.
1494.38s - 1502.29s |  Feel free to come off stage to us and discuss it with me.
1502.29s - 1508.29s |  We have also added the possibility to add status LEDs, but that's to be done.
1508.29s - 1513.29s |  They are connected to the GPIO pins of the Raspberry Pi.
1513.29s - 1518.29s |  So if you want to extend the project, you can use them for your own purpose.
1518.29s - 1522.29s |  So we have the hardware, now the software.
1522.29s - 1527.29s |  I'm just going very briefly over the software architecture of our tool.
1528.29s - 1534.29s |  If you want to use it in the Bluetooth mode, there's an install script for that.
1534.29s - 1542.29s |  You just run it on your pre-imaged Raspberry Pi and it will set up everything which is required.
1542.29s - 1546.29s |  If you don't want to do it, then just run it on your own laptop.
1546.29s - 1548.29s |  There's a run script for Linux.
1548.29s - 1553.29s |  For Windows, you just directly run the Python protocol.
1553.29s - 1558.29s |  The run script actually will also set up some interfaces and stuff.
1558.29s - 1563.29s |  But you can do this beforehand if you do not want to execute it with pseudo-privileges,
1563.29s - 1567.29s |  because that's required for interface management.
1567.29s - 1575.29s |  Then for emulating the game controller, for the Bluetooth version, we used the HitPi project
1575.29s - 1577.29s |  to emulate a Bluetooth device.
1577.29s - 1581.29s |  If you run it on your own laptop, we used the VGamePad library,
1581.29s - 1585.29s |  which is also cross-platform, so it also runs on Windows.
1587.29s - 1589.29s |  You can also use that.
1589.29s - 1593.29s |  For the Bluetooth one, it kind of doesn't really work on Windows so far.
1593.29s - 1597.29s |  So if you have any recommendations on that and are an expert on Hit devices,
1597.29s - 1601.29s |  also pull requests are welcome.
1602.29s - 1609.29s |  So now to our actual domain components.
1609.29s - 1610.29s |  We have a car detector.
1610.29s - 1614.29s |  If you have multiple vehicles, as we have the ID3 and the Tesla,
1614.29s - 1618.29s |  you can give it basically a list of 10 IDs and it will figure out which car it is
1618.29s - 1622.29s |  and then use the according configuration.
1622.29s - 1625.29s |  The heart of our project is the car connector,
1625.29s - 1634.29s |  which will convert all the car signals in the messages to triggers for the Xbox emulation.
1634.29s - 1641.29s |  Then there is the vehicle configuration, which has all the vehicle-specific stuff in there.
1641.29s - 1645.29s |  I'll just have a more detailed look on that.
1648.29s - 1652.29s |  You can configure a name for your vehicle to reference it.
1652.29s - 1654.29s |  Then you have to specify which operation mode,
1654.29s - 1657.29s |  if you want to use the internal mode or the UDS mode.
1657.29s - 1662.29s |  Sometimes if you have an older car where there is no gateway in between the internal buses
1662.29s - 1667.29s |  and the OBD2 connector, you can also use the internal mode for that.
1668.29s - 1674.29s |  Or if you install the OBD2 adapter for the Tesla.
1676.29s - 1681.29s |  Otherwise, for the UDS mode, you will also have what you can see on the right side.
1681.29s - 1685.29s |  You will have to send those polling messages I talked about earlier.
1685.29s - 1691.29s |  Basically, you can just paste them in here and it will periodically send them to get the data.
1691.29s - 1694.29s |  There is also an update interval.
1694.29s - 1699.29s |  Usually, we have a higher interval for the steering angle and brakes,
1699.29s - 1702.29s |  and for the buttons we use a lower update interval,
1702.29s - 1706.29s |  because there is a limit how fast the ECUs will respond.
1706.29s - 1710.29s |  Also, we have some, you can see the auto-detect IDs I mentioned before,
1710.29s - 1714.29s |  and also some high-level configuration stuff.
1714.29s - 1717.29s |  For example, we limit the steering,
1717.29s - 1723.29s |  because if you play a racing game and you have to turn the wheel two times for the maximum steering,
1723.29s - 1725.29s |  it's just too slow.
1726.29s - 1729.29s |  Also, there is the steering dead zone,
1729.29s - 1737.29s |  which basically you have a bit more space to set your steering wheel to zero,
1737.29s - 1742.29s |  because otherwise, if it's like 0.01 degrees and it will always go left in the menus,
1742.29s - 1745.29s |  or you just cannot drive straight,
1745.29s - 1750.29s |  it's actually pretty hard to get your steering wheel to exactly zero degrees.
1750.29s - 1752.29s |  So, that's pretty handy.
1753.29s - 1757.29s |  I'll go a bit into detail on the signal configuration later,
1758.29s - 1762.29s |  but for now, let's look at how it works out.
1762.29s - 1764.29s |  Yeah, we are ready to play.
1764.29s - 1767.29s |  Unfortunately, we are not allowed to bring our car with us,
1767.29s - 1770.29s |  so we have brought some videos of the gaming experience.
1770.29s - 1775.29s |  You can see me here driving with first-person view, playing SuperTux Kart.
1780.51s - 1785.51s |  You can see I control the racing car with the steering wheel, left and right,
1785.51s - 1790.51s |  and now I've paused, because you can see I put my foot on the brake,
1790.51s - 1792.51s |  and see what happens next.
1792.51s - 1800.75s |  As expected, the racing car slows down, and I was overtaken.
1802.75s - 1809.75s |  Now, you can see I've started the indicator.
1809.75s - 1815.75s |  We have mapped the indicator function for left to throwing items in this game.
1815.75s - 1819.75s |  You can do this for your own purpose, for your own game, but we have mapped it like this.
1820.75s - 1828.75s |  So, you can see here, I'm throwing this exploding muffin to the racing car in front of me,
1828.75s - 1830.75s |  so it will explode.
1830.75s - 1836.75s |  Unfortunately, because PowerPoint is a little bit annoying,
1836.75s - 1844.75s |  usually you should see that I have turned on the full beam 2,
1844.75s - 1852.75s |  so we have mapped the full beam trigger to the nitro activation in the game.
1853.75s - 1858.75s |  So, it's very cool driving in the night, igniting, and the car speeds up.
1859.75s - 1860.75s |  See what happens?
1860.75s - 1863.75s |  Yeah, you can see the nitrogen.
1863.75s - 1871.75s |  Now, you can see it's a little bit difficult to drive, especially with just one hand,
1871.75s - 1878.75s |  but it is possible to race, it is possible to overtake enemies in this game,
1878.75s - 1882.75s |  and it is also possible for you to get the right items,
1882.75s - 1887.75s |  in this example the acceleration one, to win racing games.
1893.49s - 1895.49s |  And it's actually a lot of fun.
1896.49s - 1898.49s |  You see, we're very excited about this.
1899.49s - 1903.49s |  So, maybe, over to Tim.
1903.49s - 1907.49s |  So, the question all of you probably have in your mind,
1907.49s - 1911.49s |  how do you support your own car to use this?
1911.49s - 1919.49s |  Well, before you get started on that, just make sure you keep in mind the safety,
1919.49s - 1923.49s |  so make sure you cannot accidentally drive into a wall.
1924.49s - 1928.49s |  Because if you're in your garage, and you're really into your game,
1928.49s - 1934.49s |  and by accident you switch to drive mode, you don't want to do that,
1934.49s - 1938.49s |  even if you're probably out on the gas, right?
1938.49s - 1940.49s |  So, make sure you cannot do that.
1940.49s - 1944.49s |  Of course, that's a problem on combustion engine vehicles,
1944.49s - 1948.49s |  where you do not have to turn on the engine,
1948.49s - 1952.49s |  but then make sure not to drain your 12-volt battery,
1952.49s - 1954.49s |  like playing all night.
1954.49s - 1960.49s |  Yeah, that's probably not good, if you do not have a charger connected.
1961.49s - 1963.49s |  So, what do you need?
1963.49s - 1965.49s |  I think we talked about everything of that.
1965.49s - 1967.49s |  The Raspberry Pi, a con-head.
1967.49s - 1971.49s |  You can also use just an OBD-II augmented cable,
1971.49s - 1976.49s |  if you do not want to solder your own OBD-II head.
1976.49s - 1980.49s |  So, that all should be less than 50 bucks, I think, to get started.
1980.49s - 1983.49s |  If you use the diagnostic mode,
1983.49s - 1987.49s |  and you have to get a diagnostic tester to reverse-engineer that,
1987.49s - 1989.49s |  that really depends on the car, probably.
1989.49s - 1991.49s |  There are sometimes some very cheap ones,
1991.49s - 1996.49s |  and if you have to get a garage-level one, it's pretty expensive.
1996.49s - 2000.49s |  So, yeah, probably too much.
2000.49s - 2003.49s |  Okay, and then you can start reverse-engineering.
2003.49s - 2007.49s |  So, here you can see the UDS tester set-up, basically.
2007.49s - 2011.49s |  The actuator, we are looking at the steering wheel angle, as before.
2011.49s - 2016.49s |  Here we have a tablet with the diagnostic tool,
2016.49s - 2018.49s |  which reads out the steering angle.
2018.49s - 2022.49s |  And here we have my laptop, which runs CAN Sniffer,
2022.49s - 2024.49s |  which is a very convenient tool
2024.49s - 2027.49s |  to show you the differences in CAN messages.
2027.49s - 2032.49s |  And what we'll do next is turn the steering wheel
2032.49s - 2035.49s |  to see where the information is.
2035.49s - 2040.49s |  And, actually, I turn it one time completely to the left
2040.49s - 2043.49s |  and one time to the right to get the min and maximum value,
2043.49s - 2045.49s |  which is possible for the signal,
2045.49s - 2048.49s |  but you have seen where it is located.
2048.49s - 2051.49s |  And, yeah, sometimes you're lucky,
2051.49s - 2056.49s |  and you will find already complete CAN database files,
2056.49s - 2059.49s |  called DBC files, online for your car.
2059.49s - 2062.49s |  Then you can also try to get this information out of there
2062.49s - 2064.49s |  and use that.
2064.49s - 2067.49s |  But, otherwise, reverse-engineering of this data is quite good
2067.49s - 2071.49s |  because it's like you can easily turn the steering wheel
2071.49s - 2073.49s |  to see where the data is, right?
2073.49s - 2075.49s |  It's just if there are 3,000 messages,
2075.49s - 2079.49s |  it might take you some time to find the right one.
2079.49s - 2082.49s |  Then, for configuring it,
2082.49s - 2084.49s |  you basically add all this information,
2084.49s - 2086.49s |  the CAN ID, the position in the signal,
2086.49s - 2088.49s |  and the length of the data.
2088.49s - 2091.49s |  And then that's why we use Python for the configuration.
2091.49s - 2097.49s |  You can just use a function to specify the signal mapping.
2097.49s - 2103.49s |  In this case, we have the first byte turning to the left,
2103.49s - 2104.49s |  the second to the right,
2104.49s - 2106.49s |  and then we specify the min and max value
2106.49s - 2110.49s |  and map this to a range of minus 1.0 to 1.0.
2113.18s - 2114.18s |  All right.
2114.18s - 2119.18s |  That's what you need to configure it for your own car.
2119.18s - 2121.18s |  So, in conclusion of this talk,
2121.18s - 2126.18s |  if anybody asks you, especially our professor,
2126.18s - 2132.18s |  now you definitely know that V2G stands for Vehicle-to-Game.
2132.18s - 2134.18s |  Car hacking can be really fun,
2134.18s - 2137.18s |  and I think our project is a great entry point
2137.18s - 2138.18s |  if you want to get into that
2138.18s - 2143.18s |  or just want to be able to say
2143.18s - 2148.18s |  that you have a very expensive game controller at home.
2148.18s - 2150.18s |  Always be careful if you do that stuff.
2150.18s - 2153.18s |  Do not drive into walls.
2153.18s - 2156.18s |  We actually use it, as Janis said before,
2156.18s - 2158.18s |  as a demonstrator to motivate students,
2158.18s - 2159.18s |  to show it to visitors.
2159.18s - 2163.18s |  It's always a good icebreaker to get started
2163.18s - 2166.18s |  about talking about automotive security.
2166.18s - 2169.18s |  And so the only question that remains is
2169.18s - 2171.18s |  what you're going to use it for.
2171.18s - 2179.74s |  Yeah. Feel free to contact us.
2179.74s - 2182.74s |  Do any contributions to our project.
2182.74s - 2183.74s |  Write us an email.
2183.74s - 2185.74s |  Here you can see the QR code.
2185.74s - 2186.74s |  The Git repository is public,
2186.74s - 2192.74s |  so you can make an issue or do a pull request.
2192.74s - 2193.74s |  Feel free.
2193.74s - 2196.74s |  We're happy if we can keep in contact with you.
2196.74s - 2201.22s |  And I think we have eight minutes left for questions,
2201.22s - 2202.22s |  if there are any.
2202.22s - 2206.22s |  Otherwise, we can also take further questions offstage.
2206.22s - 2214.06s |  Have you thought about playing with heads-up display?
2214.06s - 2216.06s |  You know, you can get these things now.
2216.06s - 2217.06s |  You just put it on the dash,
2217.06s - 2223.06s |  and it'll actually just reflect your iPad
2223.06s - 2225.06s |  or anything up onto the windscreen,
2225.06s - 2229.06s |  and it looks like a heads-up display kind of a thing.
2229.06s - 2230.06s |  Have you thought about that,
2230.06s - 2235.06s |  just for a way to project onto the screen?
2236.06s - 2239.06s |  Um, so...
2239.06s - 2240.06s |  Oh, yeah, so the question was
2240.06s - 2244.06s |  if we have thought about, like, projecting the game,
2244.06s - 2247.06s |  basically, onto the screen of the car.
2247.06s - 2249.06s |  So we've thought about that.
2249.06s - 2250.06s |  We haven't done it.
2250.06s - 2252.06s |  We also thought about because the ID3
2252.06s - 2256.06s |  actually has a heads-up display.
2256.06s - 2260.06s |  Yeah, so I think there are adapters
2260.06s - 2262.06s |  to the protocol they use there,
2262.06s - 2265.06s |  and then you can use it as an HDMI interface,
2265.06s - 2267.06s |  basically, if you plug in there.
2267.06s - 2270.06s |  So we have some plans maybe for the future,
2270.06s - 2273.06s |  but we actually haven't done that or tested it.
2273.06s - 2277.06s |  But, yeah, also just putting a projector
2277.06s - 2278.06s |  in the back of the car,
2278.06s - 2280.06s |  it's probably quite good, yeah.
2280.06s - 2282.06s |  It's not a security-related problem.
2282.06s - 2286.06s |  It's just throwing money on it by such a converter,
2286.06s - 2288.06s |  and then you can easily connect your laptop
2288.06s - 2290.06s |  with those internal screens of the car.
2290.06s - 2295.06s |  That's expensive but easily doable.
2295.06s - 2299.06s |  Um, yeah, but come up with your own setup.
2299.06s - 2303.06s |  I think there's a lot of possibility, right?
2303.06s - 2304.06s |  Yeah.
2304.06s - 2309.42s |  The question was how if we build up
2309.42s - 2311.42s |  a flight simulator out of this.
2311.42s - 2316.42s |  If you have a real airplane, maybe you can transfer this.
2316.42s - 2317.42s |  I don't know.
2317.42s - 2319.42s |  Maybe you can use also your car for this.
2319.42s - 2320.42s |  It should be possible.
2320.42s - 2323.42s |  It's just an Xbox controller.
2323.42s - 2327.42s |  You can map it to anything you want.
2327.42s - 2329.42s |  Okay, any further questions?
2329.42s - 2330.42s |  No?
2330.42s - 2331.42s |  No.
2331.42s - 2332.42s |  All right.
2332.42s - 2333.42s |  Okay, thank you.
2333.42s - 2335.42s |  Thank you for listening, and have a nice day.
2335.42s - 2337.42s |  Enjoy the last day of DEF CON.