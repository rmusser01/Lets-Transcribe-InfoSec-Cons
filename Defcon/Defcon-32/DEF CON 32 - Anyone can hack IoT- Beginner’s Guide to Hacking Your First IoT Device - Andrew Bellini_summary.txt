**Introduction to IoT Hacking**

- **Andrew Bellini**: Presenter and IoT security expert
- **Misconceptions about IoT hacking**: 
  - Belief that **IoT** is complicated and requires expensive tools
  - Reality: Affordable and accessible to beginners

**IoT Device Landscape**

- **Prevalence of IoT devices**: 
  - Over **15 billion** devices globally
  - Expected growth due to **AI** and **machine learning**
- **Security concerns**: 
  - Common vulnerabilities in IoT devices
  - Cyber criminals exploit these for botnets and initial access

**Barriers to Entry in IoT Hacking**

- **Cost misconceptions**: 
  - Assumption of needing expensive gear
  - Reality: Affordable training and equipment available
- **Complexity misconceptions**: 
  - Assumption of needing engineering knowledge
  - Reality: Tools and resources available for beginners

**Getting Started with IoT Hacking**

- **Choosing a target device**: 
  - **Cheaper devices** often less secure
  - Suggested starting points: Cheap **routers** or **smart cameras**
- **Building an affordable toolkit**: 
  - Basic equipment like a **digital multimeter** and **USB to X adapter**
  - Avoid breaking the bank; focus on essential tools

**Ethical Considerations in IoT Hacking**

- **Ethical hacking principles**: 
  - Only test devices you are authorized to
  - Follow **responsible disclosure** for vulnerabilities

**Safety and Legal Considerations**

- **Hardware hacking safety**: 
  - Avoid working on high-voltage devices
  - Be cautious with large capacitors and modified power supplies

**Finding and Using Debug Ports**

- **Debug ports in IoT devices**: 
  - Commonly left open for testing
  - **UART** as a primary focus for beginners
- **Identifying UART ports**: 
  - Use a **multimeter** to detect voltage changes during boot up
  - Connect using a **UART to USB bridge adapter**

**Acquiring and Analyzing Firmware**

- **What is firmware**: 
  - Software specific to the device's function
- **Methods to acquire firmware**: 
  - Download from vendor websites
  - Use **UART shell** to transfer files
  - Use a **flash programmer** to read from SPI flash chips

**Reverse Engineering Firmware**

- **Unpacking firmware**: 
  - Use **Binwalk** to extract contents
  - Focus on the **root file system** for vulnerabilities
- **Analyzing binaries and libraries**: 
  - Start with custom binaries unique to the device
  - Use **Ghidra** for decompiling and analyzing code

**Identifying Vulnerabilities**

- **Common vulnerabilities**: 
  - **System calls** without input sanitization
  - Unsafe C functions like **memcpy** and **sprintf**
- **Methodology**: 
  - Interact with the device and trace actions to underlying code
  - Use logging information to identify potential vulnerabilities

**Conclusion**

- **Encouragement to start hacking IoT devices**: 
  - Practical advice for beginners
  - Invitation to connect and share experiences with Andrew Bellini