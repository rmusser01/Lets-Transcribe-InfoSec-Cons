{
  "webpage_url": "local:1731712867:83e3653f:DEF CON 32 - Adversary Village - Evading Modern Defenses When Phishing with Pixels - Melvin Langvik.mp4",
  "title": "DEF CON 32 - Adversary Village - Evading Modern Defenses When Phishing with Pixels - Melvin Langvik.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.02s - 2.62s | This text was transcribed using whisper model: large-v2

 All right, good morning, audience.
2.62s - 4.38s |  Welcome to the second day of DEF CON.
4.38s - 5.22s |  Proud to be here.
5.22s - 7.66s |  Hopefully everyone's had a great experience so far.
9.10s - 11.86s |  I wanna kick things off by introducing our next speaker.
11.86s - 13.50s |  He is coming all the way from Norway,
13.50s - 15.26s |  so he's had a very long flight,
15.26s - 17.54s |  so we definitely wanna give this guy a lot of attention.
17.54s - 19.22s |  His name is Melvin Langvik,
19.22s - 23.04s |  and I'll read just a quick breakdown of his bio.
23.04s - 24.86s |  Melvin is an accomplished professional
24.86s - 26.94s |  with a diverse background in tech.
26.94s - 28.70s |  He started his career as a developer,
28.70s - 31.30s |  an integration consultant, gaining practical experience
31.30s - 33.86s |  in distributing critical backend infrastructure
33.86s - 36.46s |  for an international customer base.
36.46s - 39.70s |  Melvin's passion for cybersecurity led him to transition
39.70s - 43.18s |  into offensive security, the bad team.
43.18s - 45.14s |  He previously worked for TrustedSec,
45.14s - 47.82s |  which is an internationally recognized security company.
47.82s - 50.66s |  As part of, as TrustedSec's targeted operations team,
50.66s - 53.62s |  Melvin was tasked with performing targeted cyber attacks
53.62s - 55.04s |  against some of the most mature
55.04s - 58.10s |  and often largest companies in the world.
58.10s - 61.62s |  Today, Melvin is with the offensive security team lead
61.62s - 63.86s |  at a company called Colbert AS.
63.86s - 66.78s |  So please give Melvin a very warm welcome
66.78s - 68.58s |  and listen to what he has to say.
69.54s - 70.38s |  Thank you, Melvin.
70.38s - 71.54s |  Thank you so much.
71.54s - 72.74s |  Thank you so much, guys.
72.74s - 74.74s |  Okay, so this talk is only 25 minutes,
74.74s - 76.34s |  so the first portion is gonna be super quick,
76.34s - 77.86s |  and then towards the end, we'll slow down,
77.86s - 79.58s |  and I'll give you guys a nice demo, okay?
79.58s - 82.58s |  So evading modern fences versus phishing with pixels,
82.58s - 85.90s |  we're gonna talk about QR code phishing specifically.
85.90s - 87.14s |  Quick introduction about myself,
87.18s - 89.66s |  even though my biography got read up here.
89.66s - 90.66s |  My name is Melvin Langvik.
90.66s - 92.34s |  I go by the alias Flangvik.
92.34s - 93.18s |  I'm the team lead
93.18s - 95.02s |  for a small Norwegian pentest company called Colbert.
95.02s - 97.06s |  Previously, I was at TrustedSec.
97.06s - 99.12s |  I've done quite a few offensive security tools
99.12s - 99.96s |  for the community.
99.96s - 101.26s |  Maybe somebody recognizes Sharp Collection
101.26s - 102.58s |  or Team Filtration.
102.58s - 105.06s |  I also create trash, semi-good-ish,
105.06s - 106.86s |  infosec content on YouTube and Twitch.
106.86s - 109.18s |  Stream, I don't wanna go on a stream every Sunday,
109.18s - 111.18s |  but close to every Sunday, I do a stream.
112.78s - 114.54s |  Like you guys, I'm a part-time alcoholic
114.54s - 115.94s |  when I'm at conferences,
115.94s - 117.50s |  and I'm also the guy who did
117.50s - 120.62s |  the meme-y C2 and EDR tier lists.
120.62s - 123.30s |  Obviously, AnyDesk is the best C2 out there, right?
123.30s - 125.02s |  So this is all a meme.
125.02s - 126.82s |  Okay, so the game plan for this talk.
126.82s - 128.46s |  We're gonna talk about QR codes one-on-one.
128.46s - 130.22s |  We're gonna talk about phishing with QR codes,
130.22s - 131.90s |  some basic detection engineering,
131.90s - 134.22s |  obviously not my field, but just some basic stuff,
134.22s - 136.34s |  image-less QR codes, question mark,
136.34s - 139.20s |  potential profit, taking things a step further,
139.20s - 141.02s |  and then we're gonna talk about the tool and toolkit
141.02s - 143.10s |  I'm gonna be demoing and sort of releasing today
143.10s - 144.50s |  called Crucible.
144.50s - 146.66s |  Okay, so let's talk about some QR codes.
146.66s - 147.62s |  What is a QR code?
147.62s - 149.38s |  QR code is a quick response code.
149.38s - 150.46s |  It's essentially a bar code
150.46s - 152.62s |  that contains a given amount of data.
153.50s - 155.82s |  A QR code works while you scan it using a device.
155.82s - 157.06s |  Typically, it's a mobile, right?
157.06s - 158.18s |  That scans the QR code,
158.18s - 160.14s |  takes you to a link or some other data.
162.20s - 164.62s |  The QR code itself has a couple of key factors.
164.62s - 167.30s |  Finder patterns marked down here in purple
167.30s - 169.18s |  is for the device you're scanning the QR code
169.18s - 170.94s |  to identify where the QR code is,
170.94s - 172.86s |  whereas is this a QR code or not?
172.86s - 174.46s |  You got the alignment marker in green,
174.98s - 177.82s |  sort of telling the device the position of the QR code
177.82s - 179.62s |  so it knows which way to read it,
179.62s - 181.30s |  and then you got the actual data modules,
181.30s - 183.06s |  which is the black and white data
183.06s - 186.98s |  between the alignment and finder markers,
186.98s - 189.30s |  and then you have also error correction.
189.30s - 190.58s |  I didn't know this before doing the talk,
190.58s - 194.98s |  but QR codes can actually have error correction up to 30%,
194.98s - 197.62s |  so if up to 30% of the QR code is missing,
197.62s - 200.22s |  it's still readable depending on how it's generated.
201.14s - 204.42s |  Different versions of QR codes refer to different size,
204.42s - 206.66s |  how many modules are there in.
206.66s - 210.42s |  Think like the smallest one, I believe it's like a 21 by 21,
210.42s - 214.38s |  then you can go all up to like 172, I think, 171,
214.38s - 216.22s |  and that will actually give you 40,
216.22s - 218.78s |  a bit over 4,000 alphanumerical characters,
218.78s - 221.82s |  so a QR code can be huge and can contain a lot of data.
221.82s - 223.86s |  Typical use cases for us, it's much smaller
223.86s - 227.46s |  and does contain like a series of numbers
227.46s - 229.90s |  or a URL or something like that.
230.58s - 232.66s |  QR codes has a lot of legitimate use cases.
232.66s - 234.82s |  If you ever charge your electric vehicle,
234.82s - 237.26s |  if you ever booked like an e-bike or like a scooter,
237.26s - 239.78s |  if you ever ordered at a restaurant during COVID,
239.78s - 240.74s |  they use QR codes.
240.74s - 242.22s |  You scan them, you get to a webpage,
242.22s - 243.66s |  and then you give them all your data
243.66s - 245.06s |  and you get some food, right?
245.06s - 246.98s |  So they have a ton of legitimate use cases
246.98s - 249.22s |  and they're great, we use them all the time.
250.10s - 253.74s |  The thing is that attackers also likes to use QR codes.
253.74s - 256.38s |  I'm actually super proud of this meme,
256.38s - 259.26s |  and why do attackers use QR codes?
259.26s - 261.22s |  They're simple to create and easy to share.
261.22s - 262.46s |  There's a bunch of online tools,
262.46s - 264.34s |  there's libraries to use in scripting languages,
264.34s - 266.66s |  there's pre-built offline tools, right?
266.66s - 269.94s |  Easy to create, easy to share, and therefore easy to abuse.
269.94s - 271.86s |  Again, everybody knows what a QR code is.
271.86s - 274.58s |  Even non-technical people working in large organizations
274.58s - 276.78s |  have some sort of reference to QR codes, right?
276.78s - 278.38s |  So it's definitely like a legitimate,
278.38s - 281.06s |  looks like a legitimate delivery method.
281.06s - 282.62s |  Sometimes we'll talk more about this,
282.62s - 285.38s |  but typically it's easy to evade initial email filters
285.38s - 287.58s |  and some sandbox solutions by delivering URLs
287.58s - 289.42s |  or data in QR codes.
289.42s - 292.70s |  And actually, I think they convey a sense of legitimacy.
292.70s - 295.38s |  I asked a bunch of my friends who's not technical,
295.38s - 297.70s |  can anybody create a QR code?
297.70s - 299.26s |  And a lot of them thought no.
299.26s - 300.10s |  A lot of them thought
300.10s - 302.26s |  that you had to be some sort of legitimate entity,
302.26s - 303.54s |  that you had to be an organization
303.54s - 306.42s |  or get a license or whatever to create your QR code,
306.42s - 307.98s |  which is obviously wrong, right?
307.98s - 310.66s |  So I think that is underlying of why a lot of people
310.66s - 312.46s |  feel QR code are very legitimate.
314.02s - 315.42s |  And also the best thing about phishing,
315.42s - 316.62s |  specifically with QR codes,
316.62s - 318.42s |  is that you move the initial access
318.42s - 320.66s |  or whatever you are giving to the victim
320.66s - 321.90s |  off the main device.
321.90s - 324.46s |  A lot of large corporate networks or large companies
324.46s - 326.66s |  will have heavily protected machines,
326.66s - 328.74s |  but the mobile devices are either private,
328.74s - 330.62s |  owned by the employee themselves,
330.62s - 332.82s |  or maybe not as heavily enrolled
332.82s - 334.94s |  or doesn't have the same defensive capabilities
334.94s - 337.70s |  as the machine itself.
337.70s - 339.74s |  Meaning that a potential defense, a SOC,
339.74s - 341.82s |  wouldn't gain the same telemetry from that phone
341.82s - 343.06s |  as they would from the device.
343.06s - 343.90s |  I think this is true
343.90s - 345.82s |  for many, many organizations out there.
347.06s - 349.46s |  Okay, so obviously phishing with QR codes.
349.46s - 351.78s |  I think everybody's seen a couple of these examples.
351.78s - 353.78s |  I think the Microsoft multi-factor authentication one
353.78s - 355.26s |  is by far the most abused, right?
355.26s - 357.14s |  Because it's based on the legitimate use case
357.14s - 358.74s |  where you set up a Microsoft account,
358.74s - 361.38s |  you have to scan the QR code to set up your multi-factor app
361.38s - 363.42s |  and therefore, you know, you have to re-authenticate
363.42s - 366.26s |  or whatever the context is a couple of times a year
366.26s - 368.02s |  and that really makes a good phishing campaign.
368.02s - 369.66s |  DocuSign is also heavily abused.
369.66s - 371.18s |  Anything related to Microsoft, really.
371.18s - 374.50s |  People love throwing Microsoft logos around, right?
374.50s - 376.46s |  So how we did a bit of detection engineering.
377.30s - 378.34s |  How do we detect QR codes?
378.34s - 380.98s |  I Googled this, which means I did great research
380.98s - 382.50s |  on the subject, right?
382.50s - 384.74s |  Found this blog post by Liam Jones
384.74s - 386.18s |  who created a basic detection rule
386.18s - 389.66s |  for basically pulling out image attachments from emails.
389.66s - 392.38s |  He then had some automation for parsing the images
392.38s - 394.26s |  and looking for QR codes.
394.26s - 397.18s |  Essentially attempting to parse every image as a QR code
397.18s - 398.46s |  and then look at the data, right?
398.46s - 400.14s |  That's the manual way to do it.
400.14s - 401.74s |  There's a couple of flaws in this rule.
401.74s - 402.58s |  You can probably spot it.
402.58s - 404.50s |  You know, there's a bunch of more image extensions
404.54s - 406.82s |  than PNG, JPEG and SVG,
406.82s - 408.50s |  but yeah, that's just an example, right?
408.50s - 409.90s |  And then you have black box solutions
409.90s - 412.10s |  which we don't know how to work like Microsoft Sentinel.
412.10s - 414.54s |  If you give Microsoft some of your hard earned money
414.54s - 416.54s |  and get like an E5 or E3 or whatever
416.54s - 418.94s |  their licensing model is at the time,
418.94s - 421.02s |  you'll get this, which is Microsoft Sentinel.
421.02s - 423.66s |  It will overwatch all your emails,
423.66s - 425.42s |  inbound, outbound from the organization
425.42s - 426.70s |  and it will actually tell you
426.70s - 428.54s |  if you got a URL from a QR code.
428.54s - 431.42s |  You see it will tag it as the source of this data.
431.42s - 433.90s |  It's from a QR code and it will give it the URL.
433.90s - 435.58s |  And it will automatically browse through it.
435.58s - 436.46s |  It will take a look at it
436.46s - 438.70s |  and try to determine if it's nasty or not, right?
438.70s - 440.38s |  So the detection solutions,
440.38s - 441.50s |  defensive solutions out there
441.50s - 443.34s |  are definitely aware of QR code phishing
443.34s - 444.50s |  and it's an established thing.
444.50s - 446.74s |  We'll get back to this later.
446.74s - 449.18s |  Okay, how about image-less delivery methods, right?
449.18s - 450.78s |  I think when I say that,
450.78s - 452.30s |  most of you are immediately gonna think
452.30s - 453.50s |  about the ASCII art method
453.50s - 454.54s |  because it's a known method
454.54s - 457.22s |  where you basically use different weird ASCII characters
457.22s - 458.78s |  to represent the QR code.
458.78s - 460.74s |  And the reason I say that this is a known method
460.74s - 462.94s |  because, you know, our well-known influencer,
462.94s - 465.02s |  John Hammond, made a video about this four months ago
465.02s - 467.46s |  and at least 2 million people know about this now.
467.46s - 468.86s |  So it's definitely known.
468.86s - 470.58s |  Obviously not to throw him under the bus.
470.58s - 471.42s |  It's great.
471.42s - 473.22s |  Just wanna say it's an established thing.
473.22s - 475.10s |  And so when we wanna phish,
475.10s - 477.22s |  if I wanted to phish without the use of images
477.22s - 479.46s |  to avoid this detection that I just talked about,
479.46s - 482.18s |  what could I possibly use for this?
482.18s - 484.70s |  Well, I found this example in CSS.
484.70s - 487.06s |  So there's a great guy called Jason Adelia
487.06s - 488.54s |  or whatever I butcher his name.
488.54s - 490.94s |  He has, he's a web developer or a web designer
490.94s - 494.42s |  and he has this code pen link out on Google somewhere
494.42s - 497.10s |  where he showcases his QR code to his website
497.10s - 498.50s |  created with CSS.
498.50s - 500.98s |  So he's actually using a blank white canvas
500.98s - 504.30s |  and then using box shadows to fill in the black and white
504.30s - 505.70s |  for the entire grid array
505.70s - 507.94s |  and it turns into this beautiful QR code.
507.94s - 509.34s |  Now, this looks interesting.
509.34s - 510.66s |  This doesn't look like shit, right?
510.66s - 512.30s |  So we could potentially use this.
512.30s - 514.30s |  So me and chat TPT sat down one out
514.30s - 516.42s |  and we looked at some Python code
516.42s - 518.66s |  and I came up with this dirty piece of crap.
518.66s - 520.30s |  Basically creates a QR code,
520.30s - 522.50s |  goes through every cell in the QR code,
522.50s - 524.30s |  determines if the QR code is,
524.30s - 526.22s |  or that pixel or cell is black
526.22s - 528.42s |  and then fills in the box shadow, the CSS,
528.42s - 530.46s |  using his technique with that.
530.46s - 531.94s |  And then this looks really great.
531.94s - 534.22s |  Actually a bunch of email clients will happily render this.
534.22s - 537.14s |  Both Thunderbird and Apple Mail, the built-in Apple Mail
537.14s - 539.74s |  will render this as CSS and it scans, it looks great
539.74s - 540.86s |  and it's not an image.
540.86s - 543.90s |  So this will fly by basic detection for email fitters
543.90s - 544.90s |  because there's no image there.
544.90s - 546.94s |  So there's obviously no QR code there, right?
546.98s - 549.74s |  And of course you can see that the CSS is not offset
549.74s - 551.38s |  because centering things to CSS
551.38s - 552.86s |  is an absolute fucking nightmare.
552.86s - 555.14s |  So I didn't bother spending the needed two hours
555.14s - 556.02s |  to center this thing.
556.02s - 558.90s |  I just screenshots it, that's your issue now.
558.90s - 560.10s |  But it is what it is.
560.10s - 561.70s |  The sad thing about this though
561.70s - 565.58s |  is that Outlook doesn't support this in the desktop client.
565.58s - 568.70s |  The web version of Outlook will happily render CSS for you
568.70s - 570.34s |  but the, again, not centered,
570.34s - 573.66s |  but the desktop client will not render CSS.
573.66s - 575.38s |  This is because the Outlook desktop client
575.38s - 578.10s |  is extremely sassy and in general,
578.10s - 583.02s |  just is very picky about what HTML tags you can use,
583.02s - 584.38s |  what CSS you can use.
584.38s - 586.58s |  And you can't, if you ever made an email
586.58s - 587.82s |  in the Outlook desktop client,
587.82s - 588.86s |  you know what I'm talking about.
588.86s - 590.74s |  It's a nightmare, right?
590.74s - 591.58s |  So it doesn't work.
591.58s - 593.42s |  And it's kind of important because it turns out
593.42s - 595.18s |  at least based on one source
595.18s - 597.02s |  that the Outlook desktop client
597.02s - 600.62s |  owns about 58.1% of desktop machines.
600.62s - 601.70s |  So it's kind of important.
601.70s - 604.30s |  And when working as large organizations,
604.30s - 606.30s |  by far the experience I have
606.30s - 608.86s |  is that most people use the Outlook desktop client.
608.86s - 610.50s |  I think we can all agree on that, right?
610.50s - 611.66s |  That's a given.
612.82s - 614.26s |  Okay, so we gotta take a step back then.
614.26s - 615.66s |  CSS, sure, we can use that.
615.66s - 616.86s |  We already scripted that way
616.86s - 619.14s |  but we gotta find some other way.
619.14s - 622.30s |  What other structure could we possibly use
622.30s - 626.58s |  to create like a drawing almost of pixels?
626.58s - 628.46s |  Like what could we use, right?
628.46s - 632.18s |  So the answer to that, at least one, is tables.
632.18s - 635.54s |  So tables is something that Outlook desktop client supports.
635.54s - 638.54s |  When I say tables, I don't mean like Excel tables.
638.54s - 642.14s |  I mean like actual HTML tables and rows and columns.
642.14s - 643.62s |  And they support styling.
643.62s - 647.50s |  So you could take a table and you can style each column
647.50s - 650.02s |  in that either white color or black color
650.02s - 651.66s |  and you can create a QR code.
651.66s - 654.54s |  So again, me and Chad TPT sat down one night
654.54s - 655.82s |  and we created this.
655.82s - 658.14s |  So you set the cell spacing and the cell padding
658.14s - 660.26s |  to zero or a given size
660.26s - 662.18s |  for how big QR code you wanna make.
662.18s - 663.54s |  And then you basically start filling in,
663.54s - 666.34s |  okay, this pixel of this QR code is white.
666.34s - 668.98s |  Let's pad this or let's make the background color
668.98s - 670.82s |  of this cell white or black, right?
670.82s - 672.30s |  And then you go through the whole thing
672.30s - 677.06s |  and voila, you got a beautiful looking table in HTML
677.06s - 678.58s |  and you got a beautiful looking QR code
678.58s - 680.10s |  in Outlook desktop client, right?
680.10s - 680.98s |  And this looks good.
680.98s - 683.10s |  I actually think this deserves a round of applause
683.10s - 685.58s |  to be perfectly honest with you.
685.58s - 686.66s |  And this is really dumb.
686.66s - 688.58s |  This is KISS all the way, right?
688.58s - 690.02s |  It's super simple, super dumb.
690.78s - 691.62s |  And is it effective?
691.62s - 693.14s |  That's the big question, is this effective?
693.14s - 696.42s |  So I actually, you know, I reached into my paycheck
696.42s - 698.74s |  and I bought Microsoft Sentinel, XDR, EDR,
698.74s - 699.66s |  whatever they call it now.
699.66s - 701.34s |  They change them every week.
701.34s - 704.02s |  And I give them my money and I wanted to test it.
704.02s - 706.50s |  So first I set up on the two accounts.
706.50s - 707.70s |  I set up Microsoft Sentinel.
707.70s - 709.70s |  I started monitoring incoming email traffic.
709.70s - 713.10s |  And then I set out this QR code in a base 64,
713.10s - 715.46s |  as a base 64 image embedded in the email.
715.46s - 717.62s |  And obviously Microsoft Sentinel picked this right up.
717.62s - 719.06s |  It says, you know, this is a QR code.
719.06s - 720.06s |  This is the URL.
720.06s - 723.10s |  That's Rick Roll, if anybody recognized that.
723.10s - 725.50s |  Hacks, Elite Hacks are to you if you recognize that.
725.50s - 727.78s |  And then I tried sending a table
727.78s - 729.46s |  and long and behold, nothing happened.
729.46s - 731.46s |  So Microsoft Sentinel did not detect the table
731.46s - 733.78s |  as an image or as a QR code at all
733.78s - 734.82s |  and didn't parse it.
734.82s - 736.26s |  And therefore as a defender,
736.26s - 738.10s |  you don't have telemetry for this.
738.10s - 739.74s |  So if I send a bunch of phishing emails
739.74s - 741.38s |  with QR codes getting ready as tables,
741.38s - 742.70s |  the URL will not pop up.
742.70s - 743.70s |  Nobody will spam it.
743.70s - 746.02s |  No bot will hit it and it will reach a target
746.06s - 748.58s |  and it's still scannable by mobile devices.
748.58s - 750.74s |  So this works great.
750.74s - 752.18s |  Now this, I've already done this.
752.18s - 754.86s |  I talked about this at a conference a couple of months back.
754.86s - 757.38s |  This is built into the tool Crucible,
757.38s - 758.70s |  which I'll talk about later.
758.70s - 760.14s |  And you can find that on GitHub.
760.14s - 763.14s |  It works great and yeah, it's cool.
763.14s - 765.70s |  But let's think about it and take it a step further.
765.70s - 768.50s |  So we can generate QR codes in CSS, sick.
768.50s - 771.30s |  We can generate QR codes in tables, even sicker.
771.30s - 776.30s |  But what about obfuscating email content using tables?
776.34s - 777.30s |  Because think about it,
777.30s - 779.54s |  the table is essentially our drawing board.
779.54s - 781.10s |  We can draw whatever we want.
781.10s - 784.10s |  Each column in the table is a pixel for us, right?
784.10s - 786.54s |  So we could draw the entire email.
786.54s - 790.98s |  We could render HTML and draw the entire thing as a table.
790.98s - 793.10s |  So this is what we dive into.
793.10s - 795.54s |  And this was a bit of a nightmare to be perfectly honest.
795.54s - 796.82s |  This is the process.
796.82s - 799.82s |  So we need to, so the point, what I wanna do,
799.82s - 801.02s |  I guess I should go back on this.
801.74s - 803.38s |  Why would you wanna do this in the first place, right?
803.38s - 806.34s |  So more and more defensive solutions out there
806.34s - 809.42s |  are using AI to get the context of the email you're sending.
809.42s - 810.62s |  They're using risk scores.
810.62s - 813.22s |  They're using a context or AI to understand,
813.22s - 815.90s |  is this potentially a legitimate message
815.90s - 816.98s |  being delivered to my user?
816.98s - 818.50s |  And then based on the risk score, whatever,
818.50s - 821.58s |  it will be delivered, sandboxed, looked at, whatever, right?
821.58s - 823.30s |  So the thought behind this is that
823.30s - 826.38s |  if we can obfuscate keywords in the email,
826.38s - 829.50s |  like MFA, like QR, like reauthenticate,
829.50s - 830.98s |  like Microsoft, right?
830.98s - 832.94s |  It's gonna be much harder for the AI model
832.94s - 834.86s |  to determine the context of the email
834.86s - 836.62s |  and if it's legitimate or not.
836.62s - 838.30s |  So the whole point behind this is
838.30s - 841.46s |  I wanna take a keyword, say reauthenticate,
841.46s - 844.42s |  and I wanna render that as an image.
844.42s - 846.50s |  And then I wanna turn it into a table.
846.50s - 848.70s |  And then I wanna replace the keyword
848.70s - 851.10s |  in the email with that table.
851.10s - 852.58s |  So there's no text there.
852.58s - 855.70s |  It's a table representing the text.
855.70s - 856.54s |  So there's no text.
856.54s - 858.46s |  You can't select it, but it looks like a text.
858.46s - 861.26s |  The end user will think it's text, but it's not.
861.26s - 862.78s |  I went through this process.
862.78s - 865.38s |  So basically, you give the Python script,
865.38s - 867.86s |  the email, the HTML email that you wanna send,
867.86s - 868.70s |  and then you tell it,
868.70s - 871.50s |  hey, I wanna replace the keyword, reauthenticate.
871.50s - 873.34s |  The Python script will then render the,
873.34s - 876.46s |  no, the Python script will then inject a marker
876.46s - 878.70s |  in that, to handle that word.
878.70s - 881.94s |  So it will inject like a box around the word in HTML,
881.94s - 884.14s |  and then it will render the entire email,
884.14s - 886.38s |  and then they will use image recognition
886.42s - 888.74s |  to cut out that box.
888.74s - 890.14s |  And then it will remove the borders
890.14s - 891.66s |  and turn it into a table.
892.66s - 894.34s |  And this is dumb and complicated,
894.34s - 895.94s |  and you would never think this would work,
895.94s - 897.14s |  but it actually works.
897.14s - 900.10s |  So I'm gonna demo that right now so you can see that.
900.10s - 904.22s |  Hopefully, you can see my terminal now.
904.22s - 905.54s |  Can you see a terminal?
905.54s - 906.38s |  Great.
906.38s - 908.90s |  I'll try to clear this
908.90s - 910.86s |  and make it a bit bigger for you guys.
912.14s - 913.62s |  Like, ooh.
913.62s - 914.46s |  Okay.
914.46s - 915.62s |  So this is Crucible.
915.62s - 917.30s |  This is the help menu.
917.30s - 919.66s |  You give it a URL that you want the QR code data,
919.66s - 921.46s |  the data you want inside the QR code.
921.46s - 923.78s |  Doesn't have to be URL, but typically it's URL.
923.78s - 925.54s |  You wanna set a QR code size.
925.54s - 926.82s |  You give it an input.
926.82s - 928.14s |  So you give it like a typically,
928.14s - 930.70s |  like a phishing email template in HTML.
930.70s - 934.70s |  And then wherever the word QR underscore placeholder is
934.70s - 937.98s |  will be replaced with the QR code table or CSS.
937.98s - 939.10s |  And then you give it an output path
939.10s - 940.98s |  if you don't want a random generated name.
940.98s - 942.58s |  You can choose if you want the CSS method
942.58s - 943.50s |  or the tables method,
943.50s - 945.90s |  and you can also generate output in straight EML,
945.90s - 947.02s |  which is an email format.
947.02s - 948.82s |  So you can just open it in Outlook afterwards,
948.82s - 950.02s |  which is super nice.
950.02s - 951.98s |  And then you have the obfuscate method.
951.98s - 954.50s |  So that's what I'll be demonstrating now.
954.50s - 955.62s |  So in this command here,
955.62s - 957.94s |  I'll be linking to Defcon.org.
957.94s - 960.42s |  I'm using my MFA or QR code template,
960.42s - 963.14s |  and then I'm obfuscating the keywords MFA, QR,
963.14s - 964.18s |  and Microsoft.
964.18s - 967.82s |  So those words will be pulled out of the email template
967.82s - 971.14s |  and replaced with images illustrated as tables
971.14s - 974.05s |  in the new output.
974.09s - 977.33s |  So it worked, hopefully.
977.33s - 980.90s |  I have a backup if it doesn't.
980.90s - 982.46s |  Open Sesame.
983.70s - 984.98s |  Placeholder, I think, no.
986.42s - 987.62s |  Output, okay.
987.62s - 988.74s |  Hopefully this worked.
990.30s - 991.14s |  Yeah.
992.34s - 994.10s |  So this is a table QR code,
994.10s - 996.58s |  and this is the, fuck, it broke.
996.58s - 997.94s |  Okay.
997.94s - 998.78s |  It broke.
998.78s - 999.62s |  Give me a second here.
999.62s - 1003.09s |  I'll go back to the demo.
1003.09s - 1004.65s |  So it looks like this,
1004.65s - 1006.49s |  if the demo worked correctly.
1006.49s - 1007.81s |  And then this is the output.
1007.81s - 1010.17s |  So this is the generated email.
1010.17s - 1013.81s |  Can you spot the text that is tables?
1013.81s - 1014.65s |  There is text.
1014.65s - 1017.41s |  There are keywords in this email that is not text.
1018.29s - 1019.13s |  Give you guys a second.
1019.13s - 1021.01s |  Some of it is obvious.
1021.01s - 1022.01s |  Some of it is not.
1023.05s - 1026.01s |  And all of this is not text.
1026.01s - 1030.17s |  This is tiny tables inserted into the email template,
1030.17s - 1032.61s |  resulting in it looking like text,
1032.61s - 1036.42s |  but it not being text.
1036.42s - 1037.26s |  Round of applause.
1037.26s - 1043.79s |  Cue that.
1044.67s - 1045.51s |  And again, this works
1045.51s - 1047.35s |  when you're not demoing it live at DefCon.
1048.27s - 1050.47s |  And that's basically all I got.
1050.47s - 1052.63s |  Thank you so much, Adversary Village, for having me.
1052.63s - 1054.15s |  I got stickers for the project.
1054.15s - 1056.87s |  Scan this QR code, if you trust me, to get to the project.
1056.87s - 1058.47s |  And yeah, go out there and fish somebody
1058.47s - 1062.43s |  and improve our defenses by some degree.
1062.43s - 1063.99s |  Thank you so much for me, guys.