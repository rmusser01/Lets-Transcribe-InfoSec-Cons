{
  "webpage_url": "local:1732053311:6a906bc4:DEF CON 32 - IoT Village - Finding 0days in Vilo Home Routers - Justin Mott  Ava Petersen.mp4",
  "title": "DEF CON 32 - IoT Village - Finding 0days in Vilo Home Routers - Justin Mott  Ava Petersen.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 4.06s | This text was transcribed using whisper model: large-v2

 Good afternoon, ladies, gentlemen, and hackers all around.
4.06s - 7.10s |  We are very, very excited to be here with you today.
7.10s - 10.46s |  We're excited to share what we've done this year.
10.46s - 12.80s |  The light's a little bright, so I can't see you,
12.80s - 14.56s |  but I'm trusting that there's people out there.
14.56s - 19.96s |  So, as always, keep your hands and feet inside of the vehicles
19.96s - 22.30s |  at all times, and enjoy the ride.
22.30s - 25.20s |  We're excited.
25.20s - 28.66s |  Okay, so this is what we're going to go over today.
28.72s - 32.00s |  What I really want to point out is the link at the bottom.
32.00s - 35.16s |  It is a GitHub link if you would like to follow along,
35.16s - 38.06s |  see more details, actual code,
38.06s - 40.26s |  and the firmware of what we've gone through.
40.26s - 42.76s |  You can go ahead. We published it about 30 minutes ago,
42.76s - 44.70s |  so you can go in and follow through.
44.70s - 46.76s |  Or if you would just like to listen to the talk,
46.76s - 49.12s |  follow along, and then maybe view it at the end,
49.12s - 52.56s |  there is a QR code that we have that you can scan.
52.56s - 54.66s |  I promise you it's not a rick roll.
54.66s - 58.84s |  It'll just give you this GitHub link.
58.84s - 60.88s |  Okay, first we'll do some introductions.
60.88s - 62.64s |  My name is Justin Applegate.
62.64s - 66.84s |  I am a rising graduate student at Brigham Young University.
66.84s - 68.10s |  I am an avid CTF-er.
68.10s - 72.48s |  I play for Project Sec-Eye and the U.S. Cyber Team.
72.48s - 73.64s |  I am Ava Peterson.
73.64s - 76.04s |  I'm also an undergraduate student at BYU,
76.04s - 79.00s |  and I go by the handle DeltaBlueJ.
79.00s - 80.58s |  And I am Justin Mott.
80.58s - 83.10s |  I am also a graduate student at BYU,
83.10s - 85.54s |  and I go by the handle CastorBurris.
85.54s - 87.38s |  Thank you. Yes, I go by LegoClones.
88.12s - 89.28s |  If you see me around.
89.28s - 91.64s |  The last member of our team for this project,
91.64s - 93.08s |  his name is Wyatt Pangirl.
93.08s - 95.28s |  He goes by SpoutingWhale.
95.28s - 96.98s |  He just graduated from BYU.
96.98s - 99.04s |  He was not able to make it today,
99.04s - 103.80s |  but he was an invaluable member of our team.
103.80s - 106.38s |  So let's just go over the project real quick.
106.38s - 109.74s |  But first I want to present to you the router graveyard.
109.74s - 111.80s |  We managed to break not one, but two,
111.80s - 115.34s |  but three routers along the way of this journey.
115.34s - 117.68s |  We really wanted to apply some CTF skills
117.68s - 119.44s |  to a real-life situation.
119.44s - 122.94s |  So we picked a router, a device,
122.94s - 125.08s |  and tried to hike into it.
125.08s - 126.14s |  So we formed our team.
126.14s - 129.74s |  We picked a timeline of about a semester-long project
129.74s - 132.38s |  and saw what we could get from there.
132.38s - 134.98s |  So the device we picked was this Vilo router,
134.98s - 140.24s |  home mesh Wi-Fi device.
140.24s - 142.20s |  So as any vulnerability researcher
142.20s - 143.76s |  or security researcher does,
143.76s - 146.50s |  when you first start against a new target,
146.50s - 148.00s |  you want to do reconnaissance.
148.00s - 148.84s |  You want to OSINT.
148.84s - 151.24s |  You want to figure out what has been done before
151.24s - 153.50s |  so I don't have to reinvent the wheel.
153.50s - 157.24s |  So this is some of the results of what we went through.
157.24s - 160.28s |  Vilo Living is the company that produced the routers
160.28s - 161.10s |  that we went after.
161.10s - 164.34s |  They were a startup founded in 2021.
164.34s - 166.48s |  So they're pretty new, pretty recent,
166.48s - 169.24s |  and they only have two products as of today.
169.24s - 170.60s |  They are both mesh routers,
170.60s - 173.40s |  one supports Wi-Fi 5, the other Wi-Fi 6.
173.40s - 175.78s |  We searched for CVEs that have been released,
175.78s - 178.48s |  any sort of technical deep dive or breakdown,
178.48s - 180.34s |  or even a consumer review
180.34s - 182.52s |  that might go into some of the features a little bit,
182.52s - 184.04s |  and we didn't find anything.
184.04s - 186.98s |  So between the fact that it's a new company,
186.98s - 188.28s |  the fact that we didn't see anything,
188.28s - 191.24s |  any other research that had been done before,
191.24s - 192.38s |  and it was pretty cheap,
192.38s - 193.64s |  it was one of the cheapest routers
193.64s - 195.14s |  that we could find on Amazon,
195.14s - 196.68s |  we were thinking, all right,
196.68s - 198.42s |  this is perfect for some college students
198.42s - 201.82s |  to get our feet wet, get involved, find some CVEs,
201.82s - 204.24s |  just get used to the router hacking scene.
204.24s - 206.74s |  A couple of notes, I know a lot of routers,
206.74s - 208.30s |  especially the older ones,
208.30s - 211.84s |  are administered through a web interface.
211.84s - 213.98s |  You connect to the LAN or to the WAN,
213.98s - 217.70s |  you type in 192.168.1.1 in your browser,
217.70s - 219.54s |  it pops up, that's how you set it up.
219.54s - 222.08s |  This was not the case with us and with this router.
222.08s - 224.70s |  It was all managed through an app on your phone,
224.70s - 226.38s |  kind of a new age thing.
226.38s - 228.78s |  They said they have a bug bounty program.
228.78s - 230.24s |  When we did some research,
230.24s - 232.04s |  in order to access the bug bounty program,
232.04s - 233.30s |  you had to sign an NDA
233.30s - 235.44s |  and be a part of their beta testing group.
236.24s - 239.14s |  Which we didn't know what the NDA looked like,
239.14s - 240.14s |  so we reached out and said,
240.14s - 242.48s |  hey, we want to join the beta testing group,
242.48s - 243.44s |  can you send us the NDA?
243.44s - 244.74s |  And they just never got back to us.
244.74s - 245.94s |  So we were like, well,
245.94s - 247.30s |  I guess we'll just risk it for the biscuit,
247.30s - 249.54s |  go for it anyway, see what we find.
249.54s - 252.54s |  And last thing, the firmware was not released by the vendor.
252.54s - 254.04s |  It's not something that we could just download
254.04s - 254.88s |  and go through.
254.88s - 257.60s |  We had to go ahead and recover that ourselves.
257.60s - 262.20s |  This led to the three main goals for us today.
262.20s - 263.90s |  First was to acquire the firmware,
263.96s - 267.34s |  that way it's a white box test and not a black box test.
267.34s - 268.46s |  You can see the code.
268.46s - 269.56s |  It makes it a lot easier
269.56s - 272.30s |  to actually turn memory corruption vulnerabilities
272.30s - 273.60s |  into exploits.
273.60s - 275.34s |  Then we wanted to pop a shell,
275.34s - 277.00s |  actually get a shell on the device
277.00s - 279.10s |  that makes debugging and extracting
279.10s - 282.14s |  the latest version of the firmware much easier.
282.14s - 286.04s |  And our third goal was to find as many pre-authentication
286.04s - 289.00s |  remote code execution vulnerabilities as we could.
289.00s - 290.40s |  That's kind of the holy grail.
290.40s - 293.04s |  Anyone that does not have administrator access
293.04s - 295.30s |  to this router that can run whatever code
295.30s - 296.54s |  that they want on it.
296.54s - 299.98s |  So those were the goals that we had when we approached it.
299.98s - 301.58s |  So obviously the next step
301.58s - 304.90s |  was to start enumerating our attack surface.
304.90s - 308.04s |  So we went and disassembled the router
308.04s - 310.04s |  and this is what we ended up with.
310.04s - 311.78s |  And we found some UART pins.
311.78s - 313.40s |  So we tried to solder to them
313.40s - 316.94s |  and that was the death of router number one.
316.94s - 320.54s |  You may be gone, but it will live forever on in our hearts.
323.04s - 324.74s |  The second router had better pins
324.74s - 325.90s |  that were easy to solder to.
325.90s - 330.90s |  So then we hooked it up, got a Linux log on screen.
331.64s - 333.18s |  The problem is we didn't know the password
333.18s - 334.98s |  and it wasn't an easy one.
334.98s - 338.44s |  And the UART interface died after 30 seconds after boot.
338.44s - 340.94s |  And it was really hard to even try to put in a password
340.94s - 343.60s |  because it printed out how much time you had left
343.60s - 344.58s |  every second.
345.94s - 350.04s |  As a result, there was no free shell from this interface.
350.04s - 350.94s |  So we moved on.
351.94s - 354.14s |  We went to go and look at the vital app.
354.14s - 357.24s |  We pulled the APK from Google Play.
358.30s - 360.34s |  And apparently the other members of our team
360.34s - 362.60s |  think that mobile rev sucks.
362.60s - 364.10s |  I thought it was a great time.
365.78s - 367.74s |  We found some Firebase info,
368.68s - 371.20s |  various cloud service stuff on the app.
371.20s - 373.14s |  But the biggest important thing that we found
373.14s - 378.14s |  was a custom service running on TCP port 5432.
378.70s - 382.28s |  This was used for app to router interactions
382.28s - 387.00s |  when the router had not yet gotten internet access.
387.00s - 388.94s |  This was used to do all that setup.
388.94s - 389.78s |  It would spin this up.
389.78s - 391.24s |  They would talk to each other over this.
391.24s - 393.70s |  They had a custom protocol that we reverse engineered
393.70s - 395.54s |  to learn how that was working.
397.30s - 398.38s |  Go on, next slide.
400.04s - 401.48s |  So this is kind of the overview.
401.48s - 404.24s |  It had a 15 byte header and a payload.
404.94s - 409.18s |  The header had all the fields that you see there.
409.18s - 411.98s |  Not all opcodes had payloads, but many did.
411.98s - 414.58s |  And they were usually encrypted using this weird
414.58s - 419.58s |  XXT plus custom obfuscation layer, random things.
420.60s - 423.48s |  Basically the app had a hard-coded key that obfuscated
423.48s - 424.78s |  and then sent to the router
424.78s - 427.14s |  and the router encrypted a new key and sent it back.
427.14s - 428.74s |  But it was all reversible.
428.74s - 431.68s |  And so we were able to go from the hard-coded key
431.68s - 434.48s |  and generate our own ones to be able to talk to it,
435.48s - 438.38s |  which made it really easy to start,
438.38s - 441.22s |  once we were able to get the source for it,
441.22s - 443.42s |  start sending messages back and forth
443.42s - 450.31s |  and exploit some of the things we found.
450.71s - 454.63s |  So then we still needed to get the firmware off of it.
454.63s - 456.51s |  We saw that there was a flash memory chip
456.51s - 458.61s |  of the model on the slide.
459.57s - 461.53s |  We tried some software utilities
461.53s - 463.11s |  and they only gave us bad data.
463.55s - 466.17s |  Then we got this Salie logic analyzer
466.17s - 468.27s |  and then it just worked.
468.27s - 469.25s |  We just hooked it up.
469.25s - 470.95s |  We fired up their software.
470.95s - 472.51s |  We turned the router on.
472.51s - 475.95s |  We got all of the SPI data straight to their software.
475.95s - 477.31s |  And then we could just decode it.
477.31s - 480.01s |  And there was the binary and we extracted the firmware.
480.01s - 482.01s |  And then we had everything that was on the router,
482.01s - 482.97s |  just like that.
482.97s - 486.15s |  We spent about a month getting to this point,
486.15s - 487.55s |  trying all sorts of different stuff.
487.55s - 490.07s |  And literally it took us about two hours
490.07s - 491.47s |  and then we had everything on it
491.47s - 495.41s |  the moment we plugged this in.
495.41s - 499.77s |  So this is just a look at what that SPI data looked like
499.77s - 501.23s |  in the software.
501.23s - 503.71s |  It was super easy once we had it.
503.71s - 506.87s |  We have a more technical deep dive on exactly what that is
506.87s - 510.67s |  and the Python scripts we use to translate this
510.67s - 512.97s |  into the binary on the GitHub.
512.97s - 514.83s |  Yep, so check out the GitHub if you wanna see more
514.83s - 516.61s |  about how that's done.
516.61s - 518.71s |  At this point, we had the firmware,
518.71s - 520.97s |  we had accomplished goal number one.
520.97s - 523.17s |  Now we wanted to look for vulnerabilities
523.17s - 524.57s |  and establish a shell.
524.57s - 526.77s |  So before you start looking for vulnerabilities,
526.77s - 529.07s |  it's usually a good idea to figure out
529.07s - 532.77s |  how to emulate the firmware on your own machine.
532.77s - 535.61s |  This specific device had a 32-bit
535.61s - 538.27s |  little endian MIPS processor.
538.27s - 541.93s |  So that's what all the binaries were compiled to be using.
541.93s - 544.77s |  Most of us have x86 or even ARM machines.
544.77s - 546.87s |  And so that's not something that we can run natively.
546.87s - 550.07s |  So we decided to use QEMU, which was statically compiled
550.07s - 554.17s |  along with chroot and some precise GDB breakpoints
554.17s - 556.47s |  that we had figured out after some reverse engineering
556.47s - 559.57s |  in Ghidra in order to actually emulate the firmware
559.57s - 561.67s |  and get it running on one of our machines.
561.67s - 563.41s |  This makes it significantly easier
563.41s - 567.31s |  to fuzz for vulnerabilities, to test things out,
567.31s - 570.87s |  to create exploits once you find a vulnerability.
570.87s - 572.77s |  In addition, we wanted the ability
572.77s - 575.37s |  to compile our own executables
575.37s - 577.77s |  that we can place on the device and run them
577.77s - 579.73s |  because a lot of these embedded devices
579.73s - 581.29s |  do not have the executables
581.29s - 582.83s |  that you would like to have on there.
582.83s - 585.67s |  For example, netcat or whatnot.
585.67s - 587.69s |  This one didn't even have whoami.
587.69s - 589.97s |  And so we wanted to be able to create our own stuff.
589.97s - 595.89s |  Now, this device used uclibc as its libc library.
595.89s - 598.63s |  uclibc was actually pretty much discontinued
598.63s - 600.69s |  or unmaintained since 2012.
600.69s - 604.17s |  And so someone created a fork, called it uclibc-ng
604.17s - 606.13s |  or next generation.
606.13s - 608.83s |  And so that is what we use along with buildroot
608.83s - 610.27s |  to build a tool chain
610.27s - 612.27s |  so that we could compile our own executables.
612.27s - 616.03s |  It worked for the most part, not all the time.
616.03s - 617.97s |  The bind shell that we had created and used
617.97s - 619.97s |  for one of our exploits worked just fine.
619.97s - 623.03s |  We were able to compile GDB server,
623.03s - 626.73s |  but every time we tried to connect to it remotely,
626.73s - 627.93s |  it kept segfaulting.
627.93s - 630.79s |  It could be because we're using uclibc-ng.
630.79s - 632.57s |  It could just be a skill issue on our part.
632.57s - 635.77s |  I'm not sure. Something happened there.
635.77s - 638.49s |  This is what it looks like when you actually have it emulated.
638.53s - 643.19s |  So like I said, we're using chroot to mount the file system
643.19s - 646.23s |  so that the executable can find the libraries
646.23s - 649.79s |  that it's looking for at the hard-coded path that it has.
649.79s - 652.85s |  Then we have a statically compiled qemu, which runs it.
652.85s - 655.83s |  Now you can see a dash G1234.
655.83s - 658.39s |  If you're not super familiar with qemu or GDB,
658.39s - 661.55s |  this opens up a remote debugging session
661.55s - 664.03s |  on the local port 1234,
664.03s - 667.05s |  which means on a separate terminal than what you see here,
667.05s - 671.69s |  you can open up GDB server or GDB multi-arch
671.69s - 674.29s |  and then connect to that local port.
674.29s - 676.01s |  And now you're running the firmware here,
676.01s - 679.01s |  but you can debug it with your own GDB setup
679.01s - 680.41s |  in another terminal.
680.41s - 682.75s |  And then because this one opens up a socket
682.75s - 683.91s |  and expects communication,
683.91s - 686.05s |  you have to open up a third terminal
686.05s - 689.01s |  to actually send data to this service.
689.01s - 690.19s |  We got all of that figured out.
690.19s - 692.11s |  Again, more details are in the GitHub repo
692.11s - 694.15s |  if you would like to see how that's done.
695.15s - 697.75s |  At this point, we spent about a month and a half,
697.75s - 699.85s |  approximately six weeks,
699.85s - 703.09s |  looking for vulnerabilities in the VILO routers.
703.09s - 706.25s |  Like we said, the holy grail is pre-authentication, RCE.
706.25s - 708.75s |  We found nine vulnerabilities total.
708.75s - 711.35s |  In the four months that we had for this project,
711.35s - 714.11s |  six of them were critical and three of them were medium.
714.11s - 716.31s |  Out of those six critical vulnerabilities,
716.31s - 718.45s |  four of them were pre-authentication
718.45s - 720.49s |  buffer overflow vulnerabilities.
720.49s - 723.25s |  Now we had only figured out how to exploit one of them
723.39s - 727.05s |  because three of them were on a version of the firmware
727.05s - 730.05s |  that had canaries enabled for that.
730.05s - 731.25s |  And so we weren't actually able
731.25s - 733.61s |  to overwrite the instruction pointer
733.61s - 735.35s |  and execute our own code,
735.35s - 737.95s |  except for one of them we were able to.
737.95s - 741.29s |  And while we were working on trying to develop exploits,
741.29s - 743.45s |  see if we can get past these mitigations,
743.45s - 744.85s |  we accidentally discovered
744.85s - 747.01s |  a blind authenticated command injection.
747.01s - 750.09s |  Now we're gonna go over three specific vulnerabilities,
750.09s - 753.33s |  the ones we found most entertaining for you guys today.
753.33s - 755.35s |  I also wanna note most of these bugs
755.35s - 757.19s |  are present in the service,
757.19s - 759.75s |  the custom service running on port 5432
759.75s - 761.45s |  that we talked a little bit about.
762.63s - 764.13s |  These are the vulnerabilities up here.
764.13s - 767.15s |  So you can see the four buffer overflows are at the top.
767.15s - 768.95s |  They're all 9.6 criticals.
768.95s - 771.89s |  There was an info leak and some lack of authentication.
771.89s - 774.33s |  We have reserved CVE numbers through MITRE.
774.33s - 775.29s |  They're not published yet
775.29s - 777.99s |  since we just published our public repo earlier today,
777.99s - 779.53s |  but we have reserved the numbers
779.59s - 784.91s |  and they're in the same order that you see up here.
784.91s - 787.91s |  Okay, the first vulnerability that I wanna talk about today
787.91s - 790.75s |  is the lack of authentication in this custom service.
790.75s - 793.07s |  So as my team member said,
793.07s - 796.11s |  most of the communications from the app to the router
796.11s - 798.35s |  went through AWS,
798.35s - 801.31s |  except if you're not connected to the internet,
801.31s - 803.15s |  you need some way to set it up.
803.15s - 805.11s |  So that goes through this service.
805.11s - 807.55s |  The thing is, because it has hard-coded keys
807.55s - 809.87s |  and there's really no authentication inside of it,
809.87s - 812.57s |  anyone that is on the LAN
812.57s - 814.73s |  and knows how to speak this protocol
816.23s - 817.71s |  can control the router, pretty much.
817.71s - 819.81s |  So anything that you can do, they can do.
819.81s - 821.67s |  For example, you invite a friend over,
821.67s - 823.11s |  you give them the Wi-Fi password,
823.11s - 824.31s |  they're now on the Wi-Fi,
824.31s - 826.63s |  they can control the router the same way that you can.
826.63s - 830.37s |  They can see and change your SSID, your password,
830.37s - 832.01s |  PPPoE, username and password.
832.01s - 833.07s |  They can reboot it.
833.07s - 835.97s |  They can even exploit all of these vulnerabilities.
835.97s - 837.07s |  That was very useful for us
837.07s - 839.41s |  because then a lot of the buffer overflows that we found
839.41s - 843.55s |  became unauthenticated RCE vulnerabilities
843.55s - 846.07s |  and not authenticated RCE vulnerabilities.
846.07s - 848.01s |  The other important thing to know is
848.01s - 851.01s |  while this service was used for initial setup
851.01s - 854.07s |  when the router didn't have internet access,
854.07s - 857.01s |  it stayed up the whole time that the router was on,
857.01s - 857.91s |  even if it did.
857.91s - 860.71s |  So it was just always available no matter what.
861.65s - 865.01s |  So we first found the first buffer overflow
865.01s - 868.51s |  in this local app set router token function.
868.51s - 870.51s |  We talked about how there are different messages
870.51s - 872.67s |  that are differentiated by opcodes.
872.67s - 877.21s |  So the opcode 0x3e updates a token and a time zone
877.21s - 879.81s |  using an encrypted JSON object.
879.81s - 882.61s |  Encryption coming from this weird XXT and obfuscation
882.61s - 884.21s |  that we talked about.
884.21s - 887.11s |  If you are familiar with C and memory corruption,
887.11s - 889.07s |  you'll see this sscanf function
889.07s - 891.11s |  immediately will stand out to you
891.11s - 892.61s |  because it takes the token
892.61s - 896.57s |  and pulls it into a fixed length buffer token,
896.57s - 898.45s |  but it doesn't check the length of the string.
899.31s - 901.01s |  So if token is, for example, only 16 bytes
901.01s - 903.45s |  and you send a token that is 20 bytes,
903.45s - 905.25s |  you now have a four byte overflow.
905.25s - 906.29s |  Pretty obvious.
906.29s - 909.71s |  So our next goal was how can we actually exploit this?
909.71s - 911.55s |  We don't want to just say, oh, this is a vulnerability.
911.55s - 912.55s |  We want to prove impact.
912.55s - 914.21s |  Plus it's kind of fun doing this.
915.29s - 918.61s |  For mitigations, Pi and Canaries were disabled,
918.61s - 920.19s |  or at least that's what we thought.
920.19s - 923.05s |  We had later learned that in the latest version
923.05s - 925.35s |  of the firmware, Canaries were enabled
925.35s - 927.65s |  and this ended up not being exploitable,
927.69s - 928.85s |  but we didn't know that we were dealing
928.85s - 930.25s |  with an older version of the firmware.
930.25s - 933.01s |  It was the newest one that we could get our hands on,
933.01s - 935.49s |  but it still wasn't the latest one.
935.49s - 938.05s |  So we were trying to figure out how can we exploit this?
938.05s - 941.69s |  We just have a generic buffer overflow vulnerability.
941.69s - 945.09s |  If you're into binary exploitation,
945.09s - 946.41s |  ROP probably comes to mind.
946.41s - 949.05s |  ROP is a little bit difficult in MIPS
949.05s - 951.35s |  because it doesn't have a return instruction.
951.35s - 952.85s |  Yeah, you can still kind of get it,
952.85s - 955.45s |  but it makes it significantly more difficult.
955.45s - 959.15s |  As a side note, based off of what we had to do here,
959.15s - 961.45s |  I decided to make a CTF challenge
961.45s - 964.45s |  with very, very similar conditions that I wrote myself.
964.45s - 967.69s |  We released it as a part of BYU CTF 2024.
967.69s - 969.05s |  If you would like to do that yourself,
969.05s - 970.91s |  give yourself a challenge, you can look it up.
970.91s - 972.21s |  It's available on GitHub.
975.21s - 978.17s |  So how do we exploit this?
978.17s - 980.51s |  Well, we wanted to find kind of a one-shot gadget
980.51s - 981.73s |  where we could just return there
981.73s - 983.07s |  and then it would do everything for us
983.07s - 986.07s |  and we didn't have to chain multiple gadgets together.
986.07s - 989.31s |  Because of the overflow, we could control the RA register
989.31s - 992.13s |  or the return address register and the S8 register,
992.13s - 994.37s |  which is pretty much the stack pointer.
994.37s - 996.97s |  So we figured if we can control S8
996.97s - 1000.31s |  and point it to a user-controlled bash command
1000.31s - 1003.77s |  and then set the instruction pointer to go to this gadget,
1004.77s - 1005.61s |  win, right?
1005.61s - 1006.43s |  You profit.
1006.43s - 1008.91s |  ASLR is enabled, so we can't use stack values.
1008.91s - 1010.67s |  But because Pi is disabled,
1010.67s - 1013.13s |  we know where all the global variables are.
1013.13s - 1014.61s |  So we started looking through to see
1014.61s - 1016.57s |  what global variables can we control
1016.57s - 1021.45s |  that we can easily put our own command inside of it.
1021.45s - 1023.31s |  So us being the intelligent people that we are,
1023.31s - 1026.15s |  decided to put a semicolon reboot semicolon in there.
1026.15s - 1028.01s |  We ran it and nothing happened.
1028.01s - 1029.41s |  So we rebooted it just to make sure
1029.41s - 1031.47s |  that we hadn't messed anything up.
1031.47s - 1034.81s |  And we ended up messing something up by doing that.
1034.81s - 1036.45s |  The router just kept rebooting
1036.45s - 1038.21s |  and it never actually got online.
1038.21s - 1041.47s |  Turns out there's an authenticated
1041.47s - 1044.47s |  command injection vulnerability that Ava will now go over.
1045.53s - 1047.33s |  So after we found our accidental
1047.33s - 1048.53s |  command injection vulnerability,
1048.53s - 1049.71s |  we went back to find the code
1049.71s - 1051.47s |  that was responsible for this.
1051.47s - 1053.87s |  So we ended up finding it in the sysconf binary,
1053.87s - 1056.01s |  which is run on boot.
1056.01s - 1057.17s |  So as you can see here,
1057.17s - 1061.17s |  it formats a UDHCPC bash command with several variables,
1061.17s - 1062.81s |  including the router hostname.
1062.81s - 1068.46s |  And then it pipes that directly into the system function.
1068.46s - 1071.70s |  And so because we can control the router hostname
1071.70s - 1073.06s |  through the viral app,
1073.06s - 1075.36s |  we can get arbitrary RCE by just setting
1075.36s - 1077.84s |  that hostname to a bash command.
1077.84s - 1080.60s |  So we can verify that this command actually has been run
1080.60s - 1082.40s |  by looking at the boot output,
1082.40s - 1084.04s |  which you can see here on the right.
1084.04s - 1086.86s |  You can see the output of that command right there.
1086.86s - 1089.06s |  We got this output from the UR interface
1089.06s - 1090.80s |  that we had connected to initially.
1091.90s - 1094.44s |  So there are a few limitations with this exploit,
1094.44s - 1097.00s |  namely that the injected command is run only once
1097.00s - 1098.04s |  on booting the router,
1098.04s - 1100.16s |  as well as that the router hostname
1100.16s - 1103.26s |  is limited to a length of 30 characters.
1103.26s - 1104.56s |  So as a result,
1104.56s - 1107.80s |  we had to write our payload into several 30-byte sections,
1107.80s - 1109.72s |  which what we ended up doing with that
1109.72s - 1113.20s |  is write a script to the slash folly directory,
1113.20s - 1114.66s |  which is one of the few directories
1114.66s - 1117.10s |  that is both writable and persistent on the router.
1117.10s - 1119.66s |  And so we wrote a script that itself
1119.66s - 1122.56s |  then downloads a longer script from the internet
1122.56s - 1125.82s |  using wget and runs that.
1125.82s - 1128.36s |  Now, we also found that the router
1128.42s - 1129.86s |  does not have an internet connection
1129.86s - 1132.42s |  at the time of running the injected command.
1132.42s - 1136.30s |  So we had to make our script or our payload wait 20 seconds
1136.30s - 1138.30s |  before running our first script.
1140.42s - 1142.46s |  So after we wrote our first payload,
1142.46s - 1144.86s |  it then downloads and executes a second payload,
1144.86s - 1146.22s |  which itself then downloads
1146.22s - 1149.36s |  and executes a compiled C bind shell,
1149.36s - 1151.60s |  which we can connect to via Netcat.
1151.60s - 1152.80s |  And so through this bind shell,
1152.80s - 1156.12s |  we were able to gain our first shell on the router.
1156.12s - 1157.00s |  So as you can see here,
1157.00s - 1158.96s |  we're able to Netcat into the router
1158.96s - 1161.66s |  and find that we have gained a shell as the root user.
1169.09s - 1170.99s |  Okay, so once April had come around,
1170.99s - 1172.23s |  we had reached our four months.
1172.23s - 1173.35s |  It was the end of the semester.
1173.35s - 1175.93s |  We had to wrap up the project and we decided,
1175.93s - 1177.39s |  you know, let's reach out to the vendor,
1177.39s - 1178.63s |  try and get in contact,
1178.63s - 1180.55s |  send them the details for the vulnerabilities.
1180.55s - 1182.19s |  Let's see if we can get this patched.
1182.19s - 1183.89s |  It was actually pretty much like,
1183.89s - 1186.43s |  it was a pretty big pain to get in contact with them.
1186.43s - 1190.69s |  They had an email address listed in their terms of service,
1190.73s - 1191.55s |  but it didn't exist.
1191.55s - 1192.39s |  It just bounced back.
1192.39s - 1194.23s |  We reached out to a couple other email addresses
1194.23s - 1195.05s |  on their website.
1195.05s - 1196.99s |  We tried to guess the email addresses.
1196.99s - 1198.13s |  None of that worked.
1198.13s - 1199.59s |  We reached out over social media.
1199.59s - 1200.53s |  They have YouTube.
1200.53s - 1203.29s |  They have, I think, Facebook, maybe an Instagram.
1203.29s - 1204.29s |  We didn't hear back from that.
1204.29s - 1205.83s |  We filed a couple of support tickets
1205.83s - 1208.89s |  and eventually we got a response from them.
1209.93s - 1212.53s |  They put us in contact with the actual developers
1212.53s - 1213.35s |  and the developers said,
1213.35s - 1215.89s |  hey, thank you for sending us this.
1215.89s - 1216.93s |  We'll take a look at it.
1216.93s - 1218.33s |  We'll get back to you on it.
1219.33s - 1221.69s |  This is the overall timeline of what we did.
1221.69s - 1223.89s |  So we started the project in January.
1223.89s - 1226.09s |  We finished it up in early April.
1226.09s - 1229.17s |  We reached out to them and it took us a month
1229.17s - 1230.97s |  before we actually got in contact.
1230.97s - 1232.43s |  And we said, hey, here are the details
1232.43s - 1234.13s |  for these nine vulnerabilities.
1234.13s - 1236.19s |  We are giving you a 90 day deadline.
1236.19s - 1238.17s |  We are happy to help if you have any questions,
1238.17s - 1240.89s |  if you want us to elaborate, et cetera.
1240.89s - 1243.53s |  We followed up a month later, didn't hear anything.
1243.53s - 1245.09s |  We followed up two weeks after that.
1245.09s - 1245.97s |  We didn't hear anything.
1245.97s - 1247.33s |  And as we had told them,
1247.57s - 1250.33s |  we went ahead and filed CVE numbers for MITRE.
1250.33s - 1251.79s |  We then followed up two weeks later
1251.79s - 1253.63s |  and they said, we're working on it.
1253.63s - 1255.37s |  We'll publish something pretty soon here.
1255.37s - 1256.93s |  We'll get it out to you.
1256.93s - 1259.33s |  So the 90 day disclosure deadline was a couple of days ago.
1259.33s - 1261.37s |  We timed this for our talk today
1261.37s - 1264.13s |  and the vendors actually reached out to us
1264.13s - 1266.33s |  like the day before we left here for DEF CON
1266.33s - 1268.57s |  and said, hey, we've pushed a new firmware update.
1268.57s - 1269.39s |  Can you check that?
1269.39s - 1271.43s |  And we said, yes, just not right now.
1271.43s - 1273.43s |  So we haven't looked at it yet.
1273.43s - 1274.73s |  We'll take a look at that there,
1274.73s - 1276.39s |  but they have been somewhat responsive
1276.43s - 1278.53s |  after we finally got in contact with them.
1280.43s - 1282.93s |  Just a quick conclusion.
1282.93s - 1286.33s |  We expected it to be a lot easier to get started,
1286.33s - 1288.99s |  to get the firmware, to find the initial vulnerability
1288.99s - 1290.49s |  and get that initial root shell.
1290.49s - 1293.09s |  It took us two months to get to that point.
1293.09s - 1294.73s |  So we were a little surprised about that.
1294.73s - 1296.49s |  That's also probably attributed
1296.49s - 1299.33s |  to the lack of experience on our part.
1299.33s - 1301.85s |  But then once we got in and we got the firmware,
1301.85s - 1304.73s |  we were able to find a lot of bugs and not a lot of time.
1304.73s - 1307.39s |  And we only looked at a very, very small portion
1307.39s - 1309.03s |  of the attack surface.
1309.03s - 1310.87s |  There is still a lot more space for bugs.
1310.87s - 1313.09s |  If that's something that you're interested in looking for,
1313.09s - 1314.37s |  go to the GitHub repo.
1314.37s - 1316.39s |  You'll notice that there are holes in the documentation
1316.39s - 1318.43s |  that we just didn't have time to fill in.
1319.97s - 1323.17s |  And we've hacked into a couple other devices since then.
1323.17s - 1327.17s |  And we found that the cheaper, lower quality devices,
1327.17s - 1329.17s |  hacking them is very, very similar.
1329.17s - 1333.13s |  IoT and embedded products still have a long, long way to go
1333.23s - 1335.99s |  when it comes to security.
1335.99s - 1337.37s |  So this is the QR code.
1337.37s - 1339.23s |  If you want to go ahead and go to the GitHub repo
1339.23s - 1340.53s |  and look at the details,
1340.53s - 1342.49s |  if you would like to connect with us on LinkedIn,
1342.49s - 1345.33s |  we also have our links up here.
1347.03s - 1348.33s |  What time are we at?
1348.33s - 1349.43s |  53.
1349.43s - 1354.44s |  Are there any questions?
1354.44s - 1360.06s |  Yes.
1360.06s - 1360.90s |  Yeah, feel free.
1360.90s - 1373.04s |  Come on up.
1383.60s - 1384.44s |  Sorry, can you repeat that?
1385.10s - 1387.90s |  What method do we use to find the vulnerabilities?
1387.90s - 1389.44s |  Okay, so the question was,
1389.44s - 1392.28s |  what method did you use to find the vulnerabilities?
1392.28s - 1393.10s |  Was it fuzzing?
1393.10s - 1396.44s |  Was it manual code analysis?
1396.44s - 1398.34s |  We did not use any fuzzing.
1398.34s - 1399.74s |  Fuzzing is a little bit more difficult.
1399.74s - 1401.70s |  It's not impossible, but it's a little bit more difficult
1401.70s - 1403.84s |  when you have a closed source binary.
1403.84s - 1406.04s |  Normally you would compile source code
1406.04s - 1408.64s |  with some sort of sanitizer and then fuzz it from there.
1408.64s - 1410.90s |  But because it was closed source and it was MIPS
1410.90s - 1412.78s |  and we're not super experienced with fuzzing,
1412.78s - 1413.88s |  we went the manual route.
1414.38s - 1417.02s |  So we just searched through the code by hand
1417.02s - 1419.18s |  in Ghidra decompiling it to find it.
1419.18s - 1420.74s |  Thank you.
1420.74s - 1425.33s |  Other questions?
1425.33s - 1428.37s |  Going once, going twice.
1428.37s - 1429.23s |  Yes, right here.
1431.03s - 1439.12s |  Yeah, feel free to come up.
1439.12s - 1440.28s |  You could speak to that protocol.
1440.28s - 1443.02s |  You could do basically any router administration.
1443.02s - 1446.14s |  Could you not set the host name of the router from there
1446.14s - 1448.78s |  and trigger a reboot and make that authenticated
1448.78s - 1451.48s |  host name injection, host name command injection
1451.48s - 1453.14s |  to an unauthenticated injection
1453.20s - 1455.20s |  because there's no credentials from that time?
1455.20s - 1456.04s |  Perfect.
1456.04s - 1457.08s |  So the question was,
1458.40s - 1463.40s |  like since that, how would you say that?
1463.74s - 1467.04s |  Since the local service is unauthenticated,
1467.04s - 1467.88s |  the question was about,
1467.88s - 1470.80s |  can we use that to turn the router host name injection
1470.80s - 1474.00s |  to an unauthenticated command injection?
1474.00s - 1476.34s |  I think the answer to that is no, kind of.
1476.34s - 1477.18s |  At least not that we know of.
1477.18s - 1479.94s |  Not that we know of because the router host name,
1479.94s - 1482.84s |  the process of setting that actually goes through AWS.
1483.40s - 1485.74s |  That was one area that we didn't have a lot of time
1485.74s - 1486.58s |  to explore.
1486.58s - 1488.14s |  There are some keys associated with logging
1488.14s - 1489.70s |  into that AWS service,
1489.70s - 1492.18s |  which it's possible that those itself are vulnerable
1492.18s - 1493.00s |  in some way,
1493.00s - 1495.54s |  but simply having access to the local service
1495.54s - 1498.04s |  is not enough to set the router host name.
1498.04s - 1500.24s |  Yeah, so a large part of the mobile app
1500.24s - 1503.10s |  was just dealing with the AWS API.
1503.10s - 1504.58s |  We didn't have a whole lot of time to go through that.
1504.58s - 1507.28s |  So it may be possible, but from what we had seen,
1507.28s - 1509.34s |  we could only do that if you were authenticated,
1509.34s - 1511.50s |  if you already had the app set up with the router.
1511.50s - 1512.34s |  Thank you.
1512.84s - 1538.46s |  I think we got one back there.
1538.46s - 1540.54s |  So the question was,
1540.54s - 1542.34s |  for someone who is new to hardware hacking
1542.34s - 1544.20s |  and new to vulnerability research,
1544.20s - 1546.50s |  do you think following these steps would be good
1546.50s - 1547.86s |  to learn some hardware hacking?
1547.86s - 1550.30s |  And do you think springboarding off of the research
1550.30s - 1552.60s |  that we've done would be a good way to get started?
1552.60s - 1555.26s |  First off, I'm still kind of a noob.
1555.26s - 1557.20s |  So I don't know that I have the best advice,
1557.20s - 1559.04s |  but I would say this is something
1559.04s - 1561.44s |  that you definitely can do.
1561.44s - 1562.34s |  For hardware hacking,
1562.34s - 1564.64s |  this was kind of my first exposure to it.
1564.64s - 1565.70s |  And I learned a lot.
1565.70s - 1567.56s |  There's a lot of resources out there.
1567.56s - 1569.66s |  DEF CON has their hardware hacking village.
1569.66s - 1572.26s |  I think reproducing these steps and going through it
1572.26s - 1574.64s |  should be, would be very, very helpful.
1574.64s - 1576.10s |  We do have some extensive write-ups
1576.10s - 1578.00s |  specifically on the hardware part.
1578.00s - 1579.44s |  We spent more time documenting that
1579.44s - 1580.86s |  because it was newer for us.
1580.86s - 1583.26s |  So hopefully it's helpful.
1583.26s - 1585.30s |  As for finding CVEs,
1585.30s - 1587.76s |  if you want to find CVEs and IoT devices,
1587.76s - 1590.10s |  this is probably the easiest way to do it.
1590.10s - 1591.76s |  It does take a little bit of knowledge
1591.76s - 1593.90s |  when it comes to memory corruption and whatnot.
1593.90s - 1596.40s |  But if you have an introduction to C and assembly
1596.40s - 1599.10s |  and memory corruption and you want to find your own,
1599.10s - 1600.56s |  it's just a matter of looking through the code.
1600.56s - 1602.24s |  There is just so much code
1602.24s - 1603.70s |  that we haven't even gone through.
1603.70s - 1605.10s |  So I would absolutely recommend that.
1605.10s - 1606.70s |  Yes.
1606.70s - 1608.50s |  Any other questions?
1608.50s - 1618.20s |  Yes.
1618.20s - 1619.10s |  Okay, so the question is,
1619.10s - 1621.66s |  how do you get future firmware updates?
1621.66s - 1623.14s |  So this is kind of a tricky question.
1623.14s - 1624.80s |  We looked into it a little bit.
1625.90s - 1628.10s |  Initially, there was an API endpoint,
1628.10s - 1630.00s |  just an HTTP web server,
1630.00s - 1631.00s |  where you were able to say,
1631.10s - 1632.66s |  hey, what is the latest firmware?
1632.66s - 1634.34s |  Can you give me a link to it?
1634.34s - 1635.46s |  The thing is,
1635.46s - 1637.90s |  it didn't actually give you the latest firmware.
1637.90s - 1639.56s |  So we talked about one of the buffer overflows
1639.56s - 1642.56s |  that we tried to exploit that did not have stack canaries.
1642.56s - 1644.74s |  We thought that was the latest firmware version
1644.74s - 1646.80s |  because we got it from that endpoint
1646.80s - 1649.16s |  pretty early on in the process.
1649.16s - 1651.66s |  But the actual device had later firmware
1651.66s - 1654.64s |  that I think it gets through the AWS,
1655.90s - 1660.30s |  like IoT, it uses encrypted MQTT communications.
1660.64s - 1663.76s |  And so somehow it gets the update from that.
1663.76s - 1666.44s |  We have not fully reverse engineered that process.
1666.44s - 1667.56s |  We don't know how it is,
1667.56s - 1671.14s |  but it is somewhere within the AWS MQTT
1671.14s - 1672.50s |  sort of setup in there.
1673.76s - 1677.61s |  Other questions?
1677.61s - 1680.67s |  Going once, going twice.
1680.67s - 1682.37s |  All right, thank you for coming to our talk.
1682.37s - 1683.21s |  We appreciate it.
1683.21s - 1684.11s |  Thank you.