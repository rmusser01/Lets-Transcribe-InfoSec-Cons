{
  "webpage_url": "local:1732054912:0621f121:DEF CON 32 - IoT Village - Wheres the Money - Defeating ATM Disk Encryption - Matt Burch.mp4",
  "title": "DEF CON 32 - IoT Village - Wheres the Money - Defeating ATM Disk Encryption - Matt Burch.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

0.00s - 6.32s | This text was transcribed using whisper model: large-v2

 Welcome to my talk, Where's the Money? Defeating ATM Disk Encryption. This is a
6.32s - 11.20s |  encore presentation to the main stage act I had just done earlier today. And
11.20s - 15.64s |  before I came on stage you just found out I got a Wired article published. So
15.64s - 22.85s |  all right. So starting off, my name is Matt Birch. I'm an independent security
22.85s - 27.53s |  researcher with a passion for IoT and hardware devices. I am the developer of
27.53s - 32.21s |  several MFA bypass tools affecting various MDM solutions. I have performed
32.21s - 37.05s |  expert opinion against a major ATM manufacturer, and I've also had the
37.05s - 43.25s |  opportunity of examining cartel-designed ATM black box devices. For today's
43.25s - 47.65s |  agenda, we'll take a brief look at the ATM industry, introduce Diebold
47.65s - 51.53s |  Nixdorf's dynamic security suite, then dive a little bit deeper into the
51.53s - 56.13s |  pre-boot authentication process of that software, and finally we'll wrap up with
56.13s - 60.37s |  a little bit of cat-and-mouse. So starting off, let's look at the industry.
60.37s - 64.81s |  Essentially the ATM market is constructed of both consumer and
64.81s - 70.25s |  financial class systems. The consumer devices are your standard ATMs that you see
70.25s - 74.85s |  at your grocer, your gas station. Typically they run Windows CE and
74.85s - 79.25s |  they're present everywhere in the market. They also lack a lot of the enterprise
79.25s - 84.17s |  security controls that you typically see on most systems. However, the financial
84.17s - 89.41s |  class systems are the enterprise ATM. These are the ones at your bank, the
89.41s - 94.21s |  standalone units, through wall units, and they're typically running
94.21s - 100.65s |  Windows Embedded 10, some are now doing 11, and each manufacturer has their own
100.65s - 105.97s |  ATM security stack. That security stack is designed to harden the ATM, provide
105.97s - 113.21s |  endpoint protection, and full disk encryption. Yep. So when you open up the
113.21s - 119.89s |  ATM, it's essentially constructed across two hemispheres. You have the top hat,
119.89s - 125.13s |  which contains all the PC peripherals and computer components, and then you
125.13s - 129.89s |  have the bottom half, aka the vault, which carries the cash cassettes and all the
129.89s - 134.33s |  system's currency. Each halves are physically isolated from one another, and
134.33s - 139.97s |  the physical security controls between the two vary drastically. The bottom half
139.97s - 144.25s |  requires multi-factor authentication, has a digital combination lock, and uses
144.25s - 148.29s |  an I button for secondary authorization. It's constructed with about an inch
148.29s - 152.41s |  thick steel, has heavy bolt locking mechanisms, and is also equipped with
152.41s - 157.41s |  seismic detection and tamper detection switches. However, the top hat's
157.41s - 161.61s |  significantly different. It's about 1 eighth inch thick steel, has tons of vent
161.61s - 167.17s |  holes, the systems come with default tubular locks, and those locks
167.49s - 171.45s |  leverage a cantilever locking mechanism where a cable's hooked up to the cylinder,
171.45s - 175.85s |  so when you turn the key, the cantilevers come up and the front of the ATM will
175.85s - 180.97s |  open. Additionally, the front of the ATM usually has a lot of plastic components,
180.97s - 185.97s |  which makes it very easy for malicious entry, entry, or destructive entry, maybe
185.97s - 192.78s |  just stick a coat hanger in and pull the wire. And when we start looking at the
192.78s - 198.50s |  attack vectors affecting ATMs, most of them all require some level of physical
198.50s - 203.26s |  access. And with that, some of the most common attacks we usually see are black
203.26s - 207.90s |  box devices, which are usually placed inside or outside the ATM with the
207.90s - 211.94s |  objective of intercepting the communications and getting the ATM to
211.94s - 215.74s |  withdraw or dispense more funds than what was requested. Everyone knows the
215.74s - 218.50s |  card skimmers, you plop those on the front, you steal people's card
218.50s - 222.94s |  information, super interesting. Uh, and then you have the heavy destructive
222.94s - 227.66s |  attacks. Uh, this involves RAM raiding. Uh, you wrap a chain around an ATM, hook
227.66s - 231.34s |  it up to your fork pickup, just rip the thing right out of the ground. Or you
231.34s - 234.54s |  borrow your local construction company equipment, rip a hole right through the
234.54s - 238.94s |  wall, and run away with the ATM. Some of the less common attacks we see here in
238.94s - 244.82s |  the U.S. are explosive-derived attacks because our money, uh, has a heavy paper
244.82s - 249.94s |  consistency. Uh, usually when you involve fire, it ignites and is counterproductive
249.94s - 254.30s |  to theft. However, internationally, uh, with the plastic-based currency, that's
254.30s - 261.38s |  not necessarily the case. And you see more of these attacks. Uh, the ATM
261.38s - 266.42s |  landscape is constructed of thousands of ATMs, all of which hold very large sums
266.42s - 270.96s |  of cash. And despite the need for physical access, the criminal element
270.96s - 274.76s |  against these systems has grown exponentially over the last few years.
274.76s - 277.70s |  This is mostly associated to the deficiencies within the logical
277.70s - 283.50s |  infrastructure of the ATM. Mainly the use of an unauthenticated API known as
283.50s - 288.14s |  XFS that interacts between the software and hardware, allowing funds to be
288.14s - 292.54s |  dispensed out of the ATM. Most of the applications on the ATM also are
292.54s - 297.54s |  executed in the context of local admin. And then the ATMs are also designed with
297.54s - 302.52s |  layers of default accounts for system administration, OS access, and other
302.52s - 307.02s |  various activities. All of these have made the devices very attractive to
307.02s - 312.80s |  organize crime. And we can't necessarily, uh, talk about ATMs without briefly
312.80s - 317.60s |  mentioning the ATM network, uh, which is what the ATM must be connected to so you
317.60s - 322.88s |  can save your money from the bank. Um, the ATM network is essentially a private
322.88s - 327.20s |  connection that's restricted from the hosting provider or gatekeeper. And
327.20s - 332.36s |  access to the ATM network requires some level of certification from that
332.36s - 338.56s |  gatekeeper. And, uh, pieces of software and hardware are individually certified. So in
338.68s - 342.76s |  environments where you have multiple different ATM vendors, it becomes very
342.76s - 346.86s |  difficult for a financial institution to administer those systems. And usually
346.86s - 350.20s |  they'll partner with some kind of managed services provider to ease that
350.20s - 355.36s |  overhead. This all brings us to the subject of today's talk, which is
355.36s - 360.88s |  Diebold Nixdorf and their proprietary Vynamic Security Suite software. Unlike
360.88s - 366.68s |  all the other ATM security stacks, Vynamic Security has multi-vendor
366.68s - 372.08s |  certification, allowing their software to be installed on any ATM platform and
372.08s - 377.28s |  granting access to the ATM network. In 2015, they were assumed to represent
377.28s - 383.32s |  about 35% of the ATM market. And in 2018 and 19, they partnered with two of the
383.32s - 389.04s |  largest financial institutions representing the US gaming industry. A.K.A.
389.06s - 394.12s |  Vynamic Security is present in almost every casino in the United States, if
394.12s - 401.56s |  not most, right here on the Vegas Strip. Cool. So now that we understand, uh, the
401.56s - 405.76s |  landscape, let's take a look at the software. So just like all other security
405.76s - 409.92s |  stacks, Vynamic Security has a number of default protections. USB filtering,
409.92s - 416.40s |  firewall policy, delegated access, and disk encryption. However, it's not full
416.40s - 420.20s |  disk encryption, where there's two partitions that are unencrypted. There's
420.20s - 424.24s |  a UEFI partition, which is pretty common in your corporate image. But then
424.24s - 427.80s |  there's also a Linux partition, which is somewhat of a red herring in a Windows
427.80s - 432.60s |  design system. So taking a closer look of that Linux architecture, it self
432.60s - 438.08s |  identifies itself as Super's Chaff. Which, doing online reconnaissance didn't
438.08s - 442.32s |  actually r- result in a whole lot of information being associated with that,
442.32s - 446.04s |  but did identify this really cool game known as Worm's Armageddon. And in this
446.04s - 450.48s |  game you launch sheep as mobile projectiles against your enemies. The
450.48s - 455.42s |  game was a lot of fun to play. I think we wasted at least 30 minutes on it, but
455.42s - 460.80s |  that has nothing to do with ATMs at all. Uh, but what it did identify, because
460.80s - 466.00s |  I'm really bad at foreign language, is Super's Chaff is actually German for
466.00s - 472.88s |  Super Sheep. And Super Sheep was also an installation directly within the user,
472.88s - 477.76s |  uh, directory path. And online reconnaissance of Super Sheep was much
477.76s - 484.76s |  more resourceful. Specifically, uh, in 2016 a consulting firm known as Sec
484.76s - 489.80s |  Consult released a blog article detailing code execution deficiency in
489.80s - 494.80s |  a piece of software known as Cryptware, CryptoPro, and their underlying Super
494.80s - 499.52s |  Sheep operating system. In this blog article there were a lot of similarities
499.52s - 504.92s |  between Dynamic Security and, uh, Super Sheep, leading us to go back and then
504.92s - 509.06s |  take a look at Deepul's user license agreements. And lo and behold, they
509.06s - 513.36s |  specifically designated CryptoPro as being a third party licensed vendor. But
513.36s - 517.34s |  that was only relevant in version 3.0, and all references to CryptoPro are
517.34s - 522.84s |  removed from all later versions of Dynamic Security. So who is CryptoPro?
522.84s - 526.68s |  It's a cryptographic spinoff started in 2002, designed to enhance the
526.70s - 530.68s |  functionality of Microsoft BitLocker through pre-boot authentication. Today
530.68s - 535.22s |  the organization is represented across numerous countries and a number of
535.22s - 540.46s |  different domains, each one having a very unique and, uh, different online
540.46s - 545.16s |  presence. However, despite this suspicious representation, they advertise
545.16s - 551.16s |  over half a million licenses sold, and they also, uh, state that employees love
551.18s - 557.86s |  their encryption. So, you know, they got that going for them. So, let's take a
557.86s - 562.62s |  little bit deeper dive into how the pre-boot authentication function actually
562.62s - 569.74s |  works. So powering on the ATM, it executes a dual boot cycle. From UEFI, a
569.74s - 574.84s |  Linux partition is bootstrapped, aka Super Sheep, does some black magic to the
574.84s - 579.88s |  disk, shuts down, goes back through UEFI, and then launches Windows. Windows
579.90s - 584.44s |  performs an auto logon, bootstraps all the ATM software, and the system comes up
584.44s - 589.18s |  and becomes fully operational. Any attempt to modify the content of the
589.18s - 594.52s |  Linux partition results into an integrity error page to be presented. But
594.52s - 598.06s |  not all files are treated the same, and modifying other directories or files
598.06s - 602.96s |  results in a completely different integrity error, uh, to be shown. But this
602.96s - 607.06s |  one has significantly more details represented in it, and identifies about
607.06s - 613.36s |  253 elements are validated on the desk. Which, uh, leads us to need to
613.36s - 619.16s |  understand what files are actually being checked. Going back to the Linux system,
619.16s - 623.74s |  we then start scouring the drive and looking to locate any, uh, hash sum
623.74s - 628.60s |  indexes, tables, or files that may have, uh, a list of what's actually being
628.60s - 633.54s |  checked. Ultimately, we found a log directory, and in there, there was a sum
633.56s - 638.56s |  index of about 2500 files. Significantly larger than 253, however, it did give us
641.26s - 646.54s |  some indication of what was being checked. Uh, the Linux partition itself had a
646.54s - 652.24s |  little under 11,000 files, giving us a delta of about 8200 files that needed to
652.24s - 656.74s |  be validated as part of the integrity check. Or that weren't validated as part
656.74s - 661.32s |  of the integrity check. So, that's a whole lot of files to attempt to validate
661.36s - 667.20s |  and identify a loophole in the validation, uh, process. But what I generally like
667.20s - 672.00s |  to do is go back and take a look at a background image. I mean, who really
672.00s - 676.58s |  looks at background images, uh, and they have a very high visual representation
676.58s - 682.08s |  when anything's modified. So we randomly pick an image, modify it, reboot the
682.08s - 688.12s |  system, and, uh, the default background is then presented. However, just a few
688.12s - 694.16s |  seconds later, we got our hacked background. Being able to do this,
694.16s - 698.16s |  essentially establishes the foundation of the pre-boot authentication process is
698.16s - 703.90s |  not completely infallible, and there is an opportunity to redirect the execution
703.90s - 709.64s |  workflow of the system. Ultimately, with our modified background, we were able to
709.64s - 714.88s |  map out the authentic, uh, authentication process to occur across two phases. The
714.88s - 720.54s |  first of which is executed within UEFI across the boot XSA or boot XSA2 system
720.54s - 725.22s |  binaries. This is where the 253 contents of the disk were validated. Upon
725.22s - 730.96s |  completing the UEFI validation, uh, Linux is then bootstrapped, and from Linux, out
730.96s - 735.16s |  of root's profile, phase two is initialized, scanning the other 2,500
735.16s - 740.64s |  files. Those 2,500 files are then used as a seed to unlock the TPM.
740.64s - 745.84s |  Unfortunately, the ATM is configured with secure boots, and all the binaries
745.84s - 749.98s |  on the UEFI partition are digitally signed with the BIOS, meaning we can't
749.98s - 754.42s |  actually modify any of that content to gain control of the system. But what we
754.42s - 759.98s |  can do is identify what files are validated during phase one, identify
759.98s - 764.36s |  anything that might be overlooked during the Linux initialization process,
764.36s - 770.32s |  allowing us to redirect the process of code execution prior to phase two being
770.34s - 776.98s |  initialized. With that, challenge accepted. Let's play cat and mouse. We'll
776.98s - 782.38s |  start off in version 18.X. In version 18.X, we have, uh, the pre-boot
782.38s - 787.82s |  authentication process carried out in UEFI. As part of boot XSA2, 253 elements
787.82s - 793.40s |  are validated. Uh, the system is then initialized through, uh, the SysV
793.40s - 798.54s |  architecture and several RC initialization scripts. Upon completing the RC
798.56s - 802.80s |  initialization process, Root performs an auto logon, and then phase two is
802.80s - 807.24s |  launched out of Root's profile. When we take a look at the running environment
807.24s - 811.54s |  of the Linux operating system, it's designed on the back of several temporary,
811.54s - 815.62s |  uh, mount points, temporary file system mount points. This is used to give a
815.62s - 819.68s |  pseudo read-only perspective of the disk, because the contents of those
819.68s - 824.52s |  temporary file systems are then populated from tar archives. Again, those tar
824.54s - 830.08s |  archives are also validated as part of phase one and not a valid attack surface.
830.08s - 835.78s |  So this leaves us with a challenge. We know the index of phase one, what files
835.78s - 839.72s |  are being checked, and we need to compare that to the full initialization process
839.72s - 846.30s |  of phase two in the SysV architecture. 253 elements, though, covers most of the RC
846.30s - 850.16s |  initialization script, and there's not a whole lot of, uh, attack surface or
850.18s - 855.52s |  thread that we can take advantage of. Except, they made one exception.
855.52s - 860.96s |  Etsy init tab was overlooked. With that, we have our, uh, initial foothold to
860.96s - 865.56s |  perform code execution, but we still need a staging directory to place, uh,
865.56s - 870.16s |  things on the disk. Luckily, like any good security solution, it ignores
870.16s - 876.00s |  validation of most of its own integrity files, and since the goal of this exercise
876.02s - 880.36s |  was code execution, what better directory to use as a staging directory than
880.36s - 887.36s |  Super Sheep of Europe? So with that, let's jackpot an ATM. Uh, we cloned the
887.36s - 891.76s |  RC initialization process over to our safe directory, patch global variables,
891.76s - 897.14s |  inject, uh, proof of concept into the call to X, and then execute our new run
897.14s - 903.54s |  level three from the unexamined Etsy init tab. With that, here's a demo, 2023
903.86s - 949.11s |  4064. Oh, sorry guys. Okay, unfortunately I have some technical difficulties with
949.11s - 954.85s |  that. I apologize. Uh, the videos are published as part of, uh, the media
954.85s - 959.79s |  server. Apparently they don't execute well on this Macbook. Um, anyhow, in this
959.79s - 966.33s |  video, what I was demonstrating is we power on the virtualized file system. Uh,
966.33s - 971.87s |  it receives a preboot authentication error. We shut down the disk. We relocates,
971.87s - 978.99s |  uh, our initialization files over to the, uh, staging directory. This, then once
978.99s - 998.69s |  root performs its auto log on, we receive code execution and a callback show. So,
998.69s - 1006.69s |  uh, having code execution on the system, uh, essentially just having access to the
1007.33s - 1015.33s |  Linux system itself. Uh, the vanilla code execution is actually never enough. And,
1015.33s - 1021.27s |  uh, the Windows partition is still technically encrypted. Uh, however,
1021.27s - 1026.21s |  SuperSheep comes with an app for that, uh, known as Mount Winpart. Uh, Mount
1026.21s - 1031.51s |  Winpart takes the TPM recovered disk encryption key and then passes that as a
1031.51s - 1037.35s |  command, command line argument, decrypting, uh, the Windows partition and
1037.35s - 1041.51s |  giving it the, uh, opportunity to then execute a third phase of the integrity
1041.51s - 1046.99s |  validation. So, from, uh, having code execution on the Linux system,
1046.99s - 1052.29s |  essentially all we need to do is, uh, resume the integrity validation process,
1052.29s - 1058.27s |  monitor the proc command line, and then recover that TPM disk encryption key.
1058.27s - 1064.11s |  From there, uh, reinitializing the process just a few seconds later, we're
1064.11s - 1070.91s |  able to recover the TPM disk encryption key, decrypt Windows, and, uh, load
1070.91s - 1076.05s |  malware onto the system, interacting with the XFS API, giving us the ability to
1076.05s - 1087.34s |  dispense funds from the ATM on demand. So, uh, doing the research, essentially
1087.34s - 1094.54s |  timeline, uh, this vulnerability was observed to only impact version 18.X. Uh,
1094.54s - 1099.54s |  the vulnerability was identified in December of 21, and then confirmed,
1099.54s - 1104.38s |  remediated just a few days later in the next major release. At the time of this
1104.38s - 1110.56s |  discovery, uh, version 18 was designated to be end of life, and, uh, Diebold
1110.56s - 1116.00s |  Mixdorf had moved from, uh, to a new versioning number to introduce minor, uh,
1116.06s - 1122.30s |  revision updates to their update. That's why it goes from 18 to 3.0. The way the
1122.30s - 1127.96s |  attack surface was mitigated is phase one now validates Etsy and NetApp. So
1127.96s - 1133.58s |  there's no opportunity to redirect code execution for the RC initialization
1133.58s - 1141.58s |  process. However, what they also do is the PBA integrity process is decreased
1141.60s - 1148.84s |  from 253 elements to only 56, about a 20% reduction. Reporting this to Diebold,
1148.84s - 1152.98s |  however, they did not designate this as a vulnerability, and it indicated it was
1152.98s - 1158.58s |  working by design, because of the security protections that IMO provides. So
1158.58s - 1164.26s |  what is IMO? Well, IMO is an, uh, kernel integrity process where, uh, every
1164.26s - 1168.66s |  binary on the system is digitally signed, and that signature's also loaded into
1168.68s - 1173.38s |  the Linux kernel. That signature carries details about the file name, the file
1173.38s - 1177.32s |  path, very I know de- various I know details, and that's appended as an
1177.32s - 1181.82s |  extended attribute to every executable on the system. When you go to call those
1181.82s - 1187.20s |  executables in a child or parent child relationship, uh, the execution workflow
1187.20s - 1190.66s |  and the signature is validated against the Linux kernel to decide whether or not
1190.66s - 1196.40s |  that's allowed to be executed. However, the one thing that IMO doesn't do, is it
1196.42s - 1201.78s |  doesn't validate, uh, signature script interpretation. For example, if you call
1201.78s - 1207.26s |  the system shell, which is an authorized signed binary, it's able to read, uh, the
1207.26s - 1212.32s |  interpreted scripts, for example, root's profile script, and then carry that
1212.32s - 1219.78s |  execution workflow in the context of an authorized system binary. So let's carry
1219.78s - 1226.94s |  on into service release 9. In service release 9, the Linux architecture is
1226.94s - 1231.82s |  relatively unchanged. Uh, however, examining the mountfs initialization
1231.82s - 1236.56s |  script, there's a delete call that's initialized before the architecture of
1236.56s - 1241.82s |  the system is actually mounted. Since the entire architecture of the system is
1241.82s - 1246.66s |  mostly derived around the concept of a temporary file system, uh, all we need to
1246.66s - 1254.78s |  do is, uh, move fstab to mtab. Then fstab will be deleted before the mount
1254.78s - 1258.46s |  command is called, removing all the instructions to build a temporary file
1258.46s - 1264.36s |  system, allowing us to regain persistence to root's home directory. We patch the
1264.36s - 1271.56s |  profile script, and then again, gain code execution. Um, I had a demo for this,
1271.56s - 1277.44s |  uh, 2023-24063, uh, unfortunately, I, I, it's not playing properly on the Mac
1277.44s - 1284.22s |  book, so I do, uh, apologize greatly for that. Uh, but anyhow, in the demo, uh, if
1284.22s - 1293.60s |  it were to play, it's, uh, we patch the offline disk, we, uh, move fstab to mtab,
1293.60s - 1298.24s |  uh, the system autoboots back up, and then once root logs in, we get code
1298.24s - 1308.72s |  execution and receive a callback to the initialization process. So, this time, uh,
1308.72s - 1314.08s |  the scope and the timeline, uh, this was observed to impact all prior versions of
1314.18s - 1318.44s |  3.3.0 as part of the dynamic security suites. Uh, the vulnerability was
1318.44s - 1323.08s |  identified in June of 22, and then confirm remediated the day after,
1323.08s - 1330.42s |  magically, in, uh, version, or service release 10. In service release 10, the
1330.42s - 1335.86s |  mitigations were enforced by an, uh, update to mount the mountfs initialization
1335.86s - 1342.24s |  script, now removing the delete call from, uh, to etsy mtab. So without etsy mtab
1342.24s - 1348.10s |  there, uh, we don't long, we no longer have the opportunity to remove fstab.
1348.10s - 1354.58s |  Carrying on into service release 10. So as part of service release 10, uh, we now
1354.58s - 1362.58s |  have init tab validated, mtab does nothing, but what about the mount logic of the
1362.58s - 1370.42s |  architecture? So, mount is actually a very interesting command. Uh, again, most
1370.44s - 1375.28s |  of the security architecture of the security stack requires building, uh,
1375.28s - 1382.48s |  temporary file system. However, if we're able to use mount to stop, uh, that
1382.48s - 1387.12s |  architecture from getting mounted, uh, we then have an advantage to regain, uh,
1387.12s - 1392.76s |  persistence to root's home directory. One very interesting limitation to mount is
1392.76s - 1397.56s |  if you happen to execute mount against a mount point that's previously been
1397.58s - 1402.78s |  leveraged, the call to mount will fail. In a Linux architecture, what's the
1402.78s - 1408.58s |  default, uh, mount point that's used by the system? The root file system. So if
1408.58s - 1413.92s |  we flatten the file system and then redirect root var and temp to root, uh,
1413.92s - 1418.36s |  we're able to regain persistence to root's home directory because when those
1418.36s - 1422.86s |  temporary file systems go to mount, the mount point already exists and that call
1422.86s - 1428.84s |  will fail. This then gives us the opportunity to, uh, jackpot root's profile
1428.84s - 1434.84s |  and regain code execution on the system. Again, I had a demo, uh, 2023-24064, uh,
1438.68s - 1443.68s |  where we, uh, flatten the file system and, uh, are able to redirect code
1446.22s - 1451.42s |  execution powering back on the system, uh, once root logs in, we receive code
1451.42s - 1459.04s |  execution. So this time going through, uh, going through the timeline, uh, all
1463.58s - 1469.02s |  prior versions of 330 were known to be vulnerable, including, uh, this time 4.0,
1469.02s - 1474.92s |  4.1 and 4.2. The vulnerabilities were identified in June of 2022 and then
1474.92s - 1479.80s |  confirmed remediated in version, in service release 12 immediate, uh, in
1479.80s - 1486.56s |  December of 22. In service release 12, the mountfs initialization script was
1486.56s - 1491.90s |  then updated with several, uh, additional delete calls. Now we're moving root var
1491.90s - 1498.64s |  and temp and mount and, uh, removing any opportunities for us to do symlinks or
1498.64s - 1504.12s |  redirect the execution, essentially ensuring those directories are empty. Let's
1504.14s - 1510.84s |  carry on in service release 12. In service release 12, how do you work around a
1510.84s - 1517.36s |  delete call? Well, mount still has some magic logic tied into it where earlier on
1517.36s - 1524.20s |  in the initialization process, uh, the kernel, uh, kernel run space is mounted to
1524.20s - 1527.96s |  specific mount points. And whenever you place a file on a mount point, it no
1527.96s - 1532.34s |  longer becomes accessible. Since all the previous mitigation, uh, steps were
1532.36s - 1539.14s |  initiated as part of mountfs, uh, essentially we just moved mountfs to proc. Once the,
1539.14s - 1544.14s |  uh, kernel initializes, the temporary file systems are built, allowing us to regain
1544.14s - 1550.84s |  persistence to root's profile script. Again, this was recognized as CVE-2023-28865. Uh,
1555.28s - 1560.28s |  in the demo if it had played, uh, it would show that, um, we're able to, uh, redirect, uh,
1564.06s - 1569.86s |  the file location, uh, move that over to proc, and once the Linux kernel powers on, we
1569.86s - 1577.23s |  receive code execution and our callback. Just as before, all prior versions of 330 were
1577.23s - 1582.87s |  known to be vulnerable to this attack surface, including, uh, all versions of 4.0, 4.1,
1582.87s - 1588.81s |  and 4.2, essentially representing the entire security stack of dynamic security at this
1588.81s - 1594.35s |  time. The vulnerabilities were identified in December of 2022, and then confirmed or
1594.37s - 1599.37s |  mediated in February of 23 as part of service release 15. In service release 15, the, uh,
1604.07s - 1609.31s |  phase one integrity check was further updated to include a number of null sum values,
1609.31s - 1614.25s |  essentially validating a number of critical mount points to truly be empty before the
1614.25s - 1619.99s |  Linux partition was allowed to boot. With this, uh, we don't have much opportunity to
1620.03s - 1626.97s |  modify the disk, and it closes a lot of the previous attack surfaces. So, let's carry on
1626.97s - 1631.97s |  with service release 15. So, in service release 15, introducing those null sum values, uh, I
1634.51s - 1641.05s |  like to come across the idea that the more complex a security control is, the more likely
1641.05s - 1646.69s |  that something is gonna be overlooked as part of that validation process. If we try to
1646.69s - 1652.33s |  create a file or create a symlink to a known file, that produces a hash sum as part of the
1652.33s - 1658.21s |  phase one integrity check, and the pre-boot authentication process fails. However, if we
1658.21s - 1663.21s |  establish a directory or a tree of, uh, empty directories, no sum value is created. Additionally,
1667.41s - 1674.35s |  broken symlinks also do not produce a hash sum value. However, to take advantage of this, we
1674.35s - 1679.39s |  need this new staging directory. Uh, to identify one, we would return to the previous attack
1679.39s - 1685.47s |  surface and look to identify any directory structures that are created once the Linux kernel
1685.47s - 1690.97s |  is initialized, but don't have a presence on the offline disk. Essentially allowing us to
1690.97s - 1695.97s |  establish a transversal point to redirect, uh, to a new staging directory. Luckily after just a
1696.41s - 1704.37s |  few seconds, we're able to locate dev block, which was a special mount point mod- or, uh,
1704.37s - 1709.95s |  associated to the block device of the Linux partition itself. This was also observed to be
1709.95s - 1714.95s |  present in all versions of dynamic security. So, what we need to do is move, uh, our, uh,
1718.55s - 1724.29s |  critical mount points over to a new staging location, for example, root to root two, and then
1724.29s - 1730.19s |  we link to those through our transversal point dev block. Offline on the disk, those symlinks
1730.19s - 1736.63s |  are then broken. However, once the Linux kernel initializes, those links then become valid,
1736.63s - 1741.63s |  allowing us to redirect code execution and regain persistence to root's home directory. Uh, this
1744.51s - 1749.51s |  was identified as CVE-2023-33206. Again, uh, in the demo, had it played, uh, properly, uh,
1754.91s - 1761.19s |  it would show that we, uh, create the new staging directories and redirect to our staging
1761.19s - 1767.69s |  points. Once the virtualized system powers on, we would receive code execution and our callback
1767.69s - 1776.36s |  shell. So, just as before and all the previous attacks, this vulnerability impacted all prior
1776.36s - 1781.36s |  versions of dynamic security, including all versions, prior versions of 4.0, 4.1, 4.2, and
1781.62s - 1786.62s |  4.3. The vulnerability was identified in April of 2023, and then confirmed remediated in July of
1790.96s - 1795.96s |  23 as part of service release 16. In service release 16, the phase one integrity process was
1799.44s - 1804.44s |  further updated, this time validating, uh, whether or not symlinks were broken or valid, uh, on
1804.70s - 1809.70s |  the Linux partition. Broken symlinks now produce a, uh, pre-boot authentication failure
1813.00s - 1818.00s |  disabling the system to boot up. But, interestingly enough, they also, dbold also walked back
1820.38s - 1825.98s |  the previous mitigation strategies that were observed in the mountfs, uh, initialization
1825.98s - 1831.16s |  script. Although it doesn't necessarily reproduce the same attack surfaces, because now we're
1831.18s - 1836.18s |  doing null sum validation and symlink validation, uh, it is interesting that, uh, mitigation
1838.98s - 1843.98s |  strategies are, are backwalked. So, finally, this brings us to service release 16. As part of
1849.50s - 1854.50s |  service release 16, we have symlink validation and null sums, the attack surface of the Linux
1854.54s - 1859.54s |  architecture is relatively reduced. However, the whole architecture of the system is based
1864.72s - 1869.72s |  around the requirement of hash sum values. You know what doesn't change a file's hash sum? The
1871.42s - 1876.42s |  file attributes associated to that hash sum. So, for example, if we remove, uh, the execute
1877.90s - 1882.90s |  permission of a file, the file still has the hash, the same hash sum value. For example, if we
1884.94s - 1890.54s |  just remove the execute permission from IMA, we're able to disable all signature verification
1890.54s - 1896.54s |  processes of the Linux architecture entirely and then obtain the ability to execute any code
1896.54s - 1901.56s |  that we want. This vulnerability was identified as CVE-2023-40261. Uh, again, the video is not
1902.56s - 1907.56s |  playing, um, but in the video, uh, we disable the execute permissions of IMA and, uh, power on
1917.98s - 1923.98s |  the virtualized file system. Once root performs its auto logon, we then re, regain code
1923.98s - 1929.42s |  execution and receive our callback, callback shell, essentially defeating the whole system
1929.42s - 1934.42s |  once again. Just as before, this attack surface was observed to impact all prior versions of
1939.26s - 1944.26s |  330, including all prior versions of 4.0, 4.1, 4.2, and 4.3. Again, representing, uh, an
1948.00s - 1953.88s |  impact against the entire dynamic security suite software. The vulnerability was identified in
1953.88s - 1958.88s |  July of 23, and then D-bolt had designated it was patched as part, as a November 2023 patch and
1961.22s - 1966.22s |  service release 17. Additionally, version 3.3 was designated to be end of life in December
1968.72s - 1973.72s |  of 23. So, with that, uh, through this talk, I've essentially demonstrated that the entire
1974.18s - 1979.18s |  dynamic security suite can be impacted by a single vulnerability, and that attack surface
1984.72s - 1989.72s |  represents a recursive impact against all prior versions. Although, although the system is still
1992.10s - 1997.96s |  patched, the root cause is still derived around the fact that the Linux partition itself is
1997.96s - 2003.44s |  unencrypted. So there is a high likelihood that new vulnerabilities or new attack surfaces are
2003.46s - 2009.26s |  going to be identified. However, uh, you can rest assured because there are still some
2009.26s - 2015.98s |  requirements of physical access in order to take advantage of this attack surface. So, with that,
2015.98s - 2020.98s |  let's discuss some mitigation strategies. Uh, first and foremost, the, uh, ATM software should
2024.14s - 2031.06s |  be patched up to the latest version representing each major version that any environment, uh, is
2031.08s - 2036.08s |  currently running. With the goal of ultimately moving into version 4.4. I'm proud to announce, as
2037.88s - 2042.88s |  a direct result of the security research and working with Deepold next door, they have redesigned
2045.72s - 2051.86s |  the SuperSheep architecture and now offer full encryption of the Linux partition. This was
2051.86s - 2058.54s |  released this year in April of 24. Additionally, there's a security check known as enable
2058.58s - 2065.42s |  signature check. Disabling this prevents the TPM disk encryption key from being handed over to
2065.42s - 2070.82s |  Mount Winpart, essentially reducing the attack surface from Linux to recover the TPM encryption
2070.82s - 2076.60s |  key. Additionally, you could just replace dynamic security with an industry recognized, uh, full
2076.60s - 2082.50s |  disk encryption solution. Several secondary actions are also monitor for any malicious top
2082.50s - 2088.18s |  hat entry, disable you, disable the USB ports, and ensure the hard drive can't be easily
2088.18s - 2092.58s |  removed. There is no business purpose for the hard drive to be able to pull, be pulled out of the
2092.58s - 2097.58s |  system. With that, I apologize, uh, my demo videos weren't great, but, uh, please feel free to
2099.96s - 2103.76s |  reach out to me, uh, via social if there's any comments or questions.