{
  "webpage_url": "local:1731858011:315137fe:DEF CON 32 - DCGVR - Breaking and Defending Cloud Infrastructure by Abhishek S  Amal Joy.mp4",
  "title": "DEF CON 32 - DCGVR - Breaking and Defending Cloud Infrastructure by Abhishek S  Amal Joy.mp4",
  "description": "Local file",
  "channel_url": null,
  "duration": null,
  "channel": null,
  "uploader": null,
  "upload_date": null
}

2.77s - 10.45s | This text was transcribed using whisper model: large-v2

 I'm hoping I pronounced this correctly, Abhishek S. and Amal Joy are presenting Breaking and
10.45s - 19.53s |  Defending Cloud Infrastructure, Red Team Evasion Tactics and Access Control Solutions.
19.53s - 25.63s |  Abhishek X. is a security engineer at Flipkart with primary research focus in application
25.63s - 27.09s |  security and red teaming.
27.09s - 36.13s |  He is a staff of Adversary Village at DEF CON and an executive member of DC-0471 group.
36.13s - 45.87s |  He has been a speaker for, golly, I can't read all of a sudden, let me fix this.
45.87s - 47.35s |  Where was I here?
47.35s - 56.11s |  He is a speaker for various conferences like COCON23 and Black Hat MEA23 with over four
56.11s - 61.11s |  years of experience playing CTFs and hunting for vulnerabilities in various VDP programs.
61.11s - 67.35s |  He is listed in Hall of Fames of Google, Facebook, Microsoft and 40 plus organizations for finding
67.35s - 69.27s |  their security vulnerabilities.
69.27s - 79.67s |  He's about four CVEs from various organizations such as Android, Tenable, Strap, STR API,
79.67s - 81.35s |  CMS, et cetera.
81.35s - 90.79s |  He actually holds various certifications such as OSCP, BSCP, CRTP, GIAC, GFACT, et cetera.
90.79s - 95.03s |  Other than the technical side, he loves to travel around the world and is an automotive
95.03s - 96.03s |  enthusiast.
96.03s - 99.95s |  Oh, well, we have that in common because I'm a recovering gear head myself.
99.95s - 103.87s |  Amal Joy is a security engineer at High Radius.
103.87s - 109.91s |  His area of research falls into infrastructure security, red teaming in multi-cloud environments
109.91s - 111.31s |  and corporate networks.
111.31s - 114.55s |  He also loves spending leisure time on malware development.
114.55s - 117.15s |  Wow, that is really cool.
117.15s - 123.95s |  He is an executive member of DC0471 DEF CON group.
123.95s - 129.39s |  He has over three years of experience of playing CTFs and also hosted many hiring multi-cloud
129.39s - 136.07s |  adversary CTFs in reputed conferences like Seaside 22 with strong focus on multi-cloud
136.07s - 137.87s |  and active directory.
137.87s - 146.31s |  He currently holds various certifications like CARTP, MCRTA, CCRTA, and EJPT.
146.31s - 152.95s |  So I'd like to welcome both of our speakers to the stage and please take it away.
152.95s - 153.95s |  Thank you, X-Ray.
153.95s - 163.43s |  MCRTA, CCRTA, and EJPT.
163.43s - 186.37s |  So I'd like to welcome both of our speakers to the stage and please take it away.
186.37s - 189.44s |  Hello, folks.
189.44s - 194.68s |  So our presentation is on the topic breaking and defending cloud infrastructure, dehumanization
194.68s - 197.24s |  tactics, and access control solutions.
197.24s - 202.42s |  Before we start, let me introduce myself.
202.42s - 208.62s |  I am Abhishek, a security engineer at Flipkart, a Walmart company, and staff at the adversary
208.62s - 212.82s |  village at DEF CON 29232.
212.82s - 219.46s |  And with me, it's Amal Joy, Honey Badger, who is a security engineer at a leading fintech.
220.46s - 232.58s |  So the agenda of the talk would be to cover an introduction to cloud redeeming and services
232.58s - 238.46s |  we can target for stealth evasion techniques that can be applied in cloud environments
238.46s - 241.70s |  like AWS and GCP.
241.70s - 247.26s |  And we would also discuss about some defensive strategies and access control mechanisms that
247.26s - 252.26s |  you could implement in those environments and a case study.
252.26s - 261.67s |  Over to Amal Joy for the pre-introduction job.
261.67s - 262.67s |  Sure.
262.67s - 263.67s |  Yeah.
263.67s - 264.67s |  So, yeah.
264.67s - 273.11s |  So the pre-introduction job is nothing but we are just giving a heads up regarding why
273.11s - 277.79s |  this presentation, what the presentation is up to you guys.
277.79s - 278.79s |  Yeah.
278.79s - 284.83s |  Think of a situation where your company with your multi-billion dollar worth of enterprise
284.83s - 288.55s |  security compute instance is compromised.
288.55s - 292.79s |  And that can get into the multicloud environment, laterally moved across different services,
292.79s - 296.47s |  manipulated your logging service, exfiltrated gigs of data.
296.47s - 299.27s |  And all this happens in a matter of 45 minutes.
299.27s - 302.59s |  And still your blue team is still clueless.
302.59s - 308.51s |  So yeah, that's what currently our experience goes into.
308.51s - 315.63s |  And now before jumping into the introductory part, we just want to know, we just want to
315.63s - 321.27s |  showcase what this particular slides and presentation will be giving you.
321.27s - 330.43s |  So it will be going in an introductory mode rather than talking in detail about the various
330.43s - 331.43s |  evasion techniques.
331.75s - 336.79s |  So we will be going in an introductory mode about the law hanging fruits.
336.79s - 339.51s |  So let's start about introduction to Cloud Red Team.
339.51s - 345.59s |  So you can see here, so what Cloud Red Team it is, in simple we can say it's like simulating
345.59s - 351.79s |  real world attack scenarios on cloud environments to test and improve security defenses.
351.79s - 359.19s |  So it mainly targets the security controls that is being placed to understand, OK, if
359.19s - 362.71s |  a cloud-based attack has happened, how will you defend it?
362.71s - 367.11s |  So do we have cloud-based solutions such as SAP policies, which will be discussed by Abhishek
367.11s - 368.95s |  on the last slide.
368.95s - 377.95s |  And also regarding what are the other security controls, like SIM tool, like Azure Sentinel,
377.95s - 384.35s |  secure ONNX, et cetera, which can give a critical part on this particular case, right?
384.35s - 390.67s |  So what actually, how does a Red Team in cloud infrastructure differ from other, like
390.67s - 393.23s |  which is on corporate network?
393.23s - 396.55s |  It's based on end call and it's based on permission abuses, right?
396.55s - 398.19s |  So that's a difference mainly.
398.19s - 403.23s |  So maybe some of your companies might have, your company might be telling like, OK, your
403.23s - 408.11s |  end call is to exfiltrate something from S3, but at some point, some company might say
408.11s - 412.19s |  like, OK, your end call is to get maximum privilege, right?
412.19s - 413.19s |  How you can do.
413.31s - 417.51s |  We will be discussing some of the techniques regarding AWS and GCP now.
417.51s - 421.43s |  Yeah, Abhishek, over to the, can you go on to the next slide?
421.43s - 422.43s |  Yeah.
422.43s - 424.95s |  So this is services targeted for SLED.
424.95s - 434.35s |  So yeah, mostly, as we talked, there are the long-hanging fruits are really important when
434.35s - 436.55s |  we are performing cloud Red Team, right?
436.55s - 442.39s |  So some of the services, some of the services, how you can abuse, it plays a vital role on
442.59s - 447.75s |  how you will be in a stealth mode when you are doing cloud Red Team, particularly in
447.75s - 449.67s |  AWS and GCP, right?
449.67s - 460.11s |  So here are, there are one of the four main services which might be targeted by attackers
460.11s - 465.35s |  for that they can have a stealth mode when they are targeting certain services on the
465.35s - 466.35s |  multicloud infrastructure.
466.35s - 470.43s |  One is AWS Cloud Trial API calls, of course, you know, right?
470.43s - 476.67s |  And there is, IAM API calls are there also Cloud Logging S3 packet API calls, which of
476.67s - 481.11s |  course will be pointing to the Cloud Trial API calls, then for the GCP, the IAM service
481.11s - 482.11s |  account API calls.
482.11s - 491.83s |  So we will be discussing like how an attacker can abuse this particular API calls and make
491.83s - 496.59s |  sure that, okay, your SIM or your access control policies that you are implementing on the
496.59s - 502.71s |  organizational level will not be, won't be of no use, like at least we can move on in
502.71s - 503.71s |  a stealth mode.
503.71s - 504.71s |  Right.
504.71s - 510.19s |  So we are making sure that always the law hanging fruits does matters.
510.19s - 511.19s |  Okay.
511.19s - 512.19s |  Yeah.
512.19s - 513.19s |  I'm sure you're going to the next page.
513.19s - 518.69s |  So innovation techniques in this AWS, yeah.
518.69s - 525.77s |  So one of the important point while we were doing Red Team engagements where rather than
525.77s - 531.01s |  going to admin access, think of a situation when you are a SOC team, when they were asked
531.01s - 535.61s |  about an attack scenario, they were not able to fetch certain logs in order to prove that,
535.61s - 538.61s |  okay, what all was lost from their multicloud infrastructure.
538.61s - 543.85s |  So one of the important API call is put even selected API calls on the Cloud Trial.
543.85s - 545.45s |  So what does API calls do?
545.45s - 554.41s |  When, for example, you can tell the particular Cloud Trial to include, okay, which all services
554.41s - 558.53s |  from which you can, okay, what all logs should be fetched from which all services.
558.53s - 563.69s |  So if an attacker gain control of this put even selected API calls, for example, if an
563.69s - 569.61s |  attacker gain control of your certain automation role, or maybe your instance is compromised
569.61s - 574.41s |  and that attacker fetched the instance profile role and that role is our privilege.
574.41s - 579.77s |  So one of the important point rather than getting into administrator access is whatever
579.77s - 585.13s |  he does, which is a privilege he has, at least we need to make sure that we are in
585.13s - 587.21s |  line with what he's doing, right?
587.21s - 588.93s |  The Blue Team knows that what he's doing.
588.93s - 594.97s |  Think of a situation where the put even selected API calls, he has a permission, or for example,
594.97s - 600.09s |  maybe a certain privilege on the Cloud Trial, and he was able to manipulate a put even selected
600.09s - 606.01s |  to make sure that certain services that the logs are being pointed out, he was able to
606.01s - 607.01s |  manipulate.
607.01s - 614.09s |  And what happens now is the excluded services, which are added on the put even selectors
614.09s - 617.37s |  will not be logged.
617.37s - 621.85s |  That means maybe your Cloud Trial is being pointed to your SIEM, and it won't be able
621.85s - 624.01s |  to fetch the details from there.
624.01s - 627.21s |  So what will happen, whatever exfiltration techniques you have done.
627.21s - 631.69s |  So in our team engagements, we were able to laterally move privilege, escalate everything.
631.69s - 636.45s |  But when we have pulled down this put even selectors, and abused this put even selectors,
636.45s - 641.45s |  and do our exfiltration techniques, what happened was, when we reached for Purple Team activities
641.45s - 645.01s |  for the Soft Team, they were not able to see what we have done.
645.01s - 650.29s |  So that brings a real question that, okay, what all was exfiltrated from the multi-cloud
650.29s - 652.65s |  infrastructure, or the cloud infrastructure.
652.65s - 661.33s |  The second part was, this includes two things, as I said, it is conditional, because we need
661.33s - 666.49s |  a certain condition that your organization has deployed Honey Tokens on your AWS services,
666.49s - 670.97s |  AWS infrastructures, and how we are able to bypass Honey Tokens, right, there will be
670.97s - 674.21s |  dummy user that will be created, which is there, there will be no privilege.
674.21s - 680.21s |  So what will happen if an attacker gain access to that particular key, or a role, or whatever
680.21s - 684.53s |  it is, what will happen, it will provide an explicit Deny, because there won't be any
684.53s - 685.53s |  permission.
685.53s - 689.57s |  So this error log will be tracked from Cloud Trial to your SIEM tool, or whatever it is,
689.57s - 691.81s |  and then the Soft Team will be alerted.
691.81s - 697.73s |  But in AWS, there are certain services where Cloud Trial integration can't be possible,
697.73s - 701.01s |  AWS imports certain VPC-specific policies.
701.01s - 705.57s |  So what will happen if an attacker, for example, for basic enumeration itself, if you want
705.57s - 715.45s |  to get the basic information regarding your account ID, your user ID, etc., hitting the
715.45s - 721.37s |  SDS endpoint, everything, basic enumeration, without getting logged into the Cloud Trial,
721.37s - 727.33s |  he can try to hit that particular API endpoints, even if it is an error that is being fetched,
727.33s - 731.69s |  it will give, okay, this particular account ID is not able to access this particular thing.
731.69s - 737.37s |  So the basic information is being given, coming to the point that Honey Tokens, okay, that
737.37s - 743.21s |  particular account is being created as a Honey account, but that trial, because we hit on
743.21s - 748.09s |  a particular service, which is not being supported to Cloud Trial log integration.
748.09s - 749.09s |  So what will happen?
749.09s - 755.93s |  It won't be going into SIEM as, okay, this guy hit this particular Honey user.
755.93s - 760.69s |  So we can detect that, okay, using this technique, by proxying through the service that is not
760.69s - 764.21s |  supported by Cloud Trial, we can detect that, okay, this particular user is being used by
764.21s - 767.67s |  Honey Token, used as a Honey user.
767.67s - 768.67s |  So that's one thing.
768.67s - 775.23s |  And the next thing was the crucial point, as I told, stop log, I mean, log hanging routes
775.23s - 776.23s |  are really important.
776.23s - 783.11s |  We won't be really surprised that at some point of time, even you have some implementation
783.11s - 788.55s |  for the purple teaming, many of the organization, what they felt is, okay, if a stop log API,
788.55s - 795.43s |  like that's a basic thing, right, if a stop log API calls that on a trial, maybe it's
795.43s - 804.11s |  a multi-trial setup that has been on your AWS account, and maybe when you hit one trial,
804.11s - 808.07s |  what I faced in a red team engagement was, when you hit that trial, I didn't expect that
808.07s - 809.27s |  trial to go down.
809.27s - 813.59s |  I expect that particular SOC team to respond as soon as possible.
813.59s - 822.23s |  But what happened was, by hitting one stop log API on a trial, on a region, the entire
822.23s - 824.47s |  trial on every region went down.
824.47s - 832.55s |  And the SOC was not identified because they were facing difficulty in properly integrating
832.55s - 835.47s |  the stop log API calls into the SIEM.
835.47s - 840.51s |  So that is one of the important points, where if the log hanging routes regarding the stop
840.51s - 846.87s |  log API, if that is not being detected, that means the whole attack scenario won't be detected.
846.87s - 851.83s |  So it is really rare that stop log API calls are not being properly configured on the SIEM,
851.83s - 861.43s |  but still, we can also give a block using SAP policies, which will be discussed by Abhishek.
861.43s - 868.63s |  The next point was compromising the AWS role, and if an attacker was able to proxy that
868.63s - 875.39s |  AWS role, the trust relationship to an externally controlled attacker, attacker controlled account.
875.39s - 880.59s |  What will happen now is, here, the external account, right, whatever we are trying to
880.59s - 886.03s |  abuse, like we will just create a role, give them a random name, and make sure that this
886.03s - 888.63s |  role can be assumed from an external account.
888.63s - 894.83s |  So what will happen now is, the organization has a limitation, it all comes with a certain
894.83s - 901.19s |  offensive assessment we have, and the organization has an issue where maybe they have a dependency
901.19s - 906.99s |  on like, maybe their one parent account and their child accounts will be there, and then
906.99s - 912.59s |  one child from one child account, they should be able to assume a particular role from another
912.59s - 913.59s |  account.
913.59s - 916.35s |  So they can't restrict trust relationship there.
916.35s - 921.83s |  So what SIEM can do here is to make sure that, okay, our organization has this much account
921.83s - 929.95s |  IDs, if any use attacker does this particular attack by using any account ID other than
929.95s - 934.43s |  our particular account IDs, our organizational account ID, they can block.
934.87s - 940.03s |  Our experience was, when we were trying to give the external account ID, the attack was
940.03s - 945.59s |  not detected until, and even famous, like we are not pointing out the names of certain
945.59s - 951.55s |  tools, certain tools was giving the critical, because the role can assume administrator
951.55s - 953.19s |  access indirectly.
953.19s - 959.67s |  So certain CSPM tools and cloud security tools was giving them a medium priority, because
959.67s - 962.99s |  the external account was able to assume certain roles.
963.07s - 968.91s |  So what will happen, the SOC team might feel like, okay, this is a just assumed role that
968.91s - 971.19s |  being assumed by one of our account IDs.
971.19s - 978.71s |  So we shouldn't be able to, we shouldn't be taking it as it is serious, because, yeah,
978.71s - 984.07s |  this particular technique was of greater importance for us, because using these techniques, we
984.07s - 989.75s |  were able to, and this technique and the put even selectors technique, combined with combining
989.75s - 995.03s |  this particular technique to put even the selectors technique, most of the organization
995.03s - 1002.67s |  where we have done offensive assessment, we were able to at least get hold of their services
1002.67s - 1006.31s |  for at least for a few hours without being getting detected.
1006.31s - 1010.40s |  Yeah, Abhishek, next.
1010.40s - 1016.84s |  So yeah, the evasion techniques in GCP, which will be discussed by Abhishek now, over to
1016.84s - 1017.84s |  you Abhishek.
1018.84s - 1024.84s |  Yeah, so Amal has already went through the evasion techniques for AWS platform.
1024.84s - 1027.84s |  Now, let's check out the techniques for GCP.
1027.84s - 1035.16s |  One of the key techniques would be by leveraging service account impersonation, this would
1035.16s - 1042.44s |  be done by abusing the particular role that is called IAM service account token creator,
1042.44s - 1050.00s |  the attacker will be able to abuse this by carrying out activities using a highly privileged
1050.00s - 1052.68s |  service account identity.
1052.68s - 1059.24s |  If this type of role is being abused, then it would make it really challenging for the
1059.24s - 1066.32s |  security tools and SIEM systems to detect the malicious activity because from the point
1066.32s - 1072.84s |  of view of a soft team or SIEM systems, it would more look like the actions were done
1072.84s - 1075.12s |  using a genuine service account.
1075.12s - 1086.10s |  Now, let's move over to the defense strategies and access controls for both AWS and GCP.
1086.10s - 1095.70s |  One of the key defense mechanisms that we can implement here would be the service control
1095.70s - 1096.70s |  policies.
1096.70s - 1103.14s |  Service control policies that we can implement at the organization level would prevent abuse
1103.14s - 1109.34s |  of specific API calls that can be used by the attackers for malicious purposes or out
1109.34s - 1112.86s |  of the box purposes than its intended usage.
1112.86s - 1118.70s |  Amal has already discussed about some of the API calls like put event selectors or stop
1118.70s - 1126.82s |  logging that could be abused by a threat actor if he is able to call those APIs in
1126.82s - 1128.62s |  your cloud environment.
1128.62s - 1135.54s |  So as a measure to defend against that, you can stick to service control policies in the
1135.54s - 1141.82s |  OU level which would restrict what all specific API calls can be triggered by the components
1141.82s - 1142.82s |  in your OU.
1142.82s - 1150.46s |  This is a powerful defense strategy against such API call abuses.
1150.46s - 1158.82s |  And another method would be to focus on IAM standardization by having a standardized set
1158.82s - 1165.18s |  of identity and access management policies and procedure set for managing the permissions
1165.18s - 1166.18s |  and identities.
1166.18s - 1175.82s |  It will be a more of a defensive approach where it would be hard for attackers to abuse
1175.82s - 1186.41s |  certain extra permissions that are being assigned or API calls that can be used to abuse.
1186.41s - 1193.45s |  And another defense strategy that we can perform in AWS is one of the key features, key security
1193.45s - 1196.65s |  features that's AWS permission boundary.
1196.65s - 1203.37s |  This is a feature that would help you to define what would be the maximum permission
1203.37s - 1208.45s |  that a role or an IAM user can do in case of roles.
1208.45s - 1214.73s |  It would be the maximum permission that the role, that the particular user who can assume
1214.73s - 1219.13s |  the role can perform after assumption of the role.
1219.13s - 1226.57s |  So if the permission boundaries are set, even if some extra permissions are set by another
1226.57s - 1234.01s |  entity to that particular IAM user or role, it won't be able to do actions that it is
1234.01s - 1242.69s |  not capable of because the permission boundary will make it to stick to the restrictions
1242.69s - 1244.73s |  that are set in the boundary.
1244.73s - 1250.73s |  So only the maximum level of permissions that is defined in the boundary would be what the
1250.73s - 1255.64s |  IAM user or role can have.
1255.64s - 1258.76s |  Another feature would be service account segmentation.
1258.76s - 1265.24s |  So by implementing service account segmentation and principles of least privilege, we will
1265.24s - 1271.52s |  be able to make sure that service account related abuses are prevented.
1271.52s - 1276.88s |  This can be done by segmenting service accounts properly and only assigning them necessary
1276.88s - 1280.40s |  permissions that are required for these specific tasks.
1280.40s - 1283.36s |  We generally use service accounts for automation.
1283.36s - 1290.28s |  So when we are creating service accounts, we should make sure that the permissions are
1290.28s - 1297.80s |  aligned up and only the permissions for specific tasks or the business use case should be assigned
1297.80s - 1303.40s |  to the service account by following the principle of least privilege.
1303.40s - 1306.20s |  This segmentation can be done.
1306.20s - 1309.92s |  And another method would be purple teaming.
1309.92s - 1316.80s |  As you all are aware, when the red team and blue team are combinedly working, the red
1316.80s - 1322.16s |  team would simulate realistic attacks on the cloud environment and the corresponding blue
1322.16s - 1327.16s |  team of your organization can work to detect and respond to these threats.
1327.16s - 1335.24s |  This would give both the teams a great idea on who is really ahead in the chart, like
1335.56s - 1341.04s |  what all are the controls we are lacking or what all are the controls in place that can
1341.04s - 1342.32s |  be bypassed etc.
1342.32s - 1349.80s |  This would be testing your security posture and this will give you a future roadmap on
1349.80s - 1356.12s |  how the security posture can be improved by making the security controls currently in
1356.12s - 1362.24s |  place strong also by bringing in new controls that are necessary.
1362.24s - 1368.12s |  Since the red team would be simulating the actions of a real attacker, it would help
1368.12s - 1376.40s |  to understand how or what would be the actions that the real attacker would perform in your
1376.40s - 1382.68s |  environment after he or she gets access to your cloud environment.
1382.68s - 1389.12s |  This would also test the effectiveness of the SIEM rules that the SOP team is having
1389.12s - 1395.96s |  and would also significantly improve incident response capabilities over time.
1395.96s - 1398.96s |  That's all about the defense part.
1398.96s - 1402.16s |  Now let's move over to the case study.
1402.16s - 1406.96s |  We know it's getting late, so over to Amal.
1406.96s - 1407.96s |  Yep.
1407.96s - 1416.20s |  So yeah, without a case study, I think our 1P of it could finish.
1416.20s - 1420.24s |  So Abhishek, yeah, over to you.
1420.24s - 1423.04s |  Can you take the next slide?
1423.04s - 1431.44s |  Yeah, so in case study, we are just trying to make up a particular scenario that we faced
1431.44s - 1436.80s |  and we compromised when we were doing certain red team engagements.
1436.80s - 1440.68s |  So one of the scenarios we are just making in front of you.
1440.68s - 1449.16s |  So what happened was, we were able to, the initial access, we were, the end goal of the
1449.16s - 1455.88s |  engagement was to exfiltrate certain sensitive information and to move as long as we can
1455.88s - 1461.28s |  and most probably, and also there we have to check the enterprise security controls
1461.28s - 1466.28s |  capability that the organization has and the access controls the organization on the cloud
1466.28s - 1467.28s |  level.
1467.28s - 1472.76s |  So what happens here was, on the initial access, we were not given anything.
1472.76s - 1478.68s |  So what we did was, we enumerated externally to make sure that, okay, what all things are
1478.68s - 1481.00s |  publicly exposed on the organization.
1481.00s - 1488.08s |  So on the initial part, we were able to find some applications which were not in use, but
1488.08s - 1493.08s |  for our surprise, that organization was using one of the enterprise security control, there
1493.08s - 1494.28s |  was a DLP.
1494.28s - 1498.20s |  So I'm not specifically saying which was the particular DLP owner.
1498.20s - 1503.80s |  So we were able to find a DLP based remote code execution there.
1503.80s - 1510.64s |  So, and using the remote code execution, what we were able to do, we were able to get
1510.64s - 1518.68s |  into that particular DLP based, externally hosted DLP server, and where the most beautiful
1518.68s - 1524.52s |  part was, that instance was, as usual, we expected as a cloud security researcher and
1524.52s - 1530.56s |  offensive security engineer, we were able to try, okay, it's a cloud engagement, it's
1530.56s - 1532.52s |  not a network based engagement.
1532.52s - 1534.68s |  So we want to stick to the cloud services.
1534.68s - 1538.92s |  So what we did, okay, let's try to find if there is any web identity there.
1538.92s - 1544.92s |  And using that web identity, are we able to use that web identity to assume a role, which
1544.92s - 1547.14s |  is being attached to that particular instance.
1547.14s - 1556.20s |  So we found a web identity which we used to get the role, which was being attached to
1556.20s - 1557.20s |  this particular instance.
1557.20s - 1564.04s |  And we were able to fetch the instance profile role credentials and we get into this particular
1564.04s - 1571.68s |  AWS account, it was there, the DLP instance was hosted on the one of their AWS instance.
1571.68s - 1578.20s |  And we were able to fetch the role credentials using the web identity, which they were using
1578.20s - 1584.96s |  as a basic restriction, where web identity was clubbed to their cognitive.
1585.32s - 1590.80s |  What happened after assuming the role was, we were able to get the role credentials,
1590.80s - 1593.16s |  and we started enumerating the role credentials.
1593.16s - 1597.92s |  And we were sure that as it is a DLP based instance, and the instance profile role attached
1597.92s - 1603.60s |  was for an enterprise security control, which was managed by security professionals.
1603.60s - 1609.40s |  We expect that, okay, security professionals will take everything on for granted at some
1609.40s - 1614.48s |  point, because we never expect attacks on us, right?
1614.48s - 1619.20s |  So there are so many blocks also in recent times, when 100 goes 100.
1619.20s - 1625.04s |  So it was that case where we just got the role credentials and we tried to get, okay,
1625.04s - 1631.68s |  what are the privileges, we were having low privilege, but one of the API, which was being
1631.68s - 1636.52s |  abused, one of the IAM API, which was being abused to escalate our privilege.
1636.52s - 1641.04s |  But what we have done instead of maximizing our privilege was, we just attached to the
1641.08s - 1643.44s |  certain role for cloud trial.
1643.44s - 1649.00s |  So that, okay, let's abuse cloud trial, then after that, let's attach certain or privilege
1649.00s - 1653.12s |  like, for example, IAM full access, or maybe admin access, or maybe certain services we
1653.12s - 1654.12s |  need.
1654.12s - 1659.12s |  So we attach certain abusing cloud trial API permissions.
1659.12s - 1666.16s |  And what we did was, we have used here, we have asked our priorities to secure the organization,
1666.16s - 1671.88s |  we tried to make sure that, okay, what, how this particular SOC team will, or their SOC
1671.88s - 1673.56s |  team will respond.
1673.56s - 1680.00s |  So we use the put event selectors API abuse, and also the stop log API abuse.
1680.00s - 1684.40s |  And for our luck, both were successful.
1684.40s - 1692.56s |  And stopping one of the trials on one region, stopped trials on every region.
1692.56s - 1694.40s |  And that was unexpected.
1694.40s - 1700.96s |  This was not being added as an SAP policy, as Abhishek said, the SAP policy was not properly
1700.96s - 1701.96s |  configured.
1701.96s - 1707.84s |  So that the users, other than certain infrastructure engineers who are capable of starting and
1707.84s - 1713.92s |  stopping logs, shouldn't be able to touch or stop certain services, especially the sensitive
1713.92s - 1717.32s |  API calls like put event selectors API and stop log API.
1717.32s - 1718.32s |  And we were successful.
1718.32s - 1724.24s |  And keep in mind that our strong focus is to secure the organization, we tend to the
1725.08s - 1729.24s |  conclusion that, of course, we need to make sure that business is not being impacted,
1729.24s - 1735.08s |  you have to make sure that at least it should be stopped for at least 15 to 20 minutes or
1735.08s - 1740.72s |  30 minutes, we have to fasten our process so that any other issues that being that is
1740.72s - 1745.00s |  being happened on their particular infrastructure shouldn't be affected because we are stopping
1745.00s - 1746.00s |  the logs here.
1746.00s - 1753.20s |  But considering the other part, we have to understand that each SOC team will be able
1753.20s - 1758.84s |  to identify that time because we have to make sure that okay, rather than an organization
1758.84s - 1763.76s |  getting affected with a 30 minute or 45 minutes red team engagement, think of the situation
1763.76s - 1768.92s |  this stop log API part is not being properly configured or the put event selectors API
1768.92s - 1773.28s |  part is not being properly configured and the attacker used to this for maybe one week
1773.28s - 1778.20s |  or one week or 48 hours and still the SOC team is not able to know like what is going
1778.20s - 1779.20s |  on, right?
1779.20s - 1786.48s |  This is better than getting the two weeks like, okay, there are no logs, what is happening
1786.48s - 1787.48s |  to my trial?
1787.48s - 1788.48s |  What happened now?
1788.48s - 1791.04s |  Who has done what?
1791.04s - 1795.44s |  So rather than guessing or waiting for attack to happen, what we have done, okay, we have
1795.44s - 1800.68s |  to let them know that if an attacker having 30-45 minutes, what he can do.
1800.68s - 1805.44s |  So what we have done after abusing the cloud trial API, next, what we have done is okay,
1805.44s - 1812.48s |  now we are in control means none of the logs will be going to the SIEM tool, maybe Securonics,
1812.48s - 1816.40s |  maybe Azure Sentinel, they are doing what we will do because from the cloud trial, they
1816.40s - 1820.88s |  will be pushing the logs to S3 then pointing that to the SIEM tool, right?
1820.88s - 1824.38s |  So there is no logs that is being going to the SIEM now.
1824.38s - 1830.12s |  So what we have done now, an external role backdoor for the persistence, we have again
1830.68s - 1837.72s |  emulated a scenario where from our own personal account, we have created an user which can
1837.72s - 1843.56s |  assume certain role that is being created on the target organization, right?
1843.56s - 1848.64s |  So what we have done then, okay, we have created the backdoor there, and we assumed the role
1848.64s - 1849.64s |  from there.
1849.64s - 1856.88s |  From our account, we were able to assume role from the target organization, then we attach
1856.88s - 1861.04s |  a particular page, maybe we can attach any privilege like admin privilege, which is
1861.04s - 1865.84s |  of great noise, I will say, but what is the scenario here, that is important, because
1865.84s - 1867.32s |  now we are not getting detected.
1867.32s - 1878.72s |  So adding administrator access or any access after manipulating the cloud trial API logs,
1878.72s - 1884.64s |  that doesn't make any noise now, because the SOC team is not able to get what you are doing,
1884.64s - 1885.64s |  right?
1885.64s - 1891.48s |  So our thinking skills remains, manual thinking skills is really important when you are performing
1891.48s - 1892.48s |  a team engagement.
1892.48s - 1897.00s |  So after putting the external role backdoor with high privilege, we try to now laterally
1897.00s - 1902.12s |  move across different services, exfiltrate sensitive information from certain services,
1902.12s - 1905.44s |  including secret manager, S3, everything.
1905.44s - 1911.96s |  And the most important part was, they were storing, we exfiltrated secret from secret
1911.96s - 1917.40s |  manager, everything, and they were storing certain GCP service account key on one of
1917.40s - 1919.00s |  their services.
1919.00s - 1925.88s |  And that was a cruel point from us, because we don't want that to be compromised there.
1925.88s - 1929.92s |  And what happened next was, the service account which was compromised, and we want access
1929.92s - 1932.28s |  and now it's a cloud to cloud lateral movement.
1932.28s - 1938.48s |  From AWS, we were able to move into their GCP account, and you know, and everyone knows
1938.48s - 1944.32s |  that for GCP, like AWS has their boundary across account IDs, right?
1944.32s - 1949.60s |  Different accounts is their boundary, and GCP that is in project level, right?
1949.60s - 1956.92s |  Different projects marks the permission, the boundary like, for example, you shouldn't
1956.92s - 1961.08s |  be able to access a production project from a non-prod project, right?
1961.08s - 1965.12s |  For example, you shouldn't be able to, the restriction should be there, you shouldn't
1965.12s - 1968.92s |  be able to jump from one AWS account to another AWS account.
1968.92s - 1973.20s |  So on the account level, we have security boundary, here on the project level, GCP will
1973.20s - 1975.24s |  be implementing the security boundary.
1975.24s - 1980.92s |  But after we have enumerated the service account, we were not able to get some access.
1980.92s - 1991.84s |  But the most important point was, I think for certain third-party vendors, vendor-based,
1991.84s - 1997.84s |  they have created a service account on a non-prod environment, and that service account
1997.84s - 2003.56s |  were having token impersonation privilege, and that was crucial for us.
2003.56s - 2010.12s |  And the best part was, they were creating a particular service account, and that service
2010.12s - 2017.28s |  account was a common service account, because when we enumerated service account, we found
2017.28s - 2019.80s |  so many service accounts.
2019.80s - 2024.24s |  And what happened now was, one of the service account on our non-prod project, they have
2024.24s - 2030.96s |  created as a common service account, and this service account is having access to prod project
2030.96s - 2031.96s |  also.
2031.96s - 2038.60s |  So we impersonated one of the service account, and that service account was common for the
2038.60s - 2041.08s |  non-prod project and the production project.
2041.08s - 2046.12s |  We impersonated the production, that particular service account, upon enumeration of the token,
2046.12s - 2052.52s |  we just jumped from non-prod to prod production service account, I mean, project there.
2052.52s - 2059.60s |  So what happened was, we were not having any owner role on that non-prod project, but the
2059.60s - 2067.24s |  beautiful part of GCP was, and the company which gives us this offensive assessment was,
2067.24s - 2073.28s |  they were using inbuilt roles for GCP, which is of no surprise, because of course, we don't
2073.28s - 2079.20s |  want like, it's a difficult task, right, at some point, like we have to create custom
2079.20s - 2084.56s |  roles for certain people, but here, the fate was against them.
2084.56s - 2090.04s |  The issue was, the particular account which was compromised was having editor role access
2090.04s - 2096.46s |  on the non-prod project, and also editor role access on the production project.
2096.46s - 2102.34s |  So the big issue was, we were not able to impersonate the token, but the editor role
2102.34s - 2111.22s |  has a particular role called user creation, that means, there is no impersonation happening,
2111.22s - 2114.34s |  we can create a key for the user.
2114.34s - 2120.42s |  So what happens, when you don't have impersonation, but you have an extra key, you can create
2120.42s - 2124.90s |  an extra key for any user in your account, means, it's again a huge privilege.
2124.90s - 2129.46s |  They have restricted the impersonation, token impersonation privilege on the editor role,
2129.46s - 2136.46s |  but there was token creation, where, key creation, sorry, the JSON key creation, you can create
2136.46s - 2141.26s |  any additional key for a service account on that particular place.
2141.26s - 2145.98s |  So token impersonation is different, key creation is different, again, it acts as a factor as
2145.98s - 2151.26s |  well, the extra key we are giving, any user who creates that particular service account
2151.26s - 2155.50s |  will be having one key on their hand, but we also have another key on our hand, that
2155.50s - 2161.14s |  means, the people who is the owner of that particular service account will be authenticating
2161.14s - 2163.86s |  using that key, and we will be using our backdoor key.
2163.86s - 2169.78s |  But using this privilege, even though we have editor role, we were able to add a service
2169.78s - 2174.50s |  account, which has owner privilege on the particular role.
2174.50s - 2181.22s |  And what happened, their entire production project was compromised because of that.
2181.22s - 2186.86s |  And after that, we stealthily exfiltrated secrets from there.
2186.86s - 2194.78s |  And the beauty of this was, on this particular thing, as we defended the CloudTrail, I mean,
2194.78s - 2200.42s |  we abused the CloudTrail API calls, there's logs from that part remains as a mystery,
2200.42s - 2202.10s |  like, okay, what happened?
2202.10s - 2206.06s |  They have to reach to us to make sure that, okay, what all we have done.
2206.06s - 2211.58s |  Of course, we have shared some of the reports, we have made sure that, okay, purple teaming
2211.58s - 2216.74s |  is done properly to make sure that the organization is well capable now.
2216.74s - 2222.14s |  And because of this stealthy exfiltration, it has from an attacker who has access to
2222.14s - 2230.18s |  nothing, has now compromised their ADAPT and their production GCP project too.
2230.18s - 2236.62s |  So it was a multi-cloud attack, which was done from nowhere and resulted in critical
2236.62s - 2242.06s |  exfiltration without getting detected, even though some part of the GCP exfiltration was
2242.06s - 2243.06s |  detected.
2243.06s - 2249.34s |  But as it is a service account impersonation, it's more of like a, as Abhishek said, it's
2249.34s - 2250.86s |  more of like a proxy.
2250.86s - 2255.22s |  What happened was, they were thinking like, okay, it's a legitimate account.
2255.22s - 2259.38s |  So it is being trying to add certain things on the project.
2259.38s - 2264.90s |  And the most critical part on doing assessment using CLI and console comes here.
2264.90s - 2269.30s |  Because when you're opening CLI, at the same time, you are hitting thousands of API calls,
2269.30s - 2270.30s |  right?
2270.30s - 2278.02s |  So that itself is being, at some point when it's a shock of like, not that much big quality
2278.02s - 2281.86s |  or if they don't know that much big picture of red team assessment, they might feel like,
2281.86s - 2285.34s |  okay, the user with the console, as he is trying, there's so many API calls are being
2285.34s - 2286.34s |  reset.
2286.34s - 2291.06s |  But when you are trying to authenticate with CLI, you are specifically hitting certain
2291.06s - 2292.30s |  API calls only.
2292.30s - 2297.10s |  And that too, you are abusing CloudTrail and making critical impersonation that they will
2297.10s - 2301.34s |  think like, okay, there is not much traffic and there's this proxy thing going on.
2301.34s - 2308.06s |  So in order to detect it, as Abhishek said, there are so many methods like segmentation
2308.06s - 2311.66s |  and SCP policies, which is really, really important.
2312.46s - 2321.26s |  And for example, we can build a certain architecture solutions for trying to defend against cloud
2321.26s - 2325.26s |  exfiltration, like maybe some DLP solution or DLP exfiltration.
2325.26s - 2329.26s |  Yeah, that's it from our end.
2329.26s - 2330.26s |  Yeah, Abhishek.
2330.26s - 2331.26s |  Yeah.
2331.26s - 2341.76s |  If anybody have any queries, you can answer it.
2341.76s - 2343.76s |  Thank you for listening.
2343.76s - 2347.76s |  Anyone got any questions or query for us?
2348.36s - 2365.67s |  I'm just not familiar with the subject enough to have any like constructive questions.
2365.67s - 2367.67s |  I need to do some more learning.
2367.67s - 2370.67s |  But it was clear to me I could follow you on everything.
2370.67s - 2374.40s |  So thanks a lot.
2374.40s - 2376.40s |  Thank you, Benvid.
2376.40s - 2377.40s |  Thank you, Benvid.
2377.40s - 2389.22s |  Yeah.
2389.22s - 2398.22s |  I have left out, linked in URLs of both of us in the chat, in case any of you want to
2398.22s - 2399.22s |  come and show.
2399.22s - 2424.14s |  Don't be shy, if anybody has any questions, bring them up now.
2433.90s - 2436.90s |  Well, thank you, Abhishek and Amal.
2436.90s - 2438.90s |  That was an excellent presentation.
2438.90s - 2442.62s |  All the way from India.
2442.62s - 2443.62s |  Thank you.
2443.62s - 2444.62s |  Yeah.
2444.62s - 2445.62s |  Thank you, X-Ray.
2445.62s - 2446.62s |  Thank you.
2446.62s - 2450.62s |  They're from DC 0471 in Trivandrum, India.