{
  "webpage_url": "https://www.youtube.com/watch?v=-pxmly8xeas",
  "title": "DEF CON 32 - Breaking the Beam:Exploiting VSAT  Modems from Earth -  Lenders, Willbold, Bisping",
  "description": "VSAT satellite communication systems are widely used to provide two-way data and voice communications to remote areas, including maritime environments, crisis regions, and other locations where terrestrial communication infrastructure is limited or unavailable. In this presentation, we report on our security findings from our reverse-engineering efforts to exploit VSAT satellite modems from the Earth. We will focus on the Newtec MDM2200 from iDirect as an example. First, we explain how we reverse-engineered the software stack running on the modem device to find 0-day vulnerabilities. Then, we show how we reverse-engineered the network stack to devise attacks that can be launched by injecting wireless signals through the antenna dish of a VSAT terminal. Finally, we demonstrate our software-defined radio end-to-end attacks to inject bogus firmware updates and to gain a remote root shell access on the modem. To the best of knowledge, this represents the first successful demonstration of signal injection attacks on VSAT modems using software-defined radios from the Earth, while previous attacks on VSAT systems such as the ViaSat hack in 2022 were based on exploiting the operator\u2019s network through Internet VPN connections. Our work therefore enlarges significantly the attack surface of VSAT systems.\n\nOur presentation at DEF CON is part of a project that has three parts.\n\nIn the first part, we focus on the inherent security issues in current VSAT system practices. This work will be appear in May at ACM WiSec 2024.\n\nVSAsTer: Uncovering Inherent Security Issues in Current VSAT System Practices, Johannes Willbold, Moritz Schloegel, Robin Bisping, Martin Strohmeier, Thorsten Holz, Vincent Lenders, 17th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec), Seoul, Korea, May 2024.\n\nThe second part deals with the systematic evaluation of wireless signal injection attacks using a software-defined radio. This work will appear in August at Usenix Security 2024:\n\nWireless Signal Injection Attacks on VSAT Satellite Modems, Robin Bisping, Johannes Willbold, Martin Strohmeier, and Vincent Lenders, 33rd USENIX Security Symposium (USENIX Security), Philadelphia PA, USA, August 2024.\n\nThe third part of the project deals with reverse-engineering of the software and network stack of satellite modems and the development of exploits that can be injected over the air through the antenna dish of a VSAT terminal from the ground. This part shall be presented at DEF CON this year.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 2379,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

1.49s - 8.67s | This text was transcribed using whisper model: large-v2

 So hello everyone and welcome to our presentation on breaking the beam a new type of attack
9.65s - 14.09s |  That aims at exploiting vSAT satellite communication from the earth
14.77s - 18.69s |  But first let me introduce ourself. I'm Vincent. I'm
20.09s - 22.77s |  Cybersecurity researcher for more than 20 years
23.13s - 28.29s |  I've been focusing mostly on the security of wireless networks in my research and
28.29s - 33.13s |  And currently I'm acting as a director of the cyber defense campus in Switzerland
33.53s - 36.77s |  We have also with us today Johannes is a PhD student
37.41s - 38.89s |  from the
38.89s - 45.69s |  University of Bochum in Germany and is researching the software security of space and satellite systems
46.17s - 50.77s |  and also with us today is a Robin is a graduate students from ETH Zurich and
51.37s - 56.37s |  It has been also working at the cyber defense campus in the context of his master thesis
56.85s - 58.25s |  So
58.25s - 60.53s |  Let me start with what vSAT
61.29s - 68.09s |  Communication is vSAT stands for very small aperture terminal. This is a special type of
69.49s - 71.49s |  satellite communication
71.73s - 72.93s |  that
72.93s - 74.93s |  communicates over
75.25s - 83.41s |  Geostationary satellites you you can see here on the picture on the left a maritime vSAT communication system
86.23s - 87.87s |  A
87.87s - 90.35s |  Maritime vSAT. Can you please switch off the
91.55s - 98.83s |  The music. Thanks. We have a maritime vSAT communication system that is equipped on the ship or on the right
98.83s - 100.67s |  We have a terrestrial
100.67s - 101.83s |  vSAT
101.83s - 104.75s |  system that is typically used for
105.79s - 107.27s |  terrestrial
107.27s - 108.31s |  applications
108.31s - 112.03s |  This vSAT communication systems. They typically provide data
113.03s - 115.87s |  Video or voice communication services
116.71s - 117.95s |  and
117.95s - 120.23s |  They are not so small as the name stands
120.75s - 125.27s |  This antenna dishes can be typically the size of a one meter or two meters
127.96s - 129.84s |  Okay
129.84s - 134.40s |  if we look at a system a vSAT communication system
134.48s - 142.18s |  It basically consists of three components. We have a central hub. The central hub is typically connected to the Internet
142.18s - 143.30s |  and
143.30s - 145.70s |  We have a satellite geostationary
146.26s - 150.86s |  Geostationary satellite that's a satellite that is in the orbit such that it
151.62s - 153.62s |  Rotates at the same speed
154.14s - 161.66s |  Around the earth out there as the earth is rotating around its own axis. So the satellite stays always at the same
162.78s - 166.90s |  Location compared to the earth and then we have a vSAT
167.34s - 174.46s |  Endpoint that's a dish with a modem where users can connect their mobile device or smartphone laptops, whatever
175.38s - 181.14s |  If we look at the communication, it's a bidirectional communication. So we have a forward channel
181.54s - 185.62s |  From the central hub that goes over the satellite to the vSAT endpoint
186.42s - 188.06s |  and we have a
188.06s - 191.90s |  Return channel that goes from the vSAT endpoint back over the satellite
192.50s - 197.42s |  To the central up the satellite is really a very dumb. It's typically a bent pipe
197.42s - 203.06s |  So it just takes the signals from the uplink that it receives and forwards them to the downlink
203.22s - 207.66s |  That's the only thing that the satellite is typically doing is in terms of signal
208.22s - 210.10s |  forwarding
210.10s - 212.46s |  now if we look at the security of
213.14s - 215.14s |  vSAT communication systems
215.26s - 222.90s |  We can consider three thread models and the first thread model is basically an attacker that tries to attack the
222.90s - 224.90s |  system from the internet
225.14s - 227.14s |  so it will attack and try to
228.22s - 230.22s |  infiltrate from the central hub and
230.74s - 236.62s |  Basically, this is also what happened and what everybody was talking for the last two years. That is what happened in February
237.50s - 239.50s |  2022
239.50s - 245.82s |  In where at the same time on the same day as the Russian invaded the Ukraine there was an attack
246.54s - 253.74s |  basically through this ground system ground system network to deploy bogus malicious
254.46s - 256.22s |  firmwares to
256.22s - 257.86s |  thousands of
257.86s - 260.50s |  vSAT endpoints and this this attack
261.90s - 263.02s |  basically
263.02s - 265.02s |  Was was was basically?
265.58s - 267.58s |  rendering thousands of
267.62s - 271.70s |  Modems unavailable and had to be replaced or updated
272.82s - 279.54s |  Now this attack has been presented last year and the year before at Defcon so many people have analyzed what happened there
280.46s - 287.74s |  So there is a second threat model which basically looks at attacks against the satellite itself
288.62s - 289.86s |  so
289.86s - 294.50s |  Basically the idea would be to attack the satellite directly over their air interface
295.18s - 302.38s |  So we have been doing some research the previous years on these types of attacks for example at IEEE S&P in 2020
302.46s - 304.70s |  We showed how it is possible to intercept
305.90s - 307.42s |  vSAT
307.42s - 309.10s |  communication
309.10s - 314.54s |  Passively with an eavesdropper. We have been also doing some some research presenting this year at aerospace
316.26s - 319.54s |  Conference about reconnaissance how to basically
320.42s - 323.66s |  Discover capabilities of satellites or last year
323.66s - 329.02s |  I had an IEEE S&P Johannes was also presenting a paper that shows
329.38s - 334.14s |  how you could find the vulnerabilities in satellites and try to exploit those and
335.50s - 343.10s |  Then the the focus of today is to look at the threat model of an attacker the third threat model which basically
343.58s - 348.54s |  Attacks directly the vSAT endpoint, and this is the new thing that we are considering in this work
349.14s - 351.14s |  basically, we we
351.74s - 355.82s |  We try to understand our feasibilities to directly
356.46s - 360.62s |  Attack the endpoint without going through a central hub or the satellite
361.82s - 366.86s |  So our research contribution in this work. We have been reverse engineering
368.18s - 372.50s |  Vsat modem it's from I direct. It's the new tech MDM
373.74s - 376.70s |  2200 that's the model we have been analyzing and
377.34s - 383.14s |  We have been reverse engineering the entire software stack as well as the communication protocol stack
383.62s - 385.78s |  Up down to the physical layer
386.54s - 393.86s |  So we found several vulnerabilities in the software and the communication stack of the modem which allows us to implement
394.58s - 402.00s |  three over-the-air wireless attacks that use software-defined radios and this attacks allow us to
402.60s - 408.68s |  Remotely reset the modem to update a malicious firmware to the modem and also to obtain a
409.20s - 411.20s |  remote admin shell and
412.28s - 415.64s |  Finally we demonstrate the feasibility of these
416.12s - 420.96s |  Attacks to launch this and attacks by breaking the beam and what do we mean by breaking the beam?
421.56s - 425.24s |  Basically the idea is that we inject signals
426.00s - 431.80s |  from not directly from from the satellite, but from from a side beam from a
432.00s - 435.72s |  Attacker that is on earth that is close to the satellite
436.36s - 440.08s |  typically what people have at a conventional wisdom what people have assumed is that
440.72s - 444.88s |  satellites communicate we said satellite communication as quite robust against
445.16s - 450.08s |  signal injection attacks from the side because you have typically a high directional beam
450.64s - 457.58s |  towards the
457.58s - 461.60s |  Sorry for that
461.60s - 463.60s |  Okay, am I connected? Yeah
463.88s - 465.88s |  Okay, so the idea
466.88s - 473.88s |  Yeah, the idea what people assume this has basically since the the dish has a very high directionality
474.80s - 476.80s |  Basically, it would be difficult to inject
477.24s - 478.40s |  signals
478.40s - 483.36s |  From the side and what we show basically in our research is actually it's possible
483.68s - 487.52s |  From the from a side beam to inject these signals these attacks
488.04s - 490.04s |  from from the earth
490.28s - 495.00s |  So with that I want to give the word to Johannes will present his
495.56s - 500.56s |  Research or his work on reverse engineering the the modem. We've been looking at
501.08s - 504.94s |  All right. Thank you. So
505.42s - 511.22s |  So far, we've basically heard what kind of setup we need to actually attack these modems and as already introduced
511.22s - 517.18s |  We are attacking the new tech modem MDM 2200 and we also looked at a different modem call from Viasat
517.38s - 519.50s |  Exactly the one attack in Ukraine not in this talk
519.50s - 521.62s |  But in the research paper, this is all based on
522.22s - 529.54s |  But we picked this this I direct modem or also new I direct and it's kind of interchangeably since I direct the quiet new tech
529.54s - 533.38s |  some while ago and so I direct owns all of these products at this point and
533.98s - 541.42s |  There's pretty good case study since they themselves today are on the according to their website rank themselves first maritime communications in
542.10s - 545.38s |  Aerospace communications or rather in the basically commercial planes
545.90s - 549.78s |  Having visa systems and also in media and network broadcasting
549.78s - 555.42s |  And so while it's it's pretty clear that this specific system that we are looking at here is not deployed on all of these
555.42s - 557.42s |  This I want to be very clear these vulnerability
558.26s - 564.54s |  These vulnerabilities are not quite you can't go out and basically pawn every airplane with it. This definitely won't work
564.54s - 566.54s |  It's a different system from the same company
567.90s - 569.62s |  so
569.86s - 575.78s |  Far basically, we have this visa at endpoints and it's separated into the antenna, which you basically place outdoor
575.78s - 578.34s |  And that's why it's also called outdoor unit
578.54s - 584.20s |  Then we have this modem this the small little box that you play somewhere inside and that's why it's called indoor unit
584.86s - 590.98s |  And all of this is basically connecting your local area network where you have your PC Wi-Fi, etc
591.58s - 596.10s |  So the really interesting part is really this modem in the middle because this one is basically
596.34s - 602.46s |  Receiving the traffic from the satellite antenna and it's doing signal processing and it is all kinds of doing is doing all kinds of
602.74s - 604.74s |  control plane management, etc
605.18s - 608.10s |  And there are basically two kinds of traffic flowing through there
608.10s - 614.54s |  Usually these attacks and these talks at these conferences focus on internet traffic going from the antenna to this local area network
614.66s - 618.74s |  But we are only and exclusively focusing on the control plane traffic
618.74s - 624.14s |  And so this is oftentimes separated either with a VPN or so. It's in this in this specific case
624.14s - 629.38s |  It's the same physical channel and but we are only considering the control plane basically operating these modems
629.38s - 634.50s |  It has nothing to do with the actual LAN network and to keep everything that I'm going to talk about
634.82s - 638.70s |  Like all nice and mapped up. I did a little chart. So basically on the left side
638.70s - 643.30s |  We have the antenna and the right side our local area network and in the big in the middle a big
643.58s - 646.84s |  Question mark that we are slowly trying to to resolve
647.70s - 653.46s |  So first order of business as usual because it's pretty fun to open anything up. I guess most here agree
654.14s - 661.62s |  It's you get a nice little circuit board. Very unsurprising and if you actually look up these individual components you see for example demodulator
661.62s - 666.78s |  Which is well unsurprisingly doing demodulation. You see some digital analog converter
666.86s - 672.10s |  You see an FPGA which is doing a lot of signal processing since this is way too much to be handled by these
672.26s - 679.02s |  Lower and arm processors and then finally the microcontroller that we are going to focus on a some arm v5 to e microcontroller
679.98s - 683.30s |  So not much progress yet. We basically just knew that there is some
683.82s - 685.82s |  RF decoding signal processing
686.46s - 691.14s |  Stuff going on that that I'm personally not going to focus on since I'm doing more on the software side
691.14s - 695.82s |  And so what do we need for this? We actually need to dump the software off of this modem
696.42s - 698.34s |  and there
698.34s - 702.42s |  Plenty number of ways to do this. You could use like a bus pirate sold off the flash chips
703.06s - 707.26s |  It all seems pretty involved and I'm terrible with any kind of hardware
707.26s - 711.86s |  so I definitely keep my hands off of that and so instead these modems oftentimes have a
712.86s - 719.58s |  Questionable web UI when it comes to security and so when we basically look for blindly basically looks for some code injection
719.58s - 722.22s |  We found something obviously the code we only had afterwards
722.46s - 729.30s |  but basically this entire website is written as like bash scripts and the server is basically just a bunch of bash scripts and
729.78s - 732.38s |  If you basically insert the right string at the right time
732.38s - 736.86s |  Then you just get a proper command injection and can just open a remote shell. It's really that simple
737.86s - 742.70s |  And if you do this, then you have a nice mode and then if a nice console access to the actual modem
742.70s - 747.58s |  Which is even more useful than using a bus pirate since now we can actually run commands on the modem
747.86s - 751.22s |  All right. Let's actually do this. Let's figure out how all of this is working
751.82s - 756.62s |  So in this specific case, we when we see the network interface, we see some pretty regular stuff
756.62s - 758.22s |  ETH 0 pretty clear what that is
758.22s - 764.66s |  We see some to end network device, which are usually for VPNs and one device that is not very common called modem
765.26s - 767.18s |  So where is this coming from?
767.18s - 771.98s |  So usually some these network devices come from a specific kernel and in this case
771.98s - 775.54s |  There are in fact a few kernel objects that are shipped with this operating system
775.54s - 781.46s |  So we have something for DVB, which is basically the protocol or the underlying protocol of all of the satellite communication
781.46s - 786.02s |  So there's a pretty good hint something with new tech hardware abstraction layer also pretty good hint
786.06s - 788.86s |  so we search a little bit around in these kernel objects and
789.66s - 794.10s |  Yeah, we found exactly the code we were looking for. It's allocating some net device called modem
794.94s - 801.78s |  Perfect. We can also look in jitra into what kind of functions it exposing definitely some sending function not quite a receive function
801.78s - 803.78s |  But it's definitely working in some way
804.38s - 808.98s |  but interestingly when we kind of grab through the list of functions and search for common terms on
809.98s - 813.34s |  Cryptography like encrypting decrypting key exchange, etc
813.34s - 819.22s |  We didn't find anything and which is which doesn't mean that there is no encryption, but it's at least some kind of a hint
820.14s - 823.90s |  So to update our system app we have these drivers exposing this modem
823.90s - 827.58s |  Which doesn't seem to have any crypto and also when we went through a cold pass a little bit
827.58s - 833.10s |  We couldn't find anything. So we at this point. We're just assuming it as no basically data link layer protection here
833.70s - 837.30s |  And then the next question is basically what kind of applications are listening there?
837.30s - 843.02s |  So this modem interface is basically exposing network traffic and easy to consume on a Linux device
843.02s - 848.30s |  And you can just do accept listen receive blah blah the usual kind of setup and then there is for example
848.70s - 853.24s |  Application called TC net clients, which is some third-party software called from tele tech
853.54s - 859.02s |  So they basically ensure that the internet traffic is actually running but for the control plane that I'm talking about
859.02s - 862.54s |  We are caring really only about this modem controller and SW download
862.54s - 867.46s |  So two software packets or two to software applications running on the modem in the first one
867.46s - 872.06s |  We are going to focus on this modem controller and it kind of does exactly what the name says it controls
872.66s - 874.66s |  configuration on the modem
874.70s - 876.70s |  and when you basically look into the
877.26s - 878.66s |  initialization routine
878.66s - 882.14s |  We've kind of found what we are looking for that. There is at least some crypto
882.14s - 886.34s |  So that that seems pretty good at a first glance. So we have some modem crypt in it
886.34s - 892.82s |  We can see that it's reading some modem database and we can also see that it's using some private key pushing it somewhere
892.86s - 897.46s |  Okay, so there seems to be something going on with crypto, but I won't bore you with code all all the time
897.58s - 899.18s |  So
899.18s - 901.78s |  Basically, it's receiving a terminal private key
901.78s - 907.30s |  The terminal private key is exchanged when you first turn on this modem after you receive it from your satellite service provider
907.30s - 913.24s |  So it's exchanging this thing and then storing it kind of permanently on your device and then whenever you boot it up
913.58s - 919.14s |  It's loading this key and it's using this key as a key encryption key. What does a key encryption key do?
919.14s - 923.06s |  It encrypts keys and basically when you start up the modem
923.06s - 927.14s |  You receive two messages one session key message and one network configuration message
927.22s - 934.42s |  both of them control that key that is actually used to encrypt this specific traffic and a terminal private keys encoding both of these and
934.86s - 939.74s |  It works in a way that basically we have to hop and hop is sending a packet to the actual modem controller
940.14s - 944.04s |  In some hub terminal envelope, which is some Google proto buff protocol
944.58s - 950.14s |  And when we're looking at the code first line basically passes this proto buff into some predefined data structure
950.50s - 954.78s |  And then it's doing some interesting stuff. So first it's basically looking for some encryption flag
954.78s - 958.90s |  If it's not set it's basically discarding the packets if it's set it's going on
959.22s - 963.54s |  It's checking is the counter of the packet defined in this network packet zero
963.98s - 969.70s |  Then it's pretty interesting we define or we just assign the buffer to the message string if it's not zero
969.90s - 976.10s |  Then we actually decrypt it. So at least from this function if we set it to zero, we can just skip the
976.62s - 978.86s |  Decryption which is useful since we don't know the key
979.86s - 984.70s |  But there's definitely something more to it since if you just have counter zero
984.70s - 989.14s |  It might just be some key exchange protocol in the very beginning. So there might be some
990.02s - 993.58s |  Receive counter matching going on and that is exactly what we found
993.94s - 1001.30s |  so basically there's encryption manager and it has a receive counter match functionality and it takes the encryption manager and a packet counter and
1001.42s - 1007.92s |  Compares is it the actual expected counter? So if the previous one is 68 it expects the next one to be 69
1008.64s - 1012.04s |  That that sounds pretty nice. It sounds exactly like what we are looking for
1012.04s - 1018.68s |  and if we have to if the match is false, it's doing a second check which checks if the counter is unequal to zero and
1019.28s - 1026.12s |  Only then it's discarding the message, but interesting part is if the counter is zero, then it's not discarding the message
1026.12s - 1032.56s |  So basically this kind of exactly the thing that it's trying to prevent. It's not preventing. I guess there's some coding error
1032.56s - 1037.84s |  They probably meant to use some other counter probably the reference counter from the modem and not the one from the packets
1038.24s - 1043.64s |  But yeah, this basically allows us to kind of bypass the entire encryption of this modem controller
1043.64s - 1046.14s |  Which is maybe not quite as it was intended or maybe it was
1047.72s - 1054.44s |  All right, second part is this SW download application software updates are always fun from a security perspective, so let's take a look at that
1055.52s - 1059.64s |  So we have to hop and the hop is basically sending out update signal packets
1059.84s - 1065.84s |  Around once a second or ten times a second depending on the configuration and these update signal packets basically tell you hey
1065.84s - 1070.20s |  There's currently this software version available for this hardware revision on this port
1070.20s - 1075.44s |  So if you want to get it, just listen to me and an SW download decides this sounds interesting
1075.44s - 1082.00s |  I want to receive these packets and it's just subscribing to the correct multicast on a correct port and gets the current software version
1083.20s - 1084.64s |  Interestingly, there's no crypto on that
1084.64s - 1089.96s |  That's just UDP packets and anybody can just go to any modem and essentially just broadcast their own software update
1090.72s - 1094.00s |  But in just in case you're too lazy to kind of build your own
1094.36s - 1098.64s |  Linux operating system interface with the FPGA and everything it gets easier and
1099.36s - 1101.36s |  worse from a security perspective
1101.72s - 1106.26s |  So this also it's a vulnerability if missing encryption authentication is not enough
1106.80s - 1109.44s |  Basically, this is one of these update signaling packets
1109.68s - 1115.84s |  It's basically saying case some you image ID then it says octet for whatever reason and then it says, okay
1115.84s - 1119.00s |  There's a bulk size as a version that is associated with this specific update
1119.12s - 1125.28s |  There's a minimal version that you need etc. And this octet part is pretty interesting since this is the function that is passing this
1125.28s - 1131.32s |  I'm not making this up. And so basically has a static buffer of 80 bytes and then it's using a scan F with
1132.16s - 1137.04s |  Unlimited length string to pass this octet just this octet part
1138.04s - 1145.24s |  Well pretty pretty easy from that parts to to gain some kind of control over the PC, but it shouldn't be that simple, right?
1145.24s - 1148.24s |  There's still a SLR secondary. So it's something like that
1149.36s - 1152.08s |  Turns out they're using an ancient Linux version
1152.88s - 1157.84s |  Version two point six point thirty five of the kernel and now some of you might be thinking but hey
1157.84s - 1163.56s |  Why is this guy talking about some ancient technology that nobody or that that they found on some scrapyard?
1163.56s - 1170.82s |  No, this was freshly installed for us in 2022. So this is not something super old. This is something they newly shipped to customers
1171.46s - 1176.06s |  And also their office, you know secondary is because if you have Linux two point six point thirty five
1176.06s - 1178.06s |  You probably don't bother about this part anyway
1179.22s - 1184.88s |  So to conclude first, there's no data link protection in the in this modem kernel device
1185.14s - 1190.98s |  There is an encryption bypass on a modem controller, which is the only part in the control plane actually implementing crypto
1191.50s - 1194.86s |  We can just broadcast updates as we want to this modem
1194.86s - 1199.16s |  And if this is not enough, we can also have a fully unmitigated remote code execution
1200.04s - 1203.68s |  And we kind of tested all of this on a little bit wacky way basically
1203.68s - 1208.44s |  We are using the Ethernet port and reconfigure the fireball to send the packets to the to this modem network device
1209.08s - 1213.88s |  for for easier testing, but obviously way more interesting approach is to actually do it wirelessly and
1214.56s - 1219.40s |  What does a PhD student do when he doesn't want to figure out all of the wireless parts?
1219.48s - 1223.44s |  Find a perfect student to actually figure it out. And this is a Robins turn now
1226.48s - 1230.28s |  Yeah, so let's address this remaining question mark
1232.00s - 1237.56s |  For this we started again by opening up this box looking at what components are built in and
1238.24s - 1244.36s |  researching via their tech sheets and all resources we found how the hardware works and
1244.92s - 1246.92s |  From this we could already
1247.28s - 1254.96s |  Deduct that there are two separate signal processing pipelines one for the transmission and one for reception
1255.48s - 1261.23s |  in addition we had a handy tool in the web interface a
1261.75s - 1269.51s |  Diagnostic screen which provided us with the internal states of the modem including some states from the FPGA and
1270.83s - 1277.03s |  This confirmed our protocol assumptions and it proved to be very helpful when implementing our attacker
1277.55s - 1282.55s |  since we could see what packets have been parsed correctly and what isn't working yet and
1284.43s - 1288.03s |  Finally we had the binaries thanks to Joanna's work
1288.95s - 1293.27s |  Which also proved very helpful since some of the parsing logic
1293.79s - 1300.67s |  Was implemented in the kernel modules. So not on dedicated ICS and by studying that we
1301.23s - 1304.59s |  Could know what the modem expected us to transmit
1306.67s - 1308.19s |  with these
1308.19s - 1314.75s |  Three information sources. It became pretty clear that the protocol used here is DVB RCS
1315.31s - 1317.31s |  the DVB
1317.87s - 1321.19s |  Protocol suite comes from the TV broadcasting domain
1321.35s - 1326.91s |  But what's more important here is the RCS which stands for return channel over satellite
1327.59s - 1333.43s |  because we don't want to have these one-way transmissions, but we need a return channel for the
1334.15s - 1335.31s |  interactive
1335.31s - 1337.23s |  internet protocol
1337.23s - 1339.23s |  behavior
1339.27s - 1342.67s |  What's best about this protocol is also that it's open and
1343.31s - 1348.39s |  That's why there are lots of resources and specifications which are freely available
1350.55s - 1352.19s |  Also, it's
1352.19s - 1357.91s |  kind of a meta protocol because it leverages multiple sub protocols and
1358.15s - 1360.95s |  Defines how these sub protocols interact with each other
1362.39s - 1370.23s |  In this regard it's also important to mention s3p or set three play because new tech never talks about DVB RCS
1370.23s - 1375.79s |  but s3 play which is their proprietary implementation of DVB RCS and
1376.83s - 1382.07s |  Since it's their own implementation and proprietary there are some uniquenesses to it
1382.15s - 1389.91s |  so in some instances we found that they deviated a little bit from the specification or they used some custom features to
1390.71s - 1394.91s |  transmit some other compulsory data, which is required and
1395.15s - 1403.64s |  And now let's quickly go through these layers at the lowest layer with DVB s2
1404.36s - 1407.72s |  Which is the protocol which handles all the wireless stuff?
1408.04s - 1411.04s |  So if you're a bit familiar with these wireless protocols
1411.04s - 1417.16s |  It has all these basic features such as pretending a preamble to synchronize
1417.60s - 1425.16s |  Transmitter and receiver it defines what modulation schemes are supported and it also defines the error correction codes
1427.41s - 1430.93s |  One layer higher up we have MPEG transport streams
1430.93s - 1436.65s |  And their task is to bundle multiple data streams into one
1437.17s - 1439.17s |  bigger stream and
1440.37s - 1444.61s |  In this project we've only implemented the forward channel
1444.61s - 1445.69s |  so I'm
1445.69s - 1448.57s |  focusing on this forward channel from central hub to
1449.17s - 1455.01s |  Endpoints and since we have this star topology where one central hub transmits to multiple
1455.61s - 1462.25s |  Endpoints it's implemented as a broadcast channel that contains all these individual data streams, and that's why this
1462.77s - 1464.77s |  MPEG transport streams are so useful
1465.29s - 1472.01s |  They are constructed in a hierarchical way at the lowest layer or lowest level there are elementary streams
1472.01s - 1475.53s |  Which could be audio streams or video streams or in our?
1476.29s - 1482.09s |  context data streams these elementary streams are then bundled together to programs and
1482.77s - 1488.61s |  A transport stream can finally be made up of multiples of these programs
1489.65s - 1494.81s |  There's also some space for metadata or some configuration data
1494.97s - 1500.77s |  Which is used to transmit the structure of these streams, but also to initialize the modem
1503.48s - 1510.80s |  Because when the modem starts up it starts in a in an empty state and awaits instruction from the central hub
1511.64s - 1516.76s |  It has some pre-configured values such as a frequency and a symbol rate
1517.40s - 1520.24s |  For where to expect these initial values
1520.24s - 1526.84s |  And this is called the initial carrier and with this information transmitted on this carrier it learns
1527.12s - 1529.04s |  Where to tune next?
1529.04s - 1536.44s |  To learn the configuration values for the final carrier where the data streams are finally transmitted
1537.36s - 1544.72s |  In our attacker implementation we simplified things quite a bit, so we didn't transmit on three separate frequencies
1544.88s - 1548.64s |  but we use this flexibility of this transport streams to
1549.36s - 1555.40s |  Include all this information from the beginning and instruct the modem to retune over and over again
1555.76s - 1561.72s |  But each time the multiplex a different stream from within this same transport stream
1562.52s - 1563.76s |  and
1563.76s - 1570.32s |  This is like basically the high-level overview of this protocol. There's only one thing left which is
1570.84s - 1576.56s |  Called multi protocol encapsulation which is a thin wrapper around the IP packets
1576.72s - 1579.84s |  Such that they can be included in these MPEG transport streams
1580.40s - 1583.88s |  But from there on up it's really basic internet protocols IP
1584.60s - 1586.28s |  UDP and TCP
1586.28s - 1595.43s |  So with this knowledge and the understanding of these protocols we attempted our attacker implementation
1596.35s - 1600.27s |  We chose a software-defined radio based stack we
1601.03s - 1603.03s |  opted for a USRP
1603.63s - 1607.51s |  SDR, but really any other SDR could be chosen as well and
1608.55s - 1612.83s |  Since SDRs are somewhat restricted in their output frequencies
1612.91s - 1620.59s |  We also bought some off-the-shelf components for up converting these frequencies into the satellite frequency bands
1620.99s - 1625.27s |  For this modem, that's the KU and KA bands at roughly
1625.79s - 1631.59s |  10 to 10.7 gigahertz or I believe even up to 15 gigahertz and
1632.79s - 1634.99s |  this totaled in a cost of about
1635.63s - 1637.43s |  $2,000 but
1637.43s - 1645.19s |  I'm pretty sure that it could be significantly reduced if you used more do-it-yourself approach and didn't buy off-the-shelf components
1645.75s - 1650.89s |  For the software implementation we chose GNU radio
1651.69s - 1656.37s |  Popular framework for SDR applications and as already mentioned
1656.37s - 1662.13s |  we only implemented the forward channel since this what proved to be sufficient for our attacks and
1662.85s - 1666.61s |  Can radio was also chosen since we could leverage some of the
1667.49s - 1674.45s |  built-in components for DVB s2, but everything on top of it. We implemented ourselves in a custom module and
1677.81s - 1679.81s |  Through this approach we
1679.97s - 1687.97s |  Started at a state where the modern modem wasn't connected, but we iteratively improved our attacker to be able to finally
1688.65s - 1695.97s |  transmit some initialization such that the modem picked up the signal and finally we were able to transmit
1696.61s - 1704.37s |  Some messages here. You see a TCB dump on the modem itself and it successfully receives some hello world packages
1704.37s - 1705.81s |  We are transmitting
1705.81s - 1716.24s |  So if we briefly look again at this map
1716.64s - 1723.04s |  We are now capable of injecting arbitrary IP packets into the modems protocol
1723.80s - 1725.80s |  into the modems network stack
1728.16s - 1730.16s |  Now, let's look at some attacks
1730.56s - 1735.52s |  the first most basic one we are talking about is a jamming attack, but it is
1736.28s - 1740.84s |  Interesting in in this case because it acts as a building block for more advanced attacks
1741.80s - 1745.32s |  Because when we jam a modem it no longer
1745.84s - 1749.60s |  receives the required synchrony synchronization packets and
1750.20s - 1753.20s |  Configuration packets and as a result it
1753.84s - 1758.64s |  resets itself to the initial state and awaits new connection instructions and
1760.04s - 1765.40s |  this can be used by an attacker to break the connection of a running modem and
1765.84s - 1773.76s |  Then provide new initialization instructions to steer it away from the legitimate central hub to a malicious one and
1775.84s - 1780.16s |  Once initialized we can mount a malicious firmware update
1780.92s - 1782.64s |  attack as
1782.64s - 1788.36s |  Joannes has explained before this works by first transmitting a signalization packet
1789.00s - 1791.12s |  to one of these internal binaries
1791.84s - 1793.44s |  SW download
1793.44s - 1801.64s |  To signal that an update is available. What version is available and on what port on what UDP port to receive it and
1802.24s - 1809.08s |  if this version is higher than the currently installed version the modem will start listening on that port and
1809.80s - 1811.80s |  receive these messages and
1811.96s - 1818.24s |  Once again to I want to emphasize that these messages are neither authenticated nor encrypted
1818.28s - 1820.40s |  So it's easy to exploit this
1821.20s - 1823.96s |  And that's what we did. We transmitted a
1824.60s - 1830.64s |  Malicious update and as you can see in the logs it correctly receives these packets
1831.12s - 1833.56s |  It and it tries to install them
1834.20s - 1840.44s |  But we set in this case an invalid checksum to prevent the modem from breaking
1840.64s - 1845.80s |  since we had we needed to use it afterwards as well, but this proves that
1846.80s - 1852.60s |  A malicious firmware can be installed to basically do arbitrary damage
1853.32s - 1855.04s |  also to just
1855.04s - 1857.04s |  Execute the denial-of-service attack
1857.48s - 1866.55s |  The second attack I want to talk about is a remote code execution attack where we leverage the buffer overflow
1866.99s - 1872.39s |  Vulnerability Joannes has explained and we implemented this one with two payloads
1872.67s - 1880.91s |  One where we simply turn on an LED on the modem to have a visual indication and the second one where we opened a
1880.91s - 1882.95s |  reverse shell towards a host in the LAN
1883.95s - 1885.35s |  but
1885.35s - 1887.35s |  Thank you
1887.43s - 1894.31s |  but if the modem would be connected via return channel to the central hub
1894.91s - 1898.31s |  Such a reverse shell could also be opened to any connected host
1898.47s - 1902.99s |  We chose a host in the LAN because we haven't initialized the return channel
1904.47s - 1910.23s |  Now next I want to quickly show a demo of this attack it's this remote code execution and we
1911.55s - 1914.19s |  Implemented here the LED turn on
1915.03s - 1918.43s |  So that the transmission LED on the modem lights lightens up
1918.43s - 1924.23s |  It wouldn't turn on in this case because as mentioned again, the return channel isn't initialized
1925.51s - 1927.51s |  So here you see our attacker
1927.83s - 1929.83s |  the canoe radio implementation
1930.59s - 1936.95s |  Which starts transmitting and the up converter set up and on the other side of the room?
1936.99s - 1941.15s |  there's the transmitter with the web interface open and
1943.07s - 1945.43s |  It should pick up the signal any moment
1946.71s - 1949.39s |  initialize itself and
1950.95s - 1957.07s |  Once receiving the data the transmission LED the second from the right lightens up
1957.51s - 1969.59s |  So this works
1969.59s - 1975.79s |  Finally, we wanted to explore the conditions under which such an attack can be
1976.47s - 1979.03s |  successfully mounted and for this we
1980.03s - 1986.43s |  transmitted from different angles both in the horizontal plane and in the vertical plane to find out if
1986.79s - 1988.47s |  Such an attack is successful
1988.47s - 1995.23s |  Not only from in front of the modem because because the antenna is a directional antenna and must be directly
1995.83s - 1997.47s |  Targeted at the satellite
1997.47s - 2002.67s |  So it would be much more powerful if we can launch such an attack also from other angles
2002.67s - 2008.47s |  And we found that there is a range of angles from where such an attack can be
2008.99s - 2014.15s |  Successfully mounted not only from directly in front of it here shown in green
2015.27s - 2020.43s |  also, keep in mind that this data has been gathered in an anechoic chamber where
2021.27s - 2027.95s |  Reflections are minimized. So if this is performed in the real world where there are roofs and walls
2028.07s - 2032.75s |  You have much more reflections. And so the success ratio is only going up
2033.23s - 2043.15s |  We have also written a paper about this where we go a bit more into the details also about these conditions
2043.75s - 2046.47s |  If you're interested in that, please check it out
2046.47s - 2051.23s |  it's available online or we're also next week at USENIX in Philly and
2053.72s - 2055.72s |  Then then there's one last thing
2056.08s - 2060.04s |  So far we have talked about targeting one specific modem
2060.40s - 2067.04s |  but during our research we found out that the modem also supports broadcast transmissions and
2067.84s - 2075.64s |  this allows us to target any modem of this type without any prior information about its MAC address or
2075.64s - 2077.64s |  any other identifier and
2078.28s - 2082.88s |  This as a result allows us to target any modem that is in reach
2083.36s - 2084.84s |  and if you
2084.84s - 2090.76s |  Imagine an attacker that is not only capable of injecting signals directly by transmitting it to the modem
2090.76s - 2093.92s |  But also in the uplink by first transmitting to the satellite
2094.60s - 2100.92s |  It would be capable of not targeting only one modem, but all modems within an entire
2101.56s - 2103.76s |  Satellite beam which is an entire region
2104.48s - 2113.17s |  All right. So so what is the real-world impact of all of this?
2113.81s - 2115.65s |  Basically the setup that we bought
2115.65s - 2122.49s |  Is around $2,000 of where the up converter to converting from whatever 6 gigahertz SDR can do to KU band
2123.13s - 2124.81s |  Is the biggest part?
2124.81s - 2128.45s |  So if you have if you happen to have one of those around that's probably a lot cheaper for you
2128.45s - 2133.53s |  And usually you would also have an SDR. So then it's probably pretty easy to pull off
2134.33s - 2139.65s |  So these attacks should generally work on all the modems that use SAT 3 play not just MDM 2200
2139.69s - 2144.45s |  But they also plenty long list of other of these protocols not just SAT 3 play
2147.29s - 2152.33s |  Ultimately we assume that the market share of these modems is 10 to 20 percent out of a few million deployed
2152.33s - 2156.33s |  I know this is not a precise number, but it's pretty hard finding these kinds of numbers here
2157.77s - 2162.01s |  One important part that we skipped so far is the responsible disclosure process
2162.41s - 2167.09s |  So obviously new tech doesn't exist anymore and I direct took over their product
2167.09s - 2173.13s |  So we messaged I direct and we first sent the first emails to kind of all public email addresses two years ago
2173.13s - 2177.13s |  And then a few weeks afterwards again in November 2023
2177.13s - 2183.45s |  We send out another wave of emails including to high-ranking officials at the company that we found for example through LinkedIn, etc
2183.93s - 2190.53s |  And ultimately we disclosed and escalated vulnerabilities to the special Swiss National Cyber Security Center and CSC
2191.21s - 2195.21s |  After that and I direct asked for a reproducer script for these vulnerabilities
2195.73s - 2199.85s |  And we are now in a process of allocating CVS for these vulnerabilities
2200.61s - 2203.89s |  So what a kind of some kind of mitigations, obviously
2203.89s - 2209.25s |  that's a pretty broad question here since the the main problem is that we are lacking security from the
2209.57s - 2214.71s |  Foundation and a lot of parts and so obviously something like physical layer or data link layer security
2214.93s - 2219.33s |  For example for Mac layer encryption as we have seen on other modems would be an option
2219.61s - 2224.97s |  Source authentication through for example, the protocols actually validating that not some random network
2224.97s - 2232.29s |  Defcon guy is actually just sending the software update or on the network layer maybe IPSec or some other VPN solutions also
2232.77s - 2240.41s |  Maybe not using Linux kernel version 2.6 point 35 on something that has shipped these days is maybe also an option
2241.01s - 2241.65s |  But yeah
2241.65s - 2247.85s |  It's it's a pretty big pretty broad topic and obviously did it warrant the solution to the specific for example remote code execution should also be
2247.85s - 2249.73s |  pretty clear and
2249.73s - 2256.17s |  With that essentially we showed the reverse engineering of one of of one probably broadly used visa system
2256.17s - 2258.81s |  We identified numerous attack vectors and vulnerabilities
2258.81s - 2265.21s |  We also built a full end-to-end wireless attack where we really can just take an SDR and pawn a working modem
2265.73s - 2272.41s |  We successfully performed signal injection attack that way and we have a certain as we can be without actually testing it
2272.41s - 2277.65s |  Which is obviously not quite feasible and that is would work on a satellite ultimately breaking the beam
2278.25s - 2289.04s |  And we do have some time left
2289.04s - 2293.52s |  So if you have any questions, feel free to come to one of the microphones in the front
2294.04s - 2295.44s |  otherwise
2295.44s - 2309.68s |  Talk to us in a few minutes or so in the back. So I actually do have several questions
2310.36s - 2313.72s |  one of the big things with satellite modems is that they have
2314.68s - 2321.32s |  Legendary latency. I think that would be the kindest way to put it a lot of the problems with security
2322.04s - 2328.60s |  Applications in satellite environments is because you have very specific timeouts, right?
2328.64s - 2330.64s |  but a lot of these things are going like to
2331.28s - 2334.76s |  20,000 miles round trip in order to even finish a TCP connection
2334.76s - 2341.04s |  And so why IPSec which is pretty vulnerable to those latencies would that be a suggested in your opinion?
2341.56s - 2343.56s |  That's an excellent question
2345.28s - 2346.88s |  Maybe just don't use IPSec
2346.88s - 2353.60s |  I don't think that that is maybe the quite best option and other vendors use VPN solutions quite honestly
2353.60s - 2356.40s |  I don't know if they're based on IPSec. So maybe IPSec is not the best option
2356.40s - 2361.88s |  It's some some protocol like IPSec that implements ultimately some VPN is some some solution generally
2361.88s - 2365.12s |  I think it might be TLS that they might use. That's fair
2366.04s - 2372.47s |  All right. Thank you. And if you have any more questions, let us know
2373.63s - 2375.63s |  offstage