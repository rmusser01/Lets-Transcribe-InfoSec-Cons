{
  "webpage_url": "https://www.youtube.com/watch?v=GAEOBhsqJI4",
  "title": "DEF COPN 32 - 0 0 0 0 Day  Exploiting Localhost APIs From The Browser - Avi Lumel skyGal Elbaz",
  "description": "Browser-based attacks are not new in the malicious landscape of attack patterns. Browsers remain a popular infiltration method for attackers. \n\nWhile seemingly local, services running on localhost are accessible to the browser using a flaw we found, exposing the ports on the localhost network interface, and leaving the floodgates ajar to remote network attacks.\n\nIn this live demo and attack simulation we\u2019ll unveil a zero-day vulnerability (still under responsible disclosure) in Chrome and other browsers, and how we use the 0-day to attack developers behind firewalls. We will demonstrate remote code execution on a wildly popular open-source platform serving millions in the data engineering ecosystem, that seems to run on localhost.\n\nIn our talk, we will present novel attack techniques, targeting developers and employees within an organization, that are behind firewalls. This will be a first-ever deep dive into this newly discovered zero-day vulnerability.",
  "channel_url": "https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw",
  "duration": 1634,
  "channel": "DEFCONConference",
  "uploader": "DEFCONConference",
  "upload_date": "20241016"
}

0.62s - 2.62s | This text was transcribed using whisper model: large-v2

 Hello everyone
4.82s - 9.02s |  Hi everyone. Thank you for attending our talk zero zero zero day
9.02s - 14.02s |  I know if you've heard or saw the news it got a little bit of coverage
14.02s - 20.38s |  But this is the first time that we're actually disclosing the technical details. It's going to be fun. It's going to be risky and
21.04s - 29.22s |  Let's start. So I'm Gal. I'm the co-founder and CTO of oligo security with me is Avi our number one ninja and
29.22s - 30.74s |  And
30.74s - 33.38s |  Really quickly about ourselves before we start and begin
34.50s - 38.03s |  Hi, I'm Avi
38.75s - 43.51s |  Security researcher in the city office of oligo. I have around 10 years of experience in
44.03s - 48.07s |  research and development mostly researching AI these days and
48.91s - 53.23s |  I love to climb mountains. So if you want to join me on the trip, let me know and
54.03s - 56.03s |  With me in my is my awesome CTO
57.03s - 61.07s |  Thank You Avi I am paying you to say good things about me so
61.63s - 65.87s |  Keep up with that. So I am the founder and city of oligo at 10 years of experience
66.63s - 73.39s |  Checkpoint hacking breaking stuff since I remember myself and not like Avi. I'm famous for being handsome or think
73.99s - 78.67s |  Thinking like that and I'm really good at looking at mountains in my Windows computer
79.07s - 82.47s |  So a quick agenda what we're going to discuss today
82.47s - 87.91s |  What is the concept of port scanning and how it all started from 18 years ago?
87.91s - 94.75s |  We're very old issue that just keep on recurring and recurring along the years and we're going to deep dive into the history
95.11s - 98.51s |  What is the actual private network access this?
99.59s - 101.59s |  try to do
101.75s - 104.47s |  standout when all of the browsers should be
105.11s - 111.11s |  Using but we'll see along the years what actually happened. Then we're going to deep dive into the actual
111.83s - 115.67s |  Details of the zero zero zero day internals itself
115.67s - 123.63s |  And then we're going to demonstrate how we're leveraging that in order to RCE private internal applications that today are considered
124.91s - 131.27s |  Private and in the end we're going to really deep dive into how each and every browser actually
131.75s - 134.75s |  was dealing with that and the responsible disclosure and
135.67s - 139.67s |  Where we are right now with that so in order to really start
139.67s - 145.39s |  I'm gonna pass it on to awesome Avi because he's the actual smart guy that did all of that and
146.39s - 149.72s |  Let's start
149.72s - 151.72s |  Amazing. So, thank you
152.52s - 156.84s |  So client port scanning who remembers this headline on Hacker News
157.92s - 160.68s |  Yeah, so why is this website port scanning me?
161.72s - 163.72s |  Very good question
163.72s - 170.88s |  Apparently eBay not some script kiddie, but a real company try to port scan their visitors as soon as they visit the website
171.28s - 175.60s |  So, how did you do like how did they do it exactly and by the way?
175.72s - 182.56s |  You will get this recording and we will share the presentation with you. So please try to be concentrated on the presentation
184.24s - 190.36s |  Basically what they did is they used local loss and they checked many types of ports
190.48s - 195.76s |  I don't know if it's for monetization for fingerprinting or for security reasons
195.76s - 199.04s |  But we really don't care because it should never happen, right?
199.44s - 205.92s |  Browsers should not communicate with local loss if they're under a dot-com domain. It's that simple in my opinion at least
206.76s - 211.50s |  So this is exactly what private network access and I'll simply use PNA
212.96s - 217.52s |  And this is what it tries to solve at the end of the day. So we have this
218.52s - 220.52s |  Notion of
220.52s - 223.12s |  differentiating three distinctive like networks
223.64s - 229.60s |  The public network, which is the Internet that we as we refer to the Internet to the Internet solving
230.36s - 234.60s |  Which is a top-level domain like a dot-com everything that's on the public Internet
234.96s - 241.72s |  then there is the private network, which is the office home network and that we're connected to and
242.36s - 248.56s |  Finally there is the local device. So it is local host and this figure is taken from Google's blog about PNA
248.56s - 252.88s |  You should go read about it. It's a really great initiative and we'll understand
253.80s - 255.88s |  Why we need it these days more than ever
257.32s - 260.84s |  Now there are many ways to run a server, right?
260.84s - 267.36s |  We have the default we have 0 0 0 0 or we simply have the local host
267.68s - 274.28s |  Bind address so they actually result in different behaviors, but I'm gonna focus on the last two
274.88s - 278.96s |  So whenever I'm referring to a local service, I'm referring to the last two
279.52s - 282.88s |  figures, which are the 100 7 0 0 1 or
283.56s - 288.00s |  literally the local host string so we have a service that listens on the
288.60s - 291.96s |  machines local network and the loopback interface and
292.92s - 295.76s |  that's it, basically we have many ways of running a server and
296.72s - 301.64s |  To understand how we found everything. So let's jump back 18 years ago
302.28s - 307.66s |  To understand why PNA is needed and why it was so hard to solve to this day
309.16s - 316.00s |  So it all begins with a lack of standardization there is no real standard to follow at least 18 years ago
316.60s - 319.84s |  there was no HTTPS like simply HTTP and
320.84s - 323.76s |  And this guy posted on Mozilla's forum on the
324.28s - 328.64s |  on their like security program the following headline that says that
329.80s - 331.80s |  Websites are trying to attack my router
332.48s - 337.40s |  It's really weird. Like as soon as I'm visiting the website, they try to attack my router and
338.48s - 340.48s |  It's been happening for the last 18 years
341.12s - 347.72s |  It's still open as you can see the issue is still open. It is being updated but without the ability to comment or anything
347.72s - 349.72s |  It's still there
350.00s - 356.08s |  The idea is that the RFC should not like it claims that it should not behave this way
356.08s - 358.72s |  and for some reason browsers are being able to
359.48s - 362.76s |  pass and dispatch HTTP requests to the local network and
364.08s - 369.44s |  After a while, he says that it's being actively exploited in the wild. Some of you might also remember that
370.68s - 373.64s |  real attacks like targeting home routers and
374.16s - 379.52s |  This is how they did it. It's called a drive by farming great publication and by synopsis and
380.04s - 383.04s |  The ability to load the script as soon as the website loads
383.68s - 387.68s |  So this might sound like really odd to you like this should never work today, right?
387.88s - 393.28s |  but 18 years ago routers did not have HTTPS or self-signed certificates and
393.96s - 400.92s |  the first figure actually would alter the DNS server of your home network using a simple HTTP request and
401.52s - 403.52s |  it simply worked and
403.72s - 409.48s |  Not only it worked it affected like thousands of hundreds of thousands of home and office routers
409.88s - 411.88s |  in larger scale attacks and
412.40s - 418.12s |  that targeted localhost and the end of the day you can see that all of those are using localhost or like
418.72s - 419.96s |  internal
419.96s - 423.08s |  Lubbock like internal interfaces and
425.32s - 426.72s |  then
426.72s - 431.64s |  Microsoft and sorry then Firefox tried to come up with a list of IPs
432.44s - 437.10s |  IP segments and address spaces that are considered private
437.42s - 441.34s |  It makes a lot of sense right now, do you notice something weird on this list?
443.22s - 444.62s |  So
444.62s - 446.62s |  we'll get to that in a second, but
447.26s - 451.22s |  Someone mentioned that it's not first box specific bug and he's probably right
451.50s - 457.30s |  But he mentioned that it's not a vulnerability or an issue. It's maybe a security enhancement and nothing more than that
458.34s - 462.78s |  and then they understood that they also forgot 0 0 0 0 and
463.98s - 465.42s |  sadly
465.46s - 467.46s |  They added it but
468.22s - 476.14s |  Nothing happened since that day. So we're jumping back to eight years ago when Google started with the course cross-origin resource sharing
476.74s - 478.74s |  It's actually defining how
479.26s - 485.18s |  websites should behave and how browsers should act when requesting resources from other domains and
486.74s - 491.98s |  Google started this initiative to try to define the behavior of how
492.82s - 494.82s |  browsers should or should not
495.30s - 498.46s |  dispatch requests to these private and network addresses
499.58s - 504.74s |  So PNA is a standard that is still under ideation. It's not finalized yet
506.06s - 510.22s |  it's being led by Google and as you can see, it's a draft community report and
511.82s - 514.90s |  Therefore Firefox is waiting for this standard and
515.42s - 520.26s |  And target as depends on private network access, which is still not implemented in Firefox
521.26s - 528.10s |  And basically the wait for home and the home team to define the standard make it a stable in home and
528.46s - 533.54s |  Only then they will adopt it to Firefox following a certain standard, but they don't want to do it
534.50s - 539.06s |  Randomly or trusting on some gut feeling they want to implement a real standard
540.34s - 543.38s |  Now, let's understand what is still allowed
543.86s - 545.18s |  So
545.18s - 551.86s |  They started PNA took a long time to roll. It's still not a mainstream component of in Chrome and
552.46s - 554.74s |  it should have been available to
555.50s - 557.50s |  like until home
557.74s - 561.22s |  126 but it got delayed several times and
562.54s - 567.98s |  And they even had to revert it at some point because they broke a lot of websites
567.98s - 575.46s |  But their aim is very clear. They want to mitigate CSRF attacks and DNS rebinding attacks to local addresses
575.98s - 581.71s |  Now they still have not decided how to treat 0 0 0 0
582.47s - 585.47s |  this is the standard by the way, it's on github you can look it up and
587.47s - 591.59s |  They had to rolled out to roll back some changes as I said, so
592.39s - 595.43s |  You can see that between some home versions
595.43s - 601.23s |  They had to revert and then apply it back because many websites simply break within a night. So
601.91s - 607.35s |  The next time they did it Google they did it gradually and very carefully
608.63s - 613.39s |  And as I said, they had to make some exceptions to 0 0 0 0
613.95s - 618.79s |  So even although it was in defiance of specs, it was not a part of the RFC
619.59s - 623.51s |  Developers must have wanted it and requesting this behavior. So
624.11s - 627.51s |  As you can see it's in defiance of specs, but seemingly common
628.79s - 635.03s |  But what is this weird IP address anyway, so if I'll ask two different people in this room
635.03s - 638.95s |  I'll probably hear two different answers. And as you can see it can have multiple uses
640.87s - 645.23s |  So typically it simply means this host in on this network
647.28s - 651.24s |  It should never be used as a destination IP address according to the RFC
651.36s - 652.48s |  You'll see it in a bit
652.48s - 658.64s |  But a real use case of 0 0 0 0 is when we're doing a DHCP handshake
658.64s - 663.68s |  And when we still don't have an IP address and before the dynamic allocation
663.68s - 666.88s |  We want to identify yourself somehow, so we have to use some IP
667.12s - 670.12s |  But this is really the only use as a IP address
670.60s - 674.68s |  Doing like handshakes and stuff like this before you have a dynamically allocated IP
674.68s - 679.84s |  And as I said, it should not be used as a target IP
680.72s - 685.68s |  Anywhere and by the way windows I know we all have given them like hard time
685.68s - 692.00s |  But they were actually blocking it at the operating system level. This is why it affects only macOS and Linux
693.04s - 695.04s |  but this is basically a
695.76s - 697.76s |  misunderstanding of the RFC or some
698.64s - 700.64s |  non-correlative behavior
700.96s - 707.44s |  So Chromium decided to add counters to Chrome to understand how many websites use this IP address
708.44s - 713.64s |  So it was relatively small at first place, but we've seen it increasing with time
715.56s - 722.44s |  This is the percents of pages that use 0 0 0 0 in Ajax or other mechanisms
723.12s - 725.44s |  And basically you can see that it's on the rise
726.20s - 728.20s |  maybe ten times
728.32s - 730.32s |  double itself like ten times in
731.60s - 737.36s |  Under two years or slightly more than two years, but it is on the rise and it should concern us all
738.16s - 739.28s |  so
739.28s - 743.40s |  This is like the the really interesting part of the presentation
743.88s - 747.52s |  All of these are blocked. All right private network access
748.04s - 750.56s |  Tries to prevent us from accessing these domains
752.40s - 754.40s |  Dot-com domain
754.64s - 759.60s |  but when we use 0 0 0 0 we manage to bypass all of those restrictions and
760.72s - 763.24s |  access localhost and lubec so
763.84s - 765.84s |  It's that simple. It should be
766.24s - 767.24s |  And
767.24s - 769.24s |  It should be hard. It should be like
769.92s - 775.04s |  Terminated in the request level before it is being dispatched, but we can access localhost and
776.04s - 778.04s |  107 0 0 1
778.76s - 782.00s |  Now everything that is HTTP that runs on these
782.52s - 787.16s |  Services including port forwarding to kubernetes like some of us are developers including myself
787.84s - 792.64s |  We all use HTTP port forwarding when working with remote pods and stuff like that
793.56s - 799.24s |  Including operating system services. So everything that runs on localhost on your machine is accessible
800.16s - 808.00s |  There are plenty of default or non default developer tools that use localhost and it also enables us to use the VPN
808.88s - 811.80s |  Literally every network interface that is connected to the machine
812.40s - 815.36s |  Which was used in the past for DNS rebinding to localhost
815.36s - 821.64s |  So you can use 0 0 0 0 instead of localhost and DNS rebinding would still work. We'll see it in a bit
822.76s - 824.76s |  so to target it we
825.52s - 830.28s |  We wanted to see how it behaves and whether it's really possible. So we've built a port scanner
830.96s - 834.92s |  written in WebAssembly, but it uses JavaScript API, so it doesn't really matter and
835.44s - 841.08s |  the idea is that it was able to see the open ports on my machine just by the
842.44s - 845.92s |  Error code that the browser returns to the JavaScript context
845.92s - 851.52s |  So if it's a connection refused, you know, nothing is there if and if there is an error, you know, something is listening
851.72s - 853.72s |  it's very simple and
854.60s - 861.44s |  We use 0 0 0 0 but you can see in the sniffing with the wire shark that it use it's being redirected to Lubeck
861.72s - 863.72s |  to localhost and
864.24s - 866.24s |  Here's the DNS rebinding
866.92s - 868.92s |  Notion, so you have
869.16s - 873.48s |  Like a subdomain that is being mapped to 0 0 0 0
873.92s - 880.56s |  So we've seen a lot of attacks in the history that uses that use the 127 0 0 1
880.84s - 885.24s |  But it it's it is possible once again using 0 0 0 0
886.12s - 893.86s |  Now this gets me to shadow ray. This is the real reason we started with this research
893.86s - 900.18s |  So after we've published shadow ray, which was an attack campaign in the wild
900.98s - 903.90s |  targeting AI workloads in a lot of big companies
904.94s - 906.94s |  it leverages
907.10s - 910.30s |  Behavior a default behavior in rain if any of you know it
911.14s - 917.26s |  Rays like Kubernetes for AI so it enables you to scale and run Python applications
917.26s - 921.98s |  I'm an early developer and doctor myself. I really love it and
922.74s - 927.18s |  Even open AI say out loud that they use it to change a GPT and their biggest models
928.86s - 930.58s |  So in late
930.58s - 931.94s |  2023 we had
931.94s - 935.86s |  we've seen this report by any scale the developers and maintainers of Ray and
936.06s - 942.14s |  We've seen four CVEs that were taken care of and one disputed CVE, which is very very interesting
943.06s - 946.18s |  it simply discusses the ability of Ray to
947.02s - 952.76s |  Run arbitrary code because it's an assess. It's like an inheritor part of Ray
952.76s - 960.10s |  It is a desired capability must have this capability to function because it's a job running library
961.10s - 966.42s |  And therefore they disputed the vulnerability that enables remote code execution because it's
966.94s - 974.70s |  Necessary and it's like kind of by design the way Ray is designed an attacker leveraged it to run arbitrary code on
975.74s - 977.74s |  clusters that are exposed to the Internet and
978.90s - 983.02s |  It was it got amazing coverage as well. So like I was on Forbes and
983.70s - 989.22s |  We asked ourselves the following question. We know that Ray lacks authorization and authentication
989.58s - 994.10s |  we know that it is usually running on local hosts for when developers use it and
994.86s - 1000.90s |  We try to understand whether our browser can load an external public website
1001.18s - 1005.92s |  Which then can communicate with this local Ray cluster or a service?
1006.66s - 1008.66s |  That is running locally on local host
1010.26s - 1016.66s |  So we need to install Ray and have it running in the default constellation no special flags or anything
1017.02s - 1019.02s |  Then we have to visit the website and
1019.70s - 1025.70s |  the website will invoke a post HTTP request to the API and triggering remote code execution and
1027.18s - 1030.10s |  Get this you only need to dispatch the request
1030.10s - 1035.56s |  We don't care about the response and this is the the whole idea of private network access
1035.82s - 1041.02s |  So course the cross-origin resource sharing was dealing mostly with how the response
1041.94s - 1049.30s |  And which headers the response has and whether should I propagate it to the current context of JavaScript and loaded under the current domain
1049.58s - 1057.66s |  But we're really emphasizing the ability to dispatch requests and a single HTTP request is enough to trigger remote code execution
1059.22s - 1063.66s |  Also important like important to mention that it's not limited to Ray. It's only one use case
1063.66s - 1067.58s |  We've seen many remote code execution vulnerabilities on local off
1068.10s - 1071.74s |  For the sake of time and we're only showing this on the presentation
1072.30s - 1074.18s |  But there is the full blog at the end
1074.18s - 1082.06s |  So I have a phishing email not the most successful one, but I'm clicking here and being redirected to this website
1083.18s - 1089.26s |  Now this is the JavaScript that targets the remote code execution. You can see that there's a net cut
1091.26s - 1095.74s |  Socket that is being opened to a remote server, which is the attacker control the server
1096.30s - 1103.74s |  It is being used with mode no course which sends the request and will simply return on a pack response
1103.74s - 1105.74s |  So I cannot see the response
1105.74s - 1110.86s |  but as we said, we don't really care we we just want to send it and trigger remote code execution and
1112.42s - 1117.58s |  Finally we get a response. It looks like an error, but you can see that it's 200. Okay
1118.38s - 1121.02s |  so apparently the job really ran and
1121.14s - 1122.30s |  And
1122.30s - 1125.54s |  You'll see it in a second. But this is all it takes
1126.38s - 1132.70s |  Just one HTTP request to reach the server. We don't care about the response and it's more than enough
1133.90s - 1138.66s |  So every time you visit the page, it will trigger this specific payload
1138.66s - 1143.42s |  Which just prints them environment variables and prints exploited to the screen
1143.82s - 1148.30s |  But here is a reverse shell that is being opened as soon as I'm clicking on an email
1148.98s - 1155.94s |  So on the right I have ray running I'm importing it and running graded in it without any special parameters
1155.94s - 1161.10s |  This is how developers usually use rain and you can see that it binds on local host
1161.74s - 1168.44s |  There is a raised dashboard and it should reflect the jobs that are currently running
1169.40s - 1171.20s |  now
1171.20s - 1173.64s |  on the left, I'll open a socket and
1175.04s - 1177.68s |  listen for connection on on the certain port that
1178.64s - 1181.16s |  Matches the payload of the of the attack
1182.76s - 1188.44s |  Now as soon as I'm clicking on this link, you can see that the reverse shell is opened to the left terminal and
1189.68s - 1194.84s |  Which gives me access to the local machine from VPS somewhere on the Internet
1195.88s - 1201.64s |  You can see that the netcat is really running in rain and I use it to run and I with every
1202.64s - 1209.52s |  Commands on my personal computer and that's it. Basically it got a lot of coverage
1209.52s - 1215.92s |  So remote execution with a single click and as I said, it's not limited to a so therefore all the buzz
1216.44s - 1220.24s |  But it got a lot of coverage and for a reason
1221.20s - 1224.68s |  Now we did a responsible disclosure with the browsers
1225.12s - 1230.28s |  And they had to introduce breaking changes. Some of them were doing it more gradually
1230.52s - 1232.52s |  But the idea is that
1232.88s - 1236.48s |  We've actually managed to coordinate all the browsers together
1236.96s - 1241.64s |  So they will not zero day each other by releasing a fix ahead of others
1243.12s - 1245.12s |  Here is the proof on each of the browsers
1245.28s - 1249.62s |  So the same payload can be used in each and every one of them
1253.80s - 1260.04s |  And let's begin with Safari. So Safari did an amazing job. All of them did an amazing job, but Safari
1260.68s - 1265.76s |  Simply mitigated it in the browser level before PNA is actually implemented in Safari
1267.16s - 1274.16s |  You all know webkit, I guess so webkit is open sources Safari is based on and they changed 23 files
1274.16s - 1280.16s |  They added a lot of tests and they did amazing amazing job on blocking it in Safari's level
1280.16s - 1286.16s |  But not limited to Safari, but actually every web view on watch OS or iPad. It doesn't matter
1286.44s - 1291.12s |  It's all webkit based so they did a really amazing patch here and great job and
1292.16s - 1298.52s |  You can see that they literally check that the Android like the address contains only zeros. They have this property
1298.64s - 1303.84s |  So sorry, but we added like an if clause on every HTTP request in the world
1304.56s - 1307.16s |  not proud of it, but it's the way it is and
1308.64s - 1313.92s |  There's homeoom. Homeoom as I said, they are the leaders of private network access
1314.44s - 1315.92s |  So
1315.92s - 1322.52s |  they proposed a long time ago and even when it's only started to add these headers to the back-end services and
1323.92s - 1329.80s |  later on like these headers can be used in the server level to mitigate those attacks, but
1330.36s - 1337.40s |  They decided to deprecate 0 0 0 0 before private network access completely rolls out to the browser
1337.52s - 1343.12s |  And there is even our report here and they literally say that it can be used for DNS rebinding attacks and
1343.48s - 1350.62s |  PNA protection can be bypassed using this special IP address on macOS and Linux and it should never be used in practice
1351.12s - 1353.12s |  all right, it should never be used and
1354.84s - 1361.20s |  As I said, they added the counters and and they say out loud that malware leverages this attack
1362.00s - 1365.60s |  to specific developer toolkits and again our bug
1367.40s - 1370.92s |  And there is Firefox. Firefox also did an amazing job
1371.92s - 1376.56s |  They don't add PNA right away because it's not standardized yet
1376.56s - 1381.44s |  it's not ready, but when it will be they're definitely positive towards adding PNA and
1382.00s - 1389.04s |  They did block it in fetch level like who knows fetch in JavaScript is the way to do HTTP requests
1389.68s - 1391.80s |  they literally changed the RFC and
1392.72s - 1393.84s |  And
1393.84s - 1399.60s |  they proposed to block 0 0 0 whenever a target IP is 0 0 0 simply drop the
1400.20s - 1406.96s |  Drop the HTTP request and then browsers will have to comply with a new fetch standard. This is the way things work
1408.64s - 1410.64s |  Now what can we expect
1411.16s - 1413.96s |  So I expect that many open source
1414.84s - 1421.48s |  Maintainers and developers will add PNA headers to their services. So they won't be attacked from this attack vector
1422.36s - 1425.36s |  eventually, this IP address will be blocked in all browsers and
1426.08s - 1431.92s |  I think that now people I hope at least I hope that will treat local host is not really local anymore
1432.32s - 1437.60s |  We can make these assumptions of being executed in a trusted environment because as we've seen
1438.16s - 1442.16s |  Browser can have routing capabilities and can reach our local local host
1443.20s - 1449.96s |  Interfaces so HTTPS call CSRF tokens authorization. All of those are a must also in local projects
1450.04s - 1452.04s |  So, please don't make those assumptions
1453.08s - 1459.82s |  Now one was done but a cool thing. I wanted to share so, you know, these port scanners online that scan certain websites
1460.16s - 1468.52s |  So if you use like loopback or localhost, it will fail, but you can make them port scan themselves using 0 0 0 0
1471.12s - 1476.16s |  Yeah, many people forget about this special IP as we said a lot of different use cases
1477.28s - 1478.48s |  and
1478.48s - 1480.48s |  That's it. Basically
1480.68s - 1485.04s |  And it gets me to the conclusion which I'll hand back to Gal and thank you so far
1485.60s - 1498.00s |  He deserves it. So let's conclude what we see. First of all, Avi is awesome, right?
1498.56s - 1504.48s |  He's breaking the browsers making them actually talk to each other and start to actually build a standard
1504.48s - 1508.76s |  We saw how an 18 years old bug that people thought is actually
1509.20s - 1516.92s |  Already over DNS rebinding stuff that we all thought are actually like dead already are actually being actively used
1517.24s - 1521.56s |  I don't know if you saw this 100,000 website. I can tell you honestly, they're probably
1522.16s - 1528.24s |  100% of them are malicious and this whole concept that been we've been trying to do for years and like
1528.60s - 1530.60s |  course and all of those mitigations
1531.08s - 1535.64s |  In the end by a simple super logical bug that just enables
1536.24s - 1538.28s |  Everything once again, we can see that those
1539.36s - 1545.72s |  Attacks will keep on occurring and this is why we think this is a subject that need to be called out
1545.76s - 1550.52s |  people should be aware that no matter if they do have a WAF or a firewall of
1551.04s - 1555.68s |  False sense of safety that our application are actually secured behind a private network
1556.12s - 1561.60s |  This is where we come and show look attackers are also looking for those type of things
1561.80s - 1568.16s |  They are really enjoying from the fact that there isn't one standard and it can be abused and this is why
1568.76s - 1570.76s |  We will keep seeing those stuff again
1570.76s - 1575.52s |  And why we should all as a community really look for other ways and other
1576.88s - 1581.88s |  mitigations on the application themself not trusting the old ways that we saw and
1583.12s - 1587.68s |  Of course, we're gonna have some Q&A. But again, feel free to reach out
1588.40s - 1592.72s |  On whatever like X Twitter, whatever Elon will call it tomorrow morning
1593.04s - 1598.72s |  We would love to answer anything you might you might like have and again
1598.72s - 1600.72s |  This is just one example
1600.96s - 1604.00s |  And you've seen how big companies abused it
1604.84s - 1610.48s |  For a financial reason or attacker been leveraging that to hack internal network
1610.56s - 1615.66s |  But the whole concept of just one packet that can hack any internal application
1615.80s - 1620.36s |  It's a really risky thing and this is why we are here to really mention it out
1620.52s - 1627.40s |  So again, thank you very much everyone for attending this talk. We will share everything online and again
1627.40s - 1630.40s |  Happy DEF CON. Thank you everyone