**Introduction to BlueHat 2024**

- Presented by James Forshaw from Google
- Focus on DCOM research and OleView.NET tool
- Importance of analyzing Windows' COM attack surface

**Component Object Model (COM)**

- **Definition of COM**: A technology built into Windows since Windows 3.1
- **Purpose**: Provides a static **Application Binary Interface (ABI)** for interfacing between programming languages and platforms
- **Middleware**: Facilitates building reusable libraries for different programming languages

**DCOM and Security**

- **Distributed COM (DCOM)**: Allows separation of components across processes or machines
- **Security Concerns**:
  - Potential for privilege escalation and remote code execution
  - COM services running at high privilege levels
  - COM objects instantiated from sandboxes
  - Importance of finding bugs in COM services for security research

**OleView.NET Tool**

- Evolution from SDK's OLEView and Test Container
- **Capabilities**:
  - Enumerates COM classes and interfaces
  - Supports Windows Runtime classes and security descriptor analysis
  - PowerShell interface for flexibility
- **Limitations**: Previous tools were limited in scope and functionality

**Tooling Enhancements and Research Process**

- **Tool Development**: Enhancements in DCOM inter-process communication 
- **Research Process**:
  - Enumerate COM classes and interfaces
  - Use PowerShell for deeper analysis
  - Verify access to COM objects using security descriptors

**COM Security Mechanisms**

- **Launch and Activation Security**: Controls who can launch COM servers
- **Access Security**: Determines who can call methods on COM objects
- **Challenges**: Ensuring correct configuration and handling unexpected behaviors

**Calling Methods on Unknown COM Objects**

- **Proxy/Stubs**: Essential for calling out-of-process COM objects
- **Marshalling Code**: Allows parameter transmission across boundaries
- **Dynamic Wrappers**: For handling interface calls in PowerShell

**Bug Class Discovery**

- **Correlation Descriptors**: Ensure size consistency between parameters
- **Type Library**: Discrepancies can lead to security vulnerabilities
- **Potential Exploitation**: Using type libraries as proxies could bypass correlation checks

**Conclusion**

- **Tool Usage**: OleView.NET as a comprehensive tool for COM research
- **Availability**: Source code available at oliview.net and PowerShell gallery
- **Encouragement for Security Research**: Emphasizes the importance of tooling in security research and analysis