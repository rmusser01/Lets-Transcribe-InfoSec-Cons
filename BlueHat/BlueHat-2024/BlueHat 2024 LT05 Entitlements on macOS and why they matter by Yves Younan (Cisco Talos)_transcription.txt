{
  "webpage_url": "https://www.youtube.com/watch?v=Kl7Dop1IGko",
  "title": "BlueHat 2024: LT05: Entitlements on macOS and why they matter by Yves Younan (Cisco Talos)",
  "description": "BlueHat 2024: LT05: Entitlements on macOS and why they matter by Yves Younan (Cisco Talos)\n\nAbstract: This short talk goes over what entitlements are on macOS, how they work and why they are important. They are different from how traditional permissions have worked in many operating systems. It is important for developers to understand how to use them. To prevent vulnerabilities like:\n\nhttps://blog.talosintelligence.com/how-multiple-vulnerabilities-in-microsoft-apps-for-macos-pave-the-way-to-stealing-permissions/\n\nThe talk will also discuss the issues that Talos discovered and why they're important to the security of macOS users.",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 610,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241112"
}

0.00s - 0.80s | This text was transcribed using whisper model: large-v2

 Hi, everyone.
0.80s - 4.28s |  So I'll be talking about entitlements on macOS.
4.28s - 5.92s |  Nothing in this talk is new.
5.92s - 7.96s |  It's just I think this is an area that's
7.96s - 12.08s |  a little bit underappreciated, and that it's
12.08s - 14.64s |  important for security.
14.64s - 17.96s |  So I lead the Talmos vulnerability discovery team.
17.96s - 22.52s |  So our goal is to find new vulnerabilities in products
22.52s - 25.84s |  that our customers might use to help better protect them
25.84s - 28.40s |  by getting those patched and getting detection content
28.40s - 30.64s |  to Cisco security products.
30.64s - 33.92s |  So since 2016, we've written about 2,000 advisories
33.92s - 38.02s |  covering 2,700 CVEs.
38.02s - 42.82s |  So this is the overview of the talk in general.
42.82s - 46.26s |  So I'll talk shortly about a topic we all know,
46.26s - 48.30s |  discretionary access control, and then
48.30s - 52.42s |  how TCC in macOS is built on top of that,
52.42s - 55.22s |  how those applications use those permissions,
55.22s - 59.42s |  and specifically talk about hardened runtime on macOS,
59.42s - 63.82s |  and then we'll go over to conclusions.
63.82s - 66.46s |  So we all know how discretionary access control works.
66.46s - 71.30s |  It's a typical access control on user operating systems
71.30s - 72.74s |  these days.
72.74s - 75.22s |  A user controls access to their resources.
75.22s - 78.80s |  They can give other users access to their files and stuff
78.80s - 79.74s |  like that.
79.74s - 81.44s |  If you want to do more privileged things,
81.44s - 83.62s |  you either have to be in a correct group
83.62s - 89.42s |  or you have to run something as a higher level user.
89.42s - 92.42s |  And if an application runs as your user,
92.42s - 94.82s |  it can do anything you can do.
94.82s - 97.42s |  So if you have malware running as you,
97.42s - 99.98s |  basically it compromises all your files
99.98s - 104.07s |  and all the resources that you have access to.
104.07s - 110.75s |  So macOS implemented TCC, short for Transparency Consent
110.75s - 111.79s |  and Control.
111.79s - 114.99s |  And basically, it requires explicit user consent
114.99s - 118.11s |  to access sensitive resources.
118.11s - 123.03s |  So for example, the pictures, documents, contacts,
123.03s - 126.67s |  are data that's considered sensitive,
126.67s - 128.91s |  or there's hardware that you can access,
128.91s - 130.33s |  like the microphone or the camera,
130.33s - 131.91s |  that's also considered sensitive.
131.91s - 134.95s |  So a user has to explicitly allow an application
134.95s - 136.87s |  to access that, even though the application
136.87s - 140.23s |  is running as that user.
140.23s - 143.07s |  So the way it's implemented is it works in conjunction
143.07s - 144.39s |  with entitlements.
144.39s - 147.07s |  So that is what an application will say,
147.07s - 148.87s |  I need these privileges to work.
148.87s - 151.87s |  So for example, Microsoft Teams might say,
151.87s - 155.15s |  I need access to the microphone to work.
155.15s - 158.91s |  And you declare that at the time of compilation.
158.91s - 166.11s |  And then you can ask for that permission at runtime.
166.11s - 168.79s |  So yeah, as you see in this example,
168.79s - 173.79s |  the malevolent app has requested access to the camera.
173.79s - 179.58s |  And the user can click Allow or Don't Allow.
179.58s - 181.74s |  User decision is then recorded.
181.74s - 184.78s |  And that app has permanent access to that.
184.78s - 186.82s |  And you can view what applications
186.82s - 192.61s |  you've granted access in the Privacy and Security section.
192.61s - 194.25s |  Now, there's an important difference
194.25s - 197.01s |  with the regular access control, the discretionary
197.01s - 199.17s |  that we talked about earlier.
199.17s - 201.77s |  The restrictions are enforced on the applications.
201.77s - 204.97s |  And even though they might run as that user.
208.05s - 210.01s |  So without TCC, those applications
210.01s - 212.09s |  would have access to everything that the user does.
212.09s - 214.69s |  In this case, they don't.
214.69s - 216.77s |  But if you can manipulate an application that
216.77s - 220.69s |  has access to those resources, as you saw it gets stored
220.69s - 222.93s |  and doesn't get asked again, then you
222.93s - 226.49s |  can bypass these limitations.
226.49s - 228.41s |  So typical ways of doing that would
228.41s - 232.61s |  be either regular memory corruption vulnerabilities,
232.61s - 236.53s |  getting the binary to execute another application,
236.53s - 239.05s |  or library injection.
239.05s - 241.37s |  TCC is actually a little more advanced as well.
241.37s - 244.73s |  There's some capabilities that are more powerful,
244.73s - 247.45s |  but we won't be discussing these here.
247.45s - 249.21s |  But they kind of blur the difference
249.21s - 252.29s |  between user and privileged user a little bit
252.29s - 258.89s |  because applications can have more permissions than typical.
258.89s - 263.53s |  So applications on macOS, there's three types.
263.53s - 265.21s |  So the first one is you download it
265.21s - 268.81s |  from the App Store that runs inside a sandbox.
268.81s - 272.33s |  And all the entitlements have to be declared.
272.33s - 276.17s |  And the user is prompted for permission on first use.
276.17s - 278.01s |  So typical way that an application
278.01s - 283.29s |  would work on your Mac.
283.29s - 285.57s |  Then there's a slightly different one
285.57s - 289.89s |  where it is not on the App Store,
289.89s - 292.49s |  but it's notarized by Apple.
292.49s - 294.57s |  So you can download it from third-party locations,
294.57s - 297.05s |  say the Microsoft site.
297.05s - 299.77s |  But it will show a pop-up that the user must accept,
299.77s - 303.93s |  indicating that the app has been downloaded from the internet,
303.93s - 308.17s |  but that it's been scanned by Apple if it's notarized.
308.17s - 311.73s |  In this case, the app must declare entitlements,
311.73s - 316.29s |  and it must enable hardened runtime.
316.29s - 317.97s |  This is a requirement because it's not
317.97s - 319.69s |  running inside the sandbox.
319.69s - 321.89s |  And then the third type is not on the App Store,
321.89s - 324.29s |  not notarized by Apple.
324.29s - 326.69s |  It's hard to get those to run these days.
326.69s - 331.25s |  So if you download it, you have to go to the Security section
331.25s - 333.61s |  and explicitly click Open Anyway.
333.61s - 335.17s |  So they don't make it easy.
335.17s - 337.13s |  And you have to have a permission set
337.13s - 343.29s |  to enable that as well, to even be able to see that.
343.29s - 347.33s |  So looking at hardened runtime, it
347.33s - 349.85s |  prevents code injection, library injection,
349.85s - 354.01s |  and process memory manipulation by other applications.
354.01s - 355.77s |  But there's exceptions that the application
355.77s - 359.17s |  can declare if they need it.
359.17s - 361.65s |  So the one that we're specifically interested here
361.65s - 363.89s |  is Disable Library Validation, which
363.89s - 371.78s |  allows unsigned libraries to be loaded by the application.
371.78s - 375.82s |  So this allows an application to load unsigned code.
375.82s - 378.42s |  It can be useful for plugins, for example.
378.42s - 382.50s |  But an attacker can abuse this to inject their own code.
382.50s - 384.98s |  So there's a couple of ways to do it.
384.98s - 386.82s |  One way is if an application tries
386.82s - 389.74s |  to load a non-existing library, you
389.74s - 394.18s |  put the library in a writable location
394.18s - 400.30s |  and put that in a writable location along the library
400.30s - 403.26s |  path that the application looks for those libraries.
403.26s - 405.38s |  So if you can get that to load, then suddenly you're
405.38s - 407.94s |  executing code.
407.94s - 410.74s |  What you can also do is copy the application
410.74s - 413.82s |  to a writable location, so for example, slash temp,
413.82s - 416.78s |  and replace the library with your own
416.78s - 419.26s |  because applications keep their permissions based
419.26s - 422.54s |  on an identifier and not on their path.
422.62s - 426.18s |  So if you disable library validation,
426.18s - 429.10s |  you kind of undermine the whole TCC permission
429.10s - 432.82s |  model for your application because a malicious application
432.82s - 438.40s |  can steal the permission of your application.
438.40s - 442.16s |  So this leads me to why I'm speaking here.
442.16s - 446.36s |  So a researcher on my team, Francesco Benvenuto,
446.36s - 448.82s |  found a bunch of Microsoft applications
448.82s - 451.48s |  on macOS that had hardened runtime enabled
451.48s - 455.12s |  but had disabled library validation set.
455.12s - 457.88s |  So basically, he found eight vulnerabilities
457.88s - 461.64s |  in various Microsoft Office apps on macOS.
467.04s - 470.88s |  Because disabled library validation was enabled,
470.88s - 475.44s |  essentially, he could inject a library into those applications
475.44s - 477.64s |  and steal the permissions.
477.64s - 480.80s |  So Microsoft ended up fixing the issue in the three teams
480.80s - 482.88s |  binaries we notified them about.
482.88s - 484.44s |  But forgot one.
484.44s - 486.52s |  Turns out that Quark's lab found another one
486.52s - 487.44s |  about a month later.
487.44s - 489.60s |  And they recently published about that.
489.60s - 492.88s |  And they also fixed the issue in OneNote
492.88s - 495.08s |  simply by doing the right thing and disabling
495.08s - 497.36s |  library validation.
497.36s - 498.80s |  However, at the time, they didn't
498.80s - 501.72s |  fix the other applications.
501.72s - 503.68s |  Apparently, there's some issue with plugins
503.68s - 506.68s |  that need to be unsigned to be loaded.
506.68s - 509.64s |  And so we demonstrated multiple ways to exploit this.
509.64s - 511.92s |  For example, we could steal the passwords
512.24s - 515.80s |  that were stored in the keychain by those Microsoft apps.
515.80s - 517.60s |  Normally, if you want to do that as a user,
517.60s - 520.80s |  access your keychain, you have to type in your password.
520.80s - 523.12s |  We could do that just by injecting a library
523.12s - 525.32s |  into those Microsoft applications
525.32s - 528.12s |  and using permissions to access microphone and camera.
528.12s - 532.00s |  And we have proof of concepts for that.
532.00s - 535.36s |  I was told last week that Microsoft actually
535.36s - 539.20s |  published a note that they will actually
539.20s - 541.48s |  fix this mid-November.
541.48s - 543.24s |  At that URL, basically, they're going
543.24s - 546.76s |  to disable loading unsigned plugins.
549.56s - 551.12s |  There's other ways you could fix it.
551.12s - 555.44s |  If you do really need to disable library validation,
555.44s - 558.36s |  you could prevent an attacker from copying
558.36s - 565.72s |  a binary to a writable location by using launch constraints.
565.72s - 569.12s |  So in conclusion, it's important to understand
569.12s - 572.60s |  enhanced permissions that might exist on other operating
572.60s - 573.72s |  systems.
573.72s - 581.28s |  And if you don't use the protection that
581.28s - 583.76s |  are in place in many operating systems,
583.76s - 590.28s |  you kind of undermine the permissions that are built in.
590.28s - 593.68s |  And we have detailed blog posts about this on our website.
596.60s - 599.80s |  And yeah, that's it.
599.80s - 602.52s |  If you have any questions, I will be at the speaker village
602.52s - 603.76s |  later.
603.76s - 606.48s |  So thanks.