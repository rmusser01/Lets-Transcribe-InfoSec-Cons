{
  "webpage_url": "https://www.youtube.com/watch?v=0jGUiaWAU04",
  "title": "BlueHat 2024: S14: Scaling AppSec with an SDL for Citizen Development",
  "description": "BlueHat 2024: S14: Scaling AppSec with an SDL for Citizen Development Presented by Michael Bargury from Zenity/OWASP and Don Willits from Microsoft\n\nAbstract: Application security programs are difficult. Filled to the brim with vulnerabilities. Overloaded staff and inadequate budget. Challenging communication with developers. The common \u201csolution\u201d is to narrow scope and focus on crown jewel applications and their developers, playing on relative easy mode. What if instead we increase the scope to cover 100x developers and 1000x applications? \n\nSurprisingly, it works. In the first 3 months of 2024, our program remediated over 50K security vulnerabilities. 18K of them were remediated in a single night. \n\nIn this talk, we will share insights from two years in the making of a security program for applications built by business users using GenAI and low-code/no-code tools, a.k.a. Citizen Development. We will share lessons learned and pitfalls not-avoided, and unique challenges for this kind of program. Applying SDLC to hundreds of thousands of citizen developers, with no security savvy. Working at 1,000x the AppSec scale relying on automation and guidance. \n\nNext, we will share the kind of vulnerabilities we see common in citizen development environments. Breaking access controls, allowing one user to impersonate another, leaking data to uncontrolled locations. We will demo exploits showing how they look like from the attacker's perspective.\n\nWe will finish off sharing our adoption of the SDL for citizen development, and showcase the OWASP Low-Code No-Code Top 10 as a framework to help you focus your program.",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 2781,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241108"
}

0.00s - 3.44s | This text was transcribed using whisper model: large-v2

 Welcome, so let's just go ahead and get started.
3.44s - 9.52s |  55,000 developers, 90,000 co-pilots,
9.52s - 15.84s |  half a million apps, and more than a million automations.
17.12s - 19.04s |  10 million credentials.
20.16s - 23.68s |  These are the numbers that the team at Microsoft has to deal with.
23.68s - 26.56s |  These are crazy numbers.
26.56s - 29.56s |  Like when you think about an application security program,
29.56s - 34.84s |  you'll typically be thinking about maybe 1,000 apps, maybe.
34.84s - 41.68s |  They are dealing with 100x, 1,000x that, how do you even begin?
41.68s - 42.56s |  Where do you even begin?
43.76s - 46.88s |  I'll tell you more than that, how they're actually successful.
46.88s - 51.76s |  So how can you be successful with such high numbers?
51.76s - 55.64s |  This is what we're gonna talk about today in this talk.
55.64s - 57.68s |  So here's what we're gonna do today.
57.68s - 61.08s |  We're gonna start with figuring out why the numbers are so high.
61.08s - 63.44s |  Like, how is it even possible?
63.44s - 67.84s |  Then we'll understand what are the applications behind these numbers?
67.84s - 68.80s |  Why is this important?
68.80s - 72.16s |  Why is this important for you to target today?
72.16s - 75.40s |  Next, we're gonna tell you all of the things that went wrong when we
75.40s - 76.76s |  tried to fix it.
76.76s - 81.08s |  And then we'll finish off with actually how did the team at Microsoft
81.08s - 83.52s |  was actually able to fix this problem?
83.52s - 85.88s |  And what can you do with it yourself tomorrow?
86.60s - 89.92s |  So first, we're gonna start with a thank you to our team.
89.92s - 93.24s |  Without the great cross-group collaboration of Jake, Andrew, CJ,
93.24s - 96.36s |  PJ, and Lee, we would not be standing here today.
96.36s - 97.80s |  Next slide.
97.80s - 101.20s |  My name is Don Wiltz, I'm a 30-year veteran of Microsoft.
101.20s - 105.20s |  I've been working on security in one form or another since 2002.
105.20s - 106.08s |  The last five years,
106.08s - 109.44s |  I've been working on driving security features into the Power Platform.
109.44s - 111.76s |  In the last two years, I've been increasingly focused on
111.76s - 114.56s |  the unintended consequences of citizen development.
114.56s - 117.24s |  Which is to say, creating risk of oversharing data
118.72s - 121.88s |  just by using the platform, but using it incorrectly.
123.40s - 126.20s |  My name is Michael, I'm the CTO and co-founder at Xanadu.
126.20s - 131.12s |  We're an app sec company focused on helping
131.12s - 133.96s |  large customers secure their local no-code apps.
133.96s - 137.08s |  Recently, AI agents and co-pilots.
137.08s - 139.84s |  I also lead the OS local no-code top ten.
139.84s - 143.96s |  And actually, most of my days are spent hacking these things.
143.96s - 147.88s |  And so, that's where I feel most comfortable, but
147.88s - 152.32s |  really excited to be taking the blue team perspective here today.
152.32s - 155.44s |  So, we've been collaborating for over two years now.
155.44s - 158.72s |  In part, focusing on risk from those unintended consequences of
158.72s - 161.64s |  the citizen developer, not product gaps.
162.84s - 166.12s |  I also started helping Michael with the top ten,
166.12s - 168.32s |  back when it was the top five or six.
168.32s - 173.44s |  So, we're both here today to tell the same story.
173.64s - 181.04s |  But one from, I'm sorry, we tell the same story and
181.04s - 185.16s |  show how we did what we did, so that you can do it yourself.
185.16s - 187.64s |  So, I think it's really cool for
187.64s - 189.84s |  Microsoft to be willing to share this story externally.
189.84s - 193.88s |  Because I'm seeing lots of large organizations targeting
193.88s - 197.24s |  the same kind of concerns.
197.24s - 200.04s |  And Microsoft has really done an incredible job at it.
200.08s - 202.28s |  So, I just wanted to say thank you for
202.28s - 204.28s |  the team for their willingness to share their story.
205.92s - 210.24s |  All right, so let's figure out where those numbers come from.
210.24s - 214.56s |  And so, one of the things that's happening today is that building
214.56s - 216.92s |  applications has become just very, very easy.
216.92s - 221.96s |  And what you're seeing on screen is just by talking to basically an AI chat bot,
221.96s - 223.84s |  an application gets created.
223.84s - 226.04s |  By the time you're done with the conversation,
226.04s - 228.96s |  that application now lives, it has identity.
228.96s - 233.32s |  It can talk to data, it can be shared, it's just so easy.
233.32s - 237.16s |  So, while I'm talking, you see this application getting created.
237.16s - 240.96s |  This is lowering the bar to create applications,
240.96s - 243.04s |  to be productive in the enterprise.
243.04s - 245.72s |  It also means that the people that are building the application,
245.72s - 246.96s |  they are everyone.
246.96s - 249.40s |  This is no longer just a game for developers.
249.40s - 254.36s |  These technologies are empowering everyone to just create things.
254.36s - 258.24s |  But creating things in an enterprise is iffy, right?
258.48s - 261.40s |  It's important to get a whole bunch of things right,
261.40s - 263.60s |  not just getting the app to work.
263.60s - 267.48s |  And so, let me give you just one example so we have something in mind.
267.48s - 273.24s |  When I first visited Microsoft campus while working with Don two years ago,
273.24s - 277.08s |  this was just after COVID and we had to upload a vaccination proof,
277.08s - 281.84s |  like proofs of vaccination to this app.
281.84s - 285.44s |  So it was called the COVID Healthcare Check App.
285.44s - 287.52s |  And later I learned that this is actually a low code app.
288.64s - 293.32s |  Yeah, this was the first major app we built with inside of Teams itself.
293.32s - 297.40s |  When Power Platform and Power Automate Flow was integrated into Teams,
298.72s - 304.00s |  this came out the door like next day or so after that feature got enabled.
304.00s - 306.96s |  So this is a pretty sophisticated piece of application.
306.96s - 310.56s |  But more importantly, it's storing like healthcare data,
310.56s - 312.28s |  personal data for people.
312.28s - 314.00s |  So it's really important to get it right.
314.04s - 317.48s |  And even if somebody in the business is able to build it, which is awesome,
317.48s - 321.00s |  of course, we need to handle security for that as well, right?
321.00s - 325.88s |  So part of the reason why this world is getting unnoticed, but
325.88s - 330.76s |  also expanding widely within the enterprise, is that you don't really
330.76s - 333.64s |  get to make a choice whether you're adopting these technologies or not.
333.64s - 336.64s |  So there's no, show me an enterprise in the world that doesn't use
336.64s - 339.64s |  at least one of the vendors that you're seeing on screen right now.
339.64s - 341.36s |  This is not just a Microsoft thing.
341.36s - 343.36s |  Everybody's using those technologies.
343.36s - 347.84s |  And so low-code, no-code, like four years or five years ago, and
347.84s - 353.16s |  Gen AI in the last two years have just been added into those platforms that
353.16s - 357.52s |  you already use, giving business users the ability to create themselves.
357.52s - 358.68s |  This is not a choice.
358.68s - 360.40s |  Everybody has this in their organization.
360.40s - 362.60s |  It's whether they take control of it or not.
362.60s - 366.20s |  And so Microsoft has had a pretty early start
366.20s - 367.92s |  on figuring out that this is important.
367.92s - 371.56s |  This is a quote from Satya back in 2019.
371.56s - 374.92s |  And he's saying, hey, by like five years from now,
374.92s - 380.52s |  we're going to have 500 million apps built with these low-code, no-code tools.
380.52s - 385.04s |  And it's going to be more than what we've built together in the last 40 years.
386.08s - 393.28s |  So this is what Satya said in 2019, we're going to have 500 million apps by 2023.
393.28s - 395.48s |  And then Gen AI hits.
395.48s - 400.60s |  So this is before Gen AI, this is before things become even easier to create.
400.60s - 404.84s |  And so this is the growth just inside of the Microsoft tenant in the last year.
404.84s - 408.12s |  You can see that the number of applications created with these
408.12s - 411.28s |  technologies have been tripled in the last year.
411.28s - 413.40s |  This is after the 500 million apps.
413.40s - 415.56s |  So these numbers are really going crazy.
415.56s - 419.80s |  We're talking about almost 2 million assets in the Microsoft environment today.
419.80s - 421.80s |  Again, crazy, crazy, crazy numbers.
423.76s - 428.76s |  And so hopefully, this gives you a bit of perspective into what we're talking about
428.76s - 432.00s |  and why is it important for you to kind of stay with us for
432.00s - 434.20s |  the rest of the time that we have here today.
434.20s - 438.84s |  And so up until now, we talked about these numbers.
438.84s - 441.52s |  But I think this is a security conference,
441.52s - 445.04s |  it's important for us to show some implications, so let's do that.
445.04s - 447.28s |  Let me start with the first story.
447.28s - 451.00s |  So Salesforce has this feature called Community Websites.
451.00s - 455.80s |  And it's like very easily you create a website that's external facing for
455.80s - 457.32s |  people outside of your organization.
457.32s - 460.20s |  Could be for vendors, could be for your partners.
460.20s - 461.80s |  This is a very popular feature.
461.80s - 464.28s |  So here's a website that we created.
464.28s - 468.92s |  This is a website for showing customer use cases.
468.92s - 471.20s |  So this is how a customer use case looks like.
471.20s - 473.24s |  It's a bunch of information about the customer.
473.24s - 475.20s |  And of course, it's connected back to the CRM.
476.60s - 479.16s |  So the CRM holds the actual information.
479.16s - 481.24s |  Now, of course, we don't want to reveal the entire CRM.
481.24s - 484.88s |  We just want to reveal information about specific customers.
484.96s - 491.92s |  So this is how you set up whether a website like that is external facing or not.
491.92s - 497.36s |  So again, a single click, a single click is the distinction
497.36s - 499.72s |  between whether this thing is going to be available for
499.72s - 501.36s |  people anonymously on the Internet.
501.36s - 505.84s |  Or just logged in folks, of course, that could lead to mistakes.
505.84s - 507.92s |  So this is the first part we have here.
507.92s - 510.24s |  We have an app, that app is now publicly accessible,
510.24s - 514.32s |  because somebody clicked on that configuration.
514.32s - 518.32s |  And then you need this app to be able to actually pull information from the CRM.
518.32s - 522.08s |  This is done with a local tool called Salesforce Flow.
522.08s - 523.76s |  It's just like an automation tool.
523.76s - 525.36s |  And you can see the automation here.
525.36s - 527.04s |  It's pretty simple, right?
527.04s - 531.64s |  It just brings the information about specific customers.
531.64s - 533.76s |  Now, so now we have the app.
533.76s - 538.60s |  The app is external facing and it is using that flow behind the scenes.
538.60s - 541.76s |  Now, this flow has a bunch of configuration.
541.76s - 545.44s |  One of the things that you need to configure is how does this flow run?
545.44s - 549.92s |  Does it run in user context or in system context?
549.92s - 552.12s |  Guess what system context does?
552.12s - 556.60s |  It completely ignores the role-based access control.
556.60s - 562.52s |  So it means that even if you're not logged in, even if you're an anonymous user,
562.52s - 566.16s |  you can still get information about everything in the table behind it.
566.16s - 570.88s |  So of course, what this means is that now you have external facing folks,
570.88s - 575.28s |  like people on the Internet, that then can get data about every customer,
575.28s - 578.60s |  not just the customers that have their use cases out there.
578.60s - 582.08s |  And so this looks like you can actually get to the table
582.08s - 584.48s |  with all of the different customers that are available there.
584.48s - 590.16s |  And so this is just like a series of small choices that together,
590.16s - 594.56s |  the combined effect is data leaking outside to the Internet.
594.56s - 596.12s |  Let me show you another example.
596.12s - 599.56s |  So say you want to create an Ask HR copilot.
599.56s - 603.84s |  So you have an Ask HR SharePoint site with a bunch of useful information.
603.84s - 609.32s |  Now you want to create a copilot to be able to converse over that website.
609.32s - 612.12s |  So you go through a quick wizard.
612.12s - 613.84s |  This is a copilot studio.
613.84s - 617.36s |  You explain what you want this copilot to actually do.
618.60s - 621.04s |  So first, we have now this copilot.
621.04s - 623.00s |  It's living out there in the Internet.
623.00s - 625.88s |  One of the things that you can configure about this copilot
625.88s - 628.60s |  is who has access to it, okay?
628.60s - 631.64s |  So is this going to be available just in Teams?
631.64s - 634.56s |  Is this going to be available to external users?
634.56s - 639.36s |  And one of the configuration options that you have here is no authentication.
639.36s - 642.48s |  No authentication means anybody on the Internet can go out and
642.48s - 646.36s |  talk to this bot without logging in.
646.36s - 648.32s |  This was actually the default for a while.
648.32s - 651.56s |  And so of course, this means that we still have these bots out there.
651.56s - 653.84s |  And so right now, somebody has made this mistake.
653.84s - 655.28s |  This is no longer the default.
655.28s - 657.36s |  But now somebody can make this mistake.
657.36s - 659.12s |  They click on that button, and
659.12s - 661.40s |  now you have a bot that's out there in the Internet.
661.40s - 665.76s |  This is still fine if we haven't connected this bot to something important.
665.76s - 667.48s |  So let's do that.
667.48s - 670.24s |  So you can add a bunch of knowledge to this bot.
670.24s - 672.04s |  It can connect everywhere you'd like.
672.04s - 675.20s |  Really, the knowledge sources here are very wide.
675.20s - 678.64s |  One of the things that you can do is actually connect it to Fabric.
678.64s - 681.56s |  So on the other side, within the Fabric ecosystem,
681.56s - 685.20s |  you can take, let's say, a CSV file with sensitive information.
685.20s - 687.56s |  It could have a sensitive label, whatever you'd like.
687.56s - 690.28s |  And you can create an AI skill out of it.
690.28s - 695.52s |  Now, the data has a sensitivity label, but the AI skill doesn't.
695.52s - 697.88s |  And so now you can go back to Copilot.
697.88s - 699.52s |  You can grab that skill.
699.52s - 701.12s |  You can connect it to your bot.
701.12s - 702.88s |  And now, what have you done?
702.88s - 705.32s |  Well, you have Copilot on one side.
705.32s - 708.96s |  It's connected to this AI skill inside of Fabric.
708.96s - 713.16s |  And now you have public access on one side, business data on the other side.
713.16s - 717.04s |  And you can see how this becomes very difficult to solve when it goes out
717.04s - 718.32s |  between different ecosystems.
718.32s - 720.88s |  It doesn't stay just in one place.
720.88s - 724.72s |  And so this is actually something that we've seen happen a lot.
724.72s - 726.92s |  As I mentioned, this was a default for a while.
726.92s - 730.52s |  And so one of the things that we did in order to check this out
730.52s - 732.92s |  is to try and search those bots.
732.92s - 737.60s |  So for example, we know that AWS has been struggling for
737.60s - 741.00s |  a while with S3 buckets, S3 buckets that are open to the public.
741.00s - 743.20s |  This is the same thing for Azure as well.
743.20s - 745.24s |  And even though the defaults are now secure,
745.24s - 749.24s |  we are still seeing those buckets misconfigured out there in the wild, right?
749.24s - 751.40s |  So we wanted to do the same thing here.
751.40s - 752.40s |  So this is PowerPoint.
752.40s - 753.60s |  This is a tool that we wrote.
753.60s - 759.36s |  It's a red teaming tool that allows people to basically check their own organizations.
759.36s - 762.92s |  And what PowerPoint does is just, it guesses a bunch of information.
762.92s - 765.48s |  Maybe this is happening way too fast.
765.52s - 772.08s |  So PowerPoint allows you to add either, you can either point it at your tenant
772.08s - 775.24s |  or scan the entire internet widely.
775.24s - 780.44s |  And so what it does is it guesses the specific random parts of the URL
780.44s - 783.76s |  where these bots, these Copilot Studio bots are available on the internet.
785.28s - 787.96s |  And so I'm scanning my own environment here, of course, and
787.96s - 793.08s |  it's finding out the tenant ID using the same technique that we learned from
793.08s - 795.28s |  IAD internals, so thank you Nestori.
796.44s - 801.16s |  Then we try to guess a bunch of information, for example,
801.16s - 805.60s |  the environment ID, which is, it's easy to find the default environment ID.
805.60s - 808.24s |  And on top of that, we need to guess a couple of things.
808.24s - 812.00s |  So let's see, what are we actually guessing?
812.00s - 815.48s |  So what we need to find is first the,
815.48s - 819.08s |  you can see this like five letter combination there.
819.08s - 822.80s |  That's basically something called the solution prefix.
822.80s - 826.84s |  But this is something, this is not, so this is just five characters.
826.84s - 828.72s |  It's pretty easy to find.
828.72s - 832.16s |  And then we just look for popular bot names.
832.16s - 836.12s |  So you can see that we found copilot-test, copilot-flow,
836.12s - 838.80s |  copilot-1, 2, 3, 4, up until 9.
840.84s - 844.52s |  You'll see in a moment copilot-sharepoint, copilot-poc.
844.52s - 846.92s |  Every time I find one of these names,
846.92s - 850.84s |  I get an actual website out there on the internet.
850.88s - 853.80s |  And after we found all of these bots, the next thing we're gonna do is just,
853.80s - 857.12s |  we're gonna go to every one of them and try to talk to them.
857.12s - 861.56s |  And so some of them, you can see that they won't talk to us, but some will.
861.56s - 864.92s |  So every red line here is actually a copilot we find out there on
864.92s - 866.88s |  the internet, ready to talk to us.
866.88s - 868.32s |  So this tool is out there today, and
868.32s - 872.56s |  again, it's meant to help you secure your own organization.
872.56s - 874.80s |  We have actually used it to scan the entire internet,
874.80s - 876.96s |  or a vast majority of the internet.
876.96s - 880.32s |  We found more than 1,000 of these apps, of these bots,
880.32s - 885.44s |  out there belonging to Fortune 500 companies that are exposing sensitive data.
885.44s - 888.36s |  So you talk to them, you extract information behind them.
888.36s - 892.26s |  They'll tell you all of the secrets they know.
892.26s - 894.54s |  All right, let me give you another example.
894.54s - 899.06s |  So one of the challenging things about working in an enterprise
899.06s - 901.70s |  is that you need to work without look.
901.70s - 903.86s |  No, I'm kidding.
903.86s - 907.86s |  Is that, well, there are all of these security controls, right?
907.90s - 909.66s |  And they are annoying sometimes.
909.66s - 910.82s |  So what do people do?
910.82s - 913.46s |  Well, they take their corporate email and
913.46s - 918.70s |  they find a way to send the email off to their personal Gmail accounts.
918.70s - 920.86s |  Now, if they do this without the forwarding rules,
920.86s - 923.10s |  then we will probably find them.
924.82s - 928.38s |  You have controls on the email server, you have controls on the network.
928.38s - 929.58s |  This is all great.
929.58s - 933.30s |  Here's the latest innovation in getting your information to your Gmail.
933.30s - 936.10s |  You simply use something like Power Automate
936.10s - 938.58s |  to trigger on every new email that you get.
938.58s - 942.86s |  And then you copy the content of the email to your personal Gmail address.
942.86s - 945.14s |  So you will not find this on the email server.
945.14s - 947.10s |  You will not see any email forward.
947.10s - 950.18s |  This is data being copied inside of Power Automate.
950.18s - 952.66s |  So no way for you to know.
952.66s - 955.22s |  And so that's something that we are seeing, by the way, a lot,
955.22s - 957.86s |  like pretty much every organization we work with.
957.86s - 961.78s |  And so for this example,
961.78s - 964.10s |  we're going to look at a few different things that went wrong.
964.10s - 966.94s |  So the first thing here is, well, pretty obvious,
966.94s - 969.98s |  business data is leaking to a personal account.
969.98s - 971.14s |  But wait, there's more.
971.14s - 975.06s |  So what about the existing emails that I already have?
975.06s - 979.66s |  So if I want to sync every email that I already have in my inbox to my Gmail
979.66s - 981.58s |  account, how can I do that?
981.58s - 985.38s |  Because this is not possible with the automation I just showed you.
985.38s - 987.74s |  So this is a nice little app.
987.74s - 990.18s |  It's called Sync Outlook History to Gmail.
990.18s - 994.70s |  I give it the email address to store the information in, and
994.70s - 996.34s |  then how many emails I want to sync.
997.86s - 999.38s |  This is how it looks like.
999.38s - 1004.18s |  And what you can see here is just like what I just showed.
1004.18s - 1005.30s |  How does this work?
1005.30s - 1007.50s |  Well, there's a Power Automate flow behind it.
1007.50s - 1010.06s |  It goes out to my email address.
1010.06s - 1014.06s |  It goes through each and every one of the emails,
1014.06s - 1016.14s |  the last emails that they asked for.
1016.14s - 1020.22s |  And then using my Gmail account, it sends those emails.
1020.22s - 1023.22s |  But again, with my Gmail account, you have no controls there.
1023.22s - 1027.30s |  And so you can see the icon on the right bottom of the screen.
1027.30s - 1030.66s |  That's basically the hacker icon or the malicious user icon.
1030.66s - 1036.10s |  So what I'm gonna do now is I'm gonna take this nice little app that I built for
1036.10s - 1039.42s |  myself, and I'm gonna share it with everyone.
1039.42s - 1043.98s |  And by the way, when I say share with everyone, I really mean everyone.
1043.98s - 1049.34s |  So you can see that this share also means I'm sharing, I would need access.
1049.34s - 1051.78s |  This application would need access to Outlook.
1051.78s - 1053.70s |  And when I share this application,
1053.70s - 1059.06s |  this is going to be accessible to everyone that has access to your AAD tenant, okay?
1059.06s - 1062.58s |  This includes guests, and this is actually something that
1062.58s - 1065.78s |  I was able to have a lot of fun with in Black Hat last year.
1065.78s - 1069.02s |  So if you're interested in what could go wrong when you can share something with
1069.02s - 1074.82s |  everyone, credentials, the problem is credentials.
1074.82s - 1077.22s |  So check out the talk I gave at Black Hat last year.
1078.26s - 1081.06s |  So here's the thing, now I sent this to everyone.
1081.06s - 1084.10s |  And now you have the little icon there of just the user,
1084.10s - 1088.34s |  just the user in the organization, the guy on the right bottom of the screen.
1088.34s - 1090.38s |  So they click on this app, and
1090.38s - 1094.90s |  the app immediately says, hey, I need to be able to access Outlook.
1094.90s - 1097.54s |  Okay, so you give it the access for Outlook.
1097.54s - 1099.66s |  And you use the application, which is fine.
1099.66s - 1101.10s |  But here's the problem.
1101.10s - 1104.46s |  Every piece of information that goes through Power Automate gets logged.
1104.46s - 1107.82s |  So now as the malicious user that created this app,
1107.82s - 1112.02s |  I can actually go to the flow execution logs and see all of your emails.
1112.02s - 1117.22s |  So every user of this app ends up giving access to their emails
1117.22s - 1118.98s |  to the person that created this app.
1120.06s - 1123.46s |  So this is the second problem here, or we're seeing two other problems,
1123.46s - 1126.82s |  the sharing with everyone and personal data that leads to logs.
1126.82s - 1128.58s |  But wait, there's more.
1128.58s - 1133.06s |  Because this application is not just fetching this information.
1133.06s - 1137.74s |  This application actually gets the ability to operate on behalf of that users
1137.74s - 1139.14s |  with their Outlook account.
1139.14s - 1141.78s |  This is not scoped to a specific permissions.
1141.78s - 1145.70s |  This is full user impersonation with this app.
1145.70s - 1149.18s |  What this means is that I can use this to harvest credentials.
1149.18s - 1151.38s |  So here's another module in PowerPoint.
1151.38s - 1157.86s |  I basically install, so I need an account within an enterprise.
1157.86s - 1161.82s |  I install a malicious application in the enterprise.
1163.22s - 1167.18s |  And now this application is just a shout out application that's on the templates
1167.18s - 1168.74s |  there for Power Platform.
1168.74s - 1169.86s |  So it's a nice little app.
1169.86s - 1172.10s |  Again, I'm logged in as the malicious user.
1172.10s - 1176.26s |  And I'm gonna do like a shout out for
1176.26s - 1179.22s |  my victims, specifically the CFO of that company.
1179.22s - 1180.86s |  I'm gonna say, hey, good job.
1180.86s - 1181.70s |  Thank you very much.
1183.02s - 1186.34s |  Send like a nice message, your hard work is much appreciated.
1187.38s - 1189.38s |  So now this is my victim.
1189.38s - 1192.46s |  They're gonna get this nice little email.
1192.46s - 1193.82s |  And wouldn't you click it?
1193.82s - 1196.18s |  Like it's a nice looking email, right?
1197.74s - 1200.66s |  Okay, so they get this email, they click on this link,
1200.66s - 1201.98s |  they go to the shout out app.
1203.10s - 1206.18s |  But of course, and of course they'll give a shout out to somebody else.
1206.18s - 1210.30s |  Of course, once they use the app, I just told all of their emails.
1210.30s - 1211.02s |  Because why not?
1211.02s - 1215.02s |  I have access to their account while they're using the app, right?
1215.02s - 1219.78s |  And the thing behind these applications, of course every application can do that.
1219.78s - 1223.46s |  But the thing here is that this application is hosted on a Microsoft
1223.46s - 1229.90s |  domain, is very highly trusted, is not scoped in terms of permissions.
1229.90s - 1233.10s |  And so it's just a recipe for disaster.
1234.22s - 1237.46s |  So again, you can use this to try and test your defenses.
1237.46s - 1242.06s |  So this is the fourth thing here, privilege escalation path and
1242.06s - 1243.06s |  account impersonation.
1243.06s - 1246.18s |  This is a big deal within those applications.
1246.18s - 1248.26s |  And so I think, so
1248.26s - 1251.78s |  this is just like a thing that tries to wrap everything around here.
1251.78s - 1254.74s |  So we have a privilege escalation path with a bunch of sensitive data that
1254.74s - 1255.54s |  could leak.
1255.54s - 1259.10s |  Let me leave you off with one last example, and I'll be quick about it.
1259.10s - 1260.42s |  Go ahead.
1260.42s - 1262.62s |  So we have John the Persistent Vendor.
1262.62s - 1263.98s |  Next slide.
1263.98s - 1267.90s |  John is an employee of the fictional Contoso LLC Corporation.
1267.90s - 1268.86s |  And for 18 months,
1268.86s - 1273.66s |  we hired him to create Salesforce assets like Dataflows.
1273.66s - 1278.38s |  So during that 18 month period, his Active Directory account,
1278.38s - 1282.30s |  excuse me, Entra ID account is enabled.
1282.30s - 1286.74s |  But as soon as that contract expired, he can no longer call the flow,
1286.74s - 1288.18s |  modify the flow.
1288.18s - 1292.42s |  But before he left, he added his place of business as an identity,
1292.42s - 1295.98s |  giving it full ownership and editable privileges.
1295.98s - 1298.98s |  Now, this is something I see with vendors a lot, and
1298.98s - 1302.02s |  I sometimes wonder if the vendor companies actually insist upon this for
1302.02s - 1303.42s |  some reason.
1303.42s - 1305.18s |  But if you see this once with a vendor,
1305.18s - 1307.38s |  you're gonna see it practically in everything they create.
1308.82s - 1313.90s |  But also before John left, he added johnny5 at hotmail.com,
1313.90s - 1316.02s |  which is his personal ID.
1316.02s - 1321.50s |  There is no legitimate business reason for him to do that.
1321.50s - 1323.18s |  So, next slide.
1323.18s - 1327.62s |  This is a pattern we see with full-time employees as well, not just vendors.
1328.86s - 1333.06s |  But it does seem to be a pattern that we see more than once with vendors
1333.06s - 1333.58s |  themselves.
1334.78s - 1340.86s |  So all of these examples, this is just to show that if we are leaving these,
1340.86s - 1345.86s |  so businesses are now creating pretty sophisticated applications.
1345.86s - 1348.26s |  And most of them are doing this alone.
1348.26s - 1351.18s |  And as security teams, we are just not involved.
1351.18s - 1355.94s |  Now, of course, what's gonna happen is that they're gonna make a bunch of mistakes.
1355.94s - 1358.38s |  Of course they would, because we're not helping them.
1358.38s - 1362.38s |  So if we're going to continue to let them do that,
1362.38s - 1365.34s |  then this is not going to work.
1365.34s - 1370.82s |  So let's go through a few examples of what we tried to do to actually fix this,
1370.82s - 1372.34s |  and how did we fail.
1372.34s - 1375.18s |  So of course, the first thing, so you have all of these apps,
1375.18s - 1377.42s |  you understand why they are important.
1377.42s - 1381.54s |  And now, what would be the first thing that you'll try to do to build
1381.54s - 1383.66s |  a program that can actually solve this?
1383.66s - 1385.34s |  You'll go after best practice.
1385.34s - 1389.10s |  And of course, spoiler alert, none of them will work.
1389.10s - 1392.82s |  And so let's take a three different best practice here.
1392.82s - 1394.22s |  Focusing on Crown Jewels, right?
1394.22s - 1395.30s |  We have so many apps.
1395.30s - 1396.70s |  Let's focus on the ones that matter.
1397.90s - 1399.10s |  Getting developer buy-in, so
1399.10s - 1402.26s |  getting the developers to actually not make so many mistakes.
1402.26s - 1403.70s |  And the SDL.
1403.70s - 1405.78s |  So let's start with focusing on Crown Jewels.
1405.78s - 1408.54s |  Let's look at the Microsoft environment.
1408.54s - 1411.86s |  We want to find which of these applications are actually important.
1411.86s - 1413.30s |  Well, guess what?
1413.30s - 1417.74s |  This is the number, so you can see the numbers of active credentials
1417.74s - 1419.42s |  to each one of the different services.
1419.42s - 1421.30s |  These are all Crown Jewels.
1421.30s - 1425.54s |  Like by definition, these are all built within your business application
1425.54s - 1427.82s |  where you hold all of your important information.
1427.82s - 1431.34s |  So good luck with trying to figure out which ones are not important,
1431.34s - 1432.82s |  not for you to focus on.
1433.62s - 1437.30s |  Just if you want to focus on every app that connects to Office 365,
1437.30s - 1440.94s |  you're over a million different connections here.
1443.94s - 1447.54s |  So the next thing you're thinking about is, okay, let's get developer buy-in.
1447.54s - 1451.82s |  Let's get these business users not to make so many mistakes, right?
1451.82s - 1455.06s |  So try and have a conversation with somebody in finance or
1455.06s - 1458.70s |  in sales about storing sensitive data,
1458.70s - 1461.46s |  storing social security numbers in a safe way.
1461.46s - 1463.62s |  This is actually an example we see a lot, so
1463.62s - 1467.10s |  people store sensitive data behind those applications,
1467.10s - 1469.02s |  available to everyone in plain text.
1469.02s - 1471.50s |  Of course, you can't really expect them to have that conversation.
1471.50s - 1473.14s |  It's not a fair conversation to have.
1474.18s - 1476.42s |  And then you have the SDL.
1476.42s - 1479.50s |  So I've been working with the SDL for the last 20 years, and
1479.50s - 1482.46s |  even further back before we even decided to call it the SDL.
1482.46s - 1487.62s |  It was there back with the original Bill G Trustworthy Computing Memo in 2002.
1487.62s - 1489.98s |  We more recently added Zero Trust,
1489.98s - 1491.86s |  although Zero Trust is out of scope for this talk.
1493.98s - 1494.48s |  Next.
1496.14s - 1502.38s |  Okay, so how well does SDL guidance apply to low-code, no-code, all up?
1502.38s - 1506.22s |  Not just Power Platform, but all low-code, no-code platforms.
1506.22s - 1511.02s |  I did a gap analysis on our internal technical requirements in the SDL
1511.02s - 1514.38s |  that would apply to things that you create with low-code, no-code.
1514.38s - 1517.10s |  And 71% of it is just can't get there from here.
1518.10s - 1521.46s |  It's either specific to technology you only find in Visual Code or
1521.46s - 1523.50s |  Visual Studio or platforms like that.
1524.70s - 1530.26s |  Low-code, no-code hides things from you that you might not be able to get to.
1530.26s - 1534.22s |  And usually, it's not a bad thing to hide that, but
1534.22s - 1535.82s |  sometimes there are consequences.
1537.10s - 1541.26s |  One of the prominent requirements in any SDL should be use HTTPS.
1541.26s - 1543.26s |  Ensure that the data between you and
1543.26s - 1545.18s |  whatever you're talking to is encrypted in transit.
1546.18s - 1550.78s |  The thing about HTTPS is that PowerApps.com, or
1550.78s - 1555.02s |  actually Preview.Make.PowerApps.com, I think I got it right.
1556.42s - 1557.94s |  The HTTPS is implemented for you, so
1557.94s - 1562.38s |  the communications channel between you and PowerApps.com itself is encrypted.
1562.38s - 1564.74s |  But what about your connections?
1564.74s - 1569.82s |  So many connections take URLs as the connection parameter.
1569.82s - 1574.30s |  So did the citizen developer even remember to include HTTPS?
1574.30s - 1577.66s |  If they did, is the back-end server configured and
1577.66s - 1581.46s |  patched so that HTTPS isn't dropping down to plain text by accident?
1583.78s - 1588.26s |  Is there even an HTTPS implementation on that back-end data server where
1588.26s - 1589.94s |  the data's being hosted?
1589.94s - 1592.86s |  This level of nuance is something that's not gonna be in
1592.86s - 1594.34s |  the citizen developer's awareness.
1596.18s - 1600.70s |  A lot of our SDL tools, we have a lot of SDL tools, internally and
1600.70s - 1605.30s |  externally, that they're built for a source code file.
1605.30s - 1608.82s |  They're built for a compiled binary, neither of which exists in low-code,
1608.82s - 1609.32s |  no-code.
1612.18s - 1616.38s |  For the typical low-code, no-code developer, the business user,
1616.38s - 1617.54s |  this is just technobabble.
1617.54s - 1621.02s |  It's a well-written piece of SDL content, but for
1621.02s - 1622.70s |  them, it's just over their heads.
1623.14s - 1628.26s |  If we look at the traditional pie slices of the security development
1628.26s - 1633.86s |  lifecycle, the never-ending circle, we have seven slices.
1633.86s - 1637.54s |  They're split across responsibilities with four different teams,
1637.54s - 1640.98s |  the business, engineering, quality assurance, and operations.
1642.50s - 1645.98s |  But with low-code, no-code, we're bouncing constantly from envision,
1645.98s - 1648.62s |  create, envision, create, and actually we envision, create, publish,
1648.62s - 1650.06s |  envision, create, publish.
1650.06s - 1652.30s |  It's like Agile on steroids in this respect.
1653.50s - 1656.62s |  There's not gonna be much awareness of the other pie slices.
1656.62s - 1659.58s |  And a lot of things are handled for you, but
1659.58s - 1663.46s |  there's still some gotchas here and there, like the HTTPS connector example.
1666.34s - 1668.02s |  We have features in Power Platform.
1668.02s - 1670.78s |  I can speak to other platforms for continuous integration,
1670.78s - 1673.90s |  continuous development, but it's not widely adopted.
1674.54s - 1680.70s |  And so there's places in the SDL might hook into your CI, CD.
1680.70s - 1683.30s |  There's no place, well, there is a place to hook into it, but
1683.30s - 1684.70s |  people aren't using it consistently.
1686.30s - 1688.42s |  So at this point, we're kind of stuck, right?
1688.42s - 1690.42s |  We've tried the best practice.
1690.42s - 1692.62s |  We have all of these applications that are created,
1692.62s - 1694.50s |  all of these different credentials.
1694.50s - 1698.38s |  We are in a place where we can't move forward.
1698.38s - 1706.42s |  And so we needed an insight to get us out of this tent, and here it is.
1706.42s - 1708.22s |  Remember these applications.
1708.22s - 1711.34s |  These applications are very easy to create, right?
1711.34s - 1716.02s |  If something is so easy to create, shouldn't it be also easy to fix it?
1716.02s - 1720.46s |  Shouldn't we be able to understand everything about the app,
1720.46s - 1724.02s |  about its environment, about its connections and credentials?
1724.06s - 1728.38s |  And find out and actually create a patch for you,
1728.38s - 1732.82s |  tell you what are the exact things that you need to do to actually fix it.
1733.98s - 1736.18s |  So this is how we actually got started.
1736.18s - 1739.74s |  We got started with this idea of autofix or silent remediation.
1739.74s - 1744.26s |  This was basically saying, okay, for some of these problems,
1744.26s - 1748.26s |  for some of these vulns, we can actually fix them automatically.
1748.26s - 1749.74s |  We don't need to talk to anyone.
1749.74s - 1752.02s |  We don't need to ask people to do stuff.
1752.02s - 1753.86s |  We can just change configuration.
1754.86s - 1756.86s |  So you can see a few examples here.
1756.86s - 1759.70s |  These are clear examples where we can fix things, and
1759.70s - 1761.62s |  we know we're not gonna prevent business.
1761.62s - 1765.14s |  We're not gonna make any bad impact.
1765.14s - 1768.18s |  And so, of course, this is not possible for any vulnerability.
1768.18s - 1770.02s |  But it's possible for many of them, and
1770.02s - 1773.30s |  you'll see how many the team was able to actually pull off.
1773.30s - 1780.38s |  And this gave us a start, because once we have autofix, we can show early success.
1780.42s - 1784.38s |  And once we have early success, then we can go to higher management and say,
1784.38s - 1788.10s |  hey, please give us more resources to actually fix this problem.
1788.10s - 1791.86s |  And so once we have buying, of course, we can take over the world.
1791.86s - 1794.50s |  Well, we can't, but we can scale this program.
1794.50s - 1795.82s |  We can get the resources,
1795.82s - 1798.94s |  we can get the backup required to actually scale this program.
1798.94s - 1803.18s |  So now you know what this talk is actually gonna give you.
1803.18s - 1807.22s |  It's gonna give you a boilerplate, an idea on how you can, or
1807.22s - 1811.46s |  actually kind of practical advice on how you can build this program to work
1811.46s - 1812.46s |  in your organization.
1814.30s - 1816.42s |  So how did we make it work?
1816.42s - 1817.58s |  Good, I get to trade places with you.
1822.47s - 1824.95s |  Well, we started by envisioning the project, of course.
1824.95s - 1826.87s |  We want to remediate all the vulnerabilities.
1826.87s - 1831.27s |  We have a limited team of two to three headcount, depending on how you count.
1831.27s - 1832.91s |  After the automation had been written,
1832.91s - 1836.35s |  which was based on some previous burndown automation.
1836.39s - 1839.67s |  We had six months, and we finished in just a little over four.
1841.31s - 1844.63s |  We had to, if we wanted to have a minimum viable product,
1844.63s - 1846.07s |  it had to be self-serve.
1846.07s - 1850.27s |  So we were constantly thinking about the citizen developer,
1850.27s - 1852.99s |  making sure that we had step-by-step instructions.
1852.99s - 1857.03s |  And then we had a screenshot for each instruction that had visual cues
1857.03s - 1860.75s |  in the screenshot itself to make sure that the developer could tie the text
1860.75s - 1865.99s |  directly to the screenshot and there'd be no ambiguity, which here's an example here.
1867.35s - 1873.57s |  So Michael was just talking about automatic remediation.
1875.33s - 1877.53s |  Do we have enough context?
1877.53s - 1881.77s |  Is there enough functionality in the commandlets and the APIs and
1881.77s - 1887.81s |  the admin connectors that will let us actually fix the misconfiguration live?
1887.81s - 1891.01s |  We usually ran this in the dark of night, at least if you're in the Americas.
1891.01s - 1893.73s |  The rest of the world, your mileage will vary.
1894.61s - 1899.25s |  So anything we couldn't auto-fix, we wanted to give a reasonable time frame
1899.25s - 1902.49s |  before we would shift, delete their risky assets.
1902.49s - 1904.73s |  So we settled on 30 days to fix.
1904.73s - 1909.37s |  So when you receive an email from us, either burning down pre-existing risk or
1909.37s - 1913.25s |  a net new risk, the 30-day clock is ticking when that email is sent.
1915.01s - 1918.69s |  So this was our get to green, and we decided anything created before January 1st,
1918.69s - 1921.93s |  we would call Brownfield or pre-existing.
1922.61s - 1927.69s |  Anything created after January 1st would be Greenfield or net new.
1927.69s - 1930.69s |  But that also meant, because we were focusing on the pre-existing,
1930.69s - 1934.69s |  we weren't necessarily auto-fixing net new as it came in.
1936.81s - 1939.05s |  So this is sort of the process,
1939.05s - 1942.89s |  a simplified version of the process of the application we had.
1942.89s - 1945.73s |  We receive a violation from Xanity, or
1945.73s - 1948.53s |  we decide we're gonna burn something down that's pre-existing risk.
1948.53s - 1950.69s |  First thing we do is send out that email.
1950.69s - 1952.93s |  I'm just gonna stay in the top swim lane for the moment.
1952.93s - 1957.73s |  If 14 days go by, no response, it's still not fixed, we send out another email.
1957.73s - 1961.41s |  Nine days goes by, no response, we send out a final email.
1961.41s - 1963.41s |  We wait seven days, is it fixed?
1963.41s - 1964.49s |  Great, close the violation.
1964.49s - 1966.93s |  If it's not fixed, shift, delete, close the violation.
1968.17s - 1971.65s |  Sometimes, though, there are gonna be false positives.
1971.65s - 1973.57s |  Generally, guests are things that we frown on.
1973.57s - 1978.05s |  But there are legitimate cases where guests need to have access to your asset,
1978.05s - 1981.65s |  to your application, to your co-pilot.
1981.65s - 1986.53s |  So there's gonna be times when, yes, there's a legitimate business case.
1986.53s - 1989.49s |  Great, tell us what it is, close the violation.
1989.49s - 1991.53s |  Sometimes the dev needs support.
1991.53s - 1994.81s |  We would answer questions and fine-tune our step-by-step instructions.
1996.65s - 1999.65s |  And then they'd fix it and close the violation.
1999.65s - 2003.33s |  Now something, this is gonna be one of those your mileage may vary,
2003.33s - 2007.17s |  is that based on your environment strategy, or
2007.17s - 2012.05s |  equivalent in other platforms, you may wanna migrate this user's assets into,
2012.05s - 2017.05s |  say, like a developer environment, just to provide better isolation and
2017.05s - 2021.89s |  atomic controls that will make it less likely someone could see this and
2021.89s - 2022.77s |  take advantage of it.
2024.17s - 2027.93s |  Our governance team for Microsoft, they're actually taking care of that.
2027.93s - 2031.45s |  So we stayed in our swim lane and didn't do anything with that.
2031.45s - 2036.17s |  But that's something you might wanna think about based on your needs.
2036.17s - 2040.13s |  And there's a great discussion on environment strategy up in
2040.13s - 2041.25s |  the documentation.
2041.25s - 2042.81s |  Our governance team helped them write it,
2042.81s - 2045.93s |  at least a little tiny bit that survived in there.
2045.93s - 2050.09s |  You may also want to file an exception or track exemption.
2050.09s - 2054.73s |  If someone does say this is a false positive, that's up to you.
2054.73s - 2059.65s |  We are going minimum viable product and skipping that part entirely.
2060.97s - 2064.85s |  So here's a view of the SharePoint list where we keep the instructions.
2064.85s - 2067.29s |  Here's a view where we edit the SharePoint list.
2069.33s - 2072.09s |  Here's an example of the first email that goes out.
2074.49s - 2077.69s |  And we worked very hard with a professional editor to make sure this
2077.69s - 2081.45s |  text was very crisp, very clean, and had no ambiguity.
2081.45s - 2084.09s |  Sometimes when I get these messages, sometimes they're well written,
2084.09s - 2086.89s |  sometimes you gotta kinda read between the lines to figure out what you have to do.
2088.49s - 2092.97s |  Final notice, we have that big red icon to get your attention, hopefully.
2093.97s - 2096.33s |  And here's the actual violations dashboard.
2096.33s - 2098.97s |  This is what both mails are sending you to.
2098.97s - 2102.73s |  So I blacked some things out so we don't advertise the names of our connections
2102.73s - 2104.65s |  and our users across the Internet.
2104.65s - 2108.09s |  But there's three violations here.
2108.09s - 2111.45s |  The top violation is one of those that could be a false positive.
2111.45s - 2114.65s |  It's not necessarily a bad thing that you're connecting to an on-premise
2114.65s - 2118.17s |  data source instead of the cloud.
2119.73s - 2122.85s |  But generally we want things in the cloud.
2123.73s - 2127.57s |  If you have a choice between the two, you should choose the cloud, generally.
2129.21s - 2132.97s |  But your mileage may vary, and so we leave room for that.
2132.97s - 2135.89s |  The bottom two violations are loosely coupled.
2135.89s - 2137.57s |  I'm gonna focus on the bottom one.
2137.57s - 2140.17s |  The connection is using shareable authentication method.
2140.17s - 2142.93s |  The middle one says, okay, yeah, it should be readable.
2142.93s - 2145.61s |  It says connection is accessible by the entire tenant.
2145.61s - 2148.69s |  Sometimes these two can be coupled, sometimes not.
2148.69s - 2151.33s |  Just depends on how the asset was built.
2151.85s - 2155.57s |  Connection is using a shareable authentication method means you're not
2155.57s - 2157.25s |  using Enter ID.
2157.25s - 2160.73s |  So I think we have like 1,300, 1,400 total connectors.
2160.73s - 2165.73s |  About 120 of those are to Microsoft first party products and services.
2165.73s - 2170.89s |  And about slightly less than 50 of those have multiple forms of authentication.
2170.89s - 2174.01s |  And you really wanna use Enter ID at all possible.
2174.01s - 2177.41s |  Because if you use like a user ID password or just a simple key,
2177.89s - 2183.17s |  you can get these weird side effects that are endemic to the actual data source.
2185.13s - 2188.41s |  So here we've clicked on the bottom violation.
2188.41s - 2191.01s |  You get three tabs, we're gonna talk about two.
2191.01s - 2195.57s |  The violations description tab, what is this?
2195.57s - 2196.61s |  What caused it?
2196.61s - 2197.77s |  Give you an explanation.
2199.05s - 2201.73s |  The steps to fix is our SharePoint list again.
2203.85s - 2206.85s |  And one of the keys to being able to have our automation work for
2206.85s - 2209.85s |  both Greenfield and Brownfield were playbooks.
2209.85s - 2212.97s |  When condition X, Y, and Z is discovered,
2212.97s - 2216.29s |  then take actions A, B, and C to remediate it.
2216.29s - 2219.21s |  And so this would get triggered whether it was a net new violation,
2219.21s - 2222.61s |  stay green, or we were doing a campaign, get to green.
2224.65s - 2227.33s |  So results were, we proved we can scale up.
2228.49s - 2231.09s |  We proved we can get to green in two of our environments,
2231.09s - 2232.45s |  two of our largest environments.
2233.89s - 2235.65s |  And we proved that we can use stay green and
2235.65s - 2238.29s |  get to green with the same automation, same process, the same tooling.
2239.97s - 2244.57s |  Here you can see our progress over the first six months of this year.
2244.57s - 2251.41s |  If we look at the May 1st column, that top green slice of open violations,
2251.41s - 2255.41s |  that's a mix of 30 data fix and probably the last of the net new violations
2255.41s - 2257.73s |  that have come in after January 1st.
2257.73s - 2260.45s |  So somewhere in April, we burned through the last of that risk
2261.89s - 2263.17s |  from before January 1st, and
2263.17s - 2265.89s |  then we started playing catch up with everything that had come in since.
2265.89s - 2268.53s |  By the time we got to June 1st, that little green slice is nothing but
2268.53s - 2269.61s |  30 days to fix.
2270.73s - 2274.17s |  Management or senior leadership team has always said, why isn't it 100%?
2274.17s - 2276.77s |  And the answer is because we got these 30-day clocks ticking.
2276.77s - 2284.13s |  We'll never get to 100%, but 95% with 5% open isn't bad.
2284.13s - 2286.65s |  And as we scan more and more things over time,
2286.65s - 2289.09s |  that 5% will drop down to 4%, to 3%.
2289.13s - 2294.53s |  But there can be minor monthly variations.
2294.53s - 2296.21s |  I think Don is being super modest, so
2296.21s - 2300.49s |  let me go out on a limb and just say it out as it is.
2300.49s - 2304.65s |  I think when you look at these such high numbers of applications,
2304.65s - 2306.89s |  you can imagine how many issues you can find.
2309.17s - 2312.85s |  Show me an AppSec program that can scale 100x or
2312.85s - 2318.13s |  1,000x and can fix 95% of all issues in four months.
2318.13s - 2320.49s |  This is just incredible work, so
2320.49s - 2322.77s |  I think it really deserves the recognition.
2322.77s - 2324.17s |  Thank you.
2324.17s - 2328.05s |  So part of the success we had is because I've set up three different
2328.05s - 2332.69s |  SDL programs over the years within the org that was once known as MSIT.
2332.69s - 2336.17s |  Also meant I was full of clever ideas and creeping elegance that would politely
2336.17s - 2339.13s |  get shot down and then I'd shake my head and say, yeah, no,
2339.13s - 2341.77s |  that was beyond what we have time for.
2341.77s - 2343.33s |  So what are some of our takeaways?
2344.33s - 2350.49s |  Underneath, implicit underneath this was the OWASP top ten for low code, no code.
2350.49s - 2352.97s |  This was something I was probably more concerned than other team members on
2352.97s - 2358.13s |  this project, but this was very impactful on me in terms of thinking about
2358.13s - 2360.89s |  what do we want to fix, how do we want to fix it?
2360.89s - 2365.93s |  The top ten for large language models is increasingly in scope.
2365.93s - 2371.09s |  So I think right now we have rules for about four to five of these categories.
2371.13s - 2374.97s |  They look somewhat like what we already have for low code, no code.
2374.97s - 2378.25s |  But as time goes on, I imagine things will get more and
2378.25s - 2380.81s |  more sophisticated as the AI features and
2380.81s - 2386.38s |  co-pilot and elsewhere get more and more sophisticated.
2386.38s - 2391.98s |  We prioritized what we wanted to fix, we looked at all the violations and
2391.98s - 2396.34s |  looked at the top ten and basically came up with six campaigns.
2396.34s - 2401.50s |  Guest and or access control, AI and or co-pilot issues and so on.
2401.50s - 2405.38s |  I was assuming we'd move stately from one category to the next to the next and
2405.38s - 2406.38s |  our burndowns.
2406.38s - 2408.70s |  The reality is anytime we sent out an email campaign,
2408.70s - 2412.74s |  we were probably covering two to three of those based on.
2412.74s - 2416.22s |  There's always little questions from SLT as things were coming in and say,
2416.22s - 2418.26s |  well, why don't you do this instead?
2418.26s - 2421.42s |  So we would balance our prioritization accordingly.
2421.42s - 2424.82s |  I think that's a really cool point that people usually say, okay,
2424.82s - 2429.06s |  let's do campaigns that are focused on one specific thing and
2429.06s - 2430.74s |  go one after the other.
2430.74s - 2433.38s |  And you can see the different campaigns that were important for
2433.38s - 2434.74s |  Microsoft to cover here.
2434.74s - 2439.34s |  But then, I think what we found was that we can actually do more than one.
2439.34s - 2443.14s |  So because you get the confidence that this is not creating a lot of noise,
2443.14s - 2447.34s |  problems are getting fixed, people are happy, then you can push forward fast.
2449.10s - 2451.06s |  So here's part of our dashboard.
2451.06s - 2452.46s |  So that's a piece you don't wanna forget,
2452.46s - 2457.34s |  is make sure you can report out to SLT to show what you're accomplishing.
2457.34s - 2460.30s |  We blacked out a couple sensitive things.
2460.30s - 2462.82s |  But the column over on the far right, bottom far right,
2462.82s - 2468.10s |  shows you basically how many violations that we remediated in each category.
2468.10s - 2474.23s |  And of course, the heat map there kinda gives you a sense overall as well.
2474.23s - 2479.55s |  So now we wanna finish up on something that kinda came up by accident.
2479.55s - 2483.71s |  Michael had been talking about the shared responsibility model at a high level
2483.71s - 2485.71s |  in his talks for a good year or so.
2487.43s - 2490.95s |  But by the end of that six month campaign,
2490.95s - 2493.43s |  it was clear to us that we needed to go to a deeper level.
2493.43s - 2496.23s |  So Michael, I'll have you represent your own slides.
2496.23s - 2500.27s |  So one of the things that, if we wanna take a step back and
2500.27s - 2502.63s |  figure out what's happening here,
2502.63s - 2507.63s |  we are just not thinking about the shared responsibility model.
2507.63s - 2512.23s |  So most people, when they think about citizen development,
2512.23s - 2516.91s |  business users building stuff, they are thinking about, yeah,
2516.91s - 2520.03s |  this is all gonna be secure and nothing could go wrong.
2520.03s - 2522.71s |  But of course, every piece of technology, if it's impactful,
2522.71s - 2526.27s |  if it's powerful, it can do bad stuff, right?
2526.27s - 2529.47s |  There's no free lunch.
2529.47s - 2533.11s |  And so we need to think about the shared responsibility model.
2533.11s - 2535.43s |  And we know that works in the cloud.
2535.43s - 2538.31s |  So here's the shared responsibility model from the cloud,
2538.31s - 2540.03s |  specifically for serverless.
2540.03s - 2543.27s |  So the platform itself, Azure, AWS, GCP, whatever,
2543.27s - 2546.63s |  they own making sure that the platform itself is safe.
2546.63s - 2548.51s |  And it gives you the right building blocks.
2548.51s - 2551.51s |  And each building block has safe configuration.
2551.51s - 2554.55s |  But of course, you are in charge of what you build.
2554.55s - 2557.63s |  Nobody else can own this for you.
2557.63s - 2559.23s |  Low-code, no-code is exactly the same.
2559.23s - 2563.31s |  You just don't own the code, but you do own the business logic.
2563.31s - 2564.99s |  You do own access.
2564.99s - 2566.59s |  You do own the data.
2566.59s - 2569.83s |  So it's pretty much the same thing as serverless.
2569.83s - 2572.79s |  But somehow, we forgot about it.
2572.79s - 2577.71s |  Somehow, it's not clear to us that within low-code,
2577.71s - 2580.35s |  no-code, there's also a shared responsibility model.
2580.35s - 2583.07s |  So for people that are using low-code, no-code, not
2583.07s - 2587.51s |  the platform, here are a bunch of questions to ask yourself.
2587.51s - 2589.95s |  So can you answer how many of your apps
2589.95s - 2592.47s |  are moving data outside of your corporate boundary?
2592.47s - 2594.75s |  How many users are oversharing data?
2594.75s - 2597.71s |  Or how many of them are allowing external access?
2597.71s - 2599.83s |  How many are hard-coding secrets?
2599.83s - 2602.47s |  These are questions that only the organization
2602.47s - 2607.07s |  using these platforms can answer, not the platform itself.
2607.07s - 2610.75s |  So this all goes to one thing.
2610.75s - 2614.87s |  Do we apply application security to what these businesses
2614.87s - 2616.03s |  are building or not?
2616.03s - 2618.11s |  And if we're not, well, of course,
2618.11s - 2619.99s |  we're going to get the wrong thing.
2619.99s - 2623.39s |  So we give a lot of power to business users,
2623.39s - 2626.59s |  developer-level power, and with AI especially.
2626.59s - 2629.11s |  Of course, if we're not there to help them,
2629.11s - 2631.35s |  things will go wrong.
2631.35s - 2634.35s |  So we don't have time to go into this in great depth,
2634.35s - 2639.03s |  but I started with his domains, access control, business logic,
2639.03s - 2641.15s |  data management, added governance,
2641.15s - 2643.55s |  added responsibility to the low-code, no-code platform
2643.55s - 2647.31s |  itself, and then other platforms that you can use to, say,
2647.31s - 2652.43s |  block people bulk exfiltrating their email to Gmail.
2652.43s - 2656.35s |  Expanded on his roles, and then came up
2656.35s - 2658.59s |  with what we hope was a lean and mean list
2658.59s - 2660.55s |  of actual responsibilities.
2660.55s - 2662.43s |  Before the month of November is over,
2662.43s - 2665.31s |  we'll have a detailed white paper walking through this.
2665.31s - 2666.03s |  OK, next slide.
2669.19s - 2671.31s |  Let's do it real quick, because we got 30 seconds.
2671.31s - 2677.47s |  So at the end of the day, we got de facto SDL enforcement.
2677.47s - 2680.79s |  We didn't get things like threat models and other process
2680.79s - 2681.95s |  like the SDL bug bar.
2681.95s - 2683.87s |  But in terms of the technical requirements
2683.87s - 2686.31s |  and in terms of things that there's tooling for the SDL
2686.31s - 2689.39s |  to validate and ensure compliance,
2689.39s - 2692.39s |  we got the equivalent with the process that we were using.
2692.39s - 2692.91s |  Next slide.
2695.67s - 2696.55s |  Next slide.
2696.55s - 2700.49s |  We've got to get to the last two slides.
2700.49s - 2705.89s |  So things that we recommend.
2705.89s - 2709.81s |  If you don't know the SDL, please check out the SDL.
2709.81s - 2712.17s |  We're due for a refresh of the OWASP top 10
2712.17s - 2714.21s |  for low-code, no-code in 2025.
2714.21s - 2717.85s |  So we both invite all of you to come join us.
2717.85s - 2720.13s |  It's going to be fun.
2720.13s - 2722.61s |  Again, the low-code, no-code shared responsibility white
2722.61s - 2724.13s |  paper is coming shortly.
2724.13s - 2726.13s |  And then we'll have a full write-up of this talk
2726.13s - 2727.13s |  available there.
2727.13s - 2729.69s |  And all of the links will be available in this link.
2729.69s - 2733.25s |  So if you want a cloud picture, this is the one.
2733.25s - 2736.25s |  So let's just, like, to wrap things up,
2736.25s - 2739.13s |  this low-code, no-code and Gen AI,
2739.13s - 2741.33s |  it's empowering your business today
2741.33s - 2743.01s |  in your organization today.
2743.01s - 2746.45s |  So it's really important for us to figure out
2746.45s - 2748.45s |  that this thing is really powerful,
2748.45s - 2752.45s |  but there's a shared responsibility model,
2752.45s - 2754.53s |  and we need to own our part.
2754.53s - 2756.25s |  The second thing is that I think this
2756.25s - 2760.05s |  has been an incredible example of how you can actually
2760.05s - 2762.65s |  build a program that can scale to this level
2762.65s - 2765.41s |  and get to really unprecedented results.
2765.41s - 2766.93s |  So I think that's really powerful.
2766.93s - 2769.53s |  And so the end result here is that you can have both.
2769.53s - 2773.13s |  You can empower your business and also stay secure.
2773.13s - 2775.89s |  And so with that, thank you.
2775.89s - 2776.69s |  Thank you very much.
2776.69s - 2778.25s |  Thank you.