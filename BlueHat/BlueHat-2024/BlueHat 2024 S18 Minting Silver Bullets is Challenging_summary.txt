**BlueHat 2024: Session Overview**
- **Title**: Minting Silver Bullets is Challenging
- **Presenter**: Josh Brown-White, Microsoft
- **Focus**: Challenges of using AI for automatic code correction to fix security vulnerabilities

**Current Challenges with AI in Code Correction**
- **AI as a Silver Bullet**: AI tools like GitHub Copilot are being explored as solutions to fix vulnerabilities.
- **Complexity**: Automatic code modification is not as straightforward as generating new code with AI.
- **Poor Outcomes**: Many AI-generated fixes either fail to correct issues or cause further problems.

**AI and Static Analysis**
- **Objective**: Use large language models to address static analysis findings.
- **Static Analysis Findings**: These are significant sources of security findings linked to source code.
- **Perpetual Problem**: Keeping code at the highest level of security understanding is an ongoing challenge.

**Case Study of AI Code Correction**
- **Example**: Transition from using a binary formatter to a JSON serializer.
- **Issues**: Incomplete edits that overlook error checks and cause type mismatch exceptions.

**Study Results on AI Fixes**
- **Success Rate**: Approximately 30% of AI fixes correct issues effectively.
- **Failure Rate**: 70% of fixes either do nothing, worsen the problem, or break the code.
- **Challenge**: Differentiating between creating new code and modifying existing code.

**Strategies for Effective Code Correction**
- **Detection Precision**: Static analysis needs more precision and discipline in application.
- **Integration into IDEs**: Moving SAST results into the IDE for better context and interaction.
- **Traditional Solutions**: Use regular expressions for trivial problems instead of AI.

**Complexity in Code Correction**
- **Migration Strategies**: Real work involves designing strategies for code migration.
- **Memory Corruption**: Requires a comprehensive approach to fix, beyond simple code changes.

**Improving AI Fixes**
- **Effective Prompting**: Crafting precise prompts for AI to maximize useful output.
- **Understanding Vulnerabilities**: Recognizing that vulnerabilities are less localized and require more context.

**Vulnerability Class Variance**
- **Impact on Fixes**: Variability in languages and vulnerability classes affects fix success.
- **Validation**: Diffing abstract syntax trees or rerunning analysis to validate fixes.

**Semantic Impact of Code Changes**
- **Code Semantics**: Changes can alter code semantics, necessitating careful review.
- **Intersectional Code**: Code with multiple dependencies poses riskier modifications.

**Thesis and Future Directions**
- **Combining Tools**: Use generative AI as one of many tools, not the sole solution.
- **Collaboration**: Integrating AI with existing tools for better results and improved security practices.
- **Call to Action**: Shift focus from seeking a single solution to developing a robust toolset.