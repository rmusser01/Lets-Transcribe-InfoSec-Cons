{
  "webpage_url": "https://www.youtube.com/watch?v=EQh6apPSRP0",
  "title": "BlueHat 2024: S08: Outlook Unleashing RCE Chaos CVE-2024-30103 & CVE-2024-38021 & CVE-2024-38173",
  "description": "BlueHat 2024: Session 08: Outlook Unleashing RCE Chaos CVE-2024-30103 & CVE-2024-38021 & CVE-2024-38173 Presented by Michael Gorelik from Morphisec\n\nAbstract: Have you ever received an empty email and immediately thought it might be a reconnaissance attack? What if opening such an email in your Outlook client could trigger remote code execution through an invisible form? Yes, all Outlook message objects are based on MAPI Forms, and CVE-2024-21378 has flung open the gates to Outlook RCE chaos. \n \nIn our session, we'll dive into how this seemingly innocuous vulnerability can lead to mayhem. This vulnerability paved the way for us to discover a series of new remote code execution vulnerabilities in Outlook, including CVE-2024-30103, CVE-2024-38021 and CVE-2024-38173. But we're not stopping there.  \n\nAdditionally, we'll uncover other vulnerabilities that can cause NTLM leaks from your domain-joined devices. \n \nSo, how did we get here? Join us as we construct an evolution timeline of this attack surface. From the origins of these exploits to their current incarnations, we'll cover it all. And because we believe in building a safer digital world, we'll conclude with specific, actionable recommendations on how to minimize these threats.",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 2345,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241108"
}

0.00s - 2.84s | This text was transcribed using whisper model: large-v2

 Hey, good morning.
2.84s - 4.48s |  It's that time again, Patch Tuesday.
7.60s - 11.60s |  How many of you are kind of anxious about that day?
11.60s - 15.24s |  I know probably not a lot of CISOs here in the room,
15.24s - 18.16s |  but a lot of my clients and a lot of companies
18.16s - 20.72s |  around the world are kind of waiting anxiously
20.72s - 24.52s |  to that day to discover dozens and hundreds
24.52s - 27.60s |  of new important critical vulnerabilities.
27.60s - 31.80s |  And kind of the expectation is that those security updates
31.80s - 35.64s |  that are introduced to the public during Patch Tuesday,
35.64s - 39.00s |  and it's the same for other vendors as well,
39.00s - 42.84s |  are a complete fix, kind of a Fort Knox security update
42.84s - 47.16s |  to recently discovered vulnerabilities.
47.16s - 50.28s |  Recent frequency, this is what you get.
50.28s - 53.64s |  Now, it's not the vendor fault, and there
53.64s - 56.68s |  was a great keynote speaking.
56.68s - 60.88s |  There's a lot of urgency, a lot of discovered reporting,
60.88s - 64.24s |  and a very short disclosure policy.
64.24s - 65.88s |  So those vulnerabilities definitely
65.88s - 68.04s |  need to be somehow patched.
68.04s - 70.88s |  And many times, those frequently discovered vulnerabilities
70.88s - 74.08s |  take a while, a couple of security update cycles,
74.08s - 78.72s |  until all the possible control flows will be patched.
78.72s - 82.20s |  The point of this presentation is
82.20s - 84.20s |  how we are finding new vulnerabilities
84.20s - 87.64s |  by observing the different security updates that
87.64s - 91.12s |  were introduced to the world.
91.12s - 96.48s |  So me, wearing both hats, both as a leader of a company
96.48s - 100.48s |  and vendor, kind of worry about the updates.
100.48s - 102.76s |  But I also, as a vulnerability researcher,
102.76s - 105.48s |  I'm extremely excited about that day,
105.48s - 109.40s |  reviewing those security updates to come.
109.40s - 112.16s |  So first about myself, my name is Michael Grelic.
112.16s - 114.24s |  I'm the chief technology officer and founder
114.24s - 118.36s |  of Morphisec, a security endpoint security company.
118.36s - 121.96s |  I had the privilege to present in a number of conferences.
121.96s - 124.64s |  This presentation is actually an extension
124.64s - 127.92s |  of my DevCon presentation with a couple of more vulnerabilities
127.92s - 129.96s |  and more insights.
129.96s - 133.00s |  I had the opportunity to discover one of the largest
133.00s - 135.56s |  supply chain attacks, the SICK linear,
135.56s - 138.16s |  and to report it to Avast at some time,
138.16s - 142.48s |  and had more than 20 years of security experience
142.48s - 144.84s |  catching those bad guys and helping the authorities
144.84s - 147.88s |  with their efforts.
147.88s - 151.08s |  Though not together with me, but Arno Lasipov
151.08s - 154.28s |  is a great contributor to this presentation.
154.28s - 156.80s |  We presented together at the DevCon.
156.80s - 158.44s |  So it's kudos to him.
158.44s - 161.80s |  I had to mention him here as well.
161.80s - 164.24s |  We have a lot to cover, quite a significant amount
164.24s - 167.80s |  of vulnerabilities, five remote code execution vulnerabilities
167.84s - 169.72s |  in a very short time.
169.72s - 173.40s |  We will focus on two categories of vulnerabilities.
173.40s - 176.28s |  The first category will require authentication,
176.28s - 178.12s |  prior authentication.
178.12s - 181.32s |  We are talking here about form injection vulnerabilities.
181.32s - 184.12s |  So assuming I have an access to your inbox,
184.12s - 188.76s |  my goal is to run malicious code on your environment,
188.76s - 190.64s |  basically inject a malicious form.
190.64s - 192.28s |  So we'll talk about that.
192.28s - 194.40s |  There will be the first discovery remote code
194.40s - 197.12s |  execution by the NetSpy group this year,
197.12s - 199.96s |  and then as part of our review of the security updates,
199.96s - 203.80s |  we discovered every month additional vulnerability
203.80s - 206.04s |  that will be described here.
206.04s - 207.72s |  The second category of vulnerabilities
207.72s - 210.60s |  will be monocure type of vulnerabilities
210.60s - 213.08s |  that eventually lead to remote code execution,
213.08s - 216.48s |  was discovered by Haifei Li from Checkpoint.
216.48s - 219.28s |  And then as part of our review of security updates,
219.28s - 223.84s |  we discovered additional remote code executions.
223.84s - 226.16s |  So let's start with the first category,
226.20s - 227.72s |  form injection.
227.72s - 229.76s |  So everything, more or less,
229.76s - 232.80s |  all type of messages in Outlook are forms.
232.80s - 234.72s |  Now, many people kind of consider forms
234.72s - 239.20s |  those kind of grayish input boxes and some buttons,
239.20s - 241.12s |  but it's much more significant than that.
241.12s - 244.08s |  It has functionality behind it.
244.08s - 246.64s |  When you get the reminder, someone need to do the beep,
246.64s - 249.68s |  and there are more complex forms,
249.68s - 253.16s |  such as, for example, recall messages that are being sent
253.16s - 257.16s |  and need to remove the emails from your boss email
257.16s - 259.88s |  just before he reads that email.
260.88s - 264.00s |  Our goal is obviously to create such a malicious form
264.00s - 267.72s |  and being able to inject it into the victim environment.
267.72s - 273.63s |  And I remind you, authentication is required here.
273.63s - 277.51s |  Okay, so first, what is outside of the scope?
278.47s - 280.19s |  I have to mention ETS Stevens
280.19s - 282.55s |  done a great presentation about forms,
282.55s - 286.35s |  Visual Basic within forms and rules injection.
286.35s - 287.67s |  This is outside of the scope,
287.67s - 291.31s |  but you are welcome to check out a lot of YouTube links.
291.31s - 293.15s |  And he was one of the first ones
293.15s - 296.31s |  to talk about form injections and created the ruler,
296.31s - 298.59s |  which is really a great tool
298.59s - 301.83s |  to help us demonstrate POCs on forms.
301.83s - 304.87s |  So we are going to create custom forms.
304.87s - 307.31s |  And as I already mentioned,
307.31s - 309.55s |  many of the messages are based on forms,
309.55s - 311.19s |  whether those are calendar invites,
311.19s - 313.31s |  just email messages, appointments,
313.31s - 316.35s |  anything else that you would get through Outlook.
317.59s - 320.23s |  So how do we create a custom form?
320.23s - 323.31s |  So there are two main ways to create a custom forms.
323.31s - 326.15s |  Our goal, I remind you to create a malicious form.
326.15s - 327.71s |  One way to create custom form,
327.71s - 330.47s |  just use this advanced ribbon edit
330.47s - 332.35s |  and you have a developer tab.
332.35s - 334.91s |  And then you can basically extend
334.91s - 336.91s |  the built-in Microsoft Forms,
336.91s - 340.23s |  whether it's a calendar invite or a message,
340.23s - 344.59s |  add some buttons, add some nice sound, you can do that.
344.59s - 347.79s |  And as a result, you will have a new type of form,
347.79s - 350.15s |  which you can publish to your folder.
350.15s - 353.95s |  We are more interested in programmatic way to create forms.
353.95s - 358.35s |  And this is using basically configuration file called CFG.
358.35s - 360.79s |  The same file has all the properties
360.79s - 364.11s |  that you will expect from a form and some more.
364.11s - 368.03s |  This is taken from a Microsoft documentation.
368.03s - 372.23s |  In this case, what is interesting here
372.23s - 376.63s |  is the registry field that also points to a form server,
376.63s - 381.11s |  essentially a com object that can execute and render form,
381.11s - 384.07s |  provide more functionality, and we'll talk about that.
384.07s - 385.19s |  It would be great, obviously,
385.19s - 390.75s |  to create something like that on the victim machine.
390.75s - 393.63s |  I'll not get into, because of lack of time,
393.63s - 396.71s |  into much details about the protocol,
396.71s - 398.75s |  how forms are synchronized,
398.75s - 403.19s |  but our goal is to inject malicious form and trigger it.
403.19s - 404.59s |  It has a couple of steps.
404.59s - 406.95s |  First, obviously, creating a form,
406.95s - 409.83s |  then implanting that form into the malicious victim,
409.83s - 412.23s |  and then triggering the execution of that form.
412.23s - 414.23s |  Those are different steps.
414.23s - 417.23s |  The implant of the forms is allowed
417.23s - 420.51s |  through a Microsoft protocol, synchronization protocols.
420.51s - 422.47s |  You basically can create your own form,
422.47s - 424.95s |  and Microsoft will sync it for you
424.95s - 426.79s |  into the victim environment.
426.79s - 429.11s |  A simple example is your draft emails
429.11s - 431.51s |  that you create in your inbox,
431.51s - 433.87s |  and this is propagated through the exchange
433.87s - 435.19s |  on all your Outlook clients.
435.19s - 437.79s |  You see that suddenly everywhere.
437.79s - 440.95s |  The same can be done with your forms and custom forms.
440.95s - 444.27s |  They are also synchronized, and we will use that,
444.27s - 447.07s |  basically, to implant that form into your environment.
448.31s - 451.07s |  Now, it's important to know that
451.07s - 455.07s |  if you are putting that form into special folders,
455.87s - 458.87s |  like inbox, they will be propagated,
458.87s - 463.11s |  but if you install those into your personal folders,
463.11s - 466.23s |  they will stay within the scope of your endpoint.
469.11s - 470.55s |  Couple of basic things.
470.55s - 473.43s |  There was a great discussion by James on the call.
473.43s - 475.07s |  I will not get into too much details
475.07s - 477.55s |  after this interesting discussion,
477.55s - 481.27s |  but this is an example of you creating a custom form
481.27s - 483.59s |  from a built-in Microsoft form
483.59s - 486.31s |  using interactive way.
486.31s - 489.95s |  As a result, a com object representing that form
489.95s - 492.27s |  will be generated and registered
492.27s - 495.79s |  within the class ID within your registry.
496.79s - 499.15s |  If you have a Outlook 32-bit,
499.15s - 502.19s |  it will be under WoW64 within the class ID.
502.19s - 505.15s |  If it's 64-bit, it will be directly under the class ID.
506.31s - 509.75s |  Essentially, this class ID will have the message name
509.75s - 513.51s |  of the form to be able to identify it and recognize.
514.35s - 516.75s |  It will have a couple of properties like the form stager,
516.75s - 519.43s |  which will point to the location of the form
519.43s - 521.51s |  that you just generated,
521.51s - 523.87s |  to the OLE that was just generated,
523.87s - 526.95s |  and usually you can find them within the roaming folder,
526.95s - 530.11s |  Microsoft Forms application,
530.11s - 533.51s |  kind of a TMP file that you can then reverse,
533.51s - 535.87s |  and it's extremely interesting.
535.87s - 539.19s |  Now, Microsoft synchronizes and put those forms
539.19s - 540.91s |  within that folder.
540.91s - 543.27s |  Now, this is important because we'll mention it
544.23s - 546.15s |  how this can be also manipulated.
548.07s - 550.39s |  One more example of a built-in form
550.39s - 551.95s |  that each one of you have,
551.95s - 553.99s |  if you are installed an Outlook client,
553.99s - 556.19s |  you can check out the built-in folder
556.19s - 560.95s |  for Microsoft Office number something 1033.
560.95s - 564.31s |  You can find it in your program files.
564.31s - 566.11s |  You'll see a recall form.
566.11s - 567.75s |  I'll just mention it at start.
567.75s - 571.27s |  It's a built-in form, message Outlook recall,
571.27s - 573.31s |  with its own CFG file.
574.11s - 576.15s |  This is a CFG file you guys can find.
576.15s - 578.47s |  Now, recall functionality today,
578.47s - 579.99s |  you can do that within the cloud
579.99s - 583.67s |  without executing this endpoint protocol,
583.67s - 586.95s |  but if the cloud recall is turned off,
586.95s - 590.99s |  then you are folding back to the original recall.
590.99s - 595.99s |  What happens really is that this recall.dll,
596.07s - 598.95s |  which is also located within the built-in folder
598.95s - 600.71s |  and pointed by the registry,
600.71s - 603.75s |  will be executed, basically instantiated
603.75s - 606.79s |  by the com.coget class object,
606.79s - 609.67s |  and this will essentially go over the inbox
609.67s - 611.27s |  and will start to delete the message
611.27s - 613.07s |  that you send with your recall.
613.95s - 616.15s |  It's a great example, would be nice and great
616.15s - 619.23s |  if we could create a very similar type of example,
619.23s - 621.95s |  synchronize our recall.dll to wherever we want,
621.95s - 624.87s |  to the form folder, and then execute it
624.87s - 628.03s |  by sending a special message within the email, right?
628.03s - 630.63s |  We don't need even to send the DLL itself.
631.87s - 635.31s |  To prevent that from happening
635.31s - 639.27s |  so that anyone can register any form they like,
639.27s - 643.99s |  Microsoft has an interesting Deny List functionality.
643.99s - 646.23s |  If it's not marked, if it's not turned on,
646.23s - 648.99s |  you have, by default, a Deny List,
648.99s - 653.83s |  which validates that within your form, your CFG form,
653.83s - 656.03s |  the registry property doesn't point
656.03s - 659.99s |  to this set of properties, keys.
659.99s - 661.83s |  You probably identify those keys
661.83s - 666.83s |  that can be instantiated by the com.loading operations.
668.03s - 671.13s |  In a way, you can basically hijack path value,
674.39s - 677.31s |  com.hijack, and then execute your own stuff.
677.31s - 679.67s |  We saw that in the example with the recall,
679.67s - 683.59s |  which they had inprox server 32 pointing to a DLL,
683.59s - 686.43s |  while local server points to an executable.
686.43s - 688.27s |  It depends whether you want to execute it
688.27s - 692.69s |  within the Outlook executable or outside Outlook executable.
693.83s - 698.83s |  So, one more thing is the NetSpy, obviously,
699.83s - 701.83s |  the first vulnerability.
701.83s - 703.19s |  This is not discovered by us,
703.19s - 706.75s |  but they've done a great job showing it.
706.75s - 710.07s |  One of the challenges with the Deny List matching
710.11s - 714.31s |  is that the Deny List were validating an exact matching
714.31s - 718.75s |  to an exact name of this list that I showed before.
718.75s - 722.27s |  If you have it within the registry inprox server 32,
722.27s - 724.71s |  it will be blocked and an error will be received
724.71s - 726.87s |  and the form will not be registered.
726.87s - 729.95s |  But if you add some characters, anything,
729.95s - 733.47s |  to that registry key, it will bypass the Deny List.
733.47s - 736.87s |  So, how do you create still valid flow,
736.87s - 739.31s |  adding something into that registry key
740.23s - 743.51s |  and executing while bypassing the Deny List?
743.51s - 746.03s |  So, the NetSpy group discovered
746.03s - 749.55s |  that you can use a relative path with the class ID.
749.55s - 751.35s |  You still have the same functionality
751.35s - 753.95s |  because it's still written as a class ID
753.95s - 755.29s |  within your class ID.
756.83s - 761.59s |  And the inprox server 32 will be created by reg createx,
761.59s - 765.75s |  and eventually the evil DLL will be instantiated by the com.
767.03s - 769.95s |  Now, we are kind of starting the presentation, right?
770.97s - 773.75s |  One more thing, though we'll not be talking about,
773.75s - 777.75s |  they also discovered that you can put synchronize
777.75s - 780.63s |  your form not only within the form directory,
780.63s - 782.67s |  but in other directories as well,
782.67s - 785.47s |  but it's less interesting for us for this presentation.
786.47s - 789.35s |  So, how Microsoft patched that vulnerability?
789.35s - 792.91s |  Basically, the first security patch Tuesday
792.91s - 796.15s |  introduced the fix to this vulnerability.
796.15s - 800.83s |  And the fix wasn't trying to make it,
800.83s - 804.53s |  let's say, a more interesting validation
804.53s - 806.55s |  that contains those keywords,
806.55s - 809.01s |  but to remove the relative path.
809.95s - 812.55s |  I will mention again one more thing
812.55s - 814.15s |  that I didn't mention before.
815.15s - 818.43s |  One more reason because of the urgency,
818.43s - 821.15s |  a side of the urgency for vendors
821.15s - 824.19s |  not to introduce complete fixes
824.19s - 827.11s |  is also not disrupting applications.
827.11s - 829.71s |  Many of those models are loaded
829.71s - 832.15s |  and used by other applications as well.
832.15s - 833.95s |  Neither Microsoft, not anyone else
833.95s - 836.75s |  want to kill application, disrupt applications.
836.75s - 840.03s |  And this is why security updates many times introduced
841.21s - 845.67s |  kind of sequentially in a growing manner.
845.67s - 849.95s |  So, Microsoft removed the option to load the relative path.
849.95s - 852.23s |  The documentation is still there, unfortunately,
852.23s - 854.29s |  but you cannot create a form
854.29s - 857.39s |  with a relative path for registration.
857.39s - 860.79s |  So, now we discovered our next vulnerability.
860.79s - 865.07s |  How can we still add interesting characters
865.07s - 866.67s |  to bypass that deny list,
866.67s - 869.63s |  but let the registry instantiate?
870.73s - 873.91s |  To understand that, we first need to identify
873.91s - 876.31s |  that registry manipulation functions,
876.31s - 878.79s |  the core functions like registry create X,
878.79s - 882.01s |  but also other registry manipulation functions.
882.79s - 886.13s |  You can send them a key that composed with many keys
886.13s - 889.13s |  by basically separating them with backslash.
889.13s - 894.09s |  I think the maximum is around 32 keywords at one go.
894.09s - 896.33s |  But one more important property
896.33s - 898.81s |  is that if you provided a backslash at the end,
898.81s - 902.49s |  it will be disregarded for consistency, obviously.
902.49s - 905.91s |  And the registry creation will work
905.91s - 907.45s |  just without the backslash.
907.45s - 910.25s |  So, you probably guessed correctly.
910.25s - 912.53s |  We added a backslash, right?
912.53s - 914.57s |  So, the backslash worked.
914.57s - 916.57s |  The exact matching failed.
916.57s - 920.25s |  The in-proc server 32 wasn't found,
920.25s - 923.73s |  but the registry create X created that key successfully,
923.73s - 927.01s |  and we had a form server execution
927.01s - 929.97s |  within the context of the Outlook process.
929.97s - 933.25s |  So, every time you are send a special message
933.25s - 936.01s |  with our message class that we want,
936.01s - 937.81s |  this will be automatically executed.
938.81s - 943.81s |  Okay, so at this stage, what was the fix?
944.13s - 946.01s |  What was the next security update
946.01s - 947.41s |  in the next patch Tuesday?
948.37s - 951.57s |  So, the next security update was still not fixing
951.57s - 954.69s |  necessarily the exact deny matching.
954.69s - 957.65s |  It was introducing, before we are doing the matching,
957.65s - 961.17s |  let's remove all the backslashes, the trailing backslashes.
961.17s - 966.17s |  And this way, hopefully we'll be okay with an exact matching.
966.21s - 967.33s |  And this worked.
967.33s - 971.85s |  This worked for those new com forms that are executed.
972.73s - 976.05s |  As I mentioned before, one of the things we do,
976.05s - 978.21s |  we are reviewing the security updates
978.21s - 980.29s |  for additional interesting stuff
980.29s - 982.61s |  that was introduced a part of them.
982.61s - 983.93s |  During that security update,
983.93s - 986.73s |  when they fixed the previous vulnerability,
986.73s - 991.73s |  they enhanced the deny list with additional names.
992.57s - 997.01s |  Now, for some of you that may be reminding something,
997.01s - 1000.69s |  com hijacks, you can check out different presentations,
1000.69s - 1002.91s |  especially Casey Smith and Matt Nelson,
1002.91s - 1006.69s |  but also other important people were talking
1006.69s - 1010.61s |  about how to hijack com, not only by key value,
1010.61s - 1015.37s |  but also existing coms by introducing special keywords.
1015.37s - 1017.13s |  In our case, some of those keywords,
1017.13s - 1019.33s |  for example, treat as allows delegation
1019.33s - 1021.47s |  to other com objects.
1022.11s - 1024.23s |  It kind of raised the question,
1024.23s - 1029.19s |  are there additional keywords that are not blacklisted
1029.19s - 1031.31s |  in this deny list that we can use?
1032.35s - 1037.35s |  So this created the third remote code execution.
1037.75s - 1040.93s |  We are still talking about the same vulnerability.
1042.81s - 1045.19s |  We are to hijack an existing com.
1045.19s - 1047.67s |  We are not creating right now a new form,
1047.67s - 1049.71s |  we are hijacking an existing form.
1049.83s - 1053.67s |  Because you can create any class ID within your CFG file,
1053.67s - 1058.31s |  you can also point to an existing class com objects.
1058.31s - 1060.75s |  We cherry-picked this com object
1060.75s - 1064.31s |  that are responsible for the manipulations of this PC.
1064.31s - 1066.51s |  This PC, basically, you right-click,
1066.51s - 1069.87s |  you check out the different files.
1069.87s - 1072.31s |  There are other com objects as well,
1072.31s - 1074.51s |  but it has an interesting property
1074.51s - 1079.47s |  that if you add this known key property,
1080.11s - 1081.51s |  shell non-command,
1081.51s - 1085.19s |  then it will be automatically executed
1085.19s - 1089.19s |  by the get class object with the right context.
1089.19s - 1090.79s |  And instead of calculator,
1090.79s - 1092.75s |  you obviously can do PowerShell and other stuff
1092.75s - 1094.97s |  and make it more malicious.
1096.39s - 1101.39s |  So the point is that we don't want existing class objects
1103.47s - 1107.31s |  to be overridden or keys added to them.
1107.31s - 1109.95s |  So now the fix was finally complete,
1109.95s - 1112.35s |  and I have to comment,
1112.35s - 1113.99s |  Microsoft done great work.
1113.99s - 1115.91s |  They patched it very quickly.
1115.91s - 1118.27s |  We reported the vulnerabilities
1118.27s - 1121.41s |  and they were patched within two months, I think,
1121.41s - 1123.59s |  which is very quick.
1124.87s - 1127.55s |  And this time, it was more complete.
1127.55s - 1130.81s |  So first fix was to check out
1130.81s - 1134.79s |  that when you register a new form,
1134.79s - 1138.83s |  it validates this kind of class object already exists.
1138.83s - 1142.43s |  Now, if it exists and doesn't have the built-in properties
1142.43s - 1144.27s |  that you would expect from a form,
1144.27s - 1146.11s |  which I mentioned at start,
1146.11s - 1149.33s |  message class form stager,
1149.33s - 1152.55s |  then you will have an error and this will not be created.
1152.55s - 1154.31s |  Obviously, if you have already a form
1154.31s - 1157.47s |  with those properties, it will not work.
1157.47s - 1161.67s |  Now, if you create a new form,
1161.67s - 1163.85s |  this validation is less relevant.
1164.99s - 1168.91s |  Additional fix was introducing the contain
1168.91s - 1172.47s |  in the preface shell as we use it as a keyword
1172.47s - 1175.49s |  to execute our calculator or any other comment.
1175.49s - 1178.31s |  This time, not as part of a deny list,
1178.31s - 1180.83s |  but immediately after as a contain,
1180.83s - 1183.71s |  which is correct because it can come
1183.71s - 1186.15s |  with additional comments, not only shell none,
1186.15s - 1190.87s |  it can come with shell open and other options as well.
1190.87s - 1193.51s |  So this is a good fix.
1193.51s - 1194.63s |  It's a good reading.
1194.63s - 1198.63s |  We finally finalized our work there
1198.63s - 1203.66s |  and finished with a good enough fix.
1203.66s - 1206.92s |  You can do a lot of things with forms.
1207.90s - 1212.10s |  Now, I just mentioned an injection of a malicious form
1212.10s - 1213.66s |  into a victim environment,
1213.66s - 1216.98s |  but it's really dependent on how much privileges you have.
1216.98s - 1219.34s |  If you are an exchange administrator,
1219.34s - 1220.46s |  you can do much more.
1220.46s - 1223.58s |  You can inject into any of the employees forms.
1223.58s - 1224.98s |  You can do some persistency.
1224.98s - 1229.98s |  Essentially, Microsoft synchronizes that executables for you
1229.98s - 1231.06s |  into the right forms,
1231.06s - 1237.95s |  and then you can leverage them for other purposes as well.
1237.95s - 1240.47s |  Why I'm talking about NTLM,
1240.47s - 1242.35s |  this is not the topic of the discussion.
1242.35s - 1245.19s |  I did mention authentication is required.
1245.19s - 1248.43s |  How challenging is to get authentication today
1248.43s - 1250.55s |  and basically chain that CVs
1250.55s - 1253.87s |  into a full remote code execution without authentication.
1253.87s - 1257.51s |  It's not very, let's say, it's not very complicated.
1257.51s - 1260.51s |  There were a great discussion by Steve Syphus
1260.51s - 1265.43s |  from Blue Hat 2023 about deprecating NTLM.
1265.43s - 1266.63s |  It's not easy.
1266.63s - 1269.87s |  It'll probably not be easy for a couple of years forward,
1269.87s - 1271.87s |  even with Kerberos and everything.
1271.87s - 1273.79s |  We still have a fallback mechanisms.
1274.95s - 1279.23s |  Microsoft introduced a lot of hardening options
1279.23s - 1281.11s |  to definitely utilize them,
1281.11s - 1284.31s |  but I'm working with companies all across the globe.
1284.31s - 1287.55s |  There are different applications that still break,
1287.55s - 1289.51s |  and this will take time.
1289.51s - 1290.35s |  What is NTLM?
1290.35s - 1293.59s |  Essentially, whether you are sending a link
1293.59s - 1297.51s |  or whether it's a social engineering or an exploitation,
1297.51s - 1300.27s |  if the link is clicked or executed,
1300.27s - 1303.55s |  and let's say you have a remote server, a rock server,
1303.55s - 1307.43s |  it's a challenge response authentication one way,
1307.43s - 1310.35s |  so I get your NTLM, which says who you are,
1310.51s - 1312.71s |  and basically I can brute force the NTLM
1312.71s - 1314.87s |  if your passwords are complex enough.
1314.87s - 1316.79s |  I can relay the NTLM.
1316.79s - 1321.79s |  I can use other attacks to utilize NTLM to get my way,
1322.91s - 1327.91s |  and 2023 and 2024 definitely have been the years
1328.31s - 1331.95s |  of NTLM exploitations.
1331.95s - 1334.27s |  Only we reported around 10 or 12,
1334.27s - 1337.43s |  but those were reduced to medium severity
1337.43s - 1341.43s |  due to the urgency, due to the amount of reports probably,
1341.43s - 1343.47s |  but this is a significant problem,
1343.47s - 1346.03s |  so authentication is not very challenging.
1346.03s - 1347.67s |  You do have ways around it.
1347.67s - 1351.71s |  You can harden your environment, block SMB out.
1351.71s - 1355.31s |  You can enforce Kerberos and other stuff,
1355.31s - 1358.35s |  but still you are in problem.
1360.27s - 1361.51s |  Okay, so let's talk about
1361.51s - 1363.71s |  the second category of vulnerabilities.
1363.71s - 1366.19s |  The second category of vulnerabilities is about monikers.
1366.19s - 1368.99s |  How can we do remote code execution?
1368.99s - 1372.07s |  So Haifei Li from Checkpoint introduced us
1372.07s - 1373.95s |  to the first remote code execution,
1373.95s - 1377.71s |  though monikers have been there a while,
1377.71s - 1381.15s |  and there are plenty of CVs around monikers,
1381.15s - 1385.47s |  whether it's NTLM leaks or others,
1385.47s - 1388.55s |  so first we need to understand what are monikers.
1388.55s - 1390.83s |  Very kind of high-level.
1390.83s - 1393.87s |  Monikers are there as a baseline
1393.87s - 1395.91s |  for the COMO and LEAP subsystem
1395.91s - 1398.51s |  to connect and identify objects,
1398.51s - 1400.75s |  basically provide us the interface access
1400.75s - 1402.07s |  to different objects.
1402.07s - 1405.39s |  If you want, especially it's used in documents,
1405.39s - 1407.31s |  embedding, but in anywhere else,
1407.31s - 1410.27s |  a great example is me sending a chart
1410.27s - 1413.91s |  or an Excel worksheet through the email.
1413.91s - 1416.43s |  Behind that, there's an operation
1416.43s - 1418.63s |  which needs to identify that this is a link
1418.63s - 1420.87s |  to an Excel file moniker
1420.87s - 1422.87s |  and needs to find the right object.
1422.87s - 1426.03s |  If it's a URL, then it will open the browser.
1426.03s - 1428.99s |  If it's an Excel, then it will open the Excel
1428.99s - 1430.79s |  and get you the right results,
1430.79s - 1433.03s |  and everything below is the baseline
1433.03s - 1435.15s |  are those monikers that allows you
1435.15s - 1439.55s |  to manipulate and link those objects.
1439.55s - 1443.63s |  There are different types of built-in OLE monikers.
1443.63s - 1446.35s |  You can define your own, you can create your own,
1446.35s - 1449.35s |  as long as you implement the IMoniker interface.
1449.35s - 1451.31s |  Probably the most popular ones
1451.31s - 1453.91s |  are URL monikers and file monikers,
1453.91s - 1454.95s |  as the name suggests.
1454.95s - 1459.15s |  When you get URLs, HTTP colon, HTTPS colon,
1460.35s - 1463.07s |  it's translated eventually,
1463.07s - 1465.19s |  unless there are specific vulnerability,
1465.19s - 1468.75s |  which we will discuss, to a URL moniker.
1468.75s - 1471.95s |  If you have like FTP colon
1471.95s - 1475.27s |  or just absolute path of a file system
1475.27s - 1477.71s |  or relative path to a network file system,
1477.71s - 1480.59s |  it will be parsed and translated to a file moniker.
1481.59s - 1485.35s |  And this is more or less how it works.
1485.35s - 1487.35s |  A great simple example,
1487.35s - 1491.11s |  you're writing your own visual basic macro code
1491.11s - 1492.95s |  and use the get object function,
1492.95s - 1496.55s |  which is translated to co-get object internal,
1496.55s - 1498.19s |  Windows 32 internal,
1498.19s - 1500.95s |  and you put a file colon path.
1500.95s - 1504.99s |  In this way, a file moniker will be generated,
1504.99s - 1506.35s |  an interface will be created,
1506.35s - 1508.51s |  and you will be able to access your file
1508.51s - 1511.51s |  within the visual basic execution.
1512.95s - 1515.39s |  When implementing a moniker,
1515.39s - 1517.87s |  you do need to implement some of its methods,
1517.87s - 1519.11s |  such as bind to object,
1519.11s - 1521.83s |  which essentially is the method
1521.83s - 1529.49s |  that allows you to bind the string to the right object.
1529.71s - 1533.99s |  So what happens when you are sending,
1533.99s - 1538.57s |  let's say, a remote file as a hyperlink to your email?
1539.41s - 1541.37s |  You would usually expect
1541.37s - 1544.13s |  that there will be some kind of notification.
1544.13s - 1547.33s |  It might be harmful content, do not access it.
1547.33s - 1552.33s |  Sometimes you get the message such as something went wrong,
1552.45s - 1555.77s |  but what is good is that it is not accessed.
1555.77s - 1557.09s |  If it would be accessed,
1557.09s - 1560.33s |  then again, we are getting back to our NTLM leaks,
1560.33s - 1561.33s |  and it's not good.
1561.33s - 1562.45s |  And if it's being parsed,
1562.45s - 1565.29s |  then we can eventually get to remote code execution,
1565.29s - 1567.09s |  which we don't want to.
1567.09s - 1569.37s |  So if you send something like that today,
1569.37s - 1571.77s |  at least if you have all your security update,
1571.77s - 1575.09s |  you are good.
1575.09s - 1577.37s |  So what Hafele found out,
1577.37s - 1581.33s |  at least in his first vulnerability on monikers,
1581.33s - 1584.53s |  he found out if you add an exclamation mark
1584.53s - 1586.57s |  to the end of the link,
1586.57s - 1589.29s |  and then something after that,
1589.29s - 1592.29s |  it will be parsed not as an exact file moniker,
1592.29s - 1595.41s |  but as a combination, a composition of monikers,
1595.89s - 1599.85s |  basically a file moniker and then an item moniker.
1599.85s - 1602.13s |  The whole point behind that is that,
1602.13s - 1604.93s |  and great example is you probably saw
1604.93s - 1606.09s |  when you have an Excel
1606.09s - 1608.21s |  and you want to address a specific worksheet
1608.21s - 1611.21s |  within the Excel, you use exclamation mark.
1612.49s - 1616.61s |  You want to access an object within the Excel file system.
1616.61s - 1620.97s |  You want to access a specific worksheet or a range or a cell.
1620.97s - 1623.01s |  And this is why this mechanism is there
1623.01s - 1624.61s |  so that using the moniker,
1624.61s - 1626.81s |  you can access very quickly to the right object
1626.81s - 1627.97s |  through the interface.
1629.05s - 1633.37s |  But doing so, it kind of jumped over some validation
1633.37s - 1636.25s |  and get immediately to the unsafe function
1636.25s - 1637.73s |  that we will talk about that.
1637.73s - 1642.57s |  And this is why the file was accessed and TLM was leaked
1642.57s - 1646.53s |  and even furthermore, a remote code execution was possible,
1646.53s - 1650.50s |  which I will demonstrate soon.
1650.50s - 1653.82s |  Okay, so overall, if you look at Office applications,
1653.82s - 1658.82s |  many times they load this set of MSO type of DLLs libraries.
1659.58s - 1661.26s |  The different libraries are responsible
1661.26s - 1664.42s |  for processing links, images, et cetera.
1664.42s - 1668.06s |  We are specifically interested in the MSO30 DLL.
1668.94s - 1673.42s |  This MSO30 DLL has the MSOHRHLinkCreate
1673.42s - 1676.10s |  from string function, a very long name,
1676.10s - 1678.98s |  which essentially wrapping the HLinkCreate
1678.98s - 1680.86s |  from string function.
1680.86s - 1682.74s |  This function is responsible basically
1682.74s - 1684.10s |  for processing the hyperlink.
1684.10s - 1687.18s |  So being sent a hyperlink to the email,
1687.18s - 1690.02s |  this function is being executed
1690.02s - 1691.82s |  and tries to parse the string,
1691.82s - 1695.46s |  which represents the file or anything else.
1695.46s - 1699.82s |  And the HLinkCreate from string is responsible
1699.82s - 1703.62s |  to basically convert that to the right monikers.
1704.66s - 1707.10s |  If you would send the file or URL,
1707.10s - 1711.46s |  it will create the right file moniker or URL moniker.
1713.30s - 1714.14s |  Just a second.
1714.14s - 1717.66s |  One more thing is if you look at the documentation
1717.66s - 1720.74s |  of this function, it kind of already provides some hints
1720.74s - 1722.74s |  into what we are going to see.
1722.74s - 1726.18s |  The HLinkCreate from string under specific condition
1726.18s - 1730.18s |  will call makeParseDisplayName from OID32.
1730.18s - 1732.58s |  Now this function is extremely not safe
1732.58s - 1736.26s |  and it shouldn't be executed with non-trusted code.
1736.26s - 1738.42s |  And there's even a recommendation for that.
1739.42s - 1740.98s |  There is one more interesting point
1741.06s - 1745.02s |  that if an input will be provided with an exclamation mark,
1745.02s - 1746.86s |  essentially the prog ID that points
1746.86s - 1748.86s |  to the right moniker object
1748.86s - 1751.22s |  will be instantiated quite automatically.
1751.22s - 1755.06s |  So we have everything we need to generate
1755.06s - 1762.30s |  and cause our Outlook to access the object.
1762.62s - 1765.26s |  Also in the documentation, as I already mentioned,
1765.26s - 1769.94s |  the makeParseDisplayName x is not really safe
1769.98s - 1773.58s |  and it accesses objects during the creation.
1773.58s - 1778.26s |  So as an adversary, my goal is to get to that function.
1778.26s - 1784.21s |  If I can, then the objects will be accessed.
1784.21s - 1789.21s |  When reversing the code of the HLink function,
1790.01s - 1795.01s |  we find out that if the string has one of those characters,
1795.41s - 1797.77s |  now I've already mentioned exclamation mark,
1797.77s - 1800.29s |  but there are a couple of additional characters.
1800.29s - 1804.25s |  If they are there, basically the file moniker
1804.25s - 1805.41s |  will be disregarded.
1805.41s - 1808.29s |  There will not be a createFileMoniker function.
1808.29s - 1809.65s |  It will not be called.
1809.65s - 1812.93s |  And instead, the makeParseDisplayName will be called
1812.93s - 1816.77s |  to do the work for us, specifically access the item
1818.13s - 1820.69s |  that is pointed by the file moniker.
1820.69s - 1823.01s |  So we need to generate the condition
1823.01s - 1825.53s |  that will have one of those symbols
1825.53s - 1827.97s |  and will disregard the createFileMoniker.
1827.97s - 1829.57s |  And it's exactly what was done.
1831.29s - 1833.93s |  Now, one more point.
1833.93s - 1836.45s |  So it's obvious why NTLM is leaked,
1836.45s - 1838.61s |  because of access to the object.
1838.61s - 1840.81s |  But when you are accessing the item
1840.81s - 1843.57s |  within that file moniker object,
1843.57s - 1846.37s |  you also parse the file itself.
1846.37s - 1848.33s |  So the file itself could be an Excel
1848.33s - 1849.97s |  or could be a Word file.
1849.97s - 1853.49s |  And during the parsing, what you have is kind of a container
1853.49s - 1857.01s |  that is spawned, like a Word or an Excel.
1857.01s - 1858.45s |  Preview mode is disregarded.
1858.57s - 1860.85s |  Preview mode there and medium integrity.
1860.85s - 1864.29s |  And the parsing itself can be abused.
1864.29s - 1866.37s |  So if you have an Excel or a Word
1866.37s - 1868.61s |  with a parsing vulnerability,
1868.61s - 1870.85s |  this can cause the remote code execution.
1870.85s - 1873.41s |  Now, this is what I meant by a more complicated
1873.41s - 1875.85s |  because it requires a chain of CVs
1875.85s - 1877.89s |  to achieve a full remote code execution.
1878.89s - 1880.21s |  Nevertheless, it's possible.
1880.21s - 1883.45s |  We have enough examples from the past couple of years
1883.45s - 1888.40s |  of vulnerabilities during parsing.
1888.40s - 1890.76s |  Okay, so we are starting about the patches.
1890.76s - 1894.28s |  How Microsoft introduced the first security update
1894.28s - 1895.28s |  to this fix?
1895.28s - 1898.48s |  And what can we learn from that update?
1898.48s - 1899.72s |  So first, we need to understand,
1899.72s - 1903.08s |  because some of the files like OLE32 and HLINK
1903.08s - 1904.80s |  are used by other applications as well.
1904.80s - 1906.76s |  There are not only Office files.
1907.72s - 1909.96s |  Microsoft uses a detours,
1909.96s - 1913.04s |  or basically, in a way, hot patching, call it,
1913.04s - 1915.80s |  to introduce security updates or patches
1915.80s - 1918.04s |  in the case for Offices.
1918.68s - 1922.24s |  For example, if we want to fix one of our functions,
1922.24s - 1925.68s |  like MakeParse that is implemented within the OLE32,
1926.80s - 1930.36s |  then a detour function will be used
1930.36s - 1933.28s |  to hook the MakeParse display
1933.28s - 1937.36s |  only if the call is coming from Office application.
1937.36s - 1939.32s |  So at the top, we have validation
1939.32s - 1941.24s |  on the ID of the application,
1941.24s - 1944.40s |  and each Office application has its own ID.
1944.40s - 1947.12s |  And if it's the right ID, we'll do the detours
1947.20s - 1950.80s |  and we'll hook the MakeParse to introduce our fixes.
1950.80s - 1956.96s |  So if it's not coming from Office, it's still vulnerable.
1956.96s - 1959.24s |  So this is the example, the real example
1959.24s - 1960.68s |  of what was introduced.
1962.20s - 1965.52s |  The MakeParse display name and MakeParse display name X
1965.52s - 1970.52s |  were hooked if it's being called from Office application.
1970.64s - 1973.12s |  And as you see, the detour is being attached
1973.12s - 1977.24s |  and the MSO is the one that is responsible
1977.24s - 1978.84s |  to do the hooking.
1978.92s - 1983.74s |  The MSO is loaded by Office.
1983.74s - 1986.34s |  So what happens within the hook?
1986.34s - 1990.38s |  So we hook them a MakeParse display name, which is great.
1990.38s - 1991.54s |  How do we fix that?
1991.54s - 1996.54s |  How do we validate that the string is untrusted?
1996.54s - 1998.10s |  So basically, Microsoft said, okay,
1998.10s - 2001.14s |  if within the hook, they validate a new flag,
2001.14s - 2005.22s |  they call it GetBlockMakeParseDisplayNameCurrentThread,
2005.22s - 2008.82s |  a very long name for a flag.
2008.82s - 2012.98s |  But as you would expect, if that flag is turned on,
2014.50s - 2017.86s |  return an error, do not execute MakeParseName.
2017.86s - 2019.70s |  If this flag is turned off,
2019.70s - 2022.14s |  you can go with the original flow.
2022.14s - 2025.90s |  So the question then, where is this flag set?
2025.90s - 2028.98s |  Who is setting that flag and where?
2028.98s - 2031.66s |  Because we, again, we want that to be only relevant
2031.66s - 2033.26s |  for Office application
2033.26s - 2035.62s |  and only for this specific vulnerability.
2036.50s - 2039.18s |  So exactly as you would expect,
2039.18s - 2042.10s |  the flag is turned on when this function,
2042.10s - 2044.90s |  the original function that I showed you before,
2044.90s - 2049.14s |  the MSO HRHLinkCreateFromString is executed.
2049.14s - 2051.02s |  Basically, when you have a hyperlink,
2051.02s - 2052.74s |  you double click on that hyperlink,
2052.74s - 2056.30s |  or you have some preview of that hyperlink.
2056.30s - 2058.94s |  This function is called from the MSO.
2058.94s - 2060.82s |  The flag is turned on.
2060.82s - 2064.58s |  And if it gets eventually to the MakeParseDisplayName,
2064.58s - 2068.30s |  it will return an error because the flag is turned on.
2068.30s - 2069.94s |  Okay.
2069.94s - 2071.70s |  So it was the first fix.
2073.18s - 2076.06s |  This raises questions, right?
2076.98s - 2081.98s |  Is the only path in MSO or in Outlook
2082.30s - 2084.62s |  is coming from that function?
2084.62s - 2088.38s |  Can we bypass it by going through other functions?
2088.38s - 2090.50s |  What about other applications?
2090.50s - 2091.94s |  What about other threats?
2091.98s - 2095.30s |  Because it's only relevant for this thread.
2095.30s - 2096.98s |  There are many more interesting questions
2096.98s - 2099.90s |  and opportunities for other security researchers
2099.90s - 2101.98s |  to find additional control flows.
2102.94s - 2105.26s |  And this is exactly what we've done.
2105.26s - 2106.74s |  Just to remind you, again,
2106.74s - 2110.06s |  on the flow of processing a hyperlink moniker,
2110.06s - 2114.30s |  we are starting again from the MSO HRLinkCreateFromString
2114.30s - 2116.14s |  that gets and processes the hyperlink.
2116.14s - 2120.26s |  It sends the string to the HRLinkCreateFromString,
2120.26s - 2122.82s |  which essentially executes the unsafe function
2122.82s - 2124.50s |  MakeParseDisplayName.
2125.70s - 2128.90s |  The patch introduced, we have the turn on of the flag
2128.90s - 2131.82s |  within the MSO HRCreateFromString,
2131.82s - 2135.62s |  and the detour validates that this flag is on
2135.62s - 2136.98s |  and returns an error.
2138.74s - 2140.22s |  What about other functions
2140.22s - 2146.34s |  that can go through the same flow?
2146.34s - 2148.22s |  Okay, so we found a function.
2148.22s - 2150.50s |  It wasn't very difficult.
2150.50s - 2153.70s |  Open IDA, check out the references.
2153.70s - 2157.30s |  You'll find a quick flow, and there's a new function,
2157.30s - 2161.86s |  HBRMonUrl, that also executes the same flow
2161.86s - 2164.66s |  and gets to MakeParseDisplayName.
2164.66s - 2168.10s |  So the question is, how do we make it trigger?
2168.10s - 2172.36s |  How do we make it work?
2172.36s - 2176.88s |  And this was our second remote code execution
2176.88s - 2178.04s |  that we introduced.
2178.96s - 2181.88s |  This remote code execution was patched in July.
2182.40s - 2187.25s |  Again, very quick work by Microsoft.
2187.25s - 2192.09s |  So if you provide a link within a image container
2192.09s - 2194.41s |  or URL container in a way,
2194.41s - 2196.61s |  then this function will be triggered.
2196.61s - 2200.21s |  You can try out, again, multiple execution
2200.21s - 2201.45s |  within the Outlook.
2201.45s - 2203.89s |  In this case, this image source will get
2203.89s - 2206.73s |  to the HBRMon from URL.
2206.73s - 2210.29s |  And again, it will execute due to the exclamation mark.
2210.29s - 2212.65s |  It will bypass the validation
2212.65s - 2216.29s |  and will jump to the MakeParseDisplayName.
2216.29s - 2219.88s |  What is the fix to that?
2219.88s - 2223.64s |  Okay, turning on the flag on that function as well.
2223.64s - 2228.64s |  Okay, so this time, this flag is also set on that function.
2228.68s - 2233.40s |  And exactly the same way, it is validated by Microsoft,
2233.40s - 2234.56s |  and we are good to go.
2235.48s - 2237.56s |  We didn't validate additional flows
2238.48s - 2241.54s |  because we were looking into additional new categories.
2242.10s - 2248.54s |  Okay, so it's obvious kind of in the summary
2248.62s - 2251.62s |  that security updates are important,
2251.62s - 2254.26s |  and it's important to be up to date.
2254.26s - 2256.14s |  But you have to do additional things
2256.14s - 2257.38s |  to reduce the attack surface.
2257.38s - 2259.62s |  If you can harden your environment more,
2259.62s - 2262.34s |  this is just a bunch of things that you can do.
2262.34s - 2264.58s |  There are much more and beyond.
2264.58s - 2268.54s |  If you can block your outbound to outside,
2268.54s - 2270.98s |  then it's amazing if you can.
2271.82s - 2275.78s |  Obviously, enforce Kerberos authentication.
2275.78s - 2279.94s |  It will definitely block at least for moniker execution,
2279.94s - 2282.30s |  not necessarily the form execution.
2282.30s - 2287.06s |  You need to monitor keys creation for the forms.
2287.06s - 2288.90s |  If there are special interesting keys
2288.90s - 2292.26s |  like InProcServatory to generate in a registry,
2292.26s - 2294.54s |  then, yeah, go ahead.
2294.54s - 2295.42s |  You have five minutes.
2295.42s - 2296.82s |  Ah, okay, sorry.
2296.82s - 2298.04s |  No, I'm finishing.
2299.04s - 2302.80s |  So definitely please apply the right hardening
2302.80s - 2305.26s |  into your organization if possible.
2306.50s - 2309.24s |  Finally, the last slide is credits.
2309.24s - 2311.64s |  A lot of works were possible
2311.64s - 2313.64s |  due to the researcher community.
2313.64s - 2315.28s |  They've done amazing work.
2315.28s - 2317.92s |  I have to appreciate what they have done
2317.92s - 2322.00s |  trying to continue this work and help the industry
2322.00s - 2325.04s |  and make the applications safer.
2325.04s - 2327.28s |  And I think we have a very good cooperation
2327.32s - 2328.76s |  with Microsoft.
2328.76s - 2330.44s |  I really like to work with them,
2330.44s - 2332.24s |  though I found previously vulnerabilities
2332.24s - 2335.60s |  in McAfee and other vendors as well.
2336.68s - 2339.04s |  I like the most working with Microsoft.
2339.04s - 2339.88s |  It's amazing.
2339.88s - 2340.70s |  Thank you.