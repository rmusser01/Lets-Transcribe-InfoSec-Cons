{
  "webpage_url": "https://www.youtube.com/watch?v=KOUaJIX9JEY",
  "title": "BlueHat 2024: Day 2 Keynote: Amanda Silver, CVP, Microsoft Developer Division",
  "description": "Amanda Silver, CVP and Head of Product, Microsoft Developer Division and General Manager, First-Party Engineering Systems on \"Protecting Microsoft\u2019s Engineering Systems\".",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 2759,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241112"
}

0.00s - 27.76s | This text was transcribed using whisper model: large-v2

 All right, welcome back everybody. Thanks for all the feedback about yesterday. Please keep it coming in. We've received a lot of interesting feedback about Co present in Co presentations with Microsoft and external speakers. Some people are surprised that security researchers in Microsoft employees would be together on stage. That's really what it's all about. Bringing people together here at Blue Hat.
27.76s - 56.40s |  There was a lot of curiosity about the keynote yesterday. Some people within MSRC are like, oh, so that's how the team started. And that's how you know some of these things came together and it was cool to see everybody learning about that. And then, of course, people seem to really love Clippy. Clippy was running around yesterday afternoon and I hear that clipping may make a reappearance later later today.
57.24s - 63.16s |  One of the things that we announced at Blue Hat last year was that we expanded our AI bug bounty.
63.96s - 73.56s |  And we've learned a lot through that. So when you have a bug bounty, you want to be really intentional about what's in scope, what your goals are, all that kind of thing.
73.56s - 93.16s |  In AI is really a new space, and so we've continued to evolve the bug bar in the bug bounty program as part of that. A lot of that is based on feedback that we've received from the external security researchers, many of which are presenting later today in that AI and ML track.
93.16s - 108.20s |  And a lot of the attacks that we see are some of the typical security attacks. Some of these things are AI specific, though. I wanted to highlight one of the interesting bugs that came in.
108.20s - 136.72s |  So somebody was interacting with an ML system and they were trying to get access to the file system, and so they started chatting with ML system and saying this was the LLM saying, OK, let's go interact with the file system and create a file with these contents and name the file this, and so the LLM said, OK, I did that.
137.04s - 158.40s |  So then the next thing they said is, OK, give me a directory listing. So the directory listing came back and it had that file that the security researcher just tried to create, and it had some other files along with it, including some files with very similar names with till days and stuff like that. So it looked like kind of temp files, backup files.
158.40s - 182.56s |  And then the researcher said, OK, now read the contents of that file back to me, and it gave the contents back. Same thing that the researcher put in, and so that bug submission comes in and we go and look at it, and it turns out that they did not touch the file system and the LLM is so sophisticated that it was a hallucination.
182.56s - 212.04s |  And then we have a bug bounty program, so it gets a little interesting where we have to say, hey, it's not really what you saw, but luckily for us, the researcher knew some things were kind of suspicious when they submitted it, and they said, hey, I'm not really sure if this is real or not, but there are bugs like that that a few years ago you wouldn't even imagine that you would have these repro steps that were kind of.
213.04s - 214.84s |  Strange in hindsight.
216.32s - 235.40s |  And while there are AI specific attacks, a lot of the things remain, the core security fundamentals remain true to securing AI systems, so going and doing threat modeling, going and building defense in depth, these are all really important.
236.00s - 243.20s |  And so with that, the engineering system is really core to everything that comes out of it.
243.36s - 245.76s |  Everything is built on the engineering system.
246.00s - 254.52s |  We know that, attackers know that as well, people are going after engineering systems to impact the supply chain.
255.24s - 265.72s |  And so our keynote speaker for today is Amanda Silver, and she's going to talk about how at Microsoft we secure the engineering system.
266.20s - 270.96s |  I've had the pleasure to work with her as part of the SFI initiative.
271.80s - 279.32s |  She's a CVP working on developer tools, platforms, and engineering systems, so please welcome Amanda Silver.
279.76s - 306.70s |  Make sure this is on all right. Y'all can hear me. Hi, glad to be here at Blue Hat. Thank you so much for the introduction. I'm really thrilled to be here to talk about this topic. I actually have never talked about a lot of things in the developer space before developer tooling. You know, developer experience never actually talked about this topic, so I'm excited to talk about it today.
307.06s - 328.18s |  So, you know, as Tom said, it's really no secret as to why we're all here today. It's not a question as to if there's going to be another attack, but actually, you know, when it's going to hit, where it's going to hit, how severe it's going to be, and that really all depends on how quickly we can detect and remediate it and address it.
328.18s - 356.54s |  And so more and more, we're seeing really software developers themselves, their workstations, their engineering systems actually be the target for threat actors, you know, from SolarWinds to CodeCov to Log4j to XE. Developer watering holes is kind of how I think about it, and the infrastructure that they work on is really increasingly becoming the target that then becomes the critical dimension that facilitates the lateral movement.
356.54s - 369.14s |  So earlier this month, CSO online cited a new report from Sona type that really sounds the alarm about the rate at which malware is infiltrating open source software.
369.14s - 399.10s |  The company has tracked over 500,000 new malicious packages since November 2023 across Java JavaScript Python.net packages. All of those register package registries and the number of malicious packages on those registries is according to their report has grown by 156% year over year. The previous year was actually even higher, and that obviously poses a very significant risk.
399.30s - 424.22s |  For anyone who uses open source and it really is an imperative for everyone to kind of manage their dependencies on open source really effectively. So let me just introduce myself real quick from my perspective. I basically have 2 jobs at Microsoft. The first is that I run the product teams that build all of our developer tools. Visual Studio Visual Studio code.
424.22s - 454.06s |  You know typescript.net are contributions to Python C++. You know the rest compilers. You know all of that kind of stuff are Azure DevOps solutions. We partner very closely with the GitHub team to build advanced security for GitHub and Azure DevOps to build GitHub copilot and we also build in my team. The paths layers of Azure. So basically the application platform that's half of my job.
454.22s - 483.78s |  The other half of my job is that I'm also the GM for our first party engineering systems and so in a way you could think about this is we take the retail products that we ship to our external customers and we manage them. We administer them. We host them. We extend them and we incubate new technologies for our first party Microsoft employees for our Microsoft digital and state estate and you know over 60,000 employees in the engineering profession at Microsoft.
484.38s - 498.46s |  And our engineering systems are really the foundation on top of which all of our products are built and because of that they are the prime target. They are a prime target for threat actors attempting to infiltrate our systems and our customers environments.
499.50s - 513.62s |  Now you may have gotten word and I know many of you are Microsoft employees, so I'm sure many of you have heard this before, but for those of you who have not who are not Microsoft employees. I would assume that you've probably heard yesterday and yesterday's conference.
513.62s - 543.34s |  You know that about this new initiative that we're calling SFI or the secure future initiative at Microsoft. How many of you guys have heard of this everybody? Maybe not everybody. Let me just explain it a little bit obviously as one of the defenders of kind of the most targeted estates in the world. Microsoft really. We obviously see first hand the increasingly hostile security landscape and obviously we recognize the imperative to address it.
543.62s - 570.38s |  As much as we possibly can as if I launched in November 2023 and our CEO Satya Nadella made security. The top priority for everyone at the company. I'm not just talking about engineers. I'm not just talking about the executive staff. I'm talking about our lawyers. I'm talking about the people in HR. I'm talking about literally everyone at the company now has security as one of their core commitments.
570.62s - 597.14s |  Uh, you know, and so you know, in some senses, everybody's like, OK, what can I do for security? Well, you can at least use multi factor authentication, so this is really an education for everyone across the entire company in terms of how they can contribute and do their part to contribute to support security, but you know, as I've been saying to my team for several months now, what this also means.
597.98s - 617.34s |  And this is true for our overall general business as well is that there is no new feature, no new skew, no new product that is more important than ensuring that the infrastructure that our customers take a dependency on for their mission. Critical solutions is absolutely rock solid.
617.34s - 632.10s |  And so that's the message that Microsoft is getting from Satya all the way down, right? And I think that, you know, especially in this in this landscape that is really the only kind of posture that we can take.
632.10s - 662.06s |  So this company wide initiative was really designed to advance how we design, build, test, operate our products and services so that we can ensure that we're delivering the solutions that meet the highest possible quality of standard for security, and we have the equivalent of 34,000 engineers working on it, making it as far as we know, the single largest cyber security engineering project in the history of cybersecurity in the United States.
662.30s - 681.78s |  Of digital technology, and so we're empowering basically all of Microsoft to implement the changes that are necessary to deliver security first, and we're leveraging all of the insights that we've gotten the best practices so that we can deliver the world's most secure cloud. That's really what we want to be focusing on.
681.78s - 711.74s |  So all of our work in Microsoft is now guided by these three principles. Secure by design security comes first when designing any new product or service. This means that, for example, I'm engaging with my design team. You know people who we think of whose primary job is to design the user interface for our products to actually help them think about how how they can create better designed user interfaces, but also obviously software engineers in terms of how they think about how they're going to be able to deliver the services that they're going to be able to deliver in the future.
711.78s - 741.50s |  They design the architectures for their solutions secure by default that the security protections in our products are enabled and enforced by default, and that requires no extra effort on behalf of the customer, and it's not not optional. At least internally, it is not optional, and we can make it optional for our customers. But if we do make it optional for our customers, we actually want to warn them, help them understand the risk that they might be taking on.
742.02s - 759.46s |  And secure operations. We have to make sure that our security controls and our monitoring are going to continuously improve so that we can meet our current and future threats. Now, every part of Microsoft is being brought together through this initiative to advance the cyber security protection across our company and our products.
759.46s - 778.42s |  Protect tenants and isolate production systems, protect networks, protect engineering systems, which I'll talk about in a lot more depth in a second. And we've also identified 6 critical security pillars, and we organized the teams to be able to implement these.
778.42s - 808.38s |  You know, protect identities and secrets, protect tenants and isolate production systems, protect networks, protect engineering systems, which I'll talk about in a lot more depth in a second. Monitor and detect threats and accelerate response and remediation. Now, in some senses, this is almost the first chapter of SFI, and as we are kind of uncovering the layers of what we need to do, we're realizing that there's more and more ways that we need to kind of look at our entire estate to figure out everything that we need to do.
808.42s - 838.38s |  To do to remediate it, but another kind of core principle of the way that we're approaching this is to continuously improve our standards and embedding them into the way that our engineers implement the products through paved paths. And this can happen at the architectural layer in terms of the way that they build, you know, say, a new Azure service or a new service for M365, but it also obviously happens in the way that they integrate into the engineering system.
838.42s - 868.38s |  To go from their idea to code into production, and then we have to also make sure that we're ingraining all of this secure posture into the design, the principles that secure by design, secure by default, and the operations in everything that we do. And that also means that, for example, we have to make sure that we're actually implementing telemetry and monitoring for basically everything that we implement so that we can actually see.
868.42s - 886.26s |  What's happening now when I mentioned that this is an initiative across all of Microsoft. I really mean all of Microsoft. That's over 18,000 organizations in terms of the sub organizations that we have inside of Microsoft from an engineering systems perspective.
886.26s - 909.10s |  167,000 repose over 100,000 devs, engineers, designers, product managers. That was kind of the count before the Activision acquisition, so it's even more at this point and just like many of your organizations outside of Microsoft. We have a lot of legacy code.
909.10s - 939.02s |  That still needs to be maintained 20 year old code or more 30 year old code in some cases and as a result of that we have a breadth of a lot of different types of tools in our engineering systems and also a growing number of programming languages and ecosystems that we need to support. So it is a lot of complexity and the way that we can manage this. The only way that we can manage this is through the practice of.
939.10s - 967.22s |  Practice of what I call platform engineering. What the industry is coming to call platform engineering so platform engineering. I think about it as devops plus plus plus. It's kind of like the combination of devops plus kind of cloud native together, but it's basically built up. It's a practice just like devops was way back in the day before it actually became products that was built up from devops principles.
967.22s - 988.86s |  That seeks to improve every development teams security quality compliance costs and time to business value and developer experience through improving the developer experience and enabling self service systems that enable secure governed.
988.86s - 999.58s |  You know solutions and infrastructure by default right so the idea here is you know for many people when they want to create a new product. They actually have to go.
999.58s - 1029.42s |  You have to go create a devops pipeline. They have to talk to the engineering system and then they have to go talk to the ops team. Then they have to talk to the security team and they have to talk to basically every team across their company to actually get the infrastructure that they need. Obviously, when you have those kinds of of human interfaces that are being required. There's going to be variation in the in those human human discussions and it's just going to kind of represent a lot of friction for the engineering teams and so.
1029.58s - 1058.62s |  Really, what we're trying to do here is to make sure that we have these paved paths by default so that developers can be self service. They can basically. You know they can be as agile as they can possibly be, but also from an engineering systems perspective and from a security monitoring perspective. We can actually understand what they're creating in the context of our environment and ensure that they're adhering to our best practices in a sense, though. This is also a mindset shift.
1058.74s - 1065.02s |  It actually requires that we think about our engineering systems through the lens of a product mindset.
1065.98s - 1075.50s |  And let me talk about that for a second, but you know the solution that we have here is the set of tools and the systems that we use to support it. So you know.
1075.50s - 1105.46s |  As the GM of the internal team that builds these solutions. This is really where platform engineering helps us. So we've invested in making sure that we have the mindset shift and we treat our engineering systems with that product mindset. So our customers are the individual developers on the team who use these products every day as end users, right? But we also have stakeholders really important stakeholders. Our operations team are security team.
1106.02s - 1130.82s |  You know the boardroom who cares about the agility of our engineering teams. You know, so we have to kind of constantly make sure that we're satisfying all of these all of these customers. But we've built basically this central team so that we can codify all of the best practices into these automated processes that reduce the developer toil and the developer toil can come either through setting up infrastructure.
1130.82s - 1160.74s |  Or it can come through security response and remediation, right? And so if we if we can actually make sure that we're building better foundation for engineering systems from by default, it actually reduces developer toil. That's kind of that's that's the key to what we're trying to do here. So we could not handle the scale of driving standardization and consistency across Microsoft's estate without thinking about this practice of platform engineering, and so we.
1160.82s - 1165.46s |  In a sense, you could think about platform engineering is having 3 key motions.
1165.46s - 1195.42s |  Now I could talk about this all day. I'm obviously pretty passionate about this, but I just want to give you a little bit of context on these 3 motions as they come up in terms of how we think about how Microsoft has to protect our engineering systems. Start right really focuses on equipping the developers with these self service tools and that allows them to kick start their projects really quickly and adhering to the company's best practices that are defined through templates that are then automated.
1195.46s - 1208.10s |  And policies and those start right templates include workflows and config as code that actually leads to the deployment pipelines that enable successful, efficient and secure operations.
1209.10s - 1233.50s |  Now stay right motions like policy enforcement security monitoring observability through all of that organizations can govern their application estate to get better cost control and to reduce risk while delivering a great developer experience and get right motions, which you know a lot of people call these get green or get get clean.
1233.50s - 1254.54s |  I don't love the term great green because there's always red and red isn't bad. You just need to respond to it, but those are really the campaigns that we drive to eliminate the technical debt and the technical debt can kind of happen in 2 ways. It can either happen because you know.
1254.54s - 1271.02s |  The code drifted since they first kind of came up with the project. It can happen because our standards evolved. It could happen because there's a new threat that we now are have to respond to and so there's many different ways that we kind of need to drive these get right campaigns.
1271.54s - 1279.90s |  So now let's return to the secure future initiative just to show you kind of the double click on what it looks like within the engineering system pillar.
1279.90s - 1309.86s |  The goal of the engineering systems pillar is to protect our software assets and to continuously improve our code security through the governance of the software supply chain and our engineering systems infrastructure. So this is an enormous goal and you know, acknowledging we are not perfect here, but we're approaching this through the lens of continuously learning and improving our products and our infrastructure.
1310.10s - 1333.62s |  So that we can protect both both our solutions and our customer solutions. So with all that said, let's take a quick look at the 5 objectives that make up the engineering systems pillar. In a sense, you know these keywords that you see highlighted here when I first you know when we first realized that we were going to be bringing the secure future initiative company wide.
1333.62s - 1363.02s |  I got a call Friday night very, very late and got the word. Hey, we're going to be doing this and I'm going to need your help. Given that you run the engineering systems team and so it's one of those late night calls that you spend time kind of thinking about even when you're not intentionally thinking about it. And these are really the 5 key themes that came to mind those words. So let's just talk through it.
1363.62s - 1393.58s |  Number one, we have to build and maintain the inventory for our software assets that we use to deploy an operator. Microsoft production environments inventory is just so critical to facilitate rapid response and remediation and to also continue to maintain compliance with our ever more secure standards. So we cannot do something like a get right campaign without actually having.
1393.78s - 1410.14s |  An inventory and today this is actually a system that is internal only. We don't have an equivalent retail solution of what we use internally inside of Microsoft to what we've built for our inventory system.
1411.14s - 1437.34s |  But it is an essential component in terms of how to facilitate this. So as we saw from the recent salt stack exploit publicly known vulnerabilities can really be exploited very quickly and as a part of our get right campaign and our platform engineering motion over the past several years. We've driven major campaigns to prune are untended repose and understand which remaining repose are production related.
1437.34s - 1461.70s |  And this is really immeasurably impacted and helped improve our focus for our efforts. It helps us reduce the noise from the findings so that we can focus on what actually represents the highest risk and it effectively has improved our MTTR are meantime to remediation response when the security issues arise.
1461.70s - 1482.14s |  Now since some of the earliest open source incidents. We've really continued to improve our open source incident response process and so now we can actually block known bad packages on our deny lists and enable central notification to all of the affected teams within just a few hours.
1482.14s - 1512.10s |  Which is which is much improved now. The second big point is access in the before times developers built on their own build servers and they copied binaries over from one build server into the production environment. And you know, we don't live in that world anymore. We definitely don't want to put that world anymore. So we're really trying to apply zero trust and least privilege policies to secure access to source code and engineering.
1512.14s - 1542.10s |  Systems infrastructure. Now this is a defense in depth approach that really ensures that only authorized personnel have access to those critical resources and 2 pathways to production. This is a really critical step now in the interest of transparency with you all. One of the things that you know is an important tension here is supporting the culture of inner source and security right because you know. Yes, we want to protect all of our assets.
1542.14s - 1572.10s |  But we also want to support collaboration and code reuse inside of the company and so our goal is to be able to allow developers to search for less sensitive source code to facilitate code reuse as much as possible and our current approach is to really make sure that we're standardizing the access groups based on our organizational hierarchy and also support easy experiences to approve access. If somebody wants to contribute.
1572.14s - 1588.34s |  To a code base in a sister team and also provide search capabilities for folks so they can kind of learn, but not necessarily have right contributions into all of all of that source code as well.
1588.34s - 1617.86s |  So the third big dimension is code security now every single line of code. This is our aspiration. If that deploys to Microsoft production environments really has to be fortified with state of the art security checks and we have to make sure that that all the code that we implement is secure and that we're continuously eliminating categories of attack surface area so that we can continually improve our products. So 2 examples of how we do this.
1618.34s - 1646.46s |  Is to remove secrets from code as an example using GitHub advanced security to make sure that we're improving the threat modeling across the company and that practice other examples of how we eliminate major categories is making sure that we're migrating more of our code bases to memory safe programming languages and so that's kind of one of the kind of important dimensions of this.
1646.86s - 1664.78s |  Now the 4th big dimension is isolation by standardizing and securing our build and release systems through these governed pipelines and isolating our dev test environments from our production environments that will allow us to have.
1664.78s - 1688.78s |  Consistent and secure continuous integration continuous deployment solutions across the board and that will reduce the risk of lateral movement into the production environments. Now one of the tools in our arsenal that we have that facilitates this, but it is kind of a challenging thing to kind of use at the scale of Microsoft is.
1688.78s - 1718.02s |  But it really facilitates the separation between dev test and prod is Azure deployment environments and that allows platform engineers to set policies and settings on various different types of environments and control which Azure resources people have can create. Developers can create an really track those environments across feature branches and kind of all the different kind of.
1718.78s - 1746.54s |  Is that they might deploy these things, you know, one of the things that that today, you know, developers really struggle with is setting up all of the managed that cloud managed resources that their applications depend on and it's really error prone and prone to configuration fails or other things like that, and we don't really want every single developer to have to become a.
1746.86s - 1773.50s |  Um, you know, an expert in kind of frankly, developers don't love writing yaml. They don't love it. They don't want to write it, so this actually saves them a lot of time, but it also allows us to kind of have more consistency across all of this and through this. They can then apply Azure governance and policy based on the type of environment that you know sandbox testing staging or production.
1773.50s - 1803.46s |  Now another tool in our toolbox is managed DevOps pools. Now this is something that we actually developed internally in Microsoft. First, we've been using it for the last couple of years and have been rolling it out as part of our standardized build pipelines. But basically, this is a way to make sure that that you know we're driving centralized governed build infrastructure for all of the builds across across. You know Microsoft in this case, but you know this is actually.
1803.74s - 1829.90s |  Sure that we're going to be bringing to our third party customers at Microsoft Ignite in a couple of weeks, but you know this. This really helps to ensure that we're actually man. It's centrally managing and governing those build pipelines so that the build infrastructure cannot be compromised, or at least that we have a more qualified central team. That's basically monitoring all of those pipelines.
1829.90s - 1854.38s |  So the 5th objective, which is obviously super critical is supply chain security, so we're building a more secure software supply chain to protect every component in our production environments and products, which includes aggressively burning down critical open source vulnerabilities through package upgrades and standardizing on Microsoft vetted package feeds.
1860.90s - 1867.42s |  That only services in our production clouds are those that have been built using our production tool chains.
1867.42s - 1896.50s |  Now as we look at this space in terms of the maturity framework for safe OSS consumption using the secure supply chain consumption framework that allows us to have inventory audit and to track our OSS usage in the event of a new zero day vulnerability getting declared. So Microsoft developed the S2C2F. It's that just doesn't quite roll off the tongue the way that I would like it to since 2019.
1897.42s - 1927.38s |  Continued to lead and maintain the framework in as a part of the open SSF. So the 8 practices in the S2CF S2C2F. Thank you. They work together as part of a holistic strategy so that you can secure the team and organizational supply chain. And so it starts with ingest to make sure that your teams are consuming open source through an artifact repository set like our Azure artifact.
1927.42s - 1936.10s |  Search a frog or something like that and so that way you can actually continue to build your solutions, even if the upstream goes down.
1936.10s - 1966.06s |  Now you also need to enforce and that that that ensuring that only OSS can be consumed through the artifact repository so that you can really gain control over how dependencies are brought into your supply chain and that this is part of establishing the paved path with those guardrails. So then these SCA tools like dependency scanning can then collect a more accurate inventory and scan.
1966.30s - 1993.58s |  For legal risks, vulnerabilities, malware, etc. Now by improving our inventory SCA and other tools like dependabot, which is part of GitHub advanced security that really helps developers to update their known vulnerabilities very quickly and that allows security teams to also audit to make sure that that the known vulnerabilities are being addressed as part of a get get to green campaign.
1994.14s - 2016.42s |  Now we've published all of the high level solution agnostic set of practices with the detailed list of requirements for each practice and real world supply chain threats that are specific to OSS and how our framework mitigates them. So for those of you outside of the Microsoft team who are interested in this, you could check out that link at the bottom for some recommendations.
2016.42s - 2044.74s |  Now internally, we continue to invest in what we call central feed services, and this is an extension of Azure artifacts that's designed to protect against vulnerabilities that are stemming from the consumption of public packages. So CFS really ensures that packages are pulled from secure internal registries and they provide ingestion gates for OSS looking at malware looking at Providence and it provides ongoing continuous scaling of OSS.
2046.42s - 2066.66s |  And it's transparent to the developer experience. So really, the developer experience doesn't change at all. You know it looks like they're just consuming a package directly from nougat or pie pie or wherever, wherever, but essentially we have. We make sure that our build systems are pointing to this central feed service.
2066.66s - 2096.58s |  Now it's not just about us making Microsoft more secure. I also want to call out that you know, especially given that we have retail products we have. We have package managers that Microsoft's actually delivers. We also need to think about our responsibility in terms of securing the entire ecosystem that protects Microsoft and it protects all of our external customers and so we continue to make really significant investments.
2096.66s - 2126.62s |  In the broader ecosystem to secure the consumption of packages and to reduce the blast radius for the ecosystem. So you know for the new get team just as an example for the last couple of years there even before the secure future initiative. There are big focus. Their number one priority actually has been improving the security of the ecosystem, so you know here are just a few of the examples of the work that we've done in new get dot net restore audit improvements.
2126.66s - 2156.62s |  It really helps you to check all of your dependencies, including direct and indirect dependencies. Transitive dependencies helps you know that your hidden dependency. What your hidden dependencies are both at a project and a solution level. OIDC trusted publishers enhances security with robust authentication and it enables convenient access across multiple services through single sign on and that makes our systems more easier to use and more secure and.
2156.66s - 2186.58s |  Obviously, you know, in some senses, the cyber EO Act and kind of the requirement of S bombs has also had a pretty dramatic impact in terms of the requirements across the entire ecosystem of engineering and kind of the developer world and so one of the things that we've been doing is to ensure that are that you know new get can facilitate building S bombs properly and then dot net dot net new get. Why displays? The.
2186.82s - 2204.50s |  Dependency graph for a specific package within a project or a solution and so we're going to continue to partner with the open SSF or foundation to make sure that we're continuing to improve our open source insights and in some ways you know from my perspective.
2204.50s - 2221.74s |  And so I think that we have an opportunity with new get to actually show you know some thought leadership in terms of how we can improve the.
2221.74s - 2234.70s |  Secure the ecosystem for the entire dot net community and hopefully that can then kind of spur additional package managers to also adopt similar packet similar practices.
2235.70s - 2236.52s |  Now.
2237.62s - 2256.58s |  This all sounds good, yeah so far. Yes, OK, but it's also not enough and I just want to call that out. You know, detecting the issues making sure that we have all of the security vulnerabilities identified. It doesn't actually solve the problem. If the developer never takes action.
2256.58s - 2286.54s |  Right and so we have to think about the actual ergonomics for the developers. We have to make sure that they are not barraged with a wall of issues that is going to represent tech debt that they then have to take literally years to burn down manually. And so we really also want to make sure that we are not just finding the issues, but fixing the issues you know yesterday was GitHub universe. We were talking about.
2286.58s - 2316.54s |  The found means fixed right? That's kind of our adage is we want to make sure that once we find it that that are tools and our systems actually automatically helps the developers. It just makes it so much so easy for the developer to fix the issue. Once it's found and so you know inside of Microsoft. We use dependabot, which is again part of GitHub advanced security to facilitate developers to once we find a vulnerability for them to.
2316.58s - 2346.54s |  Upgrade their their package so that they can build more secure software. I just want to talk about culture and the security mindset really quickly. You know you guys have all heard about the XE attack. So we're just kind of kind of dumb. You know, dig into that a little bit earlier, but you know at the center of this was Andreas Freund, who is a Microsoft developer who kind of detected it. I just want to acknowledge that we were so lucky that we had Andreas from the progress team in Azure, who was doing benchmarking on the test.
2346.70s - 2354.14s |  Branch of Debian and he was spending time digging into the profiler and he was seeing some issues in the remote connections.
2354.14s - 2368.02s |  And so what he the analysis, you know, obviously in the security community. You all are building amazing YouTube videos that go very, very deep into all of this work amazing work.
2384.14s - 2413.98s |  If the hacker let me has signed them with their key, so it's pretty sophisticated attack, but I just also want to call out that this is really a social engineering tack. So if we go back to the XE mailing list in 2022, the attack actually started much, much earlier. This is really a long game type of attack. So if you've worked in open source communities before, you know that the conversations that I'm going to show you here are really not unique.
2414.14s - 2441.98s |  And it's definitely easy to assume that these are someone who is really trying to contribute back, and it's unfortunate that we're just realizing just how careful we need to be in the open source space. And we can't really trust what people are saying. You know that they always have kind of positive intentions from a contribution perspective.
2441.98s - 2471.62s |  So here's the maintainer of the XE project, Lasse Kallen, and he's noting there that he's been struggling with mental health issues because of the pressures of basically maintaining this pretty significant component. Now you've heard of a Nebraska dependency. It's a reference to this XKCD sketch. And so you know, in a sense, this is a great example of an XE dependence. I mean, a Nebraska dependency. So going back to the newsletter and following what happened in 2022.
2471.98s - 2501.62s |  Essentially, he's saying, why don't you pass off the ownership, the maintainership to somebody else then? And finally, we see Lasse, the maintainer of the project, come back and say this other person, Jia Tan, has been helping me quite a bit in the background, and maybe he can help me a little bit more in the future. And he created a GitHub account in 2021, and this looks pretty solid as an open source contributor goes. And lots of the GitHub. He has lots of GitHub commits. He has an avatar. He's very active, you know.
2501.98s - 2527.10s |  But here's where they contribute the back doors. The pull request is accurate. Yep, there's stuff in those files, and they alter, and they build, and more. You know, he's really, really contributing in a really meaningful way, and that actually is protecting anybody from detecting that he is, you know, trying to do what he's trying to do. So here's the evil pull request. This is essentially a very large false value.
2527.10s - 2553.42s |  So here you can see that they also contributed to this Google fuzzing project to replace themselves as the maintainer in case any fuzzing issues came up. And if you actually look at the GitHub repo, you're not going to find everything. The actual attack files are inside the tarball only, and so a lot of Linux distros will pull a tarball in and build it as opposed to cloning the Git repo and so on. So you wouldn't really see it.
2557.10s - 2584.02s |  Get ignore file and they've actually said here. Don't check this build the host dot M4 file because that's my back door. So let's just include that back door. So it's really interesting to see all of these breadcrumbs here and in unraveling this Andres really personified what we call the security mindset. And I think that's a really key element of security culture. He was curious. He was vigilant and he took his responsibility to take the findings to light.
2584.02s - 2596.54s |  And so I just want to close where I began this morning. It's not a question of if there's another security attack coming. It's really a question of when it will hit where it will hit and how severe it will be.
2596.54s - 2613.82s |  And you know, I just want to kind of encourage everyone here to think about Andres friend like let's let's just talk about him as an example. You know what was super interesting in that first weekend when even before the New York Times article hit.
2613.82s - 2638.30s |  And I think one of the things that I learned from working with Andres during this period is as much as we have a security culture inside of Microsoft and we have things like reported now, which basically every employee at Microsoft knows to use if they.
2638.30s - 2661.94s |  See something you know. I think about this is almost like you see a backpack by a trash can in the train station, right? You see that it's abandoned, right? You see that it looks somewhat suspicious. If you see somebody who's an authority figure walking by, you're probably going to let them know. Hey.
2661.94s - 2691.86s |  That's a thing you should go check out and so essentially what Andres Freund did was the equivalent of seeing that backpack and telling somebody about it and he did use reported now. But Andres was also an aqua hire to Microsoft. He came in through an acquisition. He was not in the company very long, you know, and he was a career open source maintainer contributing to the company for a number of years, and I think that's a really important thing to think about.
2691.94s - 2707.86s |  Contributing to Linux kernel, Postgres, other things like that, and so he wasn't necessarily kind of embedded in the overall Microsoft culture, but I think that that's something that we all really need to think about. If you think about your teams.
2708.62s - 2709.82s |  You know who?
2711.02s - 2713.98s |  Really understands what to do when they see something.
2713.98s - 2743.94s |  And are they going to get the support that they need when they see something and they reported it? They reported there so you know for Microsoft. We have reported now. That's what you should be using. If you see something, but also for anybody who works with other friends and teams or works with teams that have come in through acquisition or works with open source maintainers for components that we have a dependency on. Think about how you can actually help them as well so that we can all really have.
2743.98s - 2758.72s |  This security mindset to make sure that you know the digital world is more protected. So thank you very much. Have fun at Blue Hut. Thank you so much Amanda.