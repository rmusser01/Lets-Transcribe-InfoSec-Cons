{
  "webpage_url": "https://www.youtube.com/watch?v=5gt18zjFWBM",
  "title": "BlueHat 2024: LT04: Scaling Out Securing Open Source Presented by Zachary Steindler from Microsoft",
  "description": "BlueHat 2024: LT04: Lessons Learned: Scaling Out Securing Open Source Presented by Zachary Steindler from Microsoft\n\nAbstract: Programming language package repositories are juicy targets for attackers as they serve billions of requests per day. For the same reason, it's a great place for defenders to see high impact from security capabilities. And yet, each package repository ecosystem has unique community values and architecture - so how do you support developing security capabilities in ecosystems you aren't familiar with? Over the past year, the OpenSSF Securing Software Repositories Working Group has done so by providing roadmaps (like the \"Principles for Package Repository Security\" co-published with CISA), implementation guidance (like our biggest success to date \"Trusted Publishers for All Package Repositories\"), and partnering with other organizations to fund people in these ecosystems to implement these capabilities. As a result, we've seen tremendous progress in package repository security capabilities in the past year, and a healthy roadmap for what's ahead. These new security capabilities, as well as the support framework we used to facilitate their implementation in open source ecosystems, can inform your organization's security roadmap.",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 828,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241112"
}

0.05s - 6.05s | This text was transcribed using whisper model: large-v2

 Securing all of open source software is probably not a great topic for a 15-minute lightning talk.
6.05s - 9.05s |  So we're going to scale the problem down a little bit.
9.05s - 14.05s |  We're going to talk about two specific security capabilities that are up and coming in open source software.
14.05s - 17.05s |  We're going to talk about how we're spreading these to different ecosystems.
17.05s - 22.52s |  And we're going to have a few lessons learned for your security teams.
22.52s - 28.52s |  Okay, so even though I work at GitHub, a lot of this work took place in the Open Source Security Foundation,
28.52s - 34.52s |  the Open SSF, specifically in a group called the Securing Software Repositories Working Group.
34.52s - 36.52s |  It's a bit of a mouthful.
36.52s - 43.52s |  The terminology isn't great, but by package repositories, we're referring to open source programming language ecosystems.
43.52s - 47.52s |  Things like NPM, PyPI, and NuGet.
47.52s - 53.52s |  When we're talking about these ecosystems, they're incredibly juicy targets for attackers.
53.52s - 58.52s |  There's hundreds of millions of downloads happening across them every day.
58.52s - 65.52s |  And so bad actors often focus on them as a way to easily distribute malware very broadly and very quickly.
65.52s - 70.52s |  There's a few challenges our working group has, which folks working on open source might be familiar with.
70.52s - 74.52s |  We don't have any budget, so we'll help you fill out funding applications.
74.52s - 83.52s |  But a lot of these teams are looking for six-figure grants so that they can hire someone for a year or two to build out security capabilities.
83.52s - 88.52s |  We also don't have any authority over these projects.
88.52s - 90.52s |  Participation is voluntary.
90.52s - 92.52s |  It's open source, so everyone has their own governance.
92.52s - 94.52s |  That's one of the strengths of open source.
94.52s - 99.52s |  But we're there to sort of provide recommendations and help make connections between these ecosystems.
99.52s - 112.52s |  And as far as I'm aware, there isn't really a roadmap for how to get these critical Internet services together to share lessons learned, tips and tricks, things that are working, things that are not, and help learn from each other.
112.52s - 115.52s |  So that's what we set out to do.
115.52s - 123.52s |  This work was really inspired by about a year and a half ago when PyPI implemented a new capability called Trusted Publishing.
123.52s - 126.52s |  We'll talk about that capability in detail in a second.
126.52s - 129.52s |  But what happened is that they launched this new feature.
129.52s - 133.52s |  It was incredibly successful with its users.
133.52s - 138.52s |  There's now tens of thousands of Python packages that make use of Trusted Publishing.
138.52s - 142.52s |  RubyGems saw this and said, hey, we want that in our ecosystem too.
142.52s - 160.52s |  So through conversations in our working group and then also conversations outside of our working group, they were able to take the lessons learned from PyPI's implementation, implement in RubyGems, and suddenly we have this successful transmission of a new security capability in these critical systems between these two ecosystems.
160.52s - 164.52s |  So we thought, okay, how do we encourage more of that to happen?
164.52s - 168.52s |  So let's talk a little bit about what Trusted Publishing is first.
168.52s - 174.52s |  Imagine you're building an open source package in an automated system and you want to publish it to the package repository when you're done.
174.52s - 178.52s |  A few years ago, you would probably do this with a password.
178.52s - 180.52s |  That's not great, of course.
180.52s - 187.52s |  More recently, you might use an API key, which hopefully you could scope down to publishing or scope down to specific projects.
187.52s - 192.52s |  But in either case, you have this long-lived secret in your build pipeline that you have to maintain.
192.52s - 194.52s |  You should really be rotating it frequently.
194.52s - 197.52s |  Maybe someone leaves the project, that sort of thing.
197.52s - 206.52s |  This is a pain if you're maintaining one open source project and a real operational concern if you're maintaining dozens or hundreds like some open source foundations are.
206.52s - 215.52s |  So what happened more recently is that these Cloud CI CD systems now provide workload identity via an OIDC token.
215.52s - 219.52s |  So I think we're all very familiar with user-based OIDC flows.
219.52s - 223.52s |  You go to a website and you click sign in with Google, Facebook, GitHub, whatever.
223.52s - 228.52s |  They give you back a signed token that has your identity in it from the identity provider.
228.52s - 230.52s |  And you give that to the website you're trying to log into.
230.52s - 233.52s |  And they say, OK, Google says you're this person.
233.52s - 234.52s |  I trust them.
234.52s - 238.52s |  And you don't have to create this password with that specific account.
238.52s - 246.52s |  So what these Cloud CI CD systems did is that they have an OIDC token, except instead of representing a user, it represents a workload.
246.52s - 248.52s |  This example is from GitHub Actions.
248.52s - 257.52s |  But we've worked with GitLab Pipelines as well as Google Cloud Build to make sure that this is a capability across all the different build systems that people are using.
257.52s - 259.52s |  So here we have at the top the issuer.
259.52s - 262.52s |  Again, this example is from GitHub Actions.
262.52s - 273.52s |  We have specific information about the repository that this build came from, the environment, the branch name, the Git Shah, and even the build instructions.
273.52s - 280.52s |  So you can take all that information and you can set up what we call a trust relationship with the package repository.
280.52s - 295.52s |  So you can say any build that's coming from GitHub and this repository, and if you're additionally paranoid or if you want additional security guarantees, maybe for a larger project, you can scope that additionally to the specific build instructions or the specific environments.
295.52s - 305.52s |  Then when your build is done, you take your finished build and the OIDC token and send it to the package repository, and it goes through and it checks it against the criteria that you specified ahead of time.
305.52s - 309.52s |  So it's really important if you do this that you don't just stop at the issuer, right?
309.52s - 316.52s |  That means that anyone who's using GitHub Actions, GitLab Pipelines would be able to authenticate to publish.
317.52s - 320.52s |  You need to at least also specify the repository.
320.52s - 331.63s |  And again, if it's a project that many people contribute to, you probably want to go further and scope it to a production environment or a main branch or something like that.
331.63s - 340.63s |  What we did is we took the implementation that PyPI and RubyGems did, and we wrote up what we call a trusted publishing for all package repositories.
340.63s - 352.63s |  You can find it along with all of the material the working group publishes at repos.openssf.org, and it's an implementation guidance for this specific security capability.
352.63s - 359.63s |  We cover the design decisions these ecosystems made, pitfalls to avoid, threat models.
359.63s - 369.63s |  We want to take their experience and generalize it so that other people can take this document and then more quickly deploy this security capability in their ecosystem.
370.63s - 371.63s |  And that's exactly what happened.
371.63s - 378.63s |  So truth be told, both NuGet and Rustgrades were already thinking about trusted publishing before we published this guidance.
378.63s - 385.63s |  However, in their ecosystems, when they wrote their RFC to pitch this idea to the community, they were able to cite this document.
385.63s - 397.63s |  And community members who weren't familiar with the specific security capability were able to much more quickly come up to speed on the implementation details, the tradeoffs, what parts their ecosystem were adopting, what parts they were leaving.
397.63s - 405.63s |  And it helped facilitate this capability going through the RFC process in these different ecosystems.
405.63s - 407.63s |  You might notice this table looks a little weird.
407.63s - 408.63s |  There's some empty rows.
408.63s - 411.63s |  There's a giant gap in the middle.
411.63s - 415.63s |  I don't mean to make it sound like the OpenSSF had this figured out to begin with.
415.63s - 418.63s |  We very much backed into this model.
418.63s - 429.63s |  And so even before we published specific implementation guidance, there's another document we published, Principles for Package Repository Security, which you can also find on repos.openssf.org.
429.63s - 446.63s |  So here, instead of focusing on a specific security capability, we created a maturity model to help inform security roadmaps or to help package repositories assess where they were at and then apply for funding to fill in the gaps.
446.63s - 448.63s |  It has four levels of maturity.
448.63s - 460.63s |  We wanted to make sure that people weren't always chasing the shiny new security capability but had a realistic way of assessing where they were and what next capability made the most sense.
460.63s - 462.63s |  We're looking for high impact, low effort.
462.63s - 464.63s |  We want to get the most bang for our buck.
464.63s - 475.63s |  And then we covered a number of different areas, including authentication, authorization, the CLI tooling that interacts with the package repository, and then a general capabilities grab bag.
475.63s - 483.63s |  And we co-authored and co-published this with the Cybersecurity and Infrastructure Security Administration, US CISA.
483.63s - 490.63s |  They were tremendous partners, not only for the technical expertise that they brought to bear, but also CISA has a really great megaphone.
490.63s - 505.63s |  And so when we published this document, we were able to reach the right people and get the attention around it to help different ecosystems develop these maturity models and figure out what projects they wanted to work on next to better secure these crucial parts of open source security.
505.63s - 509.19s |  Okay.
509.19s - 511.19s |  Truth be told, we didn't actually start there either.
511.19s - 526.19s |  We didn't take our own advice, and we started with a much more complicated security capability called build provenance, which we implemented in the NPM ecosystem and then wrote up implementation guidance in build provenance for all package repositories.
526.19s - 531.19s |  This was sort of the first thing that the working group did together.
531.19s - 542.19s |  It's a little bit complicated, but essentially what we want to do is we want to sign our build, and we want to contain supply chain metadata in that signature.
542.19s - 550.19s |  We want to know what repository, what build instructions were used, and what specific get shot the build came from.
550.19s - 558.19s |  So those properties might sound familiar, and we go back to our friends, the OIDC workload identity that comes from our cloud CICD platform.
558.19s - 561.19s |  All the information is available in that token.
561.19s - 564.19s |  The flow is a little bit more complicated.
564.19s - 568.19s |  We also are making use of another open SSF project called SIGstore.
568.19s - 583.19s |  This is a public good code signing service that the open SSF runs, and you can use the OIDC token to get back a X.509 signing certificate with those build properties baked into it.
583.19s - 587.19s |  So you do your build in the cloud CICD system.
587.19s - 590.19s |  You generate a ephemeral public-private key pair.
590.19s - 597.19s |  You sign your build with a private key and then throw it away, which everyone loves because then they don't have to store it securely.
597.19s - 612.19s |  You take the public key, the OIDC token, and you send that to Fulsio and get back your X.509 signing certificate, and then you send the build and the X.509 signing certificate to the package repository, in this case NPM, for it to store and then serve out.
612.19s - 620.50s |  Here's what the signing certificate looks like, specifically the bottom half of it with the X.509 extensions.
621.50s - 629.50s |  This is where we store the supply chain metadata, and it literally just copies them over from the OIDC token, which is signed by the build platform.
629.50s - 643.50s |  So we're creating these non-falsifiable links in our supply chain, which is hugely valuable that you can take some package that you get from a package repository and say, not only was this not tampered with, but I know exactly the source code and build instructions that produced this package.
643.50s - 646.50s |  There's a few SIGstore-specific OIDs.
646.50s - 648.50s |  That's the 136.
648.50s - 654.50s |  I guess they have the 57264 space, and that links back to the issuer.
654.50s - 663.50s |  Again, the source code, the get SHA, the branch, all of the supply chain metadata that we want.
663.50s - 675.50s |  So I know this diagram is starting to get a little bit complicated, but after we published that guidance, both Homebrew and PyPI are now working on implementing these capabilities in their ecosystem.
675.50s - 684.50s |  Homebrew in particular has launched a public beta, so any package that you download from Homebrew, you can request this signed information from it.
684.50s - 694.50s |  You can verify the package hasn't been tampered with, and you can see the exact source code and build instructions Homebrew used to produce that package, which is an incredibly valuable security capability to have.
694.50s - 705.55s |  Again, we've been talking about open source, but I think a lot of these lessons learned apply as well to our day jobs at the various companies we work for.
705.55s - 712.55s |  It's not enough to go around to engineering teams that you work with and say, hey, you implement this security capability, you implement that security capability.
713.55s - 717.55s |  We want to figure out how to build partnerships and get everyone on the same page.
717.55s - 728.55s |  We found a hugely valuable way to do that is to provide this implementation guidance written up in a living document that folks can post questions, you can iterate on, and improve over time.
728.55s - 740.55s |  And that way, instead of having 10 or 20 or 40 introductory conversations with all these engineering teams you want to implement this guidance, you can take the document and say, here, please read this, let us know what you think.
740.55s - 749.55s |  And by the time you've gone to the third or fourth team, you've really honed that guidance and you're really setting the team up for success in delivering that capability.
749.55s - 754.55s |  Likewise, you don't want to just have a collection of individual capability guidance.
754.55s - 770.55s |  You also want to work with people to develop a roadmap and give them an idea of where they should start, how to measure their progress to date, and make sure that we aren't spending a bunch of time implementing these nice-to-have security capabilities when we're not doing the basics first.
770.55s - 774.55s |  And then last but not least, this is especially true in open source, but we have to be patient.
774.55s - 775.55s |  This stuff takes time.
775.55s - 779.55s |  All of these projects took place over about a year and a half.
779.55s - 785.55s |  It's not all of the security capabilities that we're tracking in the working group, but these are some of the ones that have been most successful.
785.55s - 797.55s |  And I think if you continually engage with these different teams, check in every quarter, say, we have the roadmap, we have the specific guidance, what can we do now in three months' time, in six months' time?
797.55s - 799.55s |  They really appreciate that consistent engagement.
799.55s - 802.55s |  You're not constantly coming to them with a new ask.
802.55s - 812.55s |  And I found that has really allowed more security capabilities to be delivered both internally but also in this open source setting.
812.55s - 813.55s |  So thanks, everyone.
813.55s - 816.55s |  I'll be in the villages later if you have questions.
816.55s - 822.55s |  And one last time, all of the guidance that the working group publishes is on repos.openssf.org.