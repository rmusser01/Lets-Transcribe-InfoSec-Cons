{
  "webpage_url": "https://www.youtube.com/watch?v=OyTQB9oXe3s",
  "title": "BlueHat 2024: S05: Echoes of Intrusion: Demystifying MS Graph API Attacks",
  "description": "BlueHat 2024: Session 05: Echoes of Intrusion: Demystifying MS Graph API Attacks Presented by Miriam Wiesner from Microsoft\n\nAbstract: With the Microsoft Graph API, and the right permissions, attackers can control everything in Microsoft 365. But it is still hard to detect and prevent Graph API related attacks. In my research I investigated and simulated MS Graph related attacks; parts of this work I will share in this presentation.\n\nTake a peek behind the curtains of how adversaries (ab)use MS Graph API to breach corporate defenses, implant persistence mechanisms, and exfiltrate sensitive data. Through a live demonstration, we will simulate the execution of potential attack scenarios, providing invaluable insights into the adversary's playbook.\n\nExplore attack scenarios from the field and learn how to detect and prevent against such an attack. Are you ready to dive into real world threat actors' tactics?",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 1616,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241108"
}

0.00s - 4.02s | This text was transcribed using whisper model: large-v2

 The digital world can be a dangerous place.
4.02s - 9.68s |  Bad actors are not only trying to steal your users' credentials
9.68s - 14.56s |  and trying to make them reveal sensitive information.
14.56s - 16.90s |  They are also abusing
16.90s - 22.28s |  legitimate application and tools like PowerShell or Microsoft Graph.
22.28s - 25.80s |  In this presentation, we are looking at part of
25.80s - 29.60s |  my Microsoft Graph-based research and shine
29.60s - 32.76s |  a light on what companies can do to prevent
32.76s - 37.58s |  themselves from attacks like this.
37.58s - 39.88s |  I'm Miriam, and I'm
39.88s - 44.16s |  a Security Research Program Manager at Microsoft.
44.16s - 47.32s |  You can find the most important scripts and
47.32s - 51.64s |  resources from this talk in my GitHub repository.
51.64s - 54.16s |  I'm the author of
54.16s - 58.36s |  a PowerShell security book and while I'm quite decent with PowerShell,
58.36s - 61.36s |  I'm a complete beginner with Microsoft Graph.
61.36s - 67.40s |  So I just used it for my research and for this presentation.
67.40s - 72.52s |  We have four parts today.
72.52s - 74.92s |  So we are first looking into the basics,
74.92s - 79.86s |  then we are looking into the theory of the attack,
79.86s - 83.16s |  then we get our hands dirty and dive into the demo,
83.16s - 84.48s |  and last but not least,
84.52s - 90.40s |  we look at what customers can do to protect themselves.
90.40s - 93.44s |  What is Microsoft Graph?
93.44s - 99.00s |  Microsoft Graph is an interface to query
99.00s - 104.12s |  everything and to control everything within Microsoft 365.
104.12s - 106.40s |  So with the right permissions,
106.40s - 108.52s |  it is quite powerful.
108.52s - 111.42s |  If you are new to Microsoft Graph,
111.42s - 113.84s |  like I was when I started this research,
113.84s - 116.64s |  I found Graph Explorer quite helpful.
116.64s - 119.40s |  So if you are not familiar with it, give it a try.
119.40s - 127.88s |  So what do we need to query the Graph API?
127.88s - 130.96s |  First of all, we need to authenticate.
130.96s - 133.56s |  For that, we need an access token.
133.56s - 139.24s |  We are not diving too far into authentication in this session.
139.24s - 142.56s |  So I will use Cloud Katana,
142.56s - 146.40s |  which was written by amazing Roberto Rodriguez,
146.40s - 150.28s |  to do this job in my demo.
150.28s - 156.44s |  Next, we need to know what we want to access,
156.44s - 163.20s |  and we also need to have the permission to do so.
163.20s - 164.90s |  Last but not least,
164.90s - 169.48s |  we need a way, a method to query Microsoft Graph.
169.48s - 173.80s |  While there are a lot of amazing tools out there to do that,
173.80s - 178.04s |  we will use PowerShell Invoke REST method.
178.04s - 183.36s |  With this, we need three mandatory parameters.
183.36s - 185.40s |  First of all, the URI.
185.40s - 188.28s |  So what are we trying to access?
188.28s - 191.60s |  Second, the header.
191.60s - 194.52s |  Basically, with the access token,
194.52s - 199.00s |  we are specifying that we are allowed to access it,
199.00s - 201.56s |  and the HTTP method.
201.56s - 206.28s |  In this talk, we are only looking at POST and GET.
206.28s - 209.68s |  The body is optional.
209.68s - 213.04s |  So if you have any special requirements,
213.04s - 216.56s |  any special parameters that you want to supply,
216.56s - 220.12s |  you can supply them using the body.
220.12s - 223.64s |  Now, let's look at an example.
223.64s - 225.36s |  Let's say I want to change
225.36s - 228.84s |  my own password using the Graph API.
230.22s - 236.38s |  First of all, let's specify the URI to do so.
236.38s - 241.81s |  Then, we say we want to post the information.
241.81s - 245.29s |  We need to supply the access token and
245.29s - 249.77s |  say that the content type is JSON.
249.77s - 251.73s |  Last but not least,
251.73s - 254.69s |  because to change my own password,
254.69s - 255.89s |  I cannot just say, okay,
255.89s - 257.21s |  I want to change my password.
257.21s - 258.81s |  Now, guess my password.
258.81s - 260.53s |  I also need to supply
260.53s - 262.57s |  my current password and
262.57s - 265.33s |  the password that I want to change it to.
265.33s - 270.05s |  Now, that I supply this information
270.05s - 273.29s |  and submit it via invokeRest method,
273.29s - 274.69s |  my password is changed.
274.69s - 276.97s |  Bam, yay, we did it.
276.97s - 283.41s |  So what could one potential attack
283.41s - 287.13s |  look like with using Microsoft Graph?
287.13s - 289.17s |  First of all, the attacker
289.17s - 292.65s |  wants to access the environment somehow.
292.65s - 296.41s |  So we are doing this in our demo via password spring.
296.41s - 301.75s |  Then, the next step is usually the reconnaissance.
301.75s - 303.31s |  So what is there?
303.31s - 306.15s |  What can I as an attacker abuse?
306.15s - 315.27s |  If I, as the attacker,
315.27s - 318.55s |  have gained control over one account,
318.55s - 320.83s |  usually that is not enough.
320.83s - 323.15s |  I want to escalate my privileges.
323.15s - 327.19s |  I want to get more login details,
327.19s - 331.71s |  more account that have higher privileges to fulfill my goal.
331.83s - 334.79s |  I also don't want to leave it like that,
334.79s - 336.39s |  because I don't want to be just
336.39s - 338.51s |  simply thrown out of the environment,
338.51s - 341.31s |  so I want to establish persistence.
341.63s - 344.63s |  Last but not least, as an attacker,
344.63s - 346.47s |  I have a certain goal,
346.47s - 347.75s |  and in this case,
347.75s - 349.71s |  I want to extract e-mails.
349.71s - 356.71s |  Now, let's look at the specific demo.
356.71s - 358.07s |  We have our attacker,
358.07s - 359.59s |  let's call her Eve,
359.59s - 364.35s |  that is performing the password spring attack against the Cloud.
364.35s - 367.79s |  Eve is, while doing that,
367.79s - 371.43s |  discovering an account, Miriam victim,
371.43s - 375.67s |  which seems to have a very bad password.
375.67s - 381.19s |  So she can take that account and that password to log in,
381.19s - 385.55s |  and to discover more accounts,
385.55s - 387.67s |  more service principles,
387.67s - 393.55s |  and what we also have in this company is
393.55s - 399.67s |  one thing that is very nice for our attacker Eve,
399.67s - 401.55s |  because in this company,
401.55s - 406.31s |  people are assigning the owner properties
406.31s - 410.15s |  of an app to the owner of the resource.
410.15s - 415.91s |  So the person who is responsible for that app is assigned the owner.
415.91s - 420.63s |  Well, sounds good, doesn't it?
420.63s - 423.39s |  Well, basically for the attacker it does,
423.39s - 425.75s |  because if you have the owner attribute,
425.75s - 427.51s |  that also means that you have
427.51s - 430.43s |  complete control over the application,
430.43s - 435.63s |  which also enables you to add credentials to
435.63s - 438.23s |  the application and to log in
438.23s - 441.71s |  to the application as a service principle.
441.71s - 451.83s |  A service principle is some kind of a service account for an application,
451.83s - 457.03s |  which allows you to just perform things in the name of the application.
457.03s - 465.17s |  This application of which Miriam victim is the owner,
465.17s - 471.85s |  has the application read, write, all permission.
471.85s - 476.69s |  This permission does not allow only
476.69s - 481.81s |  the application to change other applications.
481.81s - 486.41s |  This also enables this application to add
486.41s - 490.45s |  credentials to the next application that Eve
490.45s - 495.89s |  found in the discovery stage that has mail read permissions.
495.89s - 498.45s |  These mail read permissions,
498.61s - 503.13s |  once Eve again adds credentials to that app and
503.13s - 507.33s |  logs in as the next service principle of the mail read app,
507.33s - 512.01s |  this enables her to extract
512.01s - 515.29s |  all the e-mails in the entire environment.
515.29s - 520.93s |  Yay, goal achieved.
520.93s - 523.89s |  Demo time. Let's get our hands dirty.
523.89s - 530.33s |  I've separated all stages into regions so that it's easier to read.
530.33s - 537.73s |  I'm using Cloud Katana for getting the device code.
537.73s - 540.53s |  These are some helper functions that we are looking here.
540.53s - 544.13s |  We are executing them to run them later.
544.13s - 547.41s |  We also have helper function to retrieve
547.41s - 553.82s |  the access token also using Cloud Katana.
553.98s - 559.54s |  The next helper function is just there to run all of
559.54s - 563.74s |  our Microsoft Graph queries and requests,
563.74s - 567.10s |  so that I don't have to type everything over and over again.
567.10s - 574.01s |  I use a function.
574.01s - 576.21s |  Last but not least,
576.21s - 580.97s |  we have another function called addCredentialToApp.
580.97s - 585.21s |  We are not looking into this function right now.
585.21s - 586.77s |  We are just executing it.
586.77s - 597.56s |  We will look into it in stage 3. Now, let's start.
603.78s - 607.22s |  We start directly by executing
607.22s - 610.34s |  the password spring because that takes some time.
610.34s - 614.38s |  We have a script for that and we have a password list,
614.38s - 615.78s |  we have a user list,
615.78s - 619.50s |  and we have configured a time out of 30 seconds.
619.50s - 622.02s |  That means we wait 30 seconds
622.02s - 626.38s |  until a new password is sprayed against multiple accounts.
626.66s - 631.06s |  In the invoke password spring script,
631.18s - 636.10s |  we have a custom function here,
636.10s - 640.90s |  helper function to add data to a PowerShell custom object,
640.90s - 645.90s |  which we will later use to read the information from.
645.90s - 650.14s |  We have the part where we define
650.14s - 652.78s |  the URL against that we will spray
652.78s - 655.22s |  passwords and we iterate through
655.22s - 662.60s |  all the passwords and accounts that we defined in the list.
662.64s - 665.48s |  There might be the case that
665.48s - 668.40s |  the password spraying was successful for one account.
668.40s - 671.76s |  That means we get a status code of 200 returned.
671.76s - 674.40s |  That means bingo for the attacker,
674.40s - 678.48s |  password and username are matching.
678.48s - 681.72s |  But this is also the case
681.72s - 686.24s |  that there is another status code returned and an error.
686.24s - 689.08s |  This could also, you can see for example,
689.08s - 690.56s |  that the password is invalid,
690.56s - 692.32s |  the account is not working,
692.32s - 695.84s |  but in some cases,
695.84s - 700.08s |  you get additional information like MFA is in use,
700.08s - 702.68s |  conditional access is in use,
702.68s - 707.00s |  or that the account is locked,
707.00s - 714.24s |  and this information is very helpful for a potential attacker.
714.24s - 717.20s |  Because like that, that means the account exists,
717.20s - 718.68s |  the password exists,
718.72s - 723.00s |  and they just have to pass another barrier.
723.00s - 725.40s |  At the end of the script,
725.40s - 732.04s |  we have another part which prompts the user,
732.04s - 737.84s |  if there are more than 10 accounts that are locked out.
737.84s - 740.40s |  Because when you spray passwords and if there are
740.40s - 744.08s |  some security barriers in place that might happen,
744.08s - 747.76s |  that many accounts are locked and so you get prompted,
747.76s - 750.64s |  do you want to continue the password spray or not?
750.64s - 760.64s |  So with that, let's look at what the password spray returned,
760.64s - 764.00s |  and you see the custom object filled with all the information,
764.00s - 765.08s |  with the error information,
765.08s - 766.68s |  with the account details,
766.68s - 772.72s |  and if the password is a valid password or not.
772.72s - 775.28s |  So let's filter, and we see
775.48s - 779.60s |  Miriam victim account has a valid password,
779.60s - 787.96s |  which we can then use.
787.96s - 793.24s |  To continue, we now need to log in as Miriam victim,
793.24s - 803.03s |  and for that, we of course need the password and the name.
803.03s - 808.35s |  We use the get device code,
808.35s - 814.39s |  supply the device code,
814.43s - 819.91s |  we define what account name we want to log in,
819.91s - 825.35s |  and we get the password that we found out to be valid.
825.35s - 827.19s |  We enter the password, and boom,
827.19s - 831.59s |  now we get just prompted for a sign-in request for MFA,
831.59s - 833.43s |  because MFA is in place,
833.43s - 836.79s |  and basically I was not allowed to disable MFA
836.79s - 839.91s |  in my demo environment.
839.91s - 842.35s |  This is why I'm just disabling,
842.35s - 847.55s |  or allowing the MFA request here,
847.55s - 850.51s |  and in the original research,
850.51s - 853.27s |  in most cases, there was no MFA in place.
853.27s - 854.31s |  That means by now,
854.31s - 859.31s |  the attacker would already have been successful.
859.31s - 862.79s |  Since this presentation is about Microsoft Graph,
862.79s - 866.67s |  yes, I know it's possible to bypass MFA,
866.67s - 868.35s |  but we are not looking into that,
868.35s - 878.63s |  so I'm just saying yes, I want to sign in,
878.63s - 883.63s |  and we want to sign in to use Azure PowerShell,
883.63s - 887.11s |  and here we go.
887.11s - 893.27s |  We have now another script that defenders can also use,
893.27s - 895.99s |  and this script allows us,
895.99s - 897.91s |  or first, we see the access token,
897.91s - 907.41s |  so we get the access token to run our script,
907.41s - 910.05s |  and what we are doing here,
910.05s - 914.01s |  we want to get all the service principle permissions.
914.01s - 916.13s |  We have another helper function, again,
916.13s - 920.41s |  to populate the PS custom object to return.
920.41s - 923.01s |  We are querying Graph
923.01s - 927.81s |  to retrieve all service principle permissions,
927.81s - 931.77s |  and we save those service principle permissions
931.77s - 936.09s |  in our variable response,
936.09s - 939.21s |  and we reuse that,
939.21s - 942.97s |  because there are three kinds of permissions
942.97s - 946.65s |  against which we want to filter.
946.65s - 952.37s |  All those three permissions are configured differently
952.37s - 953.69s |  and retrieved differently.
953.69s - 955.65s |  This is why I'm specifying that,
955.65s - 958.13s |  so we have the application permission
958.13s - 962.25s |  that is just application plain access.
962.25s - 965.85s |  Only the application is accessing the resource.
965.85s - 968.21s |  We have delegated permissions.
968.21s - 972.69s |  That means that we need a user that is signed in
972.69s - 978.21s |  to allow the application to access resources,
978.21s - 983.61s |  and we have resource-specific permissions,
983.61s - 988.13s |  which is a permission specific to a resource.
988.13s - 994.81s |  So, let's say we want to read alerts in Microsoft 365 Defender.
994.81s - 998.17s |  In that case, we need the security alert read all.
998.17s - 1001.01s |  Same thing for incidents.
1001.01s - 1010.66s |  Then we need the security incident read all,
1010.66s - 1013.46s |  and we continue in that script.
1013.46s - 1018.42s |  Basically, we are, yeah,
1018.42s - 1022.18s |  also querying all those permissions that we just saw
1022.18s - 1026.74s |  and returning everything to our custom object
1026.74s - 1032.06s |  that we return here,
1032.06s - 1035.10s |  and now we want to see all applications,
1035.10s - 1038.22s |  all service principles that have mail read permissions
1038.22s - 1040.46s |  and applications read write all,
1040.46s - 1045.46s |  all with a MW in their name,
1045.46s - 1048.90s |  and we see we have the mail read app
1048.90s - 1052.74s |  and the MW victim SP app,
1052.74s - 1056.46s |  and we can use them later,
1056.46s - 1061.14s |  and we also, as a step for our last stage,
1061.14s - 1062.86s |  we want to extract emails,
1062.86s - 1068.30s |  and this is why we are now getting all UPNs,
1068.30s - 1072.58s |  all email addresses for which we later want to extract emails.
1072.58s - 1078.38s |  We find here for the domain peanut records
1078.38s - 1081.54s |  with an enabled mail attribute,
1081.54s - 1083.30s |  we find Clementine Brown,
1083.30s - 1099.78s |  and we save that email address in all UPNs.
1099.78s - 1104.62s |  This is the time when we use the add credential to app function,
1104.62s - 1107.94s |  and we specify now our app ID and the tenant
1107.94s - 1111.30s |  where we want to act,
1111.30s - 1114.06s |  and the add credential to app
1114.06s - 1118.26s |  is basically a function that helps you
1118.26s - 1121.90s |  to add a credential to the app.
1121.90s - 1126.18s |  Let us look into it.
1126.18s - 1128.06s |  Here we go, and, of course,
1128.06s - 1130.46s |  we also say we supply additional information.
1130.46s - 1133.30s |  We say, oh, this is a super important password.
1133.30s - 1135.66s |  Dear admin, do not delete the password
1135.66s - 1138.86s |  because it's important for us as an attacker,
1138.86s - 1142.66s |  and we get the secret returned,
1142.66s - 1145.66s |  which we then return by the function
1145.66s - 1148.50s |  because we later want to use it
1148.50s - 1159.21s |  to get our access token for the application.
1159.21s - 1161.13s |  Now we get some additional information
1161.13s - 1165.61s |  because we also need the app ID to retrieve the access token,
1165.61s - 1177.64s |  and last but not least,
1177.64s - 1183.64s |  we use get MSAL token to retrieve the access token
1183.64s - 1188.12s |  for the Miriam victim SP application,
1188.12s - 1200.30s |  the one application that is able to control other applications,
1200.30s - 1211.48s |  and you see we do have the access token.
1211.48s - 1216.62s |  As a next step, now that we have an application
1216.62s - 1219.90s |  that controls all other applications,
1219.90s - 1222.18s |  we found out that there is an application
1222.18s - 1226.02s |  that has mail read permissions,
1226.02s - 1230.10s |  and this is exactly what we need to fulfill our goal,
1230.10s - 1240.77s |  so in that case, again, we perform similar steps.
1240.77s - 1244.33s |  We define the object ID.
1244.33s - 1249.02s |  We add a credential to the app.
1249.02s - 1252.38s |  We get more information because we need the app ID,
1252.38s - 1267.33s |  and we retrieve the access token,
1267.33s - 1269.57s |  and once we have the access token,
1269.57s - 1272.37s |  we are set up for the final stage,
1272.37s - 1278.80s |  for the stage that we did all the work to get here,
1278.80s - 1285.03s |  the extraction, and this is a simple step.
1285.03s - 1286.87s |  If you remember, the UPN,
1286.87s - 1291.39s |  the all UPN variable that we filled before,
1291.39s - 1299.27s |  and we just run a for each and query the API
1299.27s - 1301.95s |  to retrieve the emails of every user
1301.95s - 1306.52s |  that is defined in the all UPN variable.
1306.52s - 1308.00s |  Goal fulfilled.
1308.00s - 1317.98s |  Our attacker was successful,
1317.98s - 1324.70s |  so what can you do to protect yourself as a company?
1324.70s - 1327.22s |  First of all, passwords.
1327.22s - 1331.70s |  If you have your users educated to select good passwords,
1331.70s - 1336.10s |  it's harder to compromise them in a password-spraying attack.
1336.10s - 1340.94s |  Also, there are barriers that you can also introduce,
1340.94s - 1342.94s |  like MFA, conditional access,
1342.94s - 1349.50s |  all the good things that we also offer to protect your accounts.
1349.50s - 1354.86s |  Do not allow legacy authentication,
1354.86s - 1358.86s |  and it's really hard to click this button here.
1358.86s - 1362.98s |  Oh, thank you so much.
1362.98s - 1365.42s |  Follow the Secure Score recommendations,
1365.42s - 1371.38s |  and if you see multiple accounts being probed,
1371.38s - 1373.10s |  also maybe from the same IP,
1373.10s - 1383.19s |  maybe that is a bit fishy and you should investigate.
1383.19s - 1384.11s |  Identities.
1384.11s - 1387.43s |  I'm preaching since years and years.
1387.43s - 1390.15s |  Protect your identities,
1390.15s - 1394.11s |  because basically all comes down to identities,
1394.11s - 1401.15s |  and if the identities that have high permissions
1401.15s - 1402.87s |  get compromised,
1402.87s - 1405.55s |  well, basically they can escalate their privileges
1405.55s - 1409.79s |  and take over the entire environment.
1409.79s - 1416.26s |  Also, protect your high-value devices.
1416.26s - 1417.94s |  When you're configuring something,
1417.94s - 1421.46s |  and the story I told earlier with the owner,
1421.46s - 1424.26s |  that's not just an idea that I had.
1424.26s - 1426.66s |  I talked with somebody, and yes,
1426.66s - 1432.02s |  they had the owner attribute configured
1432.02s - 1434.62s |  for the people that are responsible for the app,
1434.62s - 1437.22s |  and after I talked with them, they changed that.
1437.22s - 1441.58s |  But understand what you are configuring,
1441.58s - 1447.46s |  and also assess it to know that it's still in the state
1447.46s - 1451.62s |  that it should be.
1451.62s - 1457.94s |  Also, assess your key vaults and the access.
1457.94s - 1462.78s |  Same thing with code and configuration
1462.78s - 1465.02s |  when it comes to passwords.
1465.02s - 1467.14s |  Do you have passwords and plain text
1467.14s - 1469.78s |  in the configuration configured or in code?
1469.78s - 1473.62s |  Well, you should change that probably.
1473.62s - 1478.10s |  Also, review who owns which applications,
1478.10s - 1482.26s |  what high-privileged roles do you have, restrict them,
1482.26s - 1486.50s |  and also check your service principles,
1486.50s - 1489.38s |  because this is something that users
1489.38s - 1493.98s |  and companies often forget.
1493.98s - 1495.74s |  And for the next slide,
1495.74s - 1498.14s |  I want you to write down everything here.
1498.14s - 1500.62s |  You have five seconds.
1500.62s - 1502.62s |  I'm just kidding.
1502.62s - 1504.30s |  I got your back.
1504.30s - 1508.54s |  Everything is on the GitHub repository.
1508.54s - 1512.34s |  What I want to show here is that there are many,
1512.34s - 1517.58s |  many, many privileged roles that can be abused,
1517.58s - 1526.38s |  probably, if an attacker has the wrong permissions.
1526.38s - 1529.82s |  Look out if there are any credentials added
1529.82s - 1532.30s |  that you did not approve.
1532.30s - 1535.02s |  Encrypt your e-mails and your data.
1535.02s - 1539.18s |  We wouldn't have been able to extract the e-mails otherwise.
1539.18s - 1544.22s |  Monitor the alerts that your XDR is giving you,
1544.22s - 1547.78s |  and also look into the Microsoft Graph activity.
1547.78s - 1551.22s |  So, there is this table that Microsoft introduced
1551.22s - 1554.18s |  by the beginning of this year.
1554.18s - 1557.94s |  And to also audit your service principles,
1557.94s - 1561.30s |  you can use the script that you saw earlier.
1561.30s - 1566.38s |  Export the data in a CSV, import it into Excel,
1566.38s - 1573.54s |  and use a power pivot to, yeah,
1573.54s - 1576.70s |  audit and understand what is there.
1576.70s - 1581.42s |  Basically, everything that can change anything is dangerous
1581.42s - 1584.58s |  or can be dangerous in the wrong hands.
1584.58s - 1586.58s |  Everything here is also on GitHub.
1586.58s - 1589.62s |  We looked at application read-write-all and mail-read
1589.62s - 1592.82s |  in this presentation.
1592.82s - 1595.34s |  And with that, do you know what is happening
1595.34s - 1597.86s |  in your environment and what permissions adversaries
1597.86s - 1600.46s |  can potentially abuse?
1600.46s - 1602.94s |  Now, take your knowledge that you just gained
1602.94s - 1604.90s |  and take it to the next level.
1604.90s - 1609.34s |  Now, it's your turn to stay on top of potential attackers.
1609.34s - 1610.50s |  Thank you very much.
1610.70s - 1612.70s |  Thank you, Miriam.
1612.70s - 1613.70s |  Woo!
1613.70s - 1615.70s |  Good job.