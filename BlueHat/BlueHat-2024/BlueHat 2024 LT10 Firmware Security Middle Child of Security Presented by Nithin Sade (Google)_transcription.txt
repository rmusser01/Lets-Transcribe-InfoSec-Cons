{
  "webpage_url": "https://www.youtube.com/watch?v=1R4X3ST_aZg",
  "title": "BlueHat 2024: LT10: Firmware Security: Middle Child of Security Presented by Nithin Sade (Google)",
  "description": "BlueHat 2024: LT10: Firmware Security: The Middle Child of Security Presented by Nithin Sade (Google)\n\nAbstract: Firmware Security can often be de-prioritized in favor of other security focus areas. This lightening talk aims to bring attention to some of the recent firmware threats and challenges around managing firmware for enterprises. For e.g. BlackLotus, managing BIOS settings, Firmware Updates, Computrace, etc. At the end, this talk attempts to urge more standardization across OEM's to help improve Firmware Security space.",
  "channel_url": "https://www.youtube.com/channel/UCKmzq2lAhDxLy36KtvVWpaQ",
  "duration": 1071,
  "channel": "Microsoft Security Response Center (MSRC)",
  "uploader": "Microsoft Security Response Center (MSRC)",
  "upload_date": "20241112"
}

0.00s - 8.74s | This text was transcribed using whisper model: large-v2

 So I'm Nitin. I work at Google in their platform security team. And my team focuses on protecting
8.74s - 14.62s |  corp endpoints and the operating systems that run on these endpoints.
14.62s - 19.76s |  So today I'm going to give a quick talk on firmware security. I like to call it the middle
19.76s - 27.08s |  child of security. Ask your middle child why, you know, what that means, right?
27.08s - 33.78s |  So yeah, there's this assumption always that I hear that firmware vulnerabilities are really
33.78s - 40.96s |  hard to exploit, which means that you would need a sophisticated actor like a nation state
40.96s - 47.34s |  to exploit it. And that means it's less likely to happen in your organization, right?
47.34s - 52.88s |  So you kind of bench it. You put it in your backlog, patch it later, focus on something
52.88s - 59.56s |  else, low-hanging fruits, right? So hopefully by the end of this presentation, I want to
59.56s - 67.12s |  break this assumption and maybe get you to dust off some of those old, you know, bugs
67.12s - 71.72s |  that you filed against patching these vulnerabilities.
71.72s - 78.32s |  So yeah, first let's disambiguate what firmware means. You know, you keep hearing bios, firmware,
78.32s - 85.20s |  UEFI, what does it all mean? So firmware was the term that was coined in, like, 1967
85.20s - 93.92s |  in this computer magazine called DataMation, but it's essentially low-level software that
93.92s - 101.84s |  runs on low-level components and helps control these small chips, right, on your machine.
101.84s - 107.72s |  For example, your Type-C port has a power delivery controller that helps negotiate fast
107.72s - 114.12s |  charging for your laptops. Then BIOS, on the other hand, is nothing but firmware that
114.12s - 123.20s |  is on your motherboards for compute systems, right? And UEFI, on the other hand, Unified
123.20s - 131.36s |  Extensible Firmware Interface, yeah, long name. UEFI is a specification that tries to
132.08s - 139.68s |  modernize and standardize how, you know, more secure firmware is supposed to be implemented,
139.68s - 145.76s |  right? So please note that it's not an implementation itself, it's just a specification
145.76s - 154.24s |  like an RFC, right? So making a case for firmware security. So I want to highlight three things,
154.24s - 159.92s |  right? Why firmware security is important. That is because it is the first piece of code that
159.92s - 165.60s |  runs when you turn on your machine, so it's responsible for setting everything up for
165.60s - 171.28s |  your operating system, right? So if firmware is bad, it doesn't matter how many security
171.28s - 178.16s |  controls you have on your operating system, you cannot trust it. Then the supply chain complexity,
178.16s - 186.40s |  right? The amount of, like, players in firmware security supply chain is a lot, and you will
187.36s - 194.72s |  you will see the, you know, web of, like, supply chain issues over there. And immediately as a
194.72s - 200.32s |  side effect, right, because the supply chain is so complex, patching becomes not so easy.
202.96s - 210.88s |  All right, so let's talk about establishing trust, right? Chain of trust, what does it really mean?
210.88s - 218.24s |  So every piece of firmware essentially does two things. First thing it does is that it
218.24s - 226.24s |  measures or, like, sorry, first thing it does, it verifies if the next piece of firmware or next
226.24s - 231.68s |  piece of code that is running is allowed to run or not allowed to run. The second thing it does,
231.68s - 239.68s |  it computes the cryptographic hash of this next piece of code and then it stores it in a register.
239.68s - 247.04s |  That's about it. So how it verifies which piece of code is allowed to run, it uses something
247.04s - 255.68s |  called DB and DBX, which is, like, a small list of hashes and signing certificates that either
255.68s - 261.76s |  define DBs, sets what is allowed to run, and DBX is, like, a revocation list, what is not allowed
261.76s - 268.32s |  to run, right? And the measurement is at the bottom. You can see a trusted platform module,
268.32s - 274.56s |  which is just, like, a tiny chip that has registers, and you measure the hash onto it
274.56s - 279.68s |  using that formula there, which is essentially you're taking the old value that is already there
279.68s - 284.88s |  on the chip, you're computing the new hash, right, and then you're exhorting it and then you're
284.88s - 292.08s |  hashing all of it again. So let's start with what happens once you power on a machine, right?
292.96s - 297.52s |  You've got to start trust somewhere, as we all know. So the first piece of code that runs
297.52s - 302.96s |  is initializes the platform, and it's self-verified, it's self-signed. It has its own
302.96s - 309.28s |  problems. We are not going to talk about that today. So after doing that, it's going to run
309.28s - 317.84s |  and it's going to measure its hash into the TPM, right? And then it is responsible, like I said,
317.84s - 325.52s |  to verify the next piece of code that is supposed to run, and after verifying that, it's going to,
325.52s - 331.28s |  if it's allowed to run, it starts running, right? And again, your firmware execution environment,
331.28s - 335.60s |  firmware is just not one thing. It's, like, multiple components, right? So each firmware
335.60s - 341.92s |  application gets loaded, it gets verified, it gets measured into the TPM, and then it gets run.
343.28s - 347.28s |  So this is where things get interesting. So now that your firmware is set up,
348.00s - 355.92s |  it's going to pass the baton to your operating system, and basically it gives the baton to
355.92s - 363.12s |  your bootloaders, like Windows Boot Manager or Grub2, to set up the kernel and then set up the
363.12s - 369.60s |  user space, right? So it needs to measure, again, do the same thing, measure the bootloader and also
369.60s - 378.48s |  verify if it's allowed to run. And OS here, again, uses the same functionality to extend the chain
378.48s - 385.52s |  of trust almost to the end, right? So what it does is make sure that every piece of kernel code
385.52s - 392.96s |  is, again, verified, signed, and then it also measures it onto the trusted platform module.
392.96s - 400.88s |  As you can see in this example, the hash has kept changing, right? So now is where the TPM comes to
400.88s - 407.84s |  play. So if you know anything about disk encryption, you know that at the end of the boot stage,
408.80s - 416.64s |  you want to decrypt your hard disk, right? And you, a modern operating system, can seal or, like,
416.72s - 427.68s |  tie the decryption key to a value in the TPM. So the TPM won't decrypt the decryption key if the
427.68s - 434.40s |  value does not match a pre-determined value. So the value is so sensitive that anything in the
434.40s - 440.24s |  boot chain changes, the TPM value won't match. And that's when you see these BitLocker key pop-ups.
440.80s - 447.52s |  Anyways, so there you go. Then you essentially reach successful boot, right?
449.36s - 455.68s |  Important thing to note here is that the top part is what we know as secure boot, and the bottom
455.68s - 463.84s |  part is what usually is called as measured boot. And they work hand-in-hand. And another thing you
463.84s - 469.76s |  can quickly identify is that it can get cumbersome to maintain, like, all the hashes that are allowed
469.84s - 476.08s |  to run in the firmware side, right? You have multiple vendors. Everyone has to maintain
476.08s - 483.44s |  their own hash databases or, like, certificate authorities, and that's never a good thing.
483.44s - 490.72s |  So Microsoft came up with this program where they will verify the firmware for you and then sign it
490.72s - 500.00s |  with their signing key. And this certificate is in manufactured time, included in the DB by a lot
500.00s - 509.20s |  of vendors. So it's easier, right? It solves all the problems, right? We'll talk about it later.
509.20s - 517.49s |  So yeah, now let's move on to supply chain complexity. So like I mentioned, there are a
517.49s - 525.09s |  lot of different players, right? First one is original device manufacturers. These people
525.81s - 533.49s |  essentially have machinery to print PCBs, print your motherboards, assemble components for you,
533.49s - 539.09s |  right? And then you have OEMs themselves, who technically might not have the machinery to
539.09s - 545.73s |  print motherboards, but they do sell you the machines with the motherboards in them.
546.45s - 551.89s |  And you have silicon providers, you know, who come up with the CPUs, right? All the microcord
551.89s - 558.13s |  that goes into the CPUs, too. And then you have independent BIOS vendors. These are people that
558.69s - 564.53s |  specialize in firmware development. These are people that work with all of them and come up
564.53s - 571.81s |  with, like, a BIOS that probably adheres very closely to the UEFI spec. And UEFI there,
572.37s - 577.81s |  you can see in between, is a couple of subject matter experts and stakeholders that come up with
577.81s - 585.17s |  the specification, essentially. On top of all of this, you have the operating systems themselves,
585.17s - 592.13s |  the open source community, and TCG is what defines the specification for TPMs. So yeah,
592.13s - 599.89s |  there you have it. So if you were a laptop, you want to sell a laptop, right? And what happens?
600.77s - 607.89s |  How do you go about it? Probably you don't have your own PCB manufacturing facility. So what you
607.89s - 613.65s |  will do is come up with a list of specifications. I want this RAM, I want this size, and everything,
613.65s - 619.89s |  right? And then you give these specifications to an ODM, and ODM will choose the best components,
620.45s - 627.89s |  print the PCB, and then they go to IBVs, the BIOS vendors, and BIOS vendors will come up with, like,
627.97s - 636.93s |  a BIOS, a bare bones firmware for that particular family of machines, right? And they in turn work
636.93s - 642.45s |  closely with the silicon providers and even use some open source components, like image parsers,
642.45s - 651.57s |  for example, in the code base. And then they give that back to you, OEM, and you get to customize
652.37s - 658.53s |  things in the BIOS, right? You have Lenovo logo showing up, for example, right? Things like that.
658.53s - 664.66s |  And that is the end machine that you get. So now that you've seen the complexity,
665.70s - 675.14s |  let's talk about patching. I want to highlight how, because of this long dependency chain,
675.14s - 681.86s |  right, the higher up you have a vulnerability, the more impact it has, the harder it's to patch
682.10s - 688.34s |  because every person after that chain needs to verify the patch and make sure it's not breaking
688.34s - 693.62s |  things. So it's a long process. So let's go through, like, three case studies that are
694.66s - 702.50s |  slightly relevant. First one is boothole. Boothole is a vulnerability in Grub2. Grub2 is an OS
702.50s - 709.70s |  bootloader for mainly Linux distros, right? And it is a buffer overflow vulnerability that you're
709.70s - 717.86s |  able to achieve arbitrary code execution. So that's bad. And the important thing to note here
717.86s - 723.14s |  is that, remember I told you that it's hard to manage your own certificate authority? So you
723.14s - 731.30s |  go to Microsoft and Microsoft will sign the firmware for you? Well, they indirectly sign
731.30s - 736.82s |  Grub2 too. So what ended up happening is that every machine, it doesn't matter which operating
736.82s - 745.78s |  system, any machine that basically trusts this Microsoft certificate is vulnerable to this attack,
745.78s - 754.34s |  right? And as you can see there, it took about a year to really, you know, update the DBX with the
754.34s - 759.46s |  vulnerable hashes. And if you look at it today, if you look at the revocation list, it's public.
759.46s - 767.30s |  There are about 177 hashes that are either certificates or actual hashes that have
767.30s - 775.70s |  been added associated with this vulnerability into DBX. Logo fail, yes. Logo fail is fairly
775.70s - 782.66s |  recent. This is where the vulnerability was up there in the BIOS vendors, right? So
783.62s - 791.70s |  BIOS vendors include image parsers, and these image parsers themselves are like verified,
791.70s - 798.10s |  signed, right? But apparently these image parsers can take input that is not verified,
798.10s - 805.30s |  like your PNG files or bitmap files. So researchers have found that you can utilize this
805.30s - 811.70s |  untrusted code and take advantage of it to execute the vulnerabilities in the parsers,
811.70s - 819.14s |  and then so you have like a privileged execution in the firmware space, right? So again,
819.14s - 826.50s |  these vulnerabilities, because it was in the BIOS vendor, the impact was much larger, and
828.74s - 835.22s |  only a couple of OEMs finally like took the patch from the IBVs. Like BIOS vendors have ended up
835.22s - 841.06s |  patching it somewhat, and some of these patches are downstream now, but not all vendors. So it's
841.06s - 848.77s |  very likely that your machine probably is vulnerable to this. And now let's talk about
848.77s - 857.25s |  Black Lotus. Black Lotus is, I think, one of the first like commodity malware that took advantage
857.25s - 862.37s |  of like a firmware vulnerability. The vulnerability it took advantage of is called Baton Drop.
862.37s - 869.73s |  It basically tricks, it's a vulnerability in Windows Bootloader this time, firstly, and it tricks
869.73s - 875.25s |  your Windows Bootloader to forget about some of the security, secure boot policy checks for a
875.25s - 880.53s |  tiny bit. And when that happens, it's able to execute code that would potentially be blocked
880.53s - 886.85s |  and not allowed to execute. During that time, they enroll their own self-signed certificate
886.85s - 894.61s |  into the key that will basically make them persist, even after re-images probably. And
895.41s - 900.93s |  yeah, they have an executable that runs in the userland too. All it needs is some privileges
900.93s - 909.57s |  to turn off a HPCI and BitLocker, and they're good to go. And the thing to note here is that
911.01s - 918.45s |  if you look at the timeline, it was obviously MSRC talked about it in Jan
919.41s - 928.13s |  2022, and then the POC dropped around August 2022, right, by the researcher. And then Black Lotus
928.13s - 935.33s |  first was identified in VirusTotal on August 23rd. That's about 13 days. That's pretty quick.
936.45s - 944.21s |  Then, you know, further right now, Microsoft is, again, they keep, I think about 200 hashes,
944.21s - 950.21s |  they keep banning the vulnerable hashes they find in the wild for the bootloader. But the
950.21s - 954.77s |  real thing they need to do is ban the certificate that signs it, right? And it is much more
954.77s - 960.77s |  complicated this time because it is not the third-party signing certificate. It's the actual
960.77s - 967.41s |  Microsoft signing certificate. So anything, all the kernel, everything can break if it's not done
967.41s - 972.61s |  carefully. You can break your machine. So Microsoft is still doing so. It's in the process.
973.09s - 981.33s |  They're yet to announce when they'll enforce this dbx update on your machines, right? So, yeah.
982.61s - 989.81s |  So where do we go from here, right? I think we as a community should try to work towards
989.81s - 994.29s |  eliminating some of these bottlenecks. You can see that db and dbx updates are, like,
994.85s - 1000.53s |  really a big problem here. And there are new things. Like, I think people have realized that
1000.53s - 1007.17s |  this is an issue. There's secure boot advanced targeting, this new way to, like, use version
1007.17s - 1013.17s |  numbers instead of actual, like, signing certificates and hashes to, you know, set a
1013.17s - 1019.33s |  minimum version of firmware that is allowed to run, right? Microsoft has that too for Black Lotus
1019.33s - 1024.21s |  now. If you look at their documentation, they're calling it secure version number. I think it's
1024.21s - 1031.25s |  the same thing. Yeah, I'll wrap it up. And the next thing is please hold your OEMs responsible
1031.25s - 1036.77s |  for patching, right? Like logo fail. Please reach out to your OEMs and put some pressure on them so
1036.77s - 1044.45s |  they will patch downstream. All right. So this is the initial assumption. And I want to highlight
1044.45s - 1052.21s |  that, again, like, by making this assumption, you're leaving your fleet or your machine vulnerable
1052.21s - 1057.49s |  for a longer period of time than you think. And hopefully this talk will kind of motivate you.
1057.49s - 1061.41s |  The next time there's a vulnerability, maybe think about it. Think about patching
1061.41s - 1068.53s |  firmware vulnerabilities first. All right. Thank you. And yeah.