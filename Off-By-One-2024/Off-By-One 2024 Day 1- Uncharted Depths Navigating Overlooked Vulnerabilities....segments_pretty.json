{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 13.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n So, hello everybody. Here we are going to present a title named Cardcaptor Devs, the Navigational Product for an Ambitious and Seamless Optimization of Wordpress Sites."
    },
    {
      "Time_Start": 13.0,
      "Time_End": 19.0,
      "Text": " So, for starter, let me introduce myself. My name is Rafi Muhammad from Indonesia."
    },
    {
      "Time_Start": 19.0,
      "Time_End": 27.0,
      "Text": " Currently, I am a CWP Researcher at PatchTech, also known in the internet with the username of erisd."
    },
    {
      "Time_Start": 27.0,
      "Time_End": 37.0,
      "Text": " I am mostly focused on the web application security. I am also a part-time executive player for the SKSE team from Indonesia."
    },
    {
      "Time_Start": 37.0,
      "Time_End": 42.0,
      "Text": " I am also a bug bounty hunter and of course, a PhD advisor."
    },
    {
      "Time_Start": 42.0,
      "Time_End": 51.0,
      "Text": " So, for the intro, in the first place, why target CMS from the security research perspective?"
    },
    {
      "Time_Start": 51.0,
      "Time_End": 61.0,
      "Text": " So, CMS platform itself is still the first go-to solution for managing content on websites without the need for technical knowledge."
    },
    {
      "Time_Start": 61.0,
      "Time_End": 68.0,
      "Text": " So, basically CMS is mostly used by non-technical person to create a great website."
    },
    {
      "Time_Start": 68.0,
      "Time_End": 76.0,
      "Text": " In 2022, over 67% of websites will utilize CMS."
    },
    {
      "Time_Start": 77.0,
      "Time_End": 83.0,
      "Text": " Also, most of the times, CMS has a lot of features for us to check for vulnerabilities."
    },
    {
      "Time_Start": 86.0,
      "Time_End": 89.0,
      "Text": " For that, why are we targeting Wordpress?"
    },
    {
      "Time_Start": 91.0,
      "Time_End": 97.0,
      "Text": " First of all, Wordpress covers around 43% of all websites."
    },
    {
      "Time_Start": 97.0,
      "Time_End": 104.0,
      "Text": " And also, it has around 34% websites are in the top 1 billion websites."
    },
    {
      "Time_Start": 106.0,
      "Time_End": 112.0,
      "Text": " Also, Wordpress has the CMS market share of 63% in 2024."
    },
    {
      "Time_Start": 112.0,
      "Time_End": 120.0,
      "Text": " It is much higher than any other CMS platform like Joomla, DeepPul, and Edge."
    },
    {
      "Time_Start": 121.0,
      "Time_End": 123.0,
      "Text": " It's also an open source."
    },
    {
      "Time_Start": 125.0,
      "Time_End": 130.0,
      "Text": " It's pretty easy to familiarize if you are a beginner to security research."
    },
    {
      "Time_Start": 131.0,
      "Time_End": 133.0,
      "Text": " And of course, it's in the PhD."
    },
    {
      "Time_Start": 137.0,
      "Time_End": 140.0,
      "Text": " So, we will get to know Wordpress itself."
    },
    {
      "Time_Start": 142.0,
      "Time_End": 145.0,
      "Text": " So, Wordpress has three different components."
    },
    {
      "Time_Start": 145.0,
      "Time_End": 149.0,
      "Text": " The first component is the form, which is the CMS platform itself."
    },
    {
      "Time_Start": 150.0,
      "Time_End": 156.0,
      "Text": " The second one is the plugin, which is an additional piece of software that can be installed on Wordpress website."
    },
    {
      "Time_Start": 156.0,
      "Time_End": 159.0,
      "Text": " It extends the functionality and has new features."
    },
    {
      "Time_Start": 160.0,
      "Time_End": 163.0,
      "Text": " We also have the theme."
    },
    {
      "Time_Start": 163.0,
      "Time_End": 170.0,
      "Text": " It is similar to the plugin, but the main purpose of it is for the visual appearance of the website."
    },
    {
      "Time_Start": 170.0,
      "Time_End": 177.0,
      "Text": " So, when doing our research, we are mostly finding vulnerabilities in the plugin itself,"
    },
    {
      "Time_Start": 177.0,
      "Time_End": 180.0,
      "Text": " because the theme mostly doesn't have a lot of features in it."
    },
    {
      "Time_Start": 180.0,
      "Time_End": 186.0,
      "Text": " For some cases, there might be a premium theme, not a free theme,"
    },
    {
      "Time_Start": 186.0,
      "Time_End": 188.0,
      "Text": " that has an all-in-one solution."
    },
    {
      "Time_Start": 189.0,
      "Time_End": 193.0,
      "Text": " So, basically, in that kind of theme, you have a lot of features to check."
    },
    {
      "Time_Start": 198.0,
      "Time_End": 201.0,
      "Text": " So, we will get to know the Wordpress free repository itself."
    },
    {
      "Time_Start": 202.0,
      "Time_End": 207.0,
      "Text": " So, the Wordpress free repository itself has about 60K clients."
    },
    {
      "Time_Start": 208.0,
      "Time_End": 214.0,
      "Text": " It ranges from 10 active installations to 5."
    },
    {
      "Time_Start": 215.0,
      "Time_End": 219.0,
      "Text": " It also has 12K themes, hosted in the free repository."
    },
    {
      "Time_Start": 220.0,
      "Time_End": 226.0,
      "Text": " So, there is a lot of plugins and themes for us that can be used for research purposes."
    },
    {
      "Time_Start": 230.0,
      "Time_End": 233.0,
      "Text": " So, we are moving on to the scanning Wordpress port base."
    },
    {
      "Time_Start": 234.0,
      "Time_End": 239.0,
      "Text": " So, Wordpress port plugins and themes has a CPM, or track register."
    },
    {
      "Time_Start": 240.0,
      "Time_End": 245.0,
      "Text": " If we got a Word or Regex pattern to search for a potential affected plugins or themes,"
    },
    {
      "Time_Start": 246.0,
      "Time_End": 253.0,
      "Text": " let's say we want to search for this Regex in any plugins or themes in the free repository,"
    },
    {
      "Time_Start": 254.0,
      "Time_End": 256.0,
      "Text": " there is a tool called wp-directory.net."
    },
    {
      "Time_Start": 258.0,
      "Time_End": 261.0,
      "Text": " It's an example of a few of the websites."
    },
    {
      "Time_Start": 262.0,
      "Time_End": 264.0,
      "Text": " Or also, if you want to deploy it yourself,"
    },
    {
      "Time_Start": 264.0,
      "Time_End": 272.0,
      "Text": " they have also the GitHub repository for us to manually deploy the tools inside of our server."
    },
    {
      "Time_Start": 275.0,
      "Time_End": 277.0,
      "Text": " So, we move on to the research target."
    },
    {
      "Time_Start": 278.0,
      "Time_End": 283.0,
      "Text": " So, in order to do a proper research in the Wordpress environment,"
    },
    {
      "Time_Start": 284.0,
      "Time_End": 289.0,
      "Text": " we have to make the right decision on what plugins or themes that we will be researching."
    },
    {
      "Time_Start": 290.0,
      "Time_End": 291.0,
      "Text": " So, there is a graph."
    },
    {
      "Time_Start": 292.0,
      "Time_End": 298.0,
      "Text": " If the plugins or themes have a lot of popularity or has a huge active installments,"
    },
    {
      "Time_Start": 299.0,
      "Time_End": 304.0,
      "Text": " the likelihood of critical or impactful vulnerability found or exist is really minimal."
    },
    {
      "Time_Start": 306.0,
      "Time_End": 309.0,
      "Text": " That's because a huge active installation of plugins or themes,"
    },
    {
      "Time_Start": 310.0,
      "Time_End": 314.0,
      "Text": " mainly are already taken off because it's also open source."
    },
    {
      "Time_Start": 315.0,
      "Time_End": 324.0,
      "Text": " And actually, the port quality itself is generally much better than the low install of plugins."
    },
    {
      "Time_Start": 325.0,
      "Time_End": 333.0,
      "Text": " So, you have to choose here if you want to try to find a vulnerability in a high installation of plugins or themes."
    },
    {
      "Time_Start": 334.0,
      "Time_End": 339.0,
      "Text": " And you probably will not get a nice finding."
    },
    {
      "Time_Start": 340.0,
      "Time_End": 345.0,
      "Text": " But, if you want to try research on a low install of plugins,"
    },
    {
      "Time_Start": 346.0,
      "Time_End": 352.0,
      "Text": " like 10k or 50k installation count, you might get a decent finding on the plugins itself."
    },
    {
      "Time_Start": 356.0,
      "Time_End": 361.0,
      "Text": " So, my initial approach for doing research in the Wordpress environment."
    },
    {
      "Time_Start": 362.0,
      "Time_End": 368.0,
      "Text": " So, for the free version, we can fetch the plugins or themes via the installer, via the Wordpress core itself."
    },
    {
      "Time_Start": 370.0,
      "Time_End": 373.0,
      "Text": " For premium version, we can try to fetch the null version."
    },
    {
      "Time_Start": 374.0,
      "Time_End": 379.0,
      "Text": " The null version itself is just simply like the cracked version of the premium plugins or themes."
    },
    {
      "Time_Start": 380.0,
      "Time_End": 386.0,
      "Text": " So, there is a lot of websites that hosted null version of the plugins or themes."
    },
    {
      "Time_Start": 387.0,
      "Time_End": 393.0,
      "Text": " One of the example is the wayadone.com website and also the wplocker.net."
    },
    {
      "Time_Start": 394.0,
      "Time_End": 399.0,
      "Text": " Disclaimer for the null version, because it could be dangerous on the test."
    },
    {
      "Time_Start": 400.0,
      "Time_End": 407.0,
      "Text": " Because in some cases, we do find a backdoor code in the null version of the plugins or themes."
    },
    {
      "Time_Start": 409.0,
      "Time_End": 412.0,
      "Text": " Also, after that, I usually analyze the code."
    },
    {
      "Time_Start": 413.0,
      "Time_End": 418.0,
      "Text": " Additionally, using the dynamic analysis, such as xvbuffers."
    },
    {
      "Time_Start": 419.0,
      "Time_End": 424.0,
      "Text": " So, choosing priority for tools in Wordpress environment."
    },
    {
      "Time_Start": 425.0,
      "Time_End": 432.0,
      "Text": " So, basically I have a list of tools that I will type to find when I first try to research or apply the plugin."
    },
    {
      "Time_Start": 433.0,
      "Time_End": 436.0,
      "Text": " So, the first tool that I will look for is the prefetch escalation."
    },
    {
      "Time_Start": 437.0,
      "Time_End": 439.0,
      "Text": " The second one is XSS."
    },
    {
      "Time_Start": 440.0,
      "Time_End": 442.0,
      "Text": " Why XSS is the second priority for tools?"
    },
    {
      "Time_Start": 443.0,
      "Time_End": 450.0,
      "Text": " Because in Wordpress, basically because of the behavior of Wordpress, if you find a single XSS in Wordpress,"
    },
    {
      "Time_Start": 451.0,
      "Time_End": 455.0,
      "Text": " you can basically escalate your prefetch to any role in Wordpress."
    },
    {
      "Time_Start": 456.0,
      "Time_End": 461.0,
      "Text": " Because you can just simply register a new user when you start a role."
    },
    {
      "Time_Start": 462.0,
      "Time_End": 465.0,
      "Text": " The third one is SPL injection."
    },
    {
      "Time_Start": 465.0,
      "Time_End": 473.0,
      "Text": " And then the fourth, because it's PHP-based, we also look for PHP object injection or its initialization."
    },
    {
      "Time_Start": 475.0,
      "Time_End": 478.0,
      "Text": " The next one is RCE, of course."
    },
    {
      "Time_Start": 479.0,
      "Time_End": 482.0,
      "Text": " So, we have to look for LFI, because it's PHP."
    },
    {
      "Time_Start": 483.0,
      "Time_End": 488.0,
      "Text": " And then the last one that I try to look for is arbitrary file rate and duration."
    },
    {
      "Time_Start": 489.0,
      "Time_End": 494.0,
      "Text": " So, we move on to the case studies."
    },
    {
      "Time_Start": 495.0,
      "Time_End": 500.0,
      "Text": " First, we will take a look of the overlooked XSS case studies in Wordpress."
    },
    {
      "Time_Start": 501.0,
      "Time_End": 506.0,
      "Text": " So, the first example is one of the CPE that I found."
    },
    {
      "Time_Start": 507.0,
      "Time_End": 510.0,
      "Text": " It's a site-wide prefetched XSS in a free news library."
    },
    {
      "Time_Start": 511.0,
      "Time_End": 518.0,
      "Text": " So, some details about the vulnerability that it is introduced in version 1.0.8."
    },
    {
      "Time_Start": 519.0,
      "Time_End": 521.0,
      "Text": " And it is patched on version 2.5.10."
    },
    {
      "Time_Start": 522.0,
      "Time_End": 527.0,
      "Text": " The vulnerable code page itself is around 8 years and 1 month."
    },
    {
      "Time_Start": 528.0,
      "Time_End": 533.0,
      "Text": " So, this library is massively used in Wordpress plugins and themes."
    },
    {
      "Time_Start": 534.0,
      "Time_End": 542.0,
      "Text": " It is approximately installed in 1,300 free plugins and a couple of themes in the Wordpress repository."
    },
    {
      "Time_Start": 543.0,
      "Time_End": 547.0,
      "Text": " So, by combining the active installation of the plugins and themes,"
    },
    {
      "Time_Start": 548.0,
      "Time_End": 552.0,
      "Text": " the installation of the free news library is around 7 billion."
    },
    {
      "Time_Start": 554.0,
      "Time_End": 557.0,
      "Text": " So, the background story of this finding is,"
    },
    {
      "Time_Start": 557.0,
      "Time_End": 565.0,
      "Text": " initially I am looking for foams on TablePress plugins which is used in this library."
    },
    {
      "Time_Start": 566.0,
      "Time_End": 569.0,
      "Text": " Notice that it is a free news library."
    },
    {
      "Time_Start": 570.0,
      "Time_End": 575.0,
      "Text": " And because I didn't find any interesting vulnerability in the TablePress itself,"
    },
    {
      "Time_Start": 576.0,
      "Time_End": 580.0,
      "Text": " I decided to find a vulnerability in the library itself."
    },
    {
      "Time_Start": 581.0,
      "Time_End": 583.0,
      "Text": " And it turns out that it is a vulnerability to XSS."
    },
    {
      "Time_Start": 587.0,
      "Time_End": 590.0,
      "Text": " So, we jump into a little bit of the code review."
    },
    {
      "Time_Start": 591.0,
      "Time_End": 594.0,
      "Text": " Here we can see in the right side of the slides,"
    },
    {
      "Time_Start": 596.0,
      "Time_End": 599.0,
      "Text": " there will be a call to the add sticky function."
    },
    {
      "Time_Start": 600.0,
      "Time_End": 603.0,
      "Text": " So, in Wordpress, there is a feature called admin notice,"
    },
    {
      "Time_Start": 604.0,
      "Time_End": 608.0,
      "Text": " which is a feature for the developer to create a pop-up message in the admin area."
    },
    {
      "Time_Start": 609.0,
      "Time_End": 616.0,
      "Text": " So, basically in Wordpress, the admin area itself will be using an endpoint of WP-Test-Admin."
    },
    {
      "Time_Start": 617.0,
      "Time_End": 624.0,
      "Text": " So, basically the add sticky function will create a message to the admin area."
    },
    {
      "Time_Start": 625.0,
      "Time_End": 632.0,
      "Text": " In this case, we can see that it uses the fsRequestGet function with the word test plan parameter,"
    },
    {
      "Time_Start": 633.0,
      "Time_End": 636.0,
      "Text": " and also below it is using the word test email parameter."
    },
    {
      "Time_Start": 637.0,
      "Time_End": 645.0,
      "Text": " So, the fsRequestGet function itself is just like a simple function wrapper to fetch a request global variable in PHP."
    },
    {
      "Time_Start": 646.0,
      "Time_End": 650.0,
      "Text": " So, the add sticky just simply will call the add function,"
    },
    {
      "Time_Start": 651.0,
      "Time_End": 656.0,
      "Text": " and then the add function will process the message to the message object,"
    },
    {
      "Time_Start": 657.0,
      "Time_End": 663.0,
      "Text": " and the message object will be stored in the __admin__message object."
    },
    {
      "Time_Start": 666.0,
      "Time_End": 674.0,
      "Text": " Then, this admin message object actually will be called when the application tries to call the admin notice function."
    },
    {
      "Time_Start": 675.0,
      "Time_End": 682.0,
      "Text": " So, we can see that it will try to do an iteration on the __admin__message variable,"
    },
    {
      "Time_Start": 683.0,
      "Time_End": 686.0,
      "Text": " and then it will call the __admin__notice.php function,"
    },
    {
      "Time_Start": 687.0,
      "Time_End": 694.0,
      "Text": " which in the right side of the slides, it will just simply echo the message via the false variable."
    },
    {
      "Time_Start": 695.0,
      "Time_End": 704.0,
      "Text": " So, because the fsRequestGet function itself just simply achieves or receives the request global variable from the user,"
    },
    {
      "Time_Start": 705.0,
      "Time_End": 711.0,
      "Text": " and there is no escape or sanitation on the data, we can basically achieve access on these cases."
    },
    {
      "Time_Start": 713.0,
      "Time_End": 715.0,
      "Text": " So, what about the fetch from the vendor?"
    },
    {
      "Time_Start": 716.0,
      "Time_End": 723.0,
      "Text": " So, the fetch from the vendor is they are adding an additional function named fsSanitizeInput,"
    },
    {
      "Time_Start": 724.0,
      "Time_End": 726.0,
      "Text": " which will be used inside the fsRequestGet function."
    },
    {
      "Time_Start": 727.0,
      "Time_End": 734.0,
      "Text": " So, basically the fsSanitizeInput function will sanitize the input using the sanitizeTextField function."
    },
    {
      "Time_Start": 735.0,
      "Time_End": 747.0,
      "Text": " The sanitizeTextField function itself is basically just a function to strip any of the HTML type or HTML string on the input."
    },
    {
      "Time_Start": 751.0,
      "Time_End": 754.0,
      "Text": " So, we move on to the example exploit."
    },
    {
      "Time_Start": 755.0,
      "Time_End": 758.0,
      "Text": " So, in this one, we have two cases for exploit."
    },
    {
      "Time_Start": 759.0,
      "Time_End": 766.0,
      "Text": " The first one is the opt-in cases, and the second one is the skip opt-in cases."
    },
    {
      "Time_Start": 767.0,
      "Time_End": 781.0,
      "Text": " So, when you try to install a plugin in WordPress, sometimes the plugins allow the users to opt-in for newsletter message or promotion message and any kind of message."
    },
    {
      "Time_Start": 782.0,
      "Time_End": 793.0,
      "Text": " So, basically we can pop the replicant accesses based on the user's option if he is opt-in or skip the opt-in."
    },
    {
      "Time_Start": 794.0,
      "Time_End": 799.0,
      "Text": " So, for this example, we will try to demonstrate with the opt-in example."
    },
    {
      "Time_Start": 807.0,
      "Time_End": 810.0,
      "Text": " So, we are using the TableauPress plugin as an example."
    },
    {
      "Time_Start": 811.0,
      "Time_End": 813.0,
      "Text": " We are using the vulnerable version."
    },
    {
      "Time_Start": 814.0,
      "Time_End": 817.0,
      "Text": " And then, the admin tries to click the opt-in."
    },
    {
      "Time_Start": 818.0,
      "Time_End": 823.0,
      "Text": " So, it's opt-in to get email notification for security and filter updates and so on."
    },
    {
      "Time_Start": 824.0,
      "Time_End": 828.0,
      "Text": " So, admin is just alone in the plugin and accept the opt-in."
    },
    {
      "Time_Start": 829.0,
      "Time_End": 833.0,
      "Text": " He then checks his email for the confirmation link for the opt-in message."
    },
    {
      "Time_Start": 834.0,
      "Time_End": 841.0,
      "Text": " And then, after getting the link, he just simply can visit the opt-in confirmation link."
    },
    {
      "Time_Start": 844.0,
      "Time_End": 856.0,
      "Text": " After visiting the opt-in confirmation link, we can just simply put the example of HSS payload using the admin account to test for the HSS."
    },
    {
      "Time_Start": 857.0,
      "Time_End": 861.0,
      "Text": " In this case, we put the HSS on the WordPress plugin."
    },
    {
      "Time_Start": 861.0,
      "Time_End": 871.0,
      "Text": " So, the HSS is triggered using the purchase email."
    },
    {
      "Time_Start": 872.0,
      "Time_End": 876.0,
      "Text": " So, basically the HSS can also be triggered on any WP admin."
    },
    {
      "Time_Start": 877.0,
      "Time_End": 882.0,
      "Text": " So, in this case, we test it on the options.general.php file."
    },
    {
      "Time_Start": 883.0,
      "Time_End": 889.0,
      "Text": " So, basically this replicant HSS can be triggered on any WP admin or admin account."
    },
    {
      "Time_Start": 890.0,
      "Time_End": 894.0,
      "Text": " That's why we call it like a side-wipe."
    },
    {
      "Time_Start": 901.0,
      "Time_End": 906.0,
      "Text": " Next case study is the side-wipe unauthorized source HSS in MySQL cache."
    },
    {
      "Time_Start": 907.0,
      "Time_End": 910.0,
      "Text": " So, the vulnerability details is introduced in version 5."
    },
    {
      "Time_Start": 911.0,
      "Time_End": 913.0,
      "Text": " It's in version 5.7.0.1."
    },
    {
      "Time_Start": 914.0,
      "Time_End": 917.0,
      "Text": " The vulnerable code page is around 1.3 months."
    },
    {
      "Time_Start": 917.0,
      "Time_End": 921.0,
      "Text": " It has 5.7.0.1."
    },
    {
      "Time_Start": 922.0,
      "Time_End": 927.0,
      "Text": " So, the background story of this vulnerability is I initially looking for a broken access control API."
    },
    {
      "Time_Start": 928.0,
      "Time_End": 935.0,
      "Text": " And it turns out I do find a broken access control API, but it also produces an unauthorized source HSS in MySQL."
    },
    {
      "Time_Start": 936.0,
      "Time_End": 941.0,
      "Text": " So, as you can see in the example of what we view, there is a register as root function,"
    },
    {
      "Time_Start": 941.0,
      "Time_End": 946.0,
      "Text": " which will register a custom API endpoint using the cdnstatus endpoint."
    },
    {
      "Time_Start": 947.0,
      "Time_End": 951.0,
      "Text": " It will check the permission using the isfromfault function."
    },
    {
      "Time_Start": 952.0,
      "Time_End": 955.0,
      "Text": " As you can see, the isfromfault function just returns true."
    },
    {
      "Time_Start": 956.0,
      "Time_End": 960.0,
      "Text": " So, basically any unauthenticated user can visit this endpoint."
    },
    {
      "Time_Start": 961.0,
      "Time_End": 965.0,
      "Text": " So, the callback parameter is set to the cdnstatus function."
    },
    {
      "Time_Start": 966.0,
      "Time_End": 972.0,
      "Text": " If we see the cdnstatus function, it will basically call the update cdnstatus function."
    },
    {
      "Time_Start": 973.0,
      "Time_End": 983.0,
      "Text": " The function itself also just calling another function, which is the process cdnstatus, with our supplied postfirm method of result."
    },
    {
      "Time_Start": 983.0,
      "Time_End": 999.0,
      "Text": " In the process cdnstatus function also, it will call the admin display succeed function with our supplied method, which is the result variable."
    },
    {
      "Time_Start": 1000.0,
      "Time_End": 1008.0,
      "Text": " So, basically the succeed function itself will forward the message, the msg variable to the add notice."
    },
    {
      "Time_Start": 1008.0,
      "Time_End": 1012.0,
      "Text": " So, it is the same scenario as the previous."
    },
    {
      "Time_Start": 1013.0,
      "Time_End": 1016.0,
      "Text": " The vulnerability resides in the add notice feature."
    },
    {
      "Time_Start": 1017.0,
      "Time_End": 1025.0,
      "Text": " So, it will add the notice with the message, and then it will build the notice using the build underscore notice function."
    },
    {
      "Time_Start": 1026.0,
      "Time_End": 1037.0,
      "Text": " And it will basically return the html string with the message or in this case, on the askdl variable directly to the html."
    },
    {
      "Time_Start": 1042.0,
      "Time_End": 1053.0,
      "Text": " So, the patch from the vendor is, they basically first try to fix the vulnerability control by applying some kind of hash tag in the function itself."
    },
    {
      "Time_Start": 1053.0,
      "Time_End": 1057.0,
      "Text": " It is an md5 tag of a secret pocket."
    },
    {
      "Time_Start": 1058.0,
      "Time_End": 1071.0,
      "Text": " And then they also apply an shtml function to escape the input from the user."
    },
    {
      "Time_Start": 1075.0,
      "Time_End": 1080.0,
      "Text": " So, the example POC for this is a simple pull request."
    },
    {
      "Time_Start": 1080.0,
      "Time_End": 1086.0,
      "Text": " You can specify the address payload inside of the result, the main service parameter."
    },
    {
      "Time_Start": 1087.0,
      "Time_End": 1092.0,
      "Text": " Or you can also specify in the result, underscore message variable."
    },
    {
      "Time_Start": 1093.0,
      "Time_End": 1098.0,
      "Text": " So, we will test this example POC."
    },
    {
      "Time_Start": 1098.0,
      "Time_End": 1099.0,
      "Text": " POC."
    },
    {
      "Time_Start": 1101.0,
      "Time_End": 1104.0,
      "Text": " So, in this case, as a result, an admin account."
    },
    {
      "Time_Start": 1105.0,
      "Time_End": 1113.0,
      "Text": " Then, as a non-dedicated user, we just perform this pull request containing the SS payload, the cdn status, and the NPA."
    },
    {
      "Time_Start": 1116.0,
      "Time_End": 1124.0,
      "Text": " After executing the pull request, admin can request any page on the HW admin, and it will trigger in the HW admin area."
    },
    {
      "Time_Start": 1124.0,
      "Time_End": 1131.0,
      "Text": " You can also test with a different variable, which is the underscore msv parameter."
    },
    {
      "Time_Start": 1133.0,
      "Time_End": 1138.0,
      "Text": " And it will also trigger the XSS in the HW admin area."
    },
    {
      "Time_Start": 1144.0,
      "Time_End": 1148.0,
      "Text": " Okay, we are moving on to the last cases for the XSS."
    },
    {
      "Time_Start": 1148.0,
      "Time_End": 1153.0,
      "Text": " So, yeah, for the XSS, we have fun stuff like this."
    },
    {
      "Time_Start": 1158.0,
      "Time_End": 1164.0,
      "Text": " So, the details of this case is introduced in version 6.1.0."
    },
    {
      "Time_Start": 1165.0,
      "Time_End": 1167.0,
      "Text": " Next, in version 6.1.6."
    },
    {
      "Time_Start": 1168.0,
      "Time_End": 1177.0,
      "Text": " The front of the port page itself is one month, which is quite short compared to the other vulnerabilities."
    },
    {
      "Time_Start": 1178.0,
      "Time_End": 1181.0,
      "Text": " It has active installation of 2.0."
    },
    {
      "Time_Start": 1183.0,
      "Time_End": 1188.0,
      "Text": " This vulnerability is also unique because it involves a vulnerable WordPress core function."
    },
    {
      "Time_Start": 1189.0,
      "Time_End": 1196.0,
      "Text": " So, this vulnerability can only be exploited in WordPress core function prior to version 6.1.2."
    },
    {
      "Time_Start": 1199.0,
      "Time_End": 1207.0,
      "Text": " So, the background story of this vulnerability is initially I'm looking for XSS on the custom shell implementation of the trans-customer-first file itself."
    },
    {
      "Time_Start": 1208.0,
      "Time_End": 1213.0,
      "Text": " But, yeah, I found a different case of testing and write the function."
    },
    {
      "Time_Start": 1227.0,
      "Time_End": 1233.0,
      "Text": " Yeah, so if we try to look at the source code here,"
    },
    {
      "Time_Start": 1233.0,
      "Time_End": 1243.0,
      "Text": " we can see in the left side there is the current screen function, which will set this view variable to get a status parameter."
    },
    {
      "Time_Start": 1244.0,
      "Time_End": 1246.0,
      "Text": " So, it will use a scientist.txt fill function."
    },
    {
      "Time_Start": 1247.0,
      "Time_End": 1255.0,
      "Text": " As you are aware from the previous example, the scientist.txt fill function will try to strip any HTML tags from the input."
    },
    {
      "Time_Start": 1256.0,
      "Time_End": 1262.0,
      "Text": " But, it will not strip or escape the string like double quotes or single quotes."
    },
    {
      "Time_Start": 1263.0,
      "Time_End": 1277.0,
      "Text": " So, in this case, if we file sanitization using this function, we can still receive XSS if the string is placed inside of single quotes on the HTML attributes."
    },
    {
      "Time_Start": 1278.0,
      "Time_End": 1287.0,
      "Text": " So, we have an admin body class function, which is an action from the WordPress core itself."
    },
    {
      "Time_Start": 1287.0,
      "Time_End": 1301.0,
      "Text": " The function itself will append our previously stated this view variable to the classes and will receive the return in classes from the function."
    },
    {
      "Time_Start": 1302.0,
      "Time_End": 1310.0,
      "Text": " So, if we look closely into the WordPress core itself, that is located in the wp-admins.php,"
    },
    {
      "Time_Start": 1311.0,
      "Time_End": 1324.0,
      "Text": " we can see that the WordPress core will fetch the value from the admin body class action or filter to the admin body class variable."
    },
    {
      "Time_Start": 1325.0,
      "Time_End": 1334.0,
      "Text": " And then, it will simply echo the admin body class variable to the HTML string in the body type HTML."
    },
    {
      "Time_Start": 1334.0,
      "Time_End": 1338.0,
      "Text": " So, there is no proper sanitization done in this case."
    },
    {
      "Time_Start": 1339.0,
      "Time_End": 1346.0,
      "Text": " So, we can simply put our domain name as XSS."
    },
    {
      "Time_Start": 1347.0,
      "Time_End": 1357.0,
      "Text": " So, for the patch from the plugin side, they decided to use a function named as underscore.html function."
    },
    {
      "Time_Start": 1357.0,
      "Time_End": 1368.0,
      "Text": " This function is different from the Cytus.txt function because the purpose itself is actually to escape strings inside of HTML."
    },
    {
      "Time_Start": 1369.0,
      "Time_End": 1373.0,
      "Text": " So, it will escape single quotes and double quotes in the string."
    },
    {
      "Time_Start": 1374.0,
      "Time_End": 1376.0,
      "Text": " So, it is safe to use this function for these cases."
    },
    {
      "Time_Start": 1377.0,
      "Time_End": 1387.0,
      "Text": " Also, from the WordPress core side, the core security team also decided to use as underscore.html function to the admin body class variable."
    },
    {
      "Time_Start": 1392.0,
      "Time_End": 1395.0,
      "Text": " So, you can see the example payload for this."
    },
    {
      "Time_Start": 1396.0,
      "Time_End": 1399.0,
      "Text": " So, it is different from the other two XSS cases."
    },
    {
      "Time_Start": 1400.0,
      "Time_End": 1404.0,
      "Text": " In these cases, we can only trigger this XSS on a specific envoy."
    },
    {
      "Time_Start": 1405.0,
      "Time_End": 1414.0,
      "Text": " It is the wp-admin-edit.jsp with the post type set to SACF, underscore, underscore."
    },
    {
      "Time_Start": 1415.0,
      "Time_End": 1418.0,
      "Text": " So, we can set our XSS payload in the post status here parameter."
    },
    {
      "Time_Start": 1419.0,
      "Time_End": 1427.0,
      "Text": " In these cases, because it is in the body type HTML, we can use the convert all to test for the XSS."
    },
    {
      "Time_Start": 1427.0,
      "Time_End": 1442.0,
      "Text": " So, as an admin, we can simply visit this envoy and trigger the XSS."
    },
    {
      "Time_Start": 1458.0,
      "Time_End": 1460.0,
      "Text": " Oh yeah, it is not the last one yet."
    },
    {
      "Time_Start": 1461.0,
      "Time_End": 1464.0,
      "Text": " The last one for the XSS cases is the WordPress core dedicated XSS."
    },
    {
      "Time_Start": 1465.0,
      "Time_End": 1473.0,
      "Text": " So, in the WordPress core itself, we have several roles for users."
    },
    {
      "Time_Start": 1474.0,
      "Time_End": 1480.0,
      "Text": " In this case, we will demonstrate the XSS on the contributor role on the WordPress core."
    },
    {
      "Time_Start": 1481.0,
      "Time_End": 1486.0,
      "Text": " So, it is introduced in version 5.9 and it is fixed in version 6.5.5."
    },
    {
      "Time_Start": 1487.0,
      "Time_End": 1491.0,
      "Text": " The available content is around 2.5 months."
    },
    {
      "Time_Start": 1492.0,
      "Time_End": 1497.0,
      "Text": " Active installation is mainly used in selecting any active WordPress core instance."
    },
    {
      "Time_Start": 1498.0,
      "Time_End": 1499.0,
      "Text": " The background story."
    },
    {
      "Time_Start": 1500.0,
      "Time_End": 1504.0,
      "Text": " Actually, this patch is only 2 days ago, on Monday."
    },
    {
      "Time_Start": 1505.0,
      "Time_End": 1511.0,
      "Text": " Initially, I am searching for any tools on the register to debug the process."
    },
    {
      "Time_Start": 1512.0,
      "Time_End": 1520.0,
      "Text": " So, as you can see in the left side of the slides, we have a render block or template part."
    },
    {
      "Time_Start": 1521.0,
      "Time_End": 1530.0,
      "Text": " So, in WordPress, we have a feature called block, which is just a piece of code that can be used from the visual editor side to display some documentation."
    },
    {
      "Time_Start": 1531.0,
      "Time_End": 1535.0,
      "Text": " So, in this case, the further block is the template part function."
    },
    {
      "Time_Start": 1536.0,
      "Time_End": 1539.0,
      "Text": " So, it will retrieve attributes parameter."
    },
    {
      "Time_Start": 1539.0,
      "Time_End": 1544.0,
      "Text": " So, in this case, the referable attribute is the attribute's top name function."
    },
    {
      "Time_Start": 1545.0,
      "Time_End": 1548.0,
      "Text": " It will be constructed to the HTML underscore tag variable."
    },
    {
      "Time_Start": 1549.0,
      "Time_End": 1551.0,
      "Text": " We will use the S underscore IDL function."
    },
    {
      "Time_Start": 1552.0,
      "Time_End": 1562.0,
      "Text": " But it is not enough to prevent XSS because the HTML underscore tag function itself will be appended directly to the opening tag and closing tag of the HTML."
    },
    {
      "Time_Start": 1562.0,
      "Time_End": 1571.0,
      "Text": " So, we can just simply put a script and space src to our .js file and we can execute XSS."
    },
    {
      "Time_Start": 1573.0,
      "Time_End": 1577.0,
      "Text": " The patch for this vulnerability is the core security theme 2 days ago."
    },
    {
      "Time_Start": 1578.0,
      "Time_End": 1583.0,
      "Text": " Just implemented a check whitelist tag using wp-ks-es-lower-html."
    },
    {
      "Time_Start": 1584.0,
      "Time_End": 1588.0,
      "Text": " So, this is basically just a limited set of lower HTML tag."
    },
    {
      "Time_Start": 1588.0,
      "Time_End": 1591.0,
      "Text": " This consists of tags like div."
    },
    {
      "Time_Start": 1592.0,
      "Time_End": 1599.0,
      "Text": " So, we cannot input any other tags such as script."
    },
    {
      "Time_Start": 1602.0,
      "Time_End": 1609.0,
      "Text": " So, for the vulnerable block, we can just call the template part block in the content."
    },
    {
      "Time_Start": 1610.0,
      "Time_End": 1617.0,
      "Text": " And we specify the tag name attributes to our development script src and our XSS file."
    },
    {
      "Time_Start": 1619.0,
      "Time_End": 1623.0,
      "Text": " So, in this case, we are using a contributor role user."
    },
    {
      "Time_Start": 1624.0,
      "Time_End": 1628.0,
      "Text": " Then, we will try to draft a post."
    },
    {
      "Time_Start": 1632.0,
      "Time_End": 1641.0,
      "Text": " Then, we copy the XSS file on the block itself to the content parameter in the host request."
    },
    {
      "Time_Start": 1642.0,
      "Time_End": 1647.0,
      "Text": " We then try to host like an example of .js file in our host."
    },
    {
      "Time_Start": 1648.0,
      "Time_End": 1651.0,
      "Text": " We just test contributor.nr."
    },
    {
      "Time_Start": 1654.0,
      "Time_End": 1665.0,
      "Text": " After setting up the src parameter, we can test the XSS by simply view the preview of the post."
    },
    {
      "Time_Start": 1666.0,
      "Time_End": 1671.0,
      "Text": " So, in this case, because it is only performed by a contributor role user,"
    },
    {
      "Time_Start": 1672.0,
      "Time_End": 1678.0,
      "Text": " the main target for this kind of XSS is basically for the administrator to deliver the XSS."
    },
    {
      "Time_Start": 1679.0,
      "Time_End": 1682.0,
      "Text": " So, basically contributor role cannot publish a post or a page."
    },
    {
      "Time_Start": 1683.0,
      "Time_End": 1689.0,
      "Text": " It can only make a draft and it will need to be accepted by the previous user."
    },
    {
      "Time_Start": 1695.0,
      "Time_End": 1701.0,
      "Text": " So, we move on to another vulnerable type of developer, vulnerability."
    },
    {
      "Time_Start": 1704.0,
      "Time_End": 1707.0,
      "Text": " Now, we are going to discuss about the preferences condition case studies."
    },
    {
      "Time_Start": 1708.0,
      "Time_End": 1715.0,
      "Text": " So, the first one is an unallocated account type of work in SNCL X.1.4 Elementor plugin."
    },
    {
      "Time_Start": 1716.0,
      "Time_End": 1720.0,
      "Text": " Some of the details are introduced in version 5.4.0."
    },
    {
      "Time_Start": 1720.0,
      "Time_End": 1726.0,
      "Text": " It is patched in version 5.7.0.1 and the kernel reportage is around 7.9."
    },
    {
      "Time_Start": 1727.0,
      "Time_End": 1730.0,
      "Text": " It has active installation of the plugin recently."
    },
    {
      "Time_Start": 1731.0,
      "Time_End": 1736.0,
      "Text": " So, the background story of this plugin is, I am initially searching for bones on the"
    },
    {
      "Time_Start": 1737.0,
      "Time_End": 1742.0,
      "Text": " custom registration process of the plugin, because the plugin has many features on it."
    },
    {
      "Time_Start": 1743.0,
      "Time_End": 1751.0,
      "Text": " But, it turns out the contact over itself is found in another feature of the plugin."
    },
    {
      "Time_Start": 1756.0,
      "Time_End": 1762.0,
      "Text": " So, the plugin has a login or register function, user function,"
    },
    {
      "Time_Start": 1763.0,
      "Time_End": 1771.0,
      "Text": " and then it handles a couple of actions on it, like login and register."
    },
    {
      "Time_Start": 1772.0,
      "Time_End": 1777.0,
      "Text": " And, send password reset and also to reset the user password."
    },
    {
      "Time_Start": 1778.0,
      "Time_End": 1782.0,
      "Text": " So, one of the functions that is vulnerable is the reset underscore password function."
    },
    {
      "Time_Start": 1783.0,
      "Time_End": 1791.0,
      "Text": " So, you can see in this example is the rp underscore login variable will be set to our"
    },
    {
      "Time_Start": 1792.0,
      "Time_End": 1794.0,
      "Text": " supplied postmark parameter of rp login."
    },
    {
      "Time_Start": 1795.0,
      "Time_End": 1802.0,
      "Text": " So, in this case, the code will try to pass the user object using the getUserVariable function,"
    },
    {
      "Time_Start": 1803.0,
      "Time_End": 1806.0,
      "Text": " using the rp underscore login variable."
    },
    {
      "Time_Start": 1807.0,
      "Time_End": 1812.0,
      "Text": " So, the login in this case is just like the username or email from the user."
    },
    {
      "Time_Start": 1813.0,
      "Time_End": 1818.0,
      "Text": " So, it then will check if the user exists and then it will try to perform a reset underscore"
    },
    {
      "Time_Start": 1818.0,
      "Time_End": 1824.0,
      "Text": " password function on this object with the supplied postmark parameter of the user."
    },
    {
      "Time_Start": 1825.0,
      "Time_End": 1829.0,
      "Text": " So, basically with this case, because there is no check of password reset key,"
    },
    {
      "Time_Start": 1830.0,
      "Time_End": 1835.0,
      "Text": " we can basically change the password of any users in the website."
    },
    {
      "Time_Start": 1836.0,
      "Time_End": 1843.0,
      "Text": " So, the patch for this vulnerability is simply by using the checkPasswordResetKey function,"
    },
    {
      "Time_Start": 1843.0,
      "Time_End": 1847.0,
      "Text": " which will check a unique password key from the database."
    },
    {
      "Time_Start": 1848.0,
      "Time_End": 1855.0,
      "Text": " So, basically we will receive this key on our email when we are trying to reset our password."
    },
    {
      "Time_Start": 1857.0,
      "Time_End": 1861.0,
      "Text": " So, the POC demo is quite simple for this one."
    },
    {
      "Time_Start": 1863.0,
      "Time_End": 1870.0,
      "Text": " First, we try to login as admin with our password and it cannot because the database has a wrong password."
    },
    {
      "Time_Start": 1870.0,
      "Time_End": 1877.0,
      "Text": " And then, we try to execute the script with targetUserAdmin and the password is 123."
    },
    {
      "Time_Start": 1878.0,
      "Time_End": 1881.0,
      "Text": " So, if the password is changed, users will be logged out from WordPress."
    },
    {
      "Time_Start": 1882.0,
      "Time_End": 1884.0,
      "Text": " So, admin cannot log in to their phone."
    },
    {
      "Time_Start": 1885.0,
      "Time_End": 1890.0,
      "Text": " And we can just simply log in to the admin account to see if our password is changed."
    },
    {
      "Time_Start": 1900.0,
      "Time_End": 1905.0,
      "Text": " So, the next one is how to get WordPress explanation in an HTML5."
    },
    {
      "Time_Start": 1906.0,
      "Time_End": 1911.0,
      "Text": " So, in this case, the vulnerable webpage is a round format."
    },
    {
      "Time_Start": 1912.0,
      "Time_End": 1915.0,
      "Text": " It also has a history collection of 100 pages."
    },
    {
      "Time_Start": 1916.0,
      "Time_End": 1921.0,
      "Text": " So, the background story of this is, I am initially searching for things in the WordPress explanation process."
    },
    {
      "Time_Start": 1922.0,
      "Time_End": 1926.0,
      "Text": " And it turns out, this is one of the tools for WordPress explanation."
    },
    {
      "Time_Start": 1926.0,
      "Time_End": 1929.0,
      "Text": " So, it is very simple."
    },
    {
      "Time_Start": 1930.0,
      "Time_End": 1937.0,
      "Text": " Because the function itself has a custom function to register the user."
    },
    {
      "Time_Start": 1938.0,
      "Time_End": 1940.0,
      "Text": " It is the html.address.register function."
    },
    {
      "Time_Start": 1941.0,
      "Time_End": 1950.0,
      "Text": " So, basically, the function itself will try to construct a user underscore data variable."
    },
    {
      "Time_Start": 1951.0,
      "Time_End": 1957.0,
      "Text": " As you can see, the variable also accepts a role field to it."
    },
    {
      "Time_Start": 1958.0,
      "Time_End": 1963.0,
      "Text": " It is directly supplied by the user using the post parameter of write underscore role."
    },
    {
      "Time_Start": 1964.0,
      "Time_End": 1969.0,
      "Text": " And then, it will check the data using the html validation data."
    },
    {
      "Time_Start": 1970.0,
      "Time_End": 1976.0,
      "Text": " And then, it will try to register a new user using the wp underscore user underscore user function."
    },
    {
      "Time_Start": 1977.0,
      "Time_End": 1983.0,
      "Text": " So, the html validation data itself only checks the src validity of the data."
    },
    {
      "Time_Start": 1984.0,
      "Time_End": 1987.0,
      "Text": " It is like checking the length and then checking the set of characters."
    },
    {
      "Time_Start": 1988.0,
      "Time_End": 1996.0,
      "Text": " So, it is not checking if the user supplied an arbitrary role on the request itself."
    },
    {
      "Time_Start": 1997.0,
      "Time_End": 1999.0,
      "Text": " So, the best is very simple."
    },
    {
      "Time_Start": 2000.0,
      "Time_End": 2003.0,
      "Text": " Just by removing the role field from the user data variable."
    },
    {
      "Time_Start": 2004.0,
      "Time_End": 2009.0,
      "Text": " So, the user can only be registered to the default role set by the user."
    },
    {
      "Time_Start": 2013.0,
      "Time_End": 2016.0,
      "Text": " We put the POC demo for this one."
    },
    {
      "Time_Start": 2017.0,
      "Time_End": 2018.0,
      "Text": " It is also quite simple."
    },
    {
      "Time_Start": 2019.0,
      "Time_End": 2021.0,
      "Text": " First, we check from that new panel."
    },
    {
      "Time_Start": 2021.0,
      "Time_End": 2032.0,
      "Text": " We check that there are only two users."
    },
    {
      "Time_Start": 2033.0,
      "Time_End": 2040.0,
      "Text": " And then, we try to execute the script with user name and password set to 123 with administrator role."
    },
    {
      "Time_Start": 2041.0,
      "Time_End": 2047.0,
      "Text": " So, after we execute this script, we are creating a user with administrator role."
    },
    {
      "Time_Start": 2047.0,
      "Time_End": 2051.0,
      "Text": " So, we can see that there is a new user with administrator role."
    },
    {
      "Time_Start": 2052.0,
      "Time_End": 2054.0,
      "Text": " And we can just simply log in to the account."
    },
    {
      "Time_Start": 2055.0,
      "Time_End": 2058.0,
      "Text": " And we get the administrator role."
    },
    {
      "Time_Start": 2068.0,
      "Time_End": 2073.0,
      "Text": " Yeah, I think this is the last case of the previous explanation on this presentation."
    },
    {
      "Time_Start": 2074.0,
      "Time_End": 2078.0,
      "Text": " It is an unauthorized account that is offered in Jupyter Xcode plugin."
    },
    {
      "Time_Start": 2079.0,
      "Time_End": 2084.0,
      "Text": " So, it is quite different from the other example because it is a premium plugin."
    },
    {
      "Time_Start": 2085.0,
      "Time_End": 2090.0,
      "Text": " Since it is a premium plugin, we cannot test the version of it."
    },
    {
      "Time_Start": 2091.0,
      "Time_End": 2093.0,
      "Text": " But it is patched in version 3.1.2."
    },
    {
      "Time_Start": 2094.0,
      "Time_End": 2097.0,
      "Text": " It is also an unauthorized account."
    },
    {
      "Time_Start": 2098.0,
      "Time_End": 2099.0,
      "Text": " So, the background story of it."
    },
    {
      "Time_Start": 2099.0,
      "Time_End": 2100.0,
      "Text": " Initially, I am just a programmer."
    },
    {
      "Time_Start": 2101.0,
      "Time_End": 2102.0,
      "Text": " So, we ask for the registration process."
    },
    {
      "Time_Start": 2103.0,
      "Time_End": 2110.0,
      "Text": " But the content of it is not in the registration process itself, but in the social role of the user."
    },
    {
      "Time_Start": 2114.0,
      "Time_End": 2118.0,
      "Text": " So, as you can see in the left side of the slides, we have the ISS handler function."
    },
    {
      "Time_Start": 2119.0,
      "Time_End": 2120.0,
      "Text": " It is a part of the mem variable."
    },
    {
      "Time_Start": 2121.0,
      "Time_End": 2125.0,
      "Text": " And the re-identifier variable directly for user input was parameter."
    },
    {
      "Time_Start": 2126.0,
      "Time_End": 2136.0,
      "Text": " And then it will try to construct a user ID variable using the email access function with the email parameter that we supplied previously."
    },
    {
      "Time_Start": 2137.0,
      "Time_End": 2141.0,
      "Text": " So, it will basically just check if the user is accessed from the supplied email."
    },
    {
      "Time_Start": 2142.0,
      "Time_End": 2150.0,
      "Text": " After that, it will call the setUserFacebookID function using the user ID variable and the FBID variable."
    },
    {
      "Time_Start": 2151.0,
      "Time_End": 2161.0,
      "Text": " So, the setUserFacebookID function will set the user metadata of the target user, which is the user ID."
    },
    {
      "Time_Start": 2162.0,
      "Time_End": 2171.0,
      "Text": " So, the password metadata that will be set is the social media user FBID metadata with the FBID value."
    },
    {
      "Time_Start": 2171.0,
      "Time_End": 2181.0,
      "Text": " So, basically with this, because there is no check in place, we can basically set any user's social media user FBID metadata to any string."
    },
    {
      "Time_Start": 2183.0,
      "Time_End": 2185.0,
      "Text": " Why is this important?"
    },
    {
      "Time_Start": 2186.0,
      "Time_End": 2195.0,
      "Text": " Because there is also another function, which is called FacebookLogInsertion, which will fetch a value variable from the get parameter."
    },
    {
      "Time_Start": 2196.0,
      "Time_End": 2200.0,
      "Text": " And then it will try to search a user using the getUser function."
    },
    {
      "Time_Start": 2201.0,
      "Time_End": 2207.0,
      "Text": " And it will search for a user that has a specific value of social media user FBID."
    },
    {
      "Time_Start": 2208.0,
      "Time_End": 2213.0,
      "Text": " And then it will construct an ID variable from the user object."
    },
    {
      "Time_Start": 2214.0,
      "Time_End": 2221.0,
      "Text": " And it will simply set the current user and the authentication key of the request to the targeted user ID."
    },
    {
      "Time_Start": 2222.0,
      "Time_End": 2229.0,
      "Text": " So, in these cases, we can just log the ID to any of the users by only logging the email."
    },
    {
      "Time_Start": 2230.0,
      "Time_End": 2237.0,
      "Text": " So, for the fetch for this vulnerability, because the documentation is wrong on the social media feature,"
    },
    {
      "Time_Start": 2238.0,
      "Time_End": 2247.0,
      "Text": " the vendor decided to apply a proper fetch by checking the access token of the user itself."
    },
    {
      "Time_Start": 2247.0,
      "Time_End": 2253.0,
      "Text": " So, now the users need to supply, in this case, it's a Facebook social login."
    },
    {
      "Time_Start": 2254.0,
      "Time_End": 2258.0,
      "Text": " So, the users need to supply this Facebook access token."
    },
    {
      "Time_Start": 2259.0,
      "Time_End": 2267.0,
      "Text": " And then the application will directly retrieve the email and the FBID directly from the Facebook Ramp API endpoint."
    },
    {
      "Time_Start": 2268.0,
      "Time_End": 2276.0,
      "Text": " So, for now, users cannot accept any of the user's metadata anymore."
    },
    {
      "Time_Start": 2278.0,
      "Time_End": 2291.0,
      "Text": " As you can see in the next page, the user ID is now constructed from the API email which comes directly from the Facebook endpoint."
    },
    {
      "Time_Start": 2297.0,
      "Time_End": 2302.0,
      "Text": " So, we can try the new POC for these cases."
    },
    {
      "Time_Start": 2303.0,
      "Time_End": 2307.0,
      "Text": " We can now log in as an admin, as an example."
    },
    {
      "Time_Start": 2308.0,
      "Time_End": 2315.0,
      "Text": " And then, as an example, we can use any email on the admin account."
    },
    {
      "Time_Start": 2316.0,
      "Time_End": 2319.0,
      "Text": " For these cases, we will use admin.admin.code email."
    },
    {
      "Time_Start": 2320.0,
      "Time_End": 2328.0,
      "Text": " And then, as an authenticated user, we can just simply execute this script using the targeted admin email,"
    },
    {
      "Time_Start": 2329.0,
      "Time_End": 2335.0,
      "Text": " the social login path, and then any string that we want to set the FBID to."
    },
    {
      "Time_Start": 2336.0,
      "Time_End": 2338.0,
      "Text": " In this case, we set the FBID to 1337."
    },
    {
      "Time_Start": 2339.0,
      "Time_End": 2343.0,
      "Text": " So, after executing the script, we get the link to log in as a targeted user."
    },
    {
      "Time_Start": 2344.0,
      "Time_End": 2346.0,
      "Text": " In this case, it's admin.startup.com."
    },
    {
      "Time_Start": 2347.0,
      "Time_End": 2351.0,
      "Text": " So, as an authenticated user, we can just simply visit the link from the script."
    },
    {
      "Time_Start": 2351.0,
      "Time_End": 2358.0,
      "Text": " And then, after visiting the link, we can simply log in as an admin.startup.com user."
    },
    {
      "Time_Start": 2368.0,
      "Time_End": 2371.0,
      "Text": " So, we have come to the end of the presentation."
    },
    {
      "Time_Start": 2372.0,
      "Time_End": 2379.0,
      "Text": " So, the conclusion is, first, WordPress is pretty much still a rare find from a security research perspective,"
    },
    {
      "Time_Start": 2380.0,
      "Time_End": 2382.0,
      "Text": " especially from the open source security research."
    },
    {
      "Time_Start": 2383.0,
      "Time_End": 2389.0,
      "Text": " Most of the critical and impactful bugs found are rather just a simple, but overlooked bug."
    },
    {
      "Time_Start": 2390.0,
      "Time_End": 2396.0,
      "Text": " There is also still a lack of details and attention to common use action and process in WordPress plugins or themes."
    },
    {
      "Time_Start": 2396.0,
      "Time_End": 2401.0,
      "Text": " More research needs to be done on the most popular components in the WordPress ecosystem."
    },
    {
      "Time_Start": 2402.0,
      "Time_End": 2408.0,
      "Text": " Also, there is a lot more potential research on the Southwest China tech, like the previous example,"
    },
    {
      "Time_Start": 2409.0,
      "Time_End": 2412.0,
      "Text": " specifically towards the library and the South plugin core."
    },
    {
      "Time_Start": 2413.0,
      "Time_End": 2415.0,
      "Text": " So, yeah, any questions?"
    },
    {
      "Time_Start": 2426.0,
      "Time_End": 2427.0,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2436.0,
      "Time_End": 2437.0,
      "Text": " Thank you for a nice, great speech."
    },
    {
      "Time_Start": 2438.0,
      "Time_End": 2439.0,
      "Text": " I have two questions."
    },
    {
      "Time_Start": 2440.0,
      "Time_End": 2445.0,
      "Text": " The first question is that, when you read the code for finding vulnerability,"
    },
    {
      "Time_Start": 2446.0,
      "Time_End": 2449.0,
      "Text": " do you find the code that occurs vulnerability directly?"
    },
    {
      "Time_Start": 2449.0,
      "Time_End": 2455.0,
      "Text": " Or do you take a reverse track to the surface or surface from the core?"
    },
    {
      "Time_Start": 2456.0,
      "Time_End": 2461.0,
      "Text": " And the second question is that, while you take this research on,"
    },
    {
      "Time_Start": 2462.0,
      "Time_End": 2467.0,
      "Text": " did you find yourself any kind of standard to choose, probably,"
    },
    {
      "Time_Start": 2468.0,
      "Time_End": 2472.0,
      "Text": " if you establish your own WordPress blog?"
    },
    {
      "Time_Start": 2473.0,
      "Time_End": 2478.0,
      "Text": " In the security perspective, I mean, how to find a more safer plugin?"
    },
    {
      "Time_Start": 2480.0,
      "Time_End": 2484.0,
      "Text": " So, the first question is for finding vulnerabilities in WordPress itself."
    },
    {
      "Time_Start": 2485.0,
      "Time_End": 2490.0,
      "Text": " So, yeah, basically, I think it depends on my mood, my current mood."
    },
    {
      "Time_Start": 2491.0,
      "Time_End": 2498.0,
      "Text": " Sometimes, I try to find directly some of the known functions,"
    },
    {
      "Time_Start": 2499.0,
      "Time_End": 2503.0,
      "Text": " like the excite, or the follow function, or the call user function."
    },
    {
      "Time_Start": 2504.0,
      "Time_End": 2509.0,
      "Text": " So, yeah, sometimes I do that and then trace back to the source of the input."
    },
    {
      "Time_Start": 2510.0,
      "Time_End": 2517.0,
      "Text": " And then sometimes I'm also trying to find it directly from the global variable itself,"
    },
    {
      "Time_Start": 2518.0,
      "Time_End": 2521.0,
      "Text": " like the GET, POST, REQUEST, and also like the SERVER."
    },
    {
      "Time_Start": 2522.0,
      "Time_End": 2524.0,
      "Text": " So, I think it basically depends on my mood,"
    },
    {
      "Time_Start": 2525.0,
      "Time_End": 2528.0,
      "Text": " whether I'm trying to search from the source or the SYNC."
    },
    {
      "Time_Start": 2529.0,
      "Time_End": 2532.0,
      "Text": " But mostly I am searching from the source."
    },
    {
      "Time_Start": 2534.0,
      "Time_End": 2538.0,
      "Text": " For the second question, sorry, can you repeat the second question?"
    },
    {
      "Time_Start": 2539.0,
      "Time_End": 2542.0,
      "Text": " This is not about security research,"
    },
    {
      "Time_Start": 2543.0,
      "Time_End": 2548.0,
      "Text": " but do you feel any way to choose a safer plugin?"
    },
    {
      "Time_Start": 2549.0,
      "Time_End": 2552.0,
      "Text": " I mean, how can you guarantee that,"
    },
    {
      "Time_Start": 2553.0,
      "Time_End": 2556.0,
      "Text": " relatively guarantee that this plugin is more safe?"
    },
    {
      "Time_Start": 2557.0,
      "Time_End": 2561.0,
      "Text": " So, I think there is no simple answer to this,"
    },
    {
      "Time_Start": 2561.0,
      "Time_End": 2564.0,
      "Text": " because, yeah, as you can see in this slide,"
    },
    {
      "Time_Start": 2565.0,
      "Time_End": 2570.0,
      "Text": " we are demonstrating a critical vulnerability in a very high installation count of plugins."
    },
    {
      "Time_Start": 2571.0,
      "Time_End": 2578.0,
      "Text": " So, yeah, we cannot make sure if the highest count installation of a plugin is much safer than others,"
    },
    {
      "Time_Start": 2579.0,
      "Time_End": 2582.0,
      "Text": " but the availability will be much more than before."
    },
    {
      "Time_Start": 2583.0,
      "Time_End": 2586.0,
      "Text": " And it probably has a better quality,"
    },
    {
      "Time_Start": 2586.0,
      "Time_End": 2592.0,
      "Text": " because mostly the huge installation count of the plugins is developed by a big company,"
    },
    {
      "Time_Start": 2593.0,
      "Time_End": 2597.0,
      "Text": " and it has a lot of developers on it, and it has some checks here and there."
    },
    {
      "Time_Start": 2598.0,
      "Time_End": 2606.0,
      "Text": " So, yeah, I think the most safer way to choose a plugin to use"
    },
    {
      "Time_Start": 2607.0,
      "Time_End": 2611.0,
      "Text": " is I think based on not only the active installation of the plugin,"
    },
    {
      "Time_Start": 2611.0,
      "Time_End": 2619.0,
      "Text": " but maybe try to check if the plugin has previously addressed the vulnerability in a good timing manner."
    },
    {
      "Time_Start": 2620.0,
      "Time_End": 2627.0,
      "Text": " For example, in previous cases, they patched the vulnerability in like 3 days or 4 days,"
    },
    {
      "Time_Start": 2628.0,
      "Time_End": 2631.0,
      "Text": " rather than the plugins that take a long time to patch the vulnerability."
    },
    {
      "Time_Start": 2632.0,
      "Time_End": 2633.0,
      "Text": " Thank you."
    },
    {
      "Time_Start": 2636.0,
      "Time_End": 2637.0,
      "Text": " Any more questions?"
    },
    {
      "Time_Start": 2642.0,
      "Time_End": 2649.0,
      "Text": " Sorry, I can ask, why you prioritize something like XSS SQL injection over something like RCE?"
    },
    {
      "Time_Start": 2650.0,
      "Time_End": 2651.0,
      "Text": " What's your reasons for doing so?"
    },
    {
      "Time_Start": 2652.0,
      "Time_End": 2659.0,
      "Text": " Yeah, so for the priorities for vulnerabilities itself,"
    },
    {
      "Time_Start": 2660.0,
      "Time_End": 2667.0,
      "Text": " so yeah, basically, mostly the priority is built towards the PHP code itself."
    },
    {
      "Time_Start": 2667.0,
      "Time_End": 2674.0,
      "Text": " So in these cases, I am first prioritizing the previous escalation,"
    },
    {
      "Time_Start": 2675.0,
      "Time_End": 2679.0,
      "Text": " because this is like the most impactful part of the environment."
    },
    {
      "Time_Start": 2680.0,
      "Time_End": 2684.0,
      "Text": " Of course there is like RCE, there is also like a critical one,"
    },
    {
      "Time_Start": 2685.0,
      "Time_End": 2693.0,
      "Text": " but it is not many plugins that use custom command call or something like that."
    },
    {
      "Time_Start": 2694.0,
      "Time_End": 2699.0,
      "Text": " So our previous escalation is the top priority for the vulnerability in WordPress."
    },
    {
      "Time_Start": 2700.0,
      "Time_End": 2703.0,
      "Text": " For the second one, the XSS, as I stated previously,"
    },
    {
      "Time_Start": 2704.0,
      "Time_End": 2714.0,
      "Text": " because the behaviour of WordPress and the current behaviour of WordPress,"
    },
    {
      "Time_Start": 2715.0,
      "Time_End": 2717.0,
      "Text": " if we receive a signal XSS from WordPress,"
    },
    {
      "Time_Start": 2717.0,
      "Time_End": 2724.0,
      "Text": " we can basically create any user, any role, including the XSS role."
    },
    {
      "Time_Start": 2725.0,
      "Time_End": 2729.0,
      "Text": " So in WordPress currently there is no additional security type in place"
    },
    {
      "Time_Start": 2730.0,
      "Time_End": 2735.0,
      "Text": " if you are creating a user, so you can just basically create a user using XSS."
    },
    {
      "Time_Start": 2736.0,
      "Time_End": 2741.0,
      "Text": " So yeah, maybe there could be like an enhancement in WordPress itself,"
    },
    {
      "Time_Start": 2741.0,
      "Time_End": 2745.0,
      "Text": " so when you are creating a user, you can ask for like password confirmation,"
    },
    {
      "Time_Start": 2746.0,
      "Time_End": 2752.0,
      "Text": " or like a notification, but basically for now, WordPress doesn't have that type in place,"
    },
    {
      "Time_Start": 2753.0,
      "Time_End": 2756.0,
      "Text": " so basically you can receive the XSS."
    },
    {
      "Time_Start": 2757.0,
      "Time_End": 2763.0,
      "Text": " For scaling the chain, of course, there is a priority to extract data from the database,"
    },
    {
      "Time_Start": 2763.0,
      "Time_End": 2769.0,
      "Text": " and also the 4th month PHP update injection, because it's in PHP,"
    },
    {
      "Time_Start": 2770.0,
      "Time_End": 2772.0,
      "Text": " so you need to find the PHP update injection."
    },
    {
      "Time_Start": 2773.0,
      "Time_End": 2776.0,
      "Text": " And then RCP and LFI also, because it's in PHP,"
    },
    {
      "Time_Start": 2777.0,
      "Time_End": 2779.0,
      "Text": " and then the last one is arbitrary file rate injection."
    },
    {
      "Time_Start": 2780.0,
      "Time_End": 2783.0,
      "Text": " Why arbitrary file rate? Because with this you can read the WP,"
    },
    {
      "Time_Start": 2784.0,
      "Time_End": 2789.0,
      "Text": " that's for particular PHP file to find some interesting data that is credentialed."
    },
    {
      "Time_Start": 2794.0,
      "Time_End": 2801.0,
      "Text": " Is there anything else? I think that's about it. Thank you very much."
    },
    {
      "Time_Start": 2802.0,
      "Time_End": 2804.0,
      "Text": " Oh, one last question. Sorry."
    },
    {
      "Time_Start": 2805.0,
      "Time_End": 2809.0,
      "Text": " In one of the CEP, you mentioned that it affects, I think before 6.3,"
    },
    {
      "Time_Start": 2810.0,
      "Time_End": 2812.0,
      "Text": " so how do you make that connection? Do you test a different version,"
    },
    {
      "Time_Start": 2813.0,
      "Time_End": 2815.0,
      "Text": " or somehow you remember through experience?"
    },
    {
      "Time_Start": 2815.0,
      "Time_End": 2829.0,
      "Text": " Yeah, so for this case, yeah, so the vulnerable part itself,"
    },
    {
      "Time_Start": 2830.0,
      "Time_End": 2835.0,
      "Text": " I think it's partially from the plugin side, and also partially from the WordPress core itself."
    },
    {
      "Time_Start": 2836.0,
      "Time_End": 2842.0,
      "Text": " So in this case, they both, the page and the book, from the plugin and the WordPress core,"
    },
    {
      "Time_Start": 2842.0,
      "Time_End": 2851.0,
      "Text": " so in the WordPress core, it is not, it is not, we cannot anymore perform this."
    },
    {
      "Time_Start": 2852.0,
      "Time_End": 2855.0,
      "Text": " So you call it before 6.3, is it? Or you test?"
    },
    {
      "Time_Start": 2856.0,
      "Time_End": 2860.0,
      "Text": " Oh yeah, so yeah, I'm first testing the bot and the plugin itself,"
    },
    {
      "Time_Start": 2861.0,
      "Time_End": 2865.0,
      "Text": " and then I notice that the plugin is using the built-in function,"
    },
    {
      "Time_Start": 2866.0,
      "Time_End": 2870.0,
      "Text": " built-in prototype of admin body classes in the WordPress core,"
    },
    {
      "Time_Start": 2870.0,
      "Time_End": 2876.0,
      "Text": " and then I check the function, the function part itself in the WordPress core."
    },
    {
      "Time_Start": 2877.0,
      "Time_End": 2880.0,
      "Text": " So it turns out that the implementation in the WordPress core itself is not secure,"
    },
    {
      "Time_Start": 2881.0,
      "Time_End": 2883.0,
      "Text": " so it can be solved by any success."
    },
    {
      "Time_Start": 2887.0,
      "Time_End": 2891.0,
      "Text": " All right. Thank you, Rafi, for any other questions, you can take it off stage."
    },
    {
      "Time_Start": 2892.0,
      "Time_End": 2895.0,
      "Text": " Thank you. Yeah, I just want to say that,"
    },
    {
      "Time_Start": 2896.0,
      "Time_End": 2901.0,
      "Text": " so since this is my first presentation, if you have a good deck,"
    },
    {
      "Time_Start": 2902.0,
      "Time_End": 2906.0,
      "Text": " you can give it in the link below, in the slides,"
    },
    {
      "Time_Start": 2907.0,
      "Time_End": 2909.0,
      "Text": " and you can use it more often."
    },
    {
      "Time_Start": 2910.0,
      "Time_End": 2911.0,
      "Text": " Thank you."
    }
  ]
}