{
  "segments": [
    {
      "Time_Start": 0.0,
      "Time_End": 6.0,
      "Text": "This text was transcribed using whisper model: large-v2\n\n Good afternoon. Welcome to my presentation."
    },
    {
      "Time_Start": 6.0,
      "Time_End": 10.0,
      "Text": " This is the last session of O5-1 conference."
    },
    {
      "Time_Start": 10.0,
      "Time_End": 16.0,
      "Text": " My topic is about the story of creating NDAful chain."
    },
    {
      "Time_Start": 16.0,
      "Time_End": 20.0,
      "Text": " First, let us introduce ourselves."
    },
    {
      "Time_Start": 20.0,
      "Time_End": 28.0,
      "Text": " My name is Jungwoo Gae, and I collaborated this project with Kwanghoon Jung and Younghoon Kim."
    },
    {
      "Time_Start": 28.0,
      "Time_End": 34.0,
      "Text": " We are the vulnerability research team of Deory."
    },
    {
      "Time_Start": 34.0,
      "Time_End": 44.0,
      "Text": " Before I start our story, I will first show you the NDAful chain we have created."
    },
    {
      "Time_Start": 44.0,
      "Time_End": 52.0,
      "Text": " I think some of you may have already seen it, because this video is also posted in our company's SNS."
    },
    {
      "Time_Start": 52.0,
      "Time_End": 56.0,
      "Text": " We started the vendor in the guest."
    },
    {
      "Time_Start": 69.0,
      "Time_End": 73.0,
      "Text": " Finally, we got the system shell in the host."
    },
    {
      "Time_Start": 73.0,
      "Time_End": 78.0,
      "Text": " This is our NDAful chain."
    },
    {
      "Time_Start": 78.0,
      "Time_End": 84.0,
      "Text": " Now, let me tell you about the story."
    },
    {
      "Time_Start": 84.0,
      "Time_End": 89.0,
      "Text": " This is the content of this presentation."
    },
    {
      "Time_Start": 89.0,
      "Time_End": 97.0,
      "Text": " To tell why we started this research, I can't leave the fairing service, our threat intelligence service."
    },
    {
      "Time_Start": 97.0,
      "Time_End": 104.0,
      "Text": " This service is the vulnerability report database since 2019."
    },
    {
      "Time_Start": 104.0,
      "Time_End": 111.0,
      "Text": " Until now, 486 reports exist and half of them has working exploits."
    },
    {
      "Time_Start": 111.0,
      "Time_End": 117.0,
      "Text": " You can check the information of the fairing service in our company's blog."
    },
    {
      "Time_Start": 117.0,
      "Time_End": 123.0,
      "Text": " This is the simple statistics for the reports in 2023."
    },
    {
      "Time_Start": 123.0,
      "Time_End": 130.0,
      "Text": " 71 reports were written and 37 reports have own working exploits."
    },
    {
      "Time_Start": 130.0,
      "Time_End": 142.0,
      "Text": " Also, some of these reports have been proven to be exploitable because they are used for in the wild or exploit competition like hunter-hunter."
    },
    {
      "Time_Start": 142.0,
      "Time_End": 151.0,
      "Text": " There are tons of reports on Fermion, so we thought that we can do something interesting with them."
    },
    {
      "Time_Start": 151.0,
      "Time_End": 156.0,
      "Text": " Also, we wanted to get some advertising for Fermion service."
    },
    {
      "Time_Start": 157.0,
      "Time_End": 162.0,
      "Text": " Here are the ingredients for a delicious exploit."
    },
    {
      "Time_Start": 162.0,
      "Time_End": 167.0,
      "Text": " First, we thought about the fruit chain."
    },
    {
      "Time_Start": 172.0,
      "Time_End": 178.0,
      "Text": " This situation is someone uses a Chrome browser inside a virtual box inside a VR."
    },
    {
      "Time_Start": 178.0,
      "Time_End": 185.0,
      "Text": " Maybe we already have all the ingredients for this fruit exploit."
    },
    {
      "Time_Start": 185.0,
      "Time_End": 190.0,
      "Text": " But we thought that this situation is not practical."
    },
    {
      "Time_Start": 190.0,
      "Time_End": 195.0,
      "Text": " Moreover, this research seems to need too much work."
    },
    {
      "Time_Start": 195.0,
      "Time_End": 200.0,
      "Text": " Therefore, we changed the situation a little simple."
    },
    {
      "Time_Start": 200.0,
      "Time_End": 204.0,
      "Text": " We just removed the layer of virtual box."
    },
    {
      "Time_Start": 204.0,
      "Time_End": 212.0,
      "Text": " The situation seems to be similar like when the researcher opens the malicious link in VMware."
    },
    {
      "Time_Start": 213.0,
      "Time_End": 220.0,
      "Text": " So the exploit starts from the renderer in guest and ends at the system in host."
    },
    {
      "Time_Start": 220.0,
      "Time_End": 224.0,
      "Text": " So it is the ingredients."
    },
    {
      "Time_Start": 228.0,
      "Time_End": 234.0,
      "Text": " Let's take a look for each vulnerability and its exploitation."
    },
    {
      "Time_Start": 234.0,
      "Time_End": 237.0,
      "Text": " We used 6 unique vulnerabilities."
    },
    {
      "Time_Start": 237.0,
      "Time_End": 242.0,
      "Text": " Three are used in the wild and two are used in Punt1.2023."
    },
    {
      "Time_Start": 242.0,
      "Time_End": 247.0,
      "Text": " And the last is the variant of Punt1.2023."
    },
    {
      "Time_Start": 247.0,
      "Time_End": 257.0,
      "Text": " Because of the time limitation, describing all details about this vulnerability is almost impossible."
    },
    {
      "Time_Start": 257.0,
      "Time_End": 265.0,
      "Text": " However, because all reports are also posted on our blog, you can check if you want."
    },
    {
      "Time_Start": 268.0,
      "Time_End": 272.0,
      "Text": " Let's start from JavaScript code in renderer."
    },
    {
      "Time_Start": 272.0,
      "Time_End": 281.0,
      "Text": " This vulnerability is cv20233079, which is used in the wild."
    },
    {
      "Time_Start": 281.0,
      "Time_End": 290.0,
      "Text": " This is type confusion bug in inline cache for JSStrictArgument object."
    },
    {
      "Time_Start": 290.0,
      "Time_End": 294.0,
      "Text": " First, what is the inline cache?"
    },
    {
      "Time_Start": 294.0,
      "Time_End": 299.0,
      "Text": " It is the optimization method for the bytecode v8."
    },
    {
      "Time_Start": 299.0,
      "Time_End": 306.0,
      "Text": " It will register the faster handler according to the time feedback while executing."
    },
    {
      "Time_Start": 306.0,
      "Time_End": 309.0,
      "Text": " Let's look at this example."
    },
    {
      "Time_Start": 309.0,
      "Time_End": 318.0,
      "Text": " After feedback is collected here 10 times, the handler will be registered on the feedback."
    },
    {
      "Time_Start": 318.0,
      "Time_End": 328.0,
      "Text": " Then, if the second time is used again in the future, the registered handler will be used directly to speed up."
    },
    {
      "Time_Start": 328.0,
      "Time_End": 336.0,
      "Text": " In this example, the store handler for SMI is registered as a handler."
    },
    {
      "Time_Start": 336.0,
      "Time_End": 341.0,
      "Text": " Second, what is the JSStrictArgument object?"
    },
    {
      "Time_Start": 341.0,
      "Time_End": 349.0,
      "Text": " JSStrictArgument object is a type of argument object used in strict JavaScript code."
    },
    {
      "Time_Start": 349.0,
      "Time_End": 359.0,
      "Text": " Argument object is used to represent the arguments of a function, and it is like array object."
    },
    {
      "Time_Start": 359.0,
      "Time_End": 366.0,
      "Text": " It has elements accessed by index, and also the length is defined."
    },
    {
      "Time_Start": 367.0,
      "Time_End": 371.0,
      "Text": " JSArray looks like this."
    },
    {
      "Time_Start": 371.0,
      "Time_End": 376.0,
      "Text": " There are two size values, length and capacity."
    },
    {
      "Time_Start": 376.0,
      "Time_End": 386.0,
      "Text": " Length represents the number of elements, and capacity is the location size of element's area."
    },
    {
      "Time_Start": 386.0,
      "Time_End": 392.0,
      "Text": " Then, what values are stored in the area between length and capacity?"
    },
    {
      "Time_Start": 392.0,
      "Time_End": 395.0,
      "Text": " It is whole object."
    },
    {
      "Time_Start": 395.0,
      "Time_End": 405.0,
      "Text": " This object should not be exposed to JavaScript itself, so VA has to convert it into JavaScript value,"
    },
    {
      "Time_Start": 405.0,
      "Time_End": 410.0,
      "Text": " such as undefined or false, according to the situation."
    },
    {
      "Time_Start": 412.0,
      "Time_End": 420.0,
      "Text": " As mentioned before, JSStrictArgument object is like array, but there are many differences."
    },
    {
      "Time_Start": 420.0,
      "Time_End": 428.0,
      "Text": " Among several differences, the main difference related to this vulnerability is the behavior"
    },
    {
      "Time_Start": 428.0,
      "Time_End": 433.0,
      "Text": " when a new element is added to the end of array."
    },
    {
      "Time_Start": 433.0,
      "Time_End": 444.0,
      "Text": " As shown in this code, the element kind of JSArgument object will be changed to holy by this code,"
    },
    {
      "Time_Start": 444.0,
      "Time_End": 448.0,
      "Text": " but while the JSArray does not."
    },
    {
      "Time_Start": 450.0,
      "Time_End": 453.0,
      "Text": " Let's walk through with this example."
    },
    {
      "Time_Start": 453.0,
      "Time_End": 459.0,
      "Text": " I created an empty array and added one element at the end."
    },
    {
      "Time_Start": 459.0,
      "Time_End": 465.0,
      "Text": " The element kind remains packed element for the JSArray."
    },
    {
      "Time_Start": 465.0,
      "Time_End": 473.0,
      "Text": " But similarly, I create argument object with no element and added one element at the end."
    },
    {
      "Time_Start": 473.0,
      "Time_End": 480.0,
      "Text": " Then, the element kind changes to holy element from packed element."
    },
    {
      "Time_Start": 481.0,
      "Time_End": 488.0,
      "Text": " This vulnerability occurs because improper handler is registered for argument object."
    },
    {
      "Time_Start": 488.0,
      "Time_End": 498.0,
      "Text": " Because of this vulnerability, this storeFastElementIc, growNo, blah blah handler can be registered"
    },
    {
      "Time_Start": 498.0,
      "Time_End": 502.0,
      "Text": " as a handler for JSStrictArgument object."
    },
    {
      "Time_Start": 502.0,
      "Time_End": 507.0,
      "Text": " This handler will not change the element kind to holy."
    },
    {
      "Time_Start": 507.0,
      "Time_End": 514.0,
      "Text": " So, in this situation, JSStrictArgument with packed element is possible."
    },
    {
      "Time_Start": 514.0,
      "Time_End": 517.0,
      "Text": " So, what happens in this case?"
    },
    {
      "Time_Start": 519.0,
      "Time_End": 525.0,
      "Text": " Unlike JSArray, argument object uses the capacity as the length."
    },
    {
      "Time_Start": 526.0,
      "Time_End": 533.0,
      "Text": " Because the element kind is packed element, the element will be returned directly."
    },
    {
      "Time_Start": 533.0,
      "Time_End": 540.0,
      "Text": " If you access index 1 for this corrupted argument object,"
    },
    {
      "Time_Start": 540.0,
      "Time_End": 549.0,
      "Text": " the whole object will be read to JavaScript because the index 1 is less than the capacity."
    },
    {
      "Time_Start": 550.0,
      "Time_End": 555.0,
      "Text": " Then, how can I use the whole object for exploit?"
    },
    {
      "Time_Start": 555.0,
      "Time_End": 559.0,
      "Text": " We need to use another bug in JIT compiler."
    },
    {
      "Time_Start": 559.0,
      "Time_End": 567.0,
      "Text": " As shown in this picture, the whole or range-1 and minus-1,"
    },
    {
      "Time_Start": 567.0,
      "Time_End": 572.0,
      "Text": " this node will be changed to range-1 and minus-1."
    },
    {
      "Time_Start": 573.0,
      "Time_End": 579.0,
      "Text": " This bug is caused by the JIT compiler not handling the whole object properly"
    },
    {
      "Time_Start": 579.0,
      "Time_End": 584.0,
      "Text": " because the whole object does not expose to JavaScript normally."
    },
    {
      "Time_Start": 584.0,
      "Time_End": 590.0,
      "Text": " And then, this wrong assumption will remove the bound check."
    },
    {
      "Time_Start": 590.0,
      "Time_End": 598.0,
      "Text": " However, in the actual execution, the whole object will be interpreted as 0, not minus-1."
    },
    {
      "Time_Start": 599.0,
      "Time_End": 604.0,
      "Text": " So, it causes out-of-bound access in the compiled code."
    },
    {
      "Time_Start": 604.0,
      "Time_End": 612.0,
      "Text": " After then, you can apply the typical way to achieve read-write primitive in V8 heap sandbox."
    },
    {
      "Time_Start": 614.0,
      "Time_End": 619.0,
      "Text": " Yes, there is one more mountain to climb, V8 sandbox."
    },
    {
      "Time_Start": 619.0,
      "Time_End": 626.0,
      "Text": " Because of this mitigation, we cannot read or write beyond the V8 object area."
    },
    {
      "Time_Start": 626.0,
      "Time_End": 633.0,
      "Text": " Obviously, the RWX area is also outside the V8 sandbox."
    },
    {
      "Time_Start": 633.0,
      "Time_End": 636.0,
      "Text": " So, how can we escape this?"
    },
    {
      "Time_Start": 636.0,
      "Time_End": 643.0,
      "Text": " The common and popular method is exploiting the low pointer in V8 sandbox."
    },
    {
      "Time_Start": 645.0,
      "Time_End": 651.0,
      "Text": " For our exploit chain, we exploited the low pointer in WASM object."
    },
    {
      "Time_Start": 651.0,
      "Time_End": 654.0,
      "Text": " This is patched now."
    },
    {
      "Time_Start": 655.0,
      "Time_End": 665.0,
      "Text": " The target field of WASM object here remains as a low pointer."
    },
    {
      "Time_Start": 665.0,
      "Time_End": 674.0,
      "Text": " And there is also the function to write arbitrary value to the address of target field in this function."
    },
    {
      "Time_Start": 674.0,
      "Time_End": 683.0,
      "Text": " So, this allows us to arbitrary value to the arbitrary address outside the V8 sandbox."
    },
    {
      "Time_Start": 684.0,
      "Time_End": 691.0,
      "Text": " Also, we can get the address of RWX area because it is stored inside V8 sandbox."
    },
    {
      "Time_Start": 691.0,
      "Time_End": 702.0,
      "Text": " And then, we write the shellcode to RWX area using arbitrary write primitive as I described just before."
    },
    {
      "Time_Start": 702.0,
      "Time_End": 704.0,
      "Text": " And call the WASM function."
    },
    {
      "Time_Start": 704.0,
      "Time_End": 707.0,
      "Text": " Then, we got the code execution."
    },
    {
      "Time_Start": 708.0,
      "Time_End": 712.0,
      "Text": " So, we are now here."
    },
    {
      "Time_Start": 712.0,
      "Time_End": 715.0,
      "Text": " And we can execute arbitrary code in Chrome Renderer."
    },
    {
      "Time_Start": 715.0,
      "Time_End": 720.0,
      "Text": " So now, we must escape the browser sandbox of Chrome."
    },
    {
      "Time_Start": 720.0,
      "Time_End": 731.0,
      "Text": " To escape the browser sandbox, we exploited the Windows kernel vulnerability CVE-2023-21674."
    },
    {
      "Time_Start": 731.0,
      "Time_End": 738.0,
      "Text": " This vulnerability existed in the Advanced Local Procedure Core, ALPC."
    },
    {
      "Time_Start": 738.0,
      "Time_End": 745.0,
      "Text": " ALPC is one of the communication methods between processes on Windows."
    },
    {
      "Time_Start": 745.0,
      "Time_End": 757.0,
      "Text": " In the Chrome Renderer, ALPC is also available including creating port, sending and receiving messages, and so on."
    },
    {
      "Time_Start": 758.0,
      "Time_End": 771.0,
      "Text": " The vulnerability occurs while processing this flag, ALPC message flag and sync request flag in the ALPC message."
    },
    {
      "Time_Start": 771.0,
      "Time_End": 781.0,
      "Text": " As the name of the flag suggests, the flag means that the message requests are processed synchronously."
    },
    {
      "Time_Start": 781.0,
      "Time_End": 788.0,
      "Text": " In other words, the sending and receiving the message should be done consecutively."
    },
    {
      "Time_Start": 790.0,
      "Time_End": 800.0,
      "Text": " When you send a message with this flag, the current thread address will be stored in the waiting thread field,"
    },
    {
      "Time_Start": 800.0,
      "Time_End": 805.0,
      "Text": " which represents the thread that will receive the response."
    },
    {
      "Time_Start": 806.0,
      "Time_End": 818.0,
      "Text": " Because of sync flag, the reply process will be executed consecutively while the current thread 1 is blocked."
    },
    {
      "Time_Start": 818.0,
      "Time_End": 830.0,
      "Text": " When the thread 2 replies, the waiting thread field should be changed depending on the state of thread 2."
    },
    {
      "Time_Start": 830.0,
      "Time_End": 834.0,
      "Text": " It will be null or the address of thread 2."
    },
    {
      "Time_Start": 834.0,
      "Time_End": 843.0,
      "Text": " The important thing is that the waiting thread field must not be the address of sender thread, thread 1."
    },
    {
      "Time_Start": 845.0,
      "Time_End": 855.0,
      "Text": " However, there is a way to make the thread field remain the sender thread's address, although the sync flag is set."
    },
    {
      "Time_Start": 856.0,
      "Time_End": 862.0,
      "Text": " That is, the anti-wait for worker factory system call."
    },
    {
      "Time_Start": 862.0,
      "Time_End": 869.0,
      "Text": " This system call only sends the ALPC message without validating the sync flag."
    },
    {
      "Time_Start": 869.0,
      "Time_End": 878.0,
      "Text": " Therefore, if the thread is terminated just returning from this system call,"
    },
    {
      "Time_Start": 878.0,
      "Time_End": 883.0,
      "Text": " the waiting thread field will remain as a dangling pointer."
    },
    {
      "Time_Start": 885.0,
      "Time_End": 895.0,
      "Text": " To exploit this vulnerability, we have checked the code that references the waiting thread field."
    },
    {
      "Time_Start": 895.0,
      "Time_End": 905.0,
      "Text": " Using this code shown on the screen, we can change the value at an arbitrary address."
    },
    {
      "Time_Start": 905.0,
      "Time_End": 914.0,
      "Text": " However, as you know, another vulnerability is needed to get the kernel address in the sandbox."
    },
    {
      "Time_Start": 914.0,
      "Time_End": 924.0,
      "Text": " It is hard to apply this method directly, but this method can be used in medium integrity."
    },
    {
      "Time_Start": 926.0,
      "Time_End": 930.0,
      "Text": " Here is another code which references the waiting thread field."
    },
    {
      "Time_Start": 930.0,
      "Time_End": 942.0,
      "Text": " LPCPCOPYREQUESTDATA will get the process address from the waiting thread field, which is already freed memory."
    },
    {
      "Time_Start": 942.0,
      "Time_End": 952.0,
      "Text": " And then it calls mmCopyVirtualMemory to read from or write to the data of that process."
    },
    {
      "Time_Start": 952.0,
      "Time_End": 958.0,
      "Text": " So if you can place the higher privileged thread in the freed memory,"
    },
    {
      "Time_Start": 958.0,
      "Time_End": 963.0,
      "Text": " you can make read-write primitive on the higher privileged process."
    },
    {
      "Time_Start": 963.0,
      "Time_End": 968.0,
      "Text": " Using this code, we can make the code execution in medium integrity."
    },
    {
      "Time_Start": 969.0,
      "Time_End": 972.0,
      "Text": " I will talk about the details later."
    },
    {
      "Time_Start": 974.0,
      "Time_End": 980.0,
      "Text": " Anyway, now we are at the user privilege in the guest here."
    },
    {
      "Time_Start": 980.0,
      "Time_End": 988.0,
      "Text": " So to trigger the VMWare vulnerability, we need to elevate the privilege to the system."
    },
    {
      "Time_Start": 988.0,
      "Time_End": 1001.0,
      "Text": " For LPE, we used CVE-2023-29360, which is used in Pantone-2023 by Synaptic."
    },
    {
      "Time_Start": 1001.0,
      "Time_End": 1008.0,
      "Text": " This vulnerability is a beautiful logic bug that allows attackers to map arbitrary addresses."
    },
    {
      "Time_Start": 1010.0,
      "Time_End": 1016.0,
      "Text": " As shown in this code, attackers can control the address, this value."
    },
    {
      "Time_Start": 1016.0,
      "Time_End": 1020.0,
      "Text": " And this value will be mapped with kernel mode."
    },
    {
      "Time_Start": 1021.0,
      "Time_End": 1027.0,
      "Text": " That is, attackers can also map the kernel address by using this vulnerability."
    },
    {
      "Time_Start": 1028.0,
      "Time_End": 1034.0,
      "Text": " And then we can read from or write to the address through the mapping area."
    },
    {
      "Time_Start": 1036.0,
      "Time_End": 1045.0,
      "Text": " So we get the read-write primitive combining the address read by anti-query system information."
    },
    {
      "Time_Start": 1045.0,
      "Time_End": 1048.0,
      "Text": " This will be gone soon."
    },
    {
      "Time_Start": 1049.0,
      "Time_End": 1052.0,
      "Text": " We can easily get the system privilege."
    },
    {
      "Time_Start": 1054.0,
      "Time_End": 1057.0,
      "Text": " So now we are at the system of guests."
    },
    {
      "Time_Start": 1058.0,
      "Time_End": 1060.0,
      "Text": " Let's escape VMWare."
    },
    {
      "Time_Start": 1060.0,
      "Time_End": 1063.0,
      "Text": " First, we need to know the address information."
    },
    {
      "Time_Start": 1064.0,
      "Time_End": 1074.0,
      "Text": " For this, we exploited CVE-2023-34044, which is a variant of Pantone-2023."
    },
    {
      "Time_Start": 1076.0,
      "Time_End": 1087.0,
      "Text": " First, let's take a look at the Pantone vulnerability, CVE-2023-20870, which was found by starapps."
    },
    {
      "Time_Start": 1089.0,
      "Time_End": 1099.0,
      "Text": " This is a simple uninitialized bug which occurs while handling the USB request block for virtual Bluetooth."
    },
    {
      "Time_Start": 1100.0,
      "Time_End": 1109.0,
      "Text": " As shown in this code, when the buffer for URB is created, the data is not initialized."
    },
    {
      "Time_Start": 1110.0,
      "Time_End": 1120.0,
      "Text": " After then, this header part will be set to the appropriate value, but the data part remains uninitialized."
    },
    {
      "Time_Start": 1121.0,
      "Time_End": 1129.0,
      "Text": " This URB data is finally delivered to the guest as many as the user requested."
    },
    {
      "Time_Start": 1130.0,
      "Time_End": 1139.0,
      "Text": " Therefore, the uninitialized data is also delivered to the guest and we can get the information in it."
    },
    {
      "Time_Start": 1141.0,
      "Time_End": 1143.0,
      "Text": " This is the patch."
    },
    {
      "Time_Start": 1144.0,
      "Time_End": 1146.0,
      "Text": " The patch is quite simple."
    },
    {
      "Time_Start": 1147.0,
      "Time_End": 1153.0,
      "Text": " The actual length field is set to 8 before response."
    },
    {
      "Time_Start": 1153.0,
      "Time_End": 1155.0,
      "Text": " 8 is the size of header."
    },
    {
      "Time_Start": 1156.0,
      "Time_End": 1161.0,
      "Text": " But is this code in the red rectangle safe?"
    },
    {
      "Time_Start": 1162.0,
      "Time_End": 1165.0,
      "Text": " It executed before the patch code."
    },
    {
      "Time_Start": 1167.0,
      "Time_End": 1168.0,
      "Text": " Let's check it."
    },
    {
      "Time_Start": 1169.0,
      "Time_End": 1184.0,
      "Text": " If the length of buffer's calculated value is greater than 255, an error is thrown without changing the actual length field."
    },
    {
      "Time_Start": 1184.0,
      "Time_End": 1187.0,
      "Text": " Then, response proceeds."
    },
    {
      "Time_Start": 1188.0,
      "Time_End": 1192.0,
      "Text": " This is the same situation as previous vulnerability."
    },
    {
      "Time_Start": 1193.0,
      "Time_End": 1208.0,
      "Text": " To place a meaningful value in the uninitialized area, we use the virtual mouse URB because it has the data section address of VMware VMX."
    },
    {
      "Time_Start": 1209.0,
      "Time_End": 1211.0,
      "Text": " The exploit process is like this."
    },
    {
      "Time_Start": 1212.0,
      "Time_End": 1218.0,
      "Text": " First, send the URB package for the virtual mouse device."
    },
    {
      "Time_Start": 1219.0,
      "Time_End": 1228.0,
      "Text": " Then, after these URB packages are freed, the URB package or Bluetooth device to trigger this vulnerability."
    },
    {
      "Time_Start": 1229.0,
      "Time_End": 1233.0,
      "Text": " Finally, we can get the address information from the buffer."
    },
    {
      "Time_Start": 1236.0,
      "Time_End": 1238.0,
      "Text": " Yeah, we are almost there."
    },
    {
      "Time_Start": 1240.0,
      "Time_End": 1241.0,
      "Text": " Let's escape the VMware."
    },
    {
      "Time_Start": 1242.0,
      "Time_End": 1252.0,
      "Text": " We exploited the CVE-2023-20869, which was used in Punt1-2023 and also found by Starex."
    },
    {
      "Time_Start": 1254.0,
      "Time_End": 1263.0,
      "Text": " This vulnerability occurs while processing the Service Discovery Protocol, SDP, of Bluetooth."
    },
    {
      "Time_Start": 1266.0,
      "Time_End": 1270.0,
      "Text": " This code is the handler for the SDP package."
    },
    {
      "Time_Start": 1271.0,
      "Time_End": 1284.0,
      "Text": " As you can see in this code, the ElmetType and ElmetSize are both user controllable because they are calculated from user buffer."
    },
    {
      "Time_Start": 1285.0,
      "Time_End": 1297.0,
      "Text": " If ElmetType is SDPDE unit, that is 1, then SDPData.readLowInt() function is called."
    },
    {
      "Time_Start": 1298.0,
      "Time_End": 1306.0,
      "Text": " In this function, because we can control the alien value, two buffer flows will occur."
    },
    {
      "Time_Start": 1307.0,
      "Time_End": 1320.0,
      "Text": " The first buffer flow for the buffer TMP by RBufferCopyOutHeader() function and the second buffer flow occurs by ManCopy() function."
    },
    {
      "Time_Start": 1321.0,
      "Time_End": 1324.0,
      "Text": " More important part is the second buffer flow."
    },
    {
      "Time_Start": 1325.0,
      "Time_End": 1334.0,
      "Text": " Because the ManCopy() function doesn't use its own stack, so no stack cookie exists for the ManCopy() function."
    },
    {
      "Time_Start": 1335.0,
      "Time_End": 1345.0,
      "Text": " In addition, since the minus index is used for the destination buffer, we can override the return address of ManCopy() function."
    },
    {
      "Time_Start": 1346.0,
      "Time_End": 1350.0,
      "Text": " So by ROP, we can execute WinEXEC API."
    },
    {
      "Time_Start": 1351.0,
      "Time_End": 1354.0,
      "Text": " Here is the RPChain for our exploit."
    },
    {
      "Time_Start": 1355.0,
      "Time_End": 1360.0,
      "Text": " As mentioned before, there are two copying processes."
    },
    {
      "Time_Start": 1361.0,
      "Time_End": 1365.0,
      "Text": " The first copy process is done for the TMP buffer."
    },
    {
      "Time_Start": 1366.0,
      "Time_End": 1369.0,
      "Text": " And then the state will be like this."
    },
    {
      "Time_Start": 1370.0,
      "Time_End": 1375.0,
      "Text": " The second copy process is done at a negative index away from SRC."
    },
    {
      "Time_Start": 1376.0,
      "Time_End": 1386.0,
      "Text": " In this case, because the length is 0x90, the copy will start from SRC-0x80."
    },
    {
      "Time_Start": 1387.0,
      "Time_End": 1390.0,
      "Text": " So the final state is like this."
    },
    {
      "Time_Start": 1394.0,
      "Time_End": 1401.0,
      "Text": " After the first article is executed, the state has been changed like this."
    },
    {
      "Time_Start": 1401.0,
      "Time_End": 1411.0,
      "Text": " And finally, the state is like this, so we can execute Kark command by WinEXEC API."
    },
    {
      "Time_Start": 1412.0,
      "Time_End": 1416.0,
      "Text": " Finally, we are down to the last step."
    },
    {
      "Time_Start": 1417.0,
      "Time_End": 1430.0,
      "Text": " The final vulnerability which is used for elevating the privilege on the host is CVE-2023-36802."
    },
    {
      "Time_Start": 1431.0,
      "Time_End": 1438.0,
      "Text": " It exists in the same driver as the vulnerability used for guest LPE."
    },
    {
      "Time_Start": 1440.0,
      "Time_End": 1447.0,
      "Text": " As shown in this code, when the publishRx dysfunction is called,"
    },
    {
      "Time_Start": 1448.0,
      "Time_End": 1454.0,
      "Text": " the fscontext2 as the first argument, which is this value."
    },
    {
      "Time_Start": 1455.0,
      "Time_End": 1461.0,
      "Text": " At this point, we can infer that fscontext2 is a type of fsStringReq."
    },
    {
      "Time_Start": 1462.0,
      "Time_End": 1465.0,
      "Text": " Because the name is a StringReq object."
    },
    {
      "Time_Start": 1466.0,
      "Time_End": 1474.0,
      "Text": " Before calling publishRx, the findObject function validates fscontext2."
    },
    {
      "Time_Start": 1475.0,
      "Time_End": 1478.0,
      "Text": " Let's take a look at the findObject function."
    },
    {
      "Time_Start": 1479.0,
      "Time_End": 1488.0,
      "Text": " I omitted lots of code, but as shown in this code, fscontext2 can be of two types."
    },
    {
      "Time_Start": 1489.0,
      "Time_End": 1499.0,
      "Text": " After analyzing this binary, we can find that they are of type fscontextReq and fsStringReq."
    },
    {
      "Time_Start": 1500.0,
      "Time_End": 1507.0,
      "Text": " fscontextReq has been initialized in this code and the size of the object is"
    },
    {
      "Time_Start": 1508.0,
      "Time_End": 1511.0,
      "Text": " 0x78 bytes."
    },
    {
      "Time_Start": 1512.0,
      "Time_End": 1522.0,
      "Text": " fsStringReq has been initialized in this code and the size of the object is 0x1d8 bytes."
    },
    {
      "Time_Start": 1523.0,
      "Time_End": 1527.0,
      "Text": " This object is the value that code expects."
    },
    {
      "Time_Start": 1529.0,
      "Time_End": 1535.0,
      "Text": " So, what will happen if it is fscontextReq, not fsStringReq?"
    },
    {
      "Time_Start": 1536.0,
      "Time_End": 1538.0,
      "Text": " The type confusion can occur."
    },
    {
      "Time_Start": 1539.0,
      "Time_End": 1546.0,
      "Text": " Because of the size difference, the type confusion will trigger out-of-bound access."
    },
    {
      "Time_Start": 1549.0,
      "Time_End": 1559.0,
      "Text": " Because the vulnerable object is in a non-paged pool, we can use the named pipe object to control memory layout."
    },
    {
      "Time_Start": 1559.0,
      "Time_End": 1576.0,
      "Text": " Also, as shown in this code, you can create arbitrary decrement primitives if the attacker can control the value at the offset 0x1c8."
    },
    {
      "Time_Start": 1578.0,
      "Time_End": 1582.0,
      "Text": " However, we sprayed with the named pipe object."
    },
    {
      "Time_Start": 1583.0,
      "Time_End": 1589.0,
      "Text": " The header of the object has been located at the offset 0x1c8."
    },
    {
      "Time_Start": 1590.0,
      "Time_End": 1598.0,
      "Text": " Because the value in the header is hard to control by attackers, we need to use another way."
    },
    {
      "Time_Start": 1599.0,
      "Time_End": 1604.0,
      "Text": " To solve this, we took the approach of utilizing other objects."
    },
    {
      "Time_Start": 1606.0,
      "Time_End": 1611.0,
      "Text": " We utilized thread name object instead of named pipe object."
    },
    {
      "Time_Start": 1612.0,
      "Time_End": 1623.0,
      "Text": " Similar to named pipe object, with this object, we can create the memory of any size and store the data you want and release it when you want."
    },
    {
      "Time_Start": 1624.0,
      "Time_End": 1632.0,
      "Text": " But this object has only 0x10 bytes header, while the named pipe has 0x30 bytes."
    },
    {
      "Time_Start": 1634.0,
      "Time_End": 1638.0,
      "Text": " Therefore, the layout will be changed like this."
    },
    {
      "Time_Start": 1639.0,
      "Time_End": 1649.0,
      "Text": " Because we can control the data in offset 0x1c8, we are able to trigger arbitrary decrement primitive."
    },
    {
      "Time_Start": 1650.0,
      "Time_End": 1662.0,
      "Text": " Eventually, you can change the previous mode of current thread to 0 by this primitive and then duplicate the system token to get the system privilege."
    },
    {
      "Time_Start": 1663.0,
      "Time_End": 1666.0,
      "Text": " Finally, we reach to the system host."
    },
    {
      "Time_Start": 1669.0,
      "Time_End": 1675.0,
      "Text": " This concludes the introduction of vulnerabilities and its exploits."
    },
    {
      "Time_Start": 1676.0,
      "Time_End": 1680.0,
      "Text": " After then, we need to chain these vulnerabilities."
    },
    {
      "Time_Start": 1681.0,
      "Time_End": 1684.0,
      "Text": " There are many ways for chaining them."
    },
    {
      "Time_Start": 1685.0,
      "Time_End": 1690.0,
      "Text": " This section will describe about what we have tried."
    },
    {
      "Time_Start": 1691.0,
      "Time_End": 1696.0,
      "Text": " First, chaining the renderer and sandbox escape exploit."
    },
    {
      "Time_Start": 1697.0,
      "Time_End": 1706.0,
      "Text": " We need to make the shellcode about whole exploit process to chain them."
    },
    {
      "Time_Start": 1707.0,
      "Time_End": 1710.0,
      "Text": " But it is so difficult and inconvenient."
    },
    {
      "Time_Start": 1710.0,
      "Time_End": 1719.0,
      "Text": " So many exploits utilize the helper class, which allows attackers to write their exploit code as JavaScript."
    },
    {
      "Time_Start": 1721.0,
      "Time_End": 1725.0,
      "Text": " Punjs is one of the helper class for exploit."
    },
    {
      "Time_Start": 1726.0,
      "Time_End": 1733.0,
      "Text": " It was developed by our company, but sadly, it is not maintained for 5 years."
    },
    {
      "Time_Start": 1734.0,
      "Time_End": 1737.0,
      "Text": " So I wrote own helper class for this."
    },
    {
      "Time_Start": 1737.0,
      "Time_End": 1740.0,
      "Text": " This is the power of the exploit code."
    },
    {
      "Time_Start": 1741.0,
      "Time_End": 1751.0,
      "Text": " With the own helper class, I can embed the sandbox escape exploit code as JavaScript, like this."
    },
    {
      "Time_Start": 1754.0,
      "Time_End": 1758.0,
      "Text": " And then, I will pick up where I left off."
    },
    {
      "Time_Start": 1758.0,
      "Time_End": 1763.0,
      "Text": " For the sandbox escape, I have set up the strategy like this."
    },
    {
      "Time_Start": 1764.0,
      "Time_End": 1771.0,
      "Text": " To achieve this, we should spread the threat of the higher privilege process."
    },
    {
      "Time_Start": 1772.0,
      "Time_End": 1774.0,
      "Text": " Which process is suitable?"
    },
    {
      "Time_Start": 1775.0,
      "Time_End": 1784.0,
      "Text": " We first try to find a way to create the system threat, but it is not easy."
    },
    {
      "Time_Start": 1784.0,
      "Time_End": 1792.0,
      "Text": " We try to find a way to create the system threat, but it is something hard due to the limited permission in the sandbox."
    },
    {
      "Time_Start": 1793.0,
      "Time_End": 1798.0,
      "Text": " So we turned our attention to another processes."
    },
    {
      "Time_Start": 1799.0,
      "Time_End": 1803.0,
      "Text": " One candidate was audio process of Chrome."
    },
    {
      "Time_Start": 1804.0,
      "Time_End": 1809.0,
      "Text": " We can easily create the threat of that process by this code."
    },
    {
      "Time_Start": 1810.0,
      "Time_End": 1816.0,
      "Text": " However, when the audio threat is created, the renderer threat is also created."
    },
    {
      "Time_Start": 1817.0,
      "Time_End": 1823.0,
      "Text": " It reduces the probability of audio threat taking up the free memory."
    },
    {
      "Time_Start": 1824.0,
      "Time_End": 1832.0,
      "Text": " In addition, audio threat has many mitigations, which makes exploit more difficult."
    },
    {
      "Time_Start": 1834.0,
      "Time_End": 1837.0,
      "Text": " The second option is file picker process."
    },
    {
      "Time_Start": 1837.0,
      "Time_End": 1842.0,
      "Text": " Just calling this function should open file picker."
    },
    {
      "Time_Start": 1843.0,
      "Time_End": 1846.0,
      "Text": " The file picker window is created as a new process."
    },
    {
      "Time_Start": 1847.0,
      "Time_End": 1851.0,
      "Text": " This process is medium integrity with few mitigations."
    },
    {
      "Time_Start": 1852.0,
      "Time_End": 1865.0,
      "Text": " File picker windows will generate 25 to 30 threats, and they have been placed at the free memory with high probability when I pass it."
    },
    {
      "Time_Start": 1866.0,
      "Time_End": 1872.0,
      "Text": " Now we select the target process and we can rewrite on that process."
    },
    {
      "Time_Start": 1873.0,
      "Time_End": 1876.0,
      "Text": " Then how can we run the arbitrary code?"
    },
    {
      "Time_Start": 1877.0,
      "Time_End": 1883.0,
      "Text": " To make the arbitrary code, we overwrite the global variable which contains the object address."
    },
    {
      "Time_Start": 1884.0,
      "Time_End": 1890.0,
      "Text": " Using the arbitrary redirect primitive, construct the fake object at the empty area,"
    },
    {
      "Time_Start": 1891.0,
      "Time_End": 1896.0,
      "Text": " and then overwrite the global object to the address of fake object."
    },
    {
      "Time_Start": 1897.0,
      "Time_End": 1902.0,
      "Text": " When the global object returns, the exploit will be triggered."
    },
    {
      "Time_Start": 1904.0,
      "Time_End": 1908.0,
      "Text": " There are some candidates for global variable to overwrite."
    },
    {
      "Time_Start": 1908.0,
      "Time_End": 1913.0,
      "Text": " We have used the GActive verifier for our exploit."
    },
    {
      "Time_Start": 1914.0,
      "Time_End": 1918.0,
      "Text": " This is referenced when the file picker window is closed."
    },
    {
      "Time_Start": 1920.0,
      "Time_End": 1923.0,
      "Text": " Next, how did we construct the fake object?"
    },
    {
      "Time_Start": 1924.0,
      "Time_End": 1926.0,
      "Text": " There are many ways to construct."
    },
    {
      "Time_Start": 1927.0,
      "Time_End": 1932.0,
      "Text": " In my case, to construct the fake object, we used two gadgets."
    },
    {
      "Time_Start": 1933.0,
      "Time_End": 1935.0,
      "Text": " The first gadget is this function."
    },
    {
      "Time_Start": 1935.0,
      "Time_End": 1940.0,
      "Text": " This gadget can be used to connect function calls of two objects."
    },
    {
      "Time_Start": 1941.0,
      "Time_End": 1945.0,
      "Text": " The second gadget is this function."
    },
    {
      "Time_Start": 1946.0,
      "Time_End": 1953.0,
      "Text": " This gadget allows attackers to invoke an arbitrary function with desired arguments."
    },
    {
      "Time_Start": 1954.0,
      "Time_End": 1958.0,
      "Text": " So this is the full structure of our fake object."
    },
    {
      "Time_Start": 1959.0,
      "Time_End": 1966.0,
      "Text": " First, the function calls of object 1 and object 2 will be connected by the first gadget."
    },
    {
      "Time_Start": 1967.0,
      "Time_End": 1972.0,
      "Text": " Object 1 is used to allocate RWX memory."
    },
    {
      "Time_Start": 1973.0,
      "Time_End": 1977.0,
      "Text": " Object 2 is used to connect object 3 and object 4."
    },
    {
      "Time_Start": 1978.0,
      "Time_End": 1983.0,
      "Text": " Object 3 will copy the share code into the RWX area."
    },
    {
      "Time_Start": 1984.0,
      "Time_End": 1988.0,
      "Text": " Finally, object 4 will jump to the share code."
    },
    {
      "Time_Start": 1989.0,
      "Time_End": 1994.0,
      "Text": " So we got the arbitrary code execution outside the Chrome sandbox."
    },
    {
      "Time_Start": 1996.0,
      "Time_End": 1999.0,
      "Text": " The LP is easily connected."
    },
    {
      "Time_Start": 2000.0,
      "Time_End": 2001.0,
      "Text": " I skipped the part."
    },
    {
      "Time_Start": 2002.0,
      "Time_End": 2009.0,
      "Text": " The final problem is the limited space for the commands in WinEXE's API."
    },
    {
      "Time_Start": 2010.0,
      "Time_End": 2019.0,
      "Text": " To chain with LP exploit on host, we need to create a directory, download the exploit binary, and execute it."
    },
    {
      "Time_Start": 2020.0,
      "Time_End": 2026.0,
      "Text": " Maybe the powershell command is the best option, but the space is too small."
    },
    {
      "Time_Start": 2027.0,
      "Time_End": 2032.0,
      "Text": " So this space is only possible for the command line."
    },
    {
      "Time_Start": 2033.0,
      "Time_End": 2038.0,
      "Text": " To solve this problem, elaborating the outer chain is an option."
    },
    {
      "Time_Start": 2039.0,
      "Time_End": 2043.0,
      "Text": " But we choose to use different memory space for the command line."
    },
    {
      "Time_Start": 2044.0,
      "Time_End": 2049.0,
      "Text": " So we use the physical memory of guest OS."
    },
    {
      "Time_Start": 2050.0,
      "Time_End": 2058.0,
      "Text": " From the host OS perspective, the physical memory of guest OS is treated as a mapped memory."
    },
    {
      "Time_Start": 2059.0,
      "Time_End": 2064.0,
      "Text": " And each address can be obtained from VMWare VMX memory."
    },
    {
      "Time_Start": 2065.0,
      "Time_End": 2074.0,
      "Text": " So we just need to add one more RP gadget, which gets the address of mapped memory and puts it into the RCS register."
    },
    {
      "Time_Start": 2075.0,
      "Time_End": 2079.0,
      "Text": " The rest of the RP chain is the same."
    },
    {
      "Time_Start": 2082.0,
      "Time_End": 2087.0,
      "Text": " So that's the full story for our exploit chain."
    },
    {
      "Time_Start": 2088.0,
      "Time_End": 2094.0,
      "Text": " It's been a good experience for us, and we learned a lot for each system."
    },
    {
      "Time_Start": 2095.0,
      "Time_End": 2101.0,
      "Text": " Connecting each vulnerability makes them much more powerful and lots of fun."
    },
    {
      "Time_Start": 2102.0,
      "Time_End": 2111.0,
      "Text": " So maybe we'll be back with more interesting research, since we still have lots of ingredients in our database."
    },
    {
      "Time_Start": 2113.0,
      "Time_End": 2117.0,
      "Text": " I will end my presentation. Thank you very much."
    },
    {
      "Time_Start": 2118.0,
      "Time_End": 2120.0,
      "Text": " Wonderful. Thank you, Jahal."
    }
  ]
}