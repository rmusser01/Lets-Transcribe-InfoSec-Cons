**Introduction**:
- **Ethan** and **Yang** from **CyberConnect** present their research on Win32k vulnerabilities.
- Win32k is a well-known **attack surface** in the **Windows system** that has caused significant **security issues** in the past.
- Despite **Microsoft's efforts** and the implementation of **security mitigation measures**, the presenters have found ways to bypass these protections.

**Win32k Overview**:
- Introduced in **Windows 24** to enhance **web performance** and **memory usage**.
- **CSRSS2** became a **standalone kernel module**, with **backend Windows NDE 3.5 CSRSS** handling **graphic rendering** and **user interface management**.
- **Insertive key** comprises three main components: **GDI (Graphic Device Interface)**, **USBR (User Interface Management)**, and **SANS (Auxiliary Routines)** for **DirectX API**.
- The **window manager** handles UI elements like **Windows Display**, **Screen Output**, **Input Collection**, and **Mass Processing**.
- **GDI** is responsible for **graphic rendering**, **GDI objects**, **color matching**, **mathematical libraries**, and **phone support**.
- Each user session has a **separate map copy** of insertive key voices for **session isolation** and **security**.
- **User Interface Privilege Isolation** prevents **low-privilege processes** from interfering with **high-integrity processes**.
- The insertive key **rejects multiple callback functions** to interact with the **community executive** and exports **GUI-oriented objects** like **desktops**, **windows stations**, and **defined structures**.

**Classical CVE-2021-1332**:
- A vulnerability in the insertive key allowing **privilege escalation**.
- Involves carefully defining the **neural state callback function**, causing the **kernel** to misinterpret **arbitrary neural state values** as **kernel addresses**.
- Bypassing normal **memory access checks** and achieving **out-of-bounds real-time values**.

**Uncovering New Vulnerabilities**:
- Every window in the insertive key driver is divided by the **tagwind structure**, which includes a **function ID field (fnid)**.
- The **fnid** specifies the **Windows class** (e.g., Scrollable, Manual, Desktop)**, and allows modification of the **request of the Windows value** written after the output.
- The vulnerability lies in the **tagwind to function ID attribute** and the **transformation relationship** corresponding to the **RTL key** and **desktop**.

**Microsoft's Mitigation Mechanisms**:
- **Type Isolation**: Implemented through interconnected structures (**C-type isolation**, **C-section entry**, **C-section bitmap allocator**, **RTL bitmap**) to prevent **kernel exploitation** techniques using **bitmaps**.
- **KD-SLR (Kernel Address Based Layout Optimization)**: Remaps the **base address** of the **kernel** on boot, making it harder for exploits to **jump into the kernel**.
- **KCFG**: A **security feature** that places **time registration** on code execution locations, combating **memory corruption vulnerabilities**.
- **Kernel Data Execution Prevention (DEP)**: Enables the system to mark memory pages as **non-insertable**, making **buffer overflow exploitation** more difficult.

**CVEs Related to M32T**:
- **CVE-2021-41357**: Vulnerability based on a **twin-structure UVFM** and **lambda function**.
- **CVE-2023-2274**: Involves using a **multiplexed CVE callback** to reduce **if-view-windows** and **truncated-function segregation**.
- The remaining three CVEs are related to **patch bypass** and **vulnerabilities caused by segmented addressing** through **FNID** and **RTLP sending extra address**.

**CVE-2021-41357 Analysis**:
- The vulnerability is a **type-association bypass** triggered when the **M32T** function calls **R3** using **window.js**.
- A **lambda function** is invoked, which returns the **window's primary address** and performs **read-pull operations** and **dereferencing**.
- The function can be exploited by setting up a **callback** to **R3** and manipulating the **parent window** of the **child window**.
- By creating multiple **exploited windows**, the **kernel address** of the initial parent window can be overridden.
- Using **console.control**, a **small RTL kit** is created to perform a **desktop login function**.
- The **stash** can be hijacked, and the **parent window** of the **child window** can be modified, triggering a **UEF (Unhandled Exception Filter)**.
- Due to **type oscillation**, tool injection is not possible, requiring the creation of numerous **type window structures** to occupy the initial type window structure.
- The **PIST desktop pointer** in the type window structure can be modified to achieve **kernel pool auto-bounce** and **arbitrary address conversion**.

**CVE-2003-28274**:
- The exploit process involves creating a window and adjusting the **check TLS structure** with **extended window memory**.
- The window is then set as a **DDE server**, and **console control** is used to manage window memory as a **RTL heap**.
- The **KLDB function** provides an opportunity for an **R3 callback**, and a **code snippet** handles **DDE messages** in a **Windows application**.
- By copying the **DDE callback**, the vulnerability is triggered, providing access to the data structure stored in **RTL-HEAP**.

**CVE-2021-1732**:
- A **bypass vulnerability** in the **VSWP framework**, allowing **kernel calls** by invoking relevant **QI APIs** (e.g., **Windows Probe**, **Switch Windows Probe**).
- The **tagger** can interpret the **callback** by cooking a function named **allocateWindowClassAdvice** in the **kernel**.
- The **Linux tag** is modified by setting the **console window flag** of the tagging key object using the **NTUserConsoleControl method**.
- After the **callback**, the system fails to check if the **window tag** has changed due to the **tag computation**.
- By offsetting the **kernel**, the tagger gains control and can modify the **tagged key structure** of the **window table**.
- The **CS progress value** of the window table must be smaller than the **offset to the desktop heap** to ensure successful exploitation.

**CVE-202.4.1.1.3**:
- Triggering the vulnerability involves opening the **process internal kernel callback table** and invoking a specific function.
- The **class and size function** is triggered, and the **WAN message** is passed.
- The **user motorbook** is invoked through a **vulnerability attack**, changing the **window FID** to **FID-dialog** and adding the **WF-dialog-wint** flag.
- The code replaces the **first field** with a **controllable value**, leading to a potential **information disclosure** by leaking the **kernel address** of the **TechWin structure**.

**Summary and Q&A**:
- The presenters provide a critical commentary on the **Windows operating system**, highlighting its **graphical performance**, **user interface management**, and frequent **vulnerability discoveries**.
- The methods for finding vulnerabilities are **universal**, involving techniques like **fuzzing**, **static or dynamic analysis**, and **symbolic explanation**.
- The presented vulnerabilities can be used to **escape sandbox environments** in browsers and other systems, even in the future (**2034**).
- The presenters found the bugs primarily through **static analysis** and believe that **artificial intelligence** methods can be effective in finding and addressing Win32k vulnerabilities.