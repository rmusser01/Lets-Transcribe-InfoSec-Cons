**Introduction:**
- Speakers: **Hangyu Hua** (@HBh25Y) and **Juntao Wu** (@Dawuge3)

**Overview:**
- Despite the efforts of powerful fuzzers, **longstanding vulnerabilities** have been exposed, indicating the presence of secrets beyond their reach.
- Manual code audits and investigation of fuzzer pain points led to the discovery of **dozens of high-value vulnerabilities**, which existing fuzzers struggle to detect.

**Speaker Background:**
- **Hangyu Hua**: Security researcher at **numen cyber** and co-founder of **Shuffle Team**, focusing on low-level security.
- **Juntao Wu**: Security researcher and founder of **Shuffle Team**, specializing in mobile/web3 vulnerability discovery and exploitation. Inducted into the **Samsung Mobile Security Hall of Fame** (2021-2023).

**Agenda:**
- Why forgotten trash appears.
- Review of targets.
- Mobile RCE and the parsing logic of HEAP.

**Why Forgotten Trash Appears:**
- Web 3 project audits aim to find all vulnerabilities, but their large size makes it nearly impossible to guarantee comprehensive detection.
- Some vulnerabilities are overlooked as they reside in code that has been extensively tested and manually audited.
- A recent example is a vulnerability in the lowest-biased PNG, affecting projects using 3 types, with a wide impact.
- This vulnerability was not detected by black box fuzz tools or the OASIS fuzz platform due to a gap in their testing coverage.

**Recent Vulnerability in WebP Parsing Code:**
- Occurred in September last year and affected Android, Chrome, macOS, and other platforms.
- Caused by a problem in the auto-bounce writing of the Kafka encoding algorithm.
- The decoder constructs a Huffman encoding table based on prefixed encoded data, but a vulnerability exists in the default picture's Huffman coding table.
- The core premise is that the encoded data must conform to parametric Huffman coding, ensuring a complete binary tree structure.
- However, as the Huffman coding table data comes from the on-chess, it may be manipulated by an attacker, leading to excessive memory allocation and a deep backflow.
- The key points of this vulnerability lie in the **counter area** and the **root table**.

**Linux Kernel as a Target for Bug Bounty:**
- Google's bounty program and Hongjiong's Ubuntu LTE project have revealed numerous exploitable vulnerabilities in the Linux core.
- Popular modules for bug hunting include **EPF**, **IOUMI**, and **Netfilter**, with the latter attracting many well-known security researchers.
- The **network package scheduler** is a promising target due to its completeness, lack of vulnerabilities, and minimal attention.
- Techniques for utilizing NetScheduler are discussed, including creating an SD and calling sendMessage with ASConnect link, along with various RTM options.

**Mobile RCE and HEAP Parsing Logic:**
- HEAP files are a special case of ISO-based media file formats, supporting both still images and image sequences.
- HEAP parsing involves two parts: HEAP file parsing and parsing of the file content inside HEAP.
- The highly inclusive nature of file content leads to the parsing of other file formats, requiring specialized testing tools.
- Initial attempts to test function libraries through QMU were rejected due to complex gen-line interface elements.
- A fuzzer was developed using Vreda to write a completely code coverage calculation, utilizing the underlying hooking framework directed through the QMU object.
- The final effect allowed direct fuzzer execution on a mobile phone, resulting in the discovery of 16 manipulations, including 5 critical and 1 high.
- A notable finding was CVE-2021-39804, which proved that platforms like OASIS Fuzz cannot achieve 100% success, even with extensively tested modules.

**Enhancing Fuzzers:**
- A comparison of existing fuzzing test flow methods, including closed-source and binary fuzzing, Android J9 fuzzing, and closed-source library testing.
- For mobile testing targets, code coverage is the most effective fuzzing testing method.
- Various tools and techniques are discussed for collecting code coverage in different scenarios, such as native libraries, shared libraries, and native network processes.
- Attention is drawn to vulnerabilities missed by fuzzing test operations due to complex conditionals, deep travel paths, and seed source limitations.
- Common issues with fuzzing testing tools, such as instability, slow testing speed, and challenges with multi-line process parallel fuzzing, are highlighted.

**Conclusion:**
- A comprehensive overview of the talk, covering the existence of vulnerabilities beyond the reach of fuzzers and the importance of manual code audits.
- The speakers provided insights into their backgrounds, the agenda, and the discovery of high-value vulnerabilities.
- The discussion centered on why forgotten trash appears, Linux kernel as a target for bug bounty, mobile RCE, and enhancing fuzzers.
- The notes provide a structured summary of the key points presented during the talk, offering a valuable reference for further exploration and research.