**Introduction**:
- **Fan Peng** from **WeSecure Label** discusses **hacking services**, their **prerequisites**, and **methods** for accessing them.

**Hacking Services**:
- Services in a car are compared to an asparagus, with only a small portion accessible to users.
- **Front-end services** include entertainment systems, dash cameras, and driver assistance systems.
- **Hidden services** are reserved for maintainers or debuggers and are not easily accessible to normal users.
- Examples of hidden services include IPC in ECU, RPC in ECU, and RPC between ECUs.

**Accessing Hidden Services**:
- Three main entrances to access hidden services: disk environment, Spark interface, and hardware interface.
- Disk environment: VLAN, Qt, Twilio, and QSCS are used for Linux-based head units.
- Spark interface: ADB for Android, SSH for process systems, and Qualcomm for instructor clusters or ADAS.
- Hardware interface: UART for SoC, GTAC for MSU, and ODB for home card.

**Intelligent Context**:
- Large screen in intelligent context serves as the main entry point for user interaction.
- Each cluster manufacturer has its own human interface, known as **IVI**, which can be based on Linux, QSCS, or Android.
- Android allows car makers to customize the home screen, start applications, and perform other tasks.
- Customization provides a tailored experience but also introduces differences in user interfaces and settings.

**Launcher Differences**:
- Standard setting app is often missing from the launcher, replaced by a specific setting function.
- User is typically unable to enable developer mode.
- Car makers use their own frameworks and launchers, leading to differences between generations and manufacturers.
- Some car launchers don't display third-party applications on the desktop.

**Analyzing Hidden Applications**:
- Comparison of displayed and hidden applications revealed the presence of an **interface category** in the Android manifesto.
- Applications with the "launcher" category will appear on the top-level launcher, while those without are hidden.
- Car makers maintain their own whitelists of applications that will appear on the launcher.

**Accessing Hidden Apps**:
- Hidden apps can be made visible through system build functions, such as enabling developer mode.
- Current launcher can be bypassed to access hidden apps with default icons.
- Breaking down the launcher is the first step to accessing more hidden services.

**Unlocking Hidden Services**:
- 18 methods to unlock hidden services, including password protection, direct code input, voice control, and USB commands.
- Password protection can be bypassed using brute force methods, such as Beta USB, with certain restrictions.
- Voice control is a new type of entrance, while USB over Diagnostic allows for command usage.

**Click and Motion Events**:
- Click actions are defined by **MotionEvent**, which describes motion in terms of action codes and values.
- Press and release actions are specified by action codes, with pointer values indicating position and movement.
- Lampress, for example, checks the current time and resets if less than 2 seconds or enables the hidden service if bigger.

**Android Panic Codes**:
- Android uses panic codes to show **MEI**, and vendors can create hidden services using similar codes.
- By providing the correct code, the hidden service can be started.
- Some vendors use alternative methods, such as checking for a predefined value using **getString**.

**Android-Safe Code Usage**:
- Four ways to use Android-safe codes: DARP, DeepLink, VHL access, and BroadRaw or WebView.
- DARP uses a specific URI to open the hidden service, while DeepLink employs a different schema.
- VHL access uses "M" to open the hidden service, and BroadRaw or WebView provide additional access methods.

**Scanning Secret Codes**:
- Open-source applications like **SecretCode** can scan for secret codes on the device.
- In some cases, the register can be used to obtain secret codes without installing additional apps.

**Voice Assistant Usage**:
- Voice assistants like WAZE are used for various functions, such as controlling air conditioning or opening windows.
- Voice commands can also be used to access hidden functions, such as engineer mode.
- There are risks associated with voice commands, as they can influence unsafe operations.

**USB Access**:
- Maintenance engineers use USB keys to access cars, but a lost key could provide unauthorized access.
- Backdoors have been discovered through USB stick plug-ins, executing specific commands automatically.

**UDS Routing**:
- UDS (Unified Diagnostic Service) is used for vehicle diagnosis and programming.
- By obtaining the unlocked algorithm and security concept, the head service can be enabled.
- This provides access to functions like the SSU debug port and CS5 jobs.

**Password Protection Bypass**:
- Users can break down password protection services through brute force methods or escaping to native settings.
- Beta USB can be used to correct passwords, but it requires checking for extension device compatibility.
- Fingerprint authentication can also be used to bypass password protection.

**Deep Link Usage**:
- Android and SQL codes are types of deep links, but they are challenging to bypass.
- Deep links with the "bloatable" category can be triggered from a bloatable web view.
- This provides access to hidden services, such as enabling ADB and accessing log files.

**Real-Car Testing**:
- Successful testing of deep links in real cars, allowing access to hidden activities and settings.
- Method is effective even without "bloatable" availability, as most cars have a web view.

**Disabled Activity, Property, Permission, and Test Boundary**:
- Scanning for disabled activities can reveal hidden services and sensitive interfaces.
- Some car makers have a large number of **hack properties**, allowing access to sensitive data and functions.
- Normal property settings often lack permission restrictions, allowing any app to utilize them.
- Test binaries may be available in RISC-V, providing access to WCAG HAL tools for interacting with hardware.

**Unlocking Hidden Services**:
- Card makers define various methods, including dial codes, voice commands, and automation through path restrictions.
- Accessing hidden services allows for further exploration, data collection, and automation.

**HAL Case Study**:
- HAL (Hardware Abstraction Layer) serves as a bridge between the Android framework and hardware.
- By analyzing deep links and exploiting vulnerabilities, the hidden service engine mode was accessed.
- This provided control over the card, with potential risks to data security.

**Visualizing Relationships**:
- A user diagram illustrates the relationship between Android application activities and services.
- The diagram helps visualize data flow and identify entrances to hidden services.
- It also aids in bug hunting by providing an overview of app relationships.

**Project Source Code**:
- Will be made available on **GitHub**, but it may take some time to detach from the project.

**Q&A**:
- The speaker used open-source tools like JEDX to decompile classes to DEX files and analyze data workflows.
- Brute forcing passwords is generally safe, but there are limitations on the number of attempts.
- Analyzing binary files can help retrieve passwords and bypass protection measures.