{
  "webpage_url": "https://www.youtube.com/watch?v=foOyhOUreno",
  "title": "Off-By-One 2024 Day 1- Uncharted Depths Navigating Overlooked Vulnerabilities...",
  "description": "Uncharted Depths Navigating Overlooked Vulnerabilities in the Sea of Million WordPress Sites\n\nAbstract\n\nContent Management System (CMS) platform is still one of the best options to build a website quickly. CMS provides a user-friendly interface that allows non-technical users to easily create, edit, and publish content without requiring extensive HTML, CSS, or Javascript programming language knowledge.\n\nWordPress is still the most popular CMS platform, powering 43.2% of the websites online, with a CMS market share of 63.5%. With its popularity, it\u2019s prone to massive exploit attempts. The WordPress Core itself is not the actual target, the plugins and themes are the actual target of an attacker with the vast majority of the security bugs being found in plugins and themes.\n\nThis talk will cover deep technical details of overlooked impactful vulnerabilities discovered in WordPress Core and across the most popular WordPress plugins, with each component having more than a hundred thousand active installations.\n\nWe will also cover vulnerability in one of the most popular libraries used in plugins and themes, which could affect more than 7 million websites.\n\nWe will use multiple cases of overlooked XSS and privilege escalation attack vectors which could be easily exploited in the wild. We will show how we found these vulnerability cases and how to secure the code from these potential vulnerabilities.\n\nJoin us for the journey of exploiting the WordPress ecosystem (An Exploit demo is included too !)\n\nSpeaker\nRafie Muhammad is a security researcher at Patchstack. He specializes in web application security, WordPress security and PHP code review.\n\nRafie is passionate about web application security with a white-box approach. He likes listening to podcasts while reading a bunch of PHP code on VSCode.\n\nWith almost 2 years experience on WordPress security, Rafie has secured critical and most popular WordPress environments ranging from WordPress Core, Plugins and Themes.",
  "channel_url": "https://www.youtube.com/channel/UCmrsIbKdxEMBEefD8v8RigQ",
  "duration": 2915,
  "channel": "Off-By-One Comms Team",
  "uploader": "Off-By-One Comms Team",
  "upload_date": "20240831"
}

This text was transcribed using whisper model: large-v2

 So, hello everybody. Here we are going to present a title named Cardcaptor Devs, the Navigational Product for an Ambitious and Seamless Optimization of Wordpress Sites.  So, for starter, let me introduce myself. My name is Rafi Muhammad from Indonesia.  Currently, I am a CWP Researcher at PatchTech, also known in the internet with the username of erisd.  I am mostly focused on the web application security. I am also a part-time executive player for the SKSE team from Indonesia.  I am also a bug bounty hunter and of course, a PhD advisor.  So, for the intro, in the first place, why target CMS from the security research perspective?  So, CMS platform itself is still the first go-to solution for managing content on websites without the need for technical knowledge.  So, basically CMS is mostly used by non-technical person to create a great website.  In 2022, over 67% of websites will utilize CMS.  Also, most of the times, CMS has a lot of features for us to check for vulnerabilities.  For that, why are we targeting Wordpress?  First of all, Wordpress covers around 43% of all websites.  And also, it has around 34% websites are in the top 1 billion websites.  Also, Wordpress has the CMS market share of 63% in 2024.  It is much higher than any other CMS platform like Joomla, DeepPul, and Edge.  It's also an open source.  It's pretty easy to familiarize if you are a beginner to security research.  And of course, it's in the PhD.  So, we will get to know Wordpress itself.  So, Wordpress has three different components.  The first component is the form, which is the CMS platform itself.  The second one is the plugin, which is an additional piece of software that can be installed on Wordpress website.  It extends the functionality and has new features.  We also have the theme.  It is similar to the plugin, but the main purpose of it is for the visual appearance of the website.  So, when doing our research, we are mostly finding vulnerabilities in the plugin itself,  because the theme mostly doesn't have a lot of features in it.  For some cases, there might be a premium theme, not a free theme,  that has an all-in-one solution.  So, basically, in that kind of theme, you have a lot of features to check.  So, we will get to know the Wordpress free repository itself.  So, the Wordpress free repository itself has about 60K clients.  It ranges from 10 active installations to 5.  It also has 12K themes, hosted in the free repository.  So, there is a lot of plugins and themes for us that can be used for research purposes.  So, we are moving on to the scanning Wordpress port base.  So, Wordpress port plugins and themes has a CPM, or track register.  If we got a Word or Regex pattern to search for a potential affected plugins or themes,  let's say we want to search for this Regex in any plugins or themes in the free repository,  there is a tool called wp-directory.net.  It's an example of a few of the websites.  Or also, if you want to deploy it yourself,  they have also the GitHub repository for us to manually deploy the tools inside of our server.  So, we move on to the research target.  So, in order to do a proper research in the Wordpress environment,  we have to make the right decision on what plugins or themes that we will be researching.  So, there is a graph.  If the plugins or themes have a lot of popularity or has a huge active installments,  the likelihood of critical or impactful vulnerability found or exist is really minimal.  That's because a huge active installation of plugins or themes,  mainly are already taken off because it's also open source.  And actually, the port quality itself is generally much better than the low install of plugins.  So, you have to choose here if you want to try to find a vulnerability in a high installation of plugins or themes.  And you probably will not get a nice finding.  But, if you want to try research on a low install of plugins,  like 10k or 50k installation count, you might get a decent finding on the plugins itself.  So, my initial approach for doing research in the Wordpress environment.  So, for the free version, we can fetch the plugins or themes via the installer, via the Wordpress core itself.  For premium version, we can try to fetch the null version.  The null version itself is just simply like the cracked version of the premium plugins or themes.  So, there is a lot of websites that hosted null version of the plugins or themes.  One of the example is the wayadone.com website and also the wplocker.net.  Disclaimer for the null version, because it could be dangerous on the test.  Because in some cases, we do find a backdoor code in the null version of the plugins or themes.  Also, after that, I usually analyze the code.  Additionally, using the dynamic analysis, such as xvbuffers.  So, choosing priority for tools in Wordpress environment.  So, basically I have a list of tools that I will type to find when I first try to research or apply the plugin.  So, the first tool that I will look for is the prefetch escalation.  The second one is XSS.  Why XSS is the second priority for tools?  Because in Wordpress, basically because of the behavior of Wordpress, if you find a single XSS in Wordpress,  you can basically escalate your prefetch to any role in Wordpress.  Because you can just simply register a new user when you start a role.  The third one is SPL injection.  And then the fourth, because it's PHP-based, we also look for PHP object injection or its initialization.  The next one is RCE, of course.  So, we have to look for LFI, because it's PHP.  And then the last one that I try to look for is arbitrary file rate and duration.  So, we move on to the case studies.  First, we will take a look of the overlooked XSS case studies in Wordpress.  So, the first example is one of the CPE that I found.  It's a site-wide prefetched XSS in a free news library.  So, some details about the vulnerability that it is introduced in version 1.0.8.  And it is patched on version 2.5.10.  The vulnerable code page itself is around 8 years and 1 month.  So, this library is massively used in Wordpress plugins and themes.  It is approximately installed in 1,300 free plugins and a couple of themes in the Wordpress repository.  So, by combining the active installation of the plugins and themes,  the installation of the free news library is around 7 billion.  So, the background story of this finding is,  initially I am looking for foams on TablePress plugins which is used in this library.  Notice that it is a free news library.  And because I didn't find any interesting vulnerability in the TablePress itself,  I decided to find a vulnerability in the library itself.  And it turns out that it is a vulnerability to XSS.  So, we jump into a little bit of the code review.  Here we can see in the right side of the slides,  there will be a call to the add sticky function.  So, in Wordpress, there is a feature called admin notice,  which is a feature for the developer to create a pop-up message in the admin area.  So, basically in Wordpress, the admin area itself will be using an endpoint of WP-Test-Admin.  So, basically the add sticky function will create a message to the admin area.  In this case, we can see that it uses the fsRequestGet function with the word test plan parameter,  and also below it is using the word test email parameter.  So, the fsRequestGet function itself is just like a simple function wrapper to fetch a request global variable in PHP.  So, the add sticky just simply will call the add function,  and then the add function will process the message to the message object,  and the message object will be stored in the __admin__message object.  Then, this admin message object actually will be called when the application tries to call the admin notice function.  So, we can see that it will try to do an iteration on the __admin__message variable,  and then it will call the __admin__notice.php function,  which in the right side of the slides, it will just simply echo the message via the false variable.  So, because the fsRequestGet function itself just simply achieves or receives the request global variable from the user,  and there is no escape or sanitation on the data, we can basically achieve access on these cases.  So, what about the fetch from the vendor?  So, the fetch from the vendor is they are adding an additional function named fsSanitizeInput,  which will be used inside the fsRequestGet function.  So, basically the fsSanitizeInput function will sanitize the input using the sanitizeTextField function.  The sanitizeTextField function itself is basically just a function to strip any of the HTML type or HTML string on the input.  So, we move on to the example exploit.  So, in this one, we have two cases for exploit.  The first one is the opt-in cases, and the second one is the skip opt-in cases.  So, when you try to install a plugin in WordPress, sometimes the plugins allow the users to opt-in for newsletter message or promotion message and any kind of message.  So, basically we can pop the replicant accesses based on the user's option if he is opt-in or skip the opt-in.  So, for this example, we will try to demonstrate with the opt-in example.  So, we are using the TableauPress plugin as an example.  We are using the vulnerable version.  And then, the admin tries to click the opt-in.  So, it's opt-in to get email notification for security and filter updates and so on.  So, admin is just alone in the plugin and accept the opt-in.  He then checks his email for the confirmation link for the opt-in message.  And then, after getting the link, he just simply can visit the opt-in confirmation link.  After visiting the opt-in confirmation link, we can just simply put the example of HSS payload using the admin account to test for the HSS.  In this case, we put the HSS on the WordPress plugin.  So, the HSS is triggered using the purchase email.  So, basically the HSS can also be triggered on any WP admin.  So, in this case, we test it on the options.general.php file.  So, basically this replicant HSS can be triggered on any WP admin or admin account.  That's why we call it like a side-wipe.  Next case study is the side-wipe unauthorized source HSS in MySQL cache.  So, the vulnerability details is introduced in version 5.  It's in version 5.7.0.1.  The vulnerable code page is around 1.3 months.  It has 5.7.0.1.  So, the background story of this vulnerability is I initially looking for a broken access control API.  And it turns out I do find a broken access control API, but it also produces an unauthorized source HSS in MySQL.  So, as you can see in the example of what we view, there is a register as root function,  which will register a custom API endpoint using the cdnstatus endpoint.  It will check the permission using the isfromfault function.  As you can see, the isfromfault function just returns true.  So, basically any unauthenticated user can visit this endpoint.  So, the callback parameter is set to the cdnstatus function.  If we see the cdnstatus function, it will basically call the update cdnstatus function.  The function itself also just calling another function, which is the process cdnstatus, with our supplied postfirm method of result.  In the process cdnstatus function also, it will call the admin display succeed function with our supplied method, which is the result variable.  So, basically the succeed function itself will forward the message, the msg variable to the add notice.  So, it is the same scenario as the previous.  The vulnerability resides in the add notice feature.  So, it will add the notice with the message, and then it will build the notice using the build underscore notice function.  And it will basically return the html string with the message or in this case, on the askdl variable directly to the html.  So, the patch from the vendor is, they basically first try to fix the vulnerability control by applying some kind of hash tag in the function itself.  It is an md5 tag of a secret pocket.  And then they also apply an shtml function to escape the input from the user.  So, the example POC for this is a simple pull request.  You can specify the address payload inside of the result, the main service parameter.  Or you can also specify in the result, underscore message variable.  So, we will test this example POC.  POC.  So, in this case, as a result, an admin account.  Then, as a non-dedicated user, we just perform this pull request containing the SS payload, the cdn status, and the NPA.  After executing the pull request, admin can request any page on the HW admin, and it will trigger in the HW admin area.  You can also test with a different variable, which is the underscore msv parameter.  And it will also trigger the XSS in the HW admin area.  Okay, we are moving on to the last cases for the XSS.  So, yeah, for the XSS, we have fun stuff like this.  So, the details of this case is introduced in version 6.1.0.  Next, in version 6.1.6.  The front of the port page itself is one month, which is quite short compared to the other vulnerabilities.  It has active installation of 2.0.  This vulnerability is also unique because it involves a vulnerable WordPress core function.  So, this vulnerability can only be exploited in WordPress core function prior to version 6.1.2.  So, the background story of this vulnerability is initially I'm looking for XSS on the custom shell implementation of the trans-customer-first file itself.  But, yeah, I found a different case of testing and write the function.  Yeah, so if we try to look at the source code here,  we can see in the left side there is the current screen function, which will set this view variable to get a status parameter.  So, it will use a scientist.txt fill function.  As you are aware from the previous example, the scientist.txt fill function will try to strip any HTML tags from the input.  But, it will not strip or escape the string like double quotes or single quotes.  So, in this case, if we file sanitization using this function, we can still receive XSS if the string is placed inside of single quotes on the HTML attributes.  So, we have an admin body class function, which is an action from the WordPress core itself.  The function itself will append our previously stated this view variable to the classes and will receive the return in classes from the function.  So, if we look closely into the WordPress core itself, that is located in the wp-admins.php,  we can see that the WordPress core will fetch the value from the admin body class action or filter to the admin body class variable.  And then, it will simply echo the admin body class variable to the HTML string in the body type HTML.  So, there is no proper sanitization done in this case.  So, we can simply put our domain name as XSS.  So, for the patch from the plugin side, they decided to use a function named as underscore.html function.  This function is different from the Cytus.txt function because the purpose itself is actually to escape strings inside of HTML.  So, it will escape single quotes and double quotes in the string.  So, it is safe to use this function for these cases.  Also, from the WordPress core side, the core security team also decided to use as underscore.html function to the admin body class variable.  So, you can see the example payload for this.  So, it is different from the other two XSS cases.  In these cases, we can only trigger this XSS on a specific envoy.  It is the wp-admin-edit.jsp with the post type set to SACF, underscore, underscore.  So, we can set our XSS payload in the post status here parameter.  In these cases, because it is in the body type HTML, we can use the convert all to test for the XSS.  So, as an admin, we can simply visit this envoy and trigger the XSS.  Oh yeah, it is not the last one yet.  The last one for the XSS cases is the WordPress core dedicated XSS.  So, in the WordPress core itself, we have several roles for users.  In this case, we will demonstrate the XSS on the contributor role on the WordPress core.  So, it is introduced in version 5.9 and it is fixed in version 6.5.5.  The available content is around 2.5 months.  Active installation is mainly used in selecting any active WordPress core instance.  The background story.  Actually, this patch is only 2 days ago, on Monday.  Initially, I am searching for any tools on the register to debug the process.  So, as you can see in the left side of the slides, we have a render block or template part.  So, in WordPress, we have a feature called block, which is just a piece of code that can be used from the visual editor side to display some documentation.  So, in this case, the further block is the template part function.  So, it will retrieve attributes parameter.  So, in this case, the referable attribute is the attribute's top name function.  It will be constructed to the HTML underscore tag variable.  We will use the S underscore IDL function.  But it is not enough to prevent XSS because the HTML underscore tag function itself will be appended directly to the opening tag and closing tag of the HTML.  So, we can just simply put a script and space src to our .js file and we can execute XSS.  The patch for this vulnerability is the core security theme 2 days ago.  Just implemented a check whitelist tag using wp-ks-es-lower-html.  So, this is basically just a limited set of lower HTML tag.  This consists of tags like div.  So, we cannot input any other tags such as script.  So, for the vulnerable block, we can just call the template part block in the content.  And we specify the tag name attributes to our development script src and our XSS file.  So, in this case, we are using a contributor role user.  Then, we will try to draft a post.  Then, we copy the XSS file on the block itself to the content parameter in the host request.  We then try to host like an example of .js file in our host.  We just test contributor.nr.  After setting up the src parameter, we can test the XSS by simply view the preview of the post.  So, in this case, because it is only performed by a contributor role user,  the main target for this kind of XSS is basically for the administrator to deliver the XSS.  So, basically contributor role cannot publish a post or a page.  It can only make a draft and it will need to be accepted by the previous user.  So, we move on to another vulnerable type of developer, vulnerability.  Now, we are going to discuss about the preferences condition case studies.  So, the first one is an unallocated account type of work in SNCL X.1.4 Elementor plugin.  Some of the details are introduced in version 5.4.0.  It is patched in version 5.7.0.1 and the kernel reportage is around 7.9.  It has active installation of the plugin recently.  So, the background story of this plugin is, I am initially searching for bones on the  custom registration process of the plugin, because the plugin has many features on it.  But, it turns out the contact over itself is found in another feature of the plugin.  So, the plugin has a login or register function, user function,  and then it handles a couple of actions on it, like login and register.  And, send password reset and also to reset the user password.  So, one of the functions that is vulnerable is the reset underscore password function.  So, you can see in this example is the rp underscore login variable will be set to our  supplied postmark parameter of rp login.  So, in this case, the code will try to pass the user object using the getUserVariable function,  using the rp underscore login variable.  So, the login in this case is just like the username or email from the user.  So, it then will check if the user exists and then it will try to perform a reset underscore  password function on this object with the supplied postmark parameter of the user.  So, basically with this case, because there is no check of password reset key,  we can basically change the password of any users in the website.  So, the patch for this vulnerability is simply by using the checkPasswordResetKey function,  which will check a unique password key from the database.  So, basically we will receive this key on our email when we are trying to reset our password.  So, the POC demo is quite simple for this one.  First, we try to login as admin with our password and it cannot because the database has a wrong password.  And then, we try to execute the script with targetUserAdmin and the password is 123.  So, if the password is changed, users will be logged out from WordPress.  So, admin cannot log in to their phone.  And we can just simply log in to the admin account to see if our password is changed.  So, the next one is how to get WordPress explanation in an HTML5.  So, in this case, the vulnerable webpage is a round format.  It also has a history collection of 100 pages.  So, the background story of this is, I am initially searching for things in the WordPress explanation process.  And it turns out, this is one of the tools for WordPress explanation.  So, it is very simple.  Because the function itself has a custom function to register the user.  It is the html.address.register function.  So, basically, the function itself will try to construct a user underscore data variable.  As you can see, the variable also accepts a role field to it.  It is directly supplied by the user using the post parameter of write underscore role.  And then, it will check the data using the html validation data.  And then, it will try to register a new user using the wp underscore user underscore user function.  So, the html validation data itself only checks the src validity of the data.  It is like checking the length and then checking the set of characters.  So, it is not checking if the user supplied an arbitrary role on the request itself.  So, the best is very simple.  Just by removing the role field from the user data variable.  So, the user can only be registered to the default role set by the user.  We put the POC demo for this one.  It is also quite simple.  First, we check from that new panel.  We check that there are only two users.  And then, we try to execute the script with user name and password set to 123 with administrator role.  So, after we execute this script, we are creating a user with administrator role.  So, we can see that there is a new user with administrator role.  And we can just simply log in to the account.  And we get the administrator role.  Yeah, I think this is the last case of the previous explanation on this presentation.  It is an unauthorized account that is offered in Jupyter Xcode plugin.  So, it is quite different from the other example because it is a premium plugin.  Since it is a premium plugin, we cannot test the version of it.  But it is patched in version 3.1.2.  It is also an unauthorized account.  So, the background story of it.  Initially, I am just a programmer.  So, we ask for the registration process.  But the content of it is not in the registration process itself, but in the social role of the user.  So, as you can see in the left side of the slides, we have the ISS handler function.  It is a part of the mem variable.  And the re-identifier variable directly for user input was parameter.  And then it will try to construct a user ID variable using the email access function with the email parameter that we supplied previously.  So, it will basically just check if the user is accessed from the supplied email.  After that, it will call the setUserFacebookID function using the user ID variable and the FBID variable.  So, the setUserFacebookID function will set the user metadata of the target user, which is the user ID.  So, the password metadata that will be set is the social media user FBID metadata with the FBID value.  So, basically with this, because there is no check in place, we can basically set any user's social media user FBID metadata to any string.  Why is this important?  Because there is also another function, which is called FacebookLogInsertion, which will fetch a value variable from the get parameter.  And then it will try to search a user using the getUser function.  And it will search for a user that has a specific value of social media user FBID.  And then it will construct an ID variable from the user object.  And it will simply set the current user and the authentication key of the request to the targeted user ID.  So, in these cases, we can just log the ID to any of the users by only logging the email.  So, for the fetch for this vulnerability, because the documentation is wrong on the social media feature,  the vendor decided to apply a proper fetch by checking the access token of the user itself.  So, now the users need to supply, in this case, it's a Facebook social login.  So, the users need to supply this Facebook access token.  And then the application will directly retrieve the email and the FBID directly from the Facebook Ramp API endpoint.  So, for now, users cannot accept any of the user's metadata anymore.  As you can see in the next page, the user ID is now constructed from the API email which comes directly from the Facebook endpoint.  So, we can try the new POC for these cases.  We can now log in as an admin, as an example.  And then, as an example, we can use any email on the admin account.  For these cases, we will use admin.admin.code email.  And then, as an authenticated user, we can just simply execute this script using the targeted admin email,  the social login path, and then any string that we want to set the FBID to.  In this case, we set the FBID to 1337.  So, after executing the script, we get the link to log in as a targeted user.  In this case, it's admin.startup.com.  So, as an authenticated user, we can just simply visit the link from the script.  And then, after visiting the link, we can simply log in as an admin.startup.com user.  So, we have come to the end of the presentation.  So, the conclusion is, first, WordPress is pretty much still a rare find from a security research perspective,  especially from the open source security research.  Most of the critical and impactful bugs found are rather just a simple, but overlooked bug.  There is also still a lack of details and attention to common use action and process in WordPress plugins or themes.  More research needs to be done on the most popular components in the WordPress ecosystem.  Also, there is a lot more potential research on the Southwest China tech, like the previous example,  specifically towards the library and the South plugin core.  So, yeah, any questions?  Thank you.  Thank you for a nice, great speech.  I have two questions.  The first question is that, when you read the code for finding vulnerability,  do you find the code that occurs vulnerability directly?  Or do you take a reverse track to the surface or surface from the core?  And the second question is that, while you take this research on,  did you find yourself any kind of standard to choose, probably,  if you establish your own WordPress blog?  In the security perspective, I mean, how to find a more safer plugin?  So, the first question is for finding vulnerabilities in WordPress itself.  So, yeah, basically, I think it depends on my mood, my current mood.  Sometimes, I try to find directly some of the known functions,  like the excite, or the follow function, or the call user function.  So, yeah, sometimes I do that and then trace back to the source of the input.  And then sometimes I'm also trying to find it directly from the global variable itself,  like the GET, POST, REQUEST, and also like the SERVER.  So, I think it basically depends on my mood,  whether I'm trying to search from the source or the SYNC.  But mostly I am searching from the source.  For the second question, sorry, can you repeat the second question?  This is not about security research,  but do you feel any way to choose a safer plugin?  I mean, how can you guarantee that,  relatively guarantee that this plugin is more safe?  So, I think there is no simple answer to this,  because, yeah, as you can see in this slide,  we are demonstrating a critical vulnerability in a very high installation count of plugins.  So, yeah, we cannot make sure if the highest count installation of a plugin is much safer than others,  but the availability will be much more than before.  And it probably has a better quality,  because mostly the huge installation count of the plugins is developed by a big company,  and it has a lot of developers on it, and it has some checks here and there.  So, yeah, I think the most safer way to choose a plugin to use  is I think based on not only the active installation of the plugin,  but maybe try to check if the plugin has previously addressed the vulnerability in a good timing manner.  For example, in previous cases, they patched the vulnerability in like 3 days or 4 days,  rather than the plugins that take a long time to patch the vulnerability.  Thank you.  Any more questions?  Sorry, I can ask, why you prioritize something like XSS SQL injection over something like RCE?  What's your reasons for doing so?  Yeah, so for the priorities for vulnerabilities itself,  so yeah, basically, mostly the priority is built towards the PHP code itself.  So in these cases, I am first prioritizing the previous escalation,  because this is like the most impactful part of the environment.  Of course there is like RCE, there is also like a critical one,  but it is not many plugins that use custom command call or something like that.  So our previous escalation is the top priority for the vulnerability in WordPress.  For the second one, the XSS, as I stated previously,  because the behaviour of WordPress and the current behaviour of WordPress,  if we receive a signal XSS from WordPress,  we can basically create any user, any role, including the XSS role.  So in WordPress currently there is no additional security type in place  if you are creating a user, so you can just basically create a user using XSS.  So yeah, maybe there could be like an enhancement in WordPress itself,  so when you are creating a user, you can ask for like password confirmation,  or like a notification, but basically for now, WordPress doesn't have that type in place,  so basically you can receive the XSS.  For scaling the chain, of course, there is a priority to extract data from the database,  and also the 4th month PHP update injection, because it's in PHP,  so you need to find the PHP update injection.  And then RCP and LFI also, because it's in PHP,  and then the last one is arbitrary file rate injection.  Why arbitrary file rate? Because with this you can read the WP,  that's for particular PHP file to find some interesting data that is credentialed.  Is there anything else? I think that's about it. Thank you very much.  Oh, one last question. Sorry.  In one of the CEP, you mentioned that it affects, I think before 6.3,  so how do you make that connection? Do you test a different version,  or somehow you remember through experience?  Yeah, so for this case, yeah, so the vulnerable part itself,  I think it's partially from the plugin side, and also partially from the WordPress core itself.  So in this case, they both, the page and the book, from the plugin and the WordPress core,  so in the WordPress core, it is not, it is not, we cannot anymore perform this.  So you call it before 6.3, is it? Or you test?  Oh yeah, so yeah, I'm first testing the bot and the plugin itself,  and then I notice that the plugin is using the built-in function,  built-in prototype of admin body classes in the WordPress core,  and then I check the function, the function part itself in the WordPress core.  So it turns out that the implementation in the WordPress core itself is not secure,  so it can be solved by any success.  All right. Thank you, Rafi, for any other questions, you can take it off stage.  Thank you. Yeah, I just want to say that,  so since this is my first presentation, if you have a good deck,  you can give it in the link below, in the slides,  and you can use it more often.  Thank you.