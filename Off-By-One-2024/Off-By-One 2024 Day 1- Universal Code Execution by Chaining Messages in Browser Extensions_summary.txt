**Introduction**
- Eugene Lim: Security researcher and white hat hacker with a range of experience, from Amazon to Zoom.
- His work has been featured at prominent conferences and industry publications.
- Lim's talk focuses on browser extensions and the potential for "universal code execution."

**Browser Extensions**
- **Manifest**: Tells the browser how to interpret the extension, including **content scripts** and **background scripts**/**service workers**.
- **Content scripts**: Injected into web pages, allowing extensions to interact with the DOM.
- **Background scripts/service workers**: Run in the browser extension context and communicate with content scripts.

**From postMessage to sendMessage**
- **postMessage**: Used to communicate between a web page and its extension, despite not being designed for this purpose.
- Weak extension matches allow bypassing typical origin validation methods, creating a security risk.
- Lim presents a case study of an extension with weak matchers, demonstrating how it can be exploited to access cookies.

**From sendMessage to sendNativeMessage**
- **Native messaging**: Allows browser extensions to communicate with native desktop applications.
- **sendNativeMessage**: Used to send messages from the browser extension context to the native application context.
- If the native application handles messages dangerously, it can lead to code execution outside the browser.
- Lim outlines a step-by-step process for exploiting this vulnerability.

**Extension Hunting at Scale**
- Lim describes a method for identifying potentially vulnerable extensions at scale.
- He uses existing databases of browser extension manifests and applies filters to find extensions with specific characteristics.
- Custom sender code and tools like SendRep are used to analyze the extensions for potential vulnerabilities.

**Case Study: Extension B**
- Extension B is a popular extension with over 2 million users, adding PKI smart card support to browsers.
- By design, it requires a wildcard extension match, making it vulnerable to exploitation.
- Lim demonstrates a two-stage proof-of-concept exploit that triggers the download of a malicious DLL and sends a postMessage payload.

**Conclusion**
- Manifest V3 was intended to improve extension security but has not eliminated these vulnerabilities.
- Powerful browser extensions are a feature of the current web ecosystem, and they are challenging to secure.
- There is a poor understanding of the risks posed by extension permissions and messaging chains.
- Further research is needed into Manifest V3 APIs and their potential security implications.