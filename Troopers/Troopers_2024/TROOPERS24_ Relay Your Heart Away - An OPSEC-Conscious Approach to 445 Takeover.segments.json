{
  "metadata": {
    "webpage_url": "https://www.youtube.com/watch?v=e84BtnLSKPQ",
    "title": "TROOPERS24: Relay Your Heart Away - An OPSEC-Conscious Approach to 445 Takeover",
    "description": "Talk by Nick Powers - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/zwwkat/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
    "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
    "duration": 3288,
    "channel": "TROOPERS IT Security Conference",
    "uploader": "TROOPERS IT Security Conference",
    "upload_date": "20240902"
  },
  "segments": {
    "metadata": {
      "webpage_url": "https://www.youtube.com/watch?v=e84BtnLSKPQ",
      "title": "TROOPERS24: Relay Your Heart Away - An OPSEC-Conscious Approach to 445 Takeover",
      "description": "Talk by Nick Powers - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/zwwkat/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
      "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
      "duration": 3288,
      "channel": "TROOPERS IT Security Conference",
      "uploader": "TROOPERS IT Security Conference",
      "upload_date": "20240902"
    },
    "segments": [
      {
        "Time_Start": 0.0,
        "Time_End": 13.8,
        "Text": "This text was transcribed using whisper model: large-v2\n\n Thank you very much."
      },
      {
        "Time_Start": 13.8,
        "Time_End": 18.88,
        "Text": " Yeah, like was already mentioned, I'm going to be talking about some NTLM relay-related"
      },
      {
        "Time_Start": 18.88,
        "Time_End": 20.84,
        "Text": " tradecraft today."
      },
      {
        "Time_Start": 20.84,
        "Time_End": 25.36,
        "Text": " Relay your heart away, but more specifically, an OPSEC conscious approach to taking over"
      },
      {
        "Time_Start": 25.36,
        "Time_End": 28.64,
        "Text": " Port 445."
      },
      {
        "Time_Start": 28.64,
        "Time_End": 32.04,
        "Text": " So quick about me, I currently work at Specter Ops."
      },
      {
        "Time_Start": 32.04,
        "Time_End": 36.760000000000005,
        "Text": " I was thinking about it right before this presentation, and it's coming up on four years,"
      },
      {
        "Time_Start": 36.760000000000005,
        "Time_End": 40.28,
        "Text": " which blows my mind that I've been at Specter Ops now."
      },
      {
        "Time_Start": 40.28,
        "Time_End": 44.72,
        "Text": " On the adversary simulation team, I started as a consultant, then senior consultant, and"
      },
      {
        "Time_Start": 44.72,
        "Time_End": 50.64,
        "Text": " now I'm a part of the service architect team that we have at Specter Ops, where we primarily"
      },
      {
        "Time_Start": 50.64,
        "Time_End": 55.980000000000004,
        "Text": " support red team or pin test engagements with creating capabilities like these, or doing"
      },
      {
        "Time_Start": 56.06,
        "Time_End": 60.660000000000004,
        "Text": " what we refer to as like interrupt, whenever there's an extra set of hands needed on an"
      },
      {
        "Time_Start": 60.660000000000004,
        "Time_End": 63.68000000000001,
        "Text": " assessment or a particularly difficult problem."
      },
      {
        "Time_Start": 63.68000000000001,
        "Time_End": 67.94,
        "Text": " So we can put a couple heads targeting the same problem."
      },
      {
        "Time_Start": 67.94,
        "Time_End": 71.5,
        "Text": " I work with the other service architects at Specter Ops."
      },
      {
        "Time_Start": 71.5,
        "Time_End": 76.02000000000001,
        "Text": " Most of my career has primarily been focused on red teaming or pin testing, offensive security"
      },
      {
        "Time_Start": 76.02000000000001,
        "Time_End": 77.22,
        "Text": " in general."
      },
      {
        "Time_Start": 77.22,
        "Time_End": 84.64,
        "Text": " And I'm curious, in the audience, how many folks are in offensive security, okay?"
      },
      {
        "Time_Start": 84.64,
        "Time_End": 91.32,
        "Text": " And how many people have done any type of NTLM relay attack before?"
      },
      {
        "Time_Start": 91.32,
        "Time_End": 98.2,
        "Text": " And of these people, how many people have done NTLM relay over SOCs or command and control?"
      },
      {
        "Time_Start": 98.2,
        "Time_End": 100.24,
        "Text": " Okay, perfect."
      },
      {
        "Time_Start": 100.24,
        "Time_End": 101.24000000000001,
        "Text": " Thank you for that."
      },
      {
        "Time_Start": 101.24000000000001,
        "Time_End": 102.52,
        "Text": " That helps."
      },
      {
        "Time_Start": 102.52,
        "Time_End": 105.32,
        "Text": " So a little finishing up about me."
      },
      {
        "Time_Start": 105.32,
        "Time_End": 112.88,
        "Text": " Some of my interests, my work-related interests anyways, include initial access techniques."
      },
      {
        "Time_Start": 112.92,
        "Time_End": 118.96,
        "Text": " I'm a big fan of researching potentially new or additional vectors for initial access techniques."
      },
      {
        "Time_Start": 118.96,
        "Time_End": 124.88,
        "Text": " Windows internals in general, as well as, like this talk, authentication relay attacks,"
      },
      {
        "Time_Start": 124.88,
        "Time_End": 128.68,
        "Text": " or methods of supporting existing relay attacks."
      },
      {
        "Time_Start": 128.68,
        "Time_End": 133.4,
        "Text": " And my handle on Twitter is Zenergy."
      },
      {
        "Time_Start": 133.4,
        "Time_End": 136.16,
        "Text": " So a quick agenda about what we'll be covering in this talk."
      },
      {
        "Time_Start": 136.16,
        "Time_End": 140.04,
        "Text": " First, why do we even care about taking over port 445 in the first place?"
      },
      {
        "Time_Start": 140.04,
        "Time_End": 144.84,
        "Text": " There's plenty of relay scenarios where this isn't relevant, but there's some pretty important"
      },
      {
        "Time_Start": 144.84,
        "Time_End": 149.64,
        "Text": " ones where this is incredibly important, especially for us on a lot of our assessments."
      },
      {
        "Time_Start": 149.64,
        "Time_End": 152.35999999999999,
        "Text": " We'll be going over some existing solutions to this problem."
      },
      {
        "Time_Start": 152.35999999999999,
        "Time_End": 157.79999999999998,
        "Text": " So I'm not the first one to experience this problem or take a stab at solving this problem."
      },
      {
        "Time_Start": 157.79999999999998,
        "Time_End": 163.88,
        "Text": " We'll go through some existing projects before we get to debugging drivers and presenting"
      },
      {
        "Time_Start": 163.88,
        "Time_End": 167.35999999999999,
        "Text": " an alternative or a new approach to this problem."
      },
      {
        "Time_Start": 167.36,
        "Time_End": 173.44000000000003,
        "Text": " We'll wrap up with a discussion about tooling to automate this technique or just use existing"
      },
      {
        "Time_Start": 173.44000000000003,
        "Time_End": 176.20000000000002,
        "Text": " tools to leverage this technique."
      },
      {
        "Time_Start": 176.20000000000002,
        "Time_End": 181.44000000000003,
        "Text": " And then we'll wrap up with a demonstration of abusing this."
      },
      {
        "Time_Start": 181.44000000000003,
        "Time_End": 183.74,
        "Text": " So I make a couple of assumptions."
      },
      {
        "Time_Start": 183.74,
        "Time_End": 188.56,
        "Text": " During this presentation, just because, as a lot of people in the audience here have"
      },
      {
        "Time_Start": 188.56,
        "Time_End": 193.96,
        "Text": " already done NTLM relay attacks, you are probably aware that there's a lot of technologies involved"
      },
      {
        "Time_Start": 193.96,
        "Time_End": 195.84,
        "Text": " in doing an NTLM relay attack."
      },
      {
        "Time_Start": 195.84,
        "Time_End": 197.88,
        "Text": " From start to finish."
      },
      {
        "Time_Start": 197.88,
        "Time_End": 201.64000000000001,
        "Text": " And more particularly, like we'll be talking about, things like SOCKS and reverse port"
      },
      {
        "Time_Start": 201.64000000000001,
        "Time_End": 206.8,
        "Text": " forwards will be relevant because this is the problem that we're solving is more specific"
      },
      {
        "Time_Start": 206.8,
        "Time_End": 212.68,
        "Text": " to conducting these relays over SOCKS tunnels or over command and control related traffic."
      },
      {
        "Time_Start": 212.68,
        "Time_End": 217.56,
        "Text": " So a somewhat intermediate level of knowledge of SOCKS tunnels or reverse port forwards"
      },
      {
        "Time_Start": 217.56,
        "Time_End": 223.5,
        "Text": " will help, but I do have a quick review slide as like a refresher later on in the presentation."
      },
      {
        "Time_Start": 223.5,
        "Time_End": 228.98,
        "Text": " Some entry level knowledge of existing NTLM relay primitives will help, just because this"
      },
      {
        "Time_Start": 228.98,
        "Time_End": 234.18,
        "Text": " presentation is specific to taking over port 445 to enable some of those relay primitives,"
      },
      {
        "Time_Start": 234.18,
        "Time_End": 238.02,
        "Text": " not specifically doing a deep dive on the primitives themselves."
      },
      {
        "Time_Start": 238.02,
        "Time_End": 243.34,
        "Text": " So we'll kind of rush through in the demo the specifics of the relay primitives themselves,"
      },
      {
        "Time_Start": 243.34,
        "Time_End": 247.74,
        "Text": " but I'll elaborate on what will hopefully enable some of those primitives."
      },
      {
        "Time_Start": 247.74,
        "Time_End": 251.3,
        "Text": " And then lastly, some entry level reverse engineering knowledge."
      },
      {
        "Time_Start": 251.3,
        "Time_End": 254.46,
        "Text": " This very entry level is perfectly fine."
      },
      {
        "Time_Start": 254.46,
        "Time_End": 260.06,
        "Text": " I barely consider myself an entry level in terms of reverse engineering knowledge."
      },
      {
        "Time_Start": 260.06,
        "Time_End": 263.90000000000003,
        "Text": " So I'll definitely be elaborating on this piece as well."
      },
      {
        "Time_Start": 263.90000000000003,
        "Time_End": 269.18,
        "Text": " And before I dig into the meat of the presentation, I always like to start with like a problem"
      },
      {
        "Time_Start": 269.18,
        "Time_End": 274.46000000000004,
        "Text": " and the solution that we'll hopefully arrive at by the end of the presentation, just so"
      },
      {
        "Time_Start": 274.46000000000004,
        "Time_End": 276.04,
        "Text": " you can kind of gauge where we're going with this."
      },
      {
        "Time_Start": 276.04,
        "Time_End": 281.48,
        "Text": " So the problem that I would like to solve is while we're conducting NTLM relays specifically"
      },
      {
        "Time_Start": 281.48,
        "Time_End": 286.02000000000004,
        "Text": " over C2 or command and control, we typically run into a lot of hurdles."
      },
      {
        "Time_Start": 286.02000000000004,
        "Time_End": 289.84000000000003,
        "Text": " One of which, the one we'll be focusing on in this presentation is the fact that the"
      },
      {
        "Time_Start": 289.84000000000003,
        "Time_End": 295.72,
        "Text": " Windows kernel by default is bound to port 445 TCP on all interfaces."
      },
      {
        "Time_Start": 295.72,
        "Time_End": 299.8,
        "Text": " There are existing solutions to this problem, but an issue that we often run into is that"
      },
      {
        "Time_Start": 299.8,
        "Time_End": 305.64000000000004,
        "Text": " there are a significant amount of OPSEC related concerns associated with those existing solutions."
      },
      {
        "Time_Start": 306.47999999999996,
        "Time_End": 311.12,
        "Text": " The solution that we'll hopefully arrive at is that we will identify and implement a technique"
      },
      {
        "Time_Start": 311.12,
        "Time_End": 317.5,
        "Text": " that results in control over this target port of 445 and is practical to leverage over our"
      },
      {
        "Time_Start": 317.5,
        "Time_End": 322.76,
        "Text": " command and control or over an agent that doesn't include the OPSEC concerns associated"
      },
      {
        "Time_Start": 322.76,
        "Time_End": 325.68,
        "Text": " with existing solutions."
      },
      {
        "Time_Start": 325.68,
        "Time_End": 333.56,
        "Text": " So why is control over port 445 relevant to this type of NTLM relay attack that we want"
      },
      {
        "Time_Start": 333.56,
        "Time_End": 335.64,
        "Text": " to conduct?"
      },
      {
        "Time_Start": 335.64,
        "Time_End": 342.16,
        "Text": " And I'll start this slide by stating that my experience is biased towards the assessments"
      },
      {
        "Time_Start": 342.16,
        "Time_End": 343.68,
        "Text": " that we conduct at SpectreOps."
      },
      {
        "Time_Start": 343.68,
        "Time_End": 345.44,
        "Text": " A lot of them are red teams."
      },
      {
        "Time_Start": 345.44,
        "Time_End": 348.32,
        "Text": " Most of our engagements take place over command and control."
      },
      {
        "Time_Start": 348.32,
        "Time_End": 353.88,
        "Text": " And that's why the focus for this, or at least the practical examples of abusing this, that"
      },
      {
        "Time_Start": 353.88,
        "Time_End": 357.6,
        "Text": " I give are going to be based on targeted NTLM relay attacks."
      },
      {
        "Time_Start": 357.6,
        "Time_End": 361.88,
        "Text": " So several folks in the room are probably familiar with some of these primitives, but"
      },
      {
        "Time_Start": 361.88,
        "Time_End": 367.88,
        "Text": " the reason I like to point this out is because these targeted NTLM relay attacks still work"
      },
      {
        "Time_Start": 367.88,
        "Time_End": 372.44,
        "Text": " in what I would consider incredibly mature organizations very often."
      },
      {
        "Time_Start": 372.44,
        "Time_End": 377.52,
        "Text": " In some popular examples, some ones that we regularly make use of would be like HCP to"
      },
      {
        "Time_Start": 377.52,
        "Time_End": 384.7,
        "Text": " LDAP or LDAP-S for object takeover primitives published by our colleague, Elad, like Shadow"
      },
      {
        "Time_Start": 384.7,
        "Time_End": 391.15999999999997,
        "Text": " Credentials or Resource-Based Constrained Delegation, RBCD for short, or relay of SMB"
      },
      {
        "Time_Start": 391.16,
        "Time_End": 393.82000000000005,
        "Text": " or HCP to the HCP protocol."
      },
      {
        "Time_Start": 393.82000000000005,
        "Time_End": 399.84000000000003,
        "Text": " So popular abuse cases of this would be like ADCS Escalation 8 relaying to that HCP service"
      },
      {
        "Time_Start": 399.84000000000003,
        "Time_End": 402.36,
        "Text": " or SCCM Takeover 4.2."
      },
      {
        "Time_Start": 402.36,
        "Time_End": 407.56,
        "Text": " We'll talk a little bit about the Misconfiguration Manager project that tracks some of the SCCM"
      },
      {
        "Time_Start": 407.56,
        "Time_End": 411.16,
        "Text": " escalation or takeover primitives throughout this presentation."
      },
      {
        "Time_Start": 411.16,
        "Time_End": 416.32000000000005,
        "Text": " 4.2 Takeover is specifically relaying to the Admin Service API."
      },
      {
        "Time_Start": 416.32,
        "Time_End": 422.2,
        "Text": " Also SMB or HCP to the SMB protocol, which is a lot of the SCCM takeover primitives,"
      },
      {
        "Time_Start": 422.2,
        "Time_End": 426.71999999999997,
        "Text": " but the one that we'll focus on for the demo will be this last example, which is SMB or"
      },
      {
        "Time_Start": 426.71999999999997,
        "Time_End": 434.88,
        "Text": " HCP targeting the MSSQL protocol, which is documented as SCCM Takeover 1 in the Misconfiguration"
      },
      {
        "Time_Start": 434.88,
        "Time_End": 436.68,
        "Text": " Manager project."
      },
      {
        "Time_Start": 436.68,
        "Time_End": 441.8,
        "Text": " So long story short, depending on your perspective of access in the target network, relay of"
      },
      {
        "Time_Start": 441.8,
        "Time_End": 448.32,
        "Text": " inbound SMB authentication, which is what we'll be focusing on, could be more involved."
      },
      {
        "Time_Start": 448.32,
        "Time_End": 455.64,
        "Text": " And what I mean by that is for the traditional pin testing scenario of you land in an environment"
      },
      {
        "Time_Start": 455.64,
        "Time_End": 460.48,
        "Text": " by either plugging a physical device into a network or delivering some sort of virtual"
      },
      {
        "Time_Start": 460.48,
        "Time_End": 465.16,
        "Text": " machine to your customer or the target network to be deployed, in those circumstances, whether"
      },
      {
        "Time_Start": 465.16,
        "Time_End": 469.88,
        "Text": " it's Linux or Windows, you have options for just controlling port 445, and there's a lot"
      },
      {
        "Time_Start": 469.88,
        "Time_End": 473.92,
        "Text": " less considerations associated with how you're going to control that inbound traffic."
      },
      {
        "Time_Start": 473.92,
        "Time_End": 479.88,
        "Text": " So if it's a Linux machine, you most likely have root on the device or the VM that you've"
      },
      {
        "Time_Start": 479.88,
        "Time_End": 481.08,
        "Text": " delivered to the customer."
      },
      {
        "Time_Start": 481.08,
        "Time_End": 483.15999999999997,
        "Text": " You can just bind a 445."
      },
      {
        "Time_Start": 483.15999999999997,
        "Time_End": 486.88,
        "Text": " Similarly with Windows, I'll mention this a couple times throughout the slides, you"
      },
      {
        "Time_Start": 486.88,
        "Time_End": 493.44,
        "Text": " can just set the Landman Server Service to a disabled start type, reboot the host, 445"
      },
      {
        "Time_Start": 493.44,
        "Time_End": 497.3,
        "Text": " is unbound, and then you can do stuff from there."
      },
      {
        "Time_Start": 497.3,
        "Time_End": 501.82,
        "Text": " But if you're operating on a compromised Windows host over C2, there are additional"
      },
      {
        "Time_Start": 501.82,
        "Time_End": 506.94,
        "Text": " challenges and what we want to end up with is some type of reverse port forward functionality."
      },
      {
        "Time_Start": 506.94,
        "Time_End": 512.0600000000001,
        "Text": " So when the traffic comes to us, whether that's because you've done like LLMNR poisoning,"
      },
      {
        "Time_Start": 512.0600000000001,
        "Time_End": 517.74,
        "Text": " run responder, or you've used something like PetitPetam or Printerbug, there's going to"
      },
      {
        "Time_Start": 517.74,
        "Time_End": 522.78,
        "Text": " be potentially SMB traffic coming inbound to your host that you've compromised and you're"
      },
      {
        "Time_Start": 522.78,
        "Time_End": 526.86,
        "Text": " just operating through an agent, and you need to have some way to control that traffic to"
      },
      {
        "Time_Start": 526.86,
        "Time_End": 530.02,
        "Text": " conduct your NTLM relay."
      },
      {
        "Time_Start": 530.02,
        "Time_End": 534.46,
        "Text": " And again, like I mentioned before, by default the Windows kernel is bound to this port on"
      },
      {
        "Time_Start": 534.46,
        "Time_End": 536.62,
        "Text": " all network interfaces."
      },
      {
        "Time_Start": 536.62,
        "Time_End": 541.82,
        "Text": " So I have a little example, like command prompt here at the bottom of just netstat parsing"
      },
      {
        "Time_Start": 541.82,
        "Time_End": 546.7,
        "Text": " the results that have 445 and you can see there is a process currently bound on IPv4"
      },
      {
        "Time_Start": 546.7,
        "Time_End": 549.32,
        "Text": " as well as IPv6 listening on 445."
      },
      {
        "Time_Start": 549.32,
        "Time_End": 554.78,
        "Text": " So we can't just as easily bind to that port and control the traffic."
      },
      {
        "Time_Start": 554.78,
        "Time_End": 560.6999999999999,
        "Text": " So there are several existing solutions to solve this problem."
      },
      {
        "Time_Start": 560.6999999999999,
        "Time_End": 565.5,
        "Text": " I'd say currently what I feel like is the most popularly used approach would be approaches"
      },
      {
        "Time_Start": 565.5,
        "Time_End": 570.62,
        "Text": " that are based on leveraging the WinDivert driver, which is an open source driver."
      },
      {
        "Time_Start": 570.62,
        "Time_End": 576.5799999999999,
        "Text": " You can find the code on GitHub and it's described as a user mode packet interception library."
      },
      {
        "Time_Start": 576.5799999999999,
        "Time_End": 581.5,
        "Text": " The release for this driver is signed in such a way that it can just be loaded on up to"
      },
      {
        "Time_Start": 581.5,
        "Time_End": 584.98,
        "Text": " date Windows, so it's likely signed with an EV code signing cert."
      },
      {
        "Time_Start": 584.98,
        "Time_End": 589.5,
        "Text": " And there's a lot of projects over the last 10 years all the way back to, there might"
      },
      {
        "Time_Start": 589.5,
        "Time_End": 595.06,
        "Text": " be some before this, but as far back as I found was this HWFW bypass project, which"
      },
      {
        "Time_Start": 595.06,
        "Time_End": 598.26,
        "Text": " is a little over 10 years old now if I remember correctly."
      },
      {
        "Time_Start": 598.26,
        "Time_End": 601.9,
        "Text": " But a little bit more recently, Portbender is a popular project, which is written as"
      },
      {
        "Time_Start": 601.9,
        "Time_End": 607.06,
        "Text": " a reflective DLL, popularly used with Cobalt Strike and other command and control frameworks."
      },
      {
        "Time_Start": 607.0600000000001,
        "Time_End": 611.94,
        "Text": " There's Sharp Relay, which is a .NET project that interacts with the exposed functionality"
      },
      {
        "Time_Start": 611.94,
        "Time_End": 613.3000000000001,
        "Text": " of this driver."
      },
      {
        "Time_Start": 613.3000000000001,
        "Time_End": 617.4200000000001,
        "Text": " Stream Divert, Divert TCP Con, which are written in C, C++."
      },
      {
        "Time_Start": 617.4200000000001,
        "Time_End": 624.46,
        "Text": " A lot of very creative and useful projects to load a driver, see the inbound SMB traffic,"
      },
      {
        "Time_Start": 624.46,
        "Time_End": 628.0600000000001,
        "Text": " and then manipulate it from that perspective."
      },
      {
        "Time_Start": 628.0600000000001,
        "Time_End": 636.86,
        "Text": " There's also the opportunity to create a custom LSA authentication provider, and the only"
      },
      {
        "Time_Start": 636.86,
        "Time_End": 642.02,
        "Text": " example of this that I'm currently aware of is Ethical Chaos, or CCOB's project called"
      },
      {
        "Time_Start": 642.02,
        "Time_End": 647.42,
        "Text": " LSA RelayX, and what LSA RelayX does from a very high level is it hooks two authentication"
      },
      {
        "Time_Start": 647.42,
        "Time_End": 652.42,
        "Text": " packages, NTLM and the negotiate packages, and it redirects incoming authentication"
      },
      {
        "Time_Start": 652.42,
        "Time_End": 658.3000000000001,
        "Text": " requests and it will redirect those requests over named pipes."
      },
      {
        "Time_Start": 658.3000000000001,
        "Time_End": 661.82,
        "Text": " And then lastly, like I already mentioned a slide or two ago, you can disable the landman"
      },
      {
        "Time_Start": 661.82,
        "Time_End": 664.5,
        "Text": " server service and reboot the host."
      },
      {
        "Time_Start": 664.5,
        "Time_End": 668.62,
        "Text": " So basically what you do is you change the start type."
      },
      {
        "Time_Start": 668.62,
        "Time_End": 671.56,
        "Text": " By default it's auto start, if I remember correctly."
      },
      {
        "Time_Start": 671.56,
        "Time_End": 676.46,
        "Text": " You switch that to disabled, you reboot the host, and then all of the associated resources"
      },
      {
        "Time_Start": 676.46,
        "Time_End": 681.74,
        "Text": " with binding to that target port will be unloaded, the drivers and everything, and you can bind"
      },
      {
        "Time_Start": 681.74,
        "Time_End": 685.86,
        "Text": " reverse port forward and go from there."
      },
      {
        "Time_Start": 685.86,
        "Time_End": 692.14,
        "Text": " But like I mentioned, there are several OPSEC-related concerns associated with these existing approaches."
      },
      {
        "Time_Start": 692.14,
        "Time_End": 697.1,
        "Text": " So leveraging drivers for post-exploitation in general, so like relying on the wind-avert"
      },
      {
        "Time_Start": 697.1,
        "Time_End": 699.66,
        "Text": " driver for example."
      },
      {
        "Time_Start": 699.66,
        "Time_End": 705.86,
        "Text": " Anything in kernel mode, there's potential for a blue screen of death, or BSOD, and in"
      },
      {
        "Time_Start": 705.86,
        "Time_End": 709.48,
        "Text": " a lot of situations, especially for us, but I would imagine across the board that's just"
      },
      {
        "Time_Start": 709.48,
        "Time_End": 714.14,
        "Text": " not an option, especially when you're operating from critical infrastructure, production servers,"
      },
      {
        "Time_Start": 714.14,
        "Time_End": 719.46,
        "Text": " things of that nature, or even just simply on a normal workstation where somebody's in"
      },
      {
        "Time_Start": 719.46,
        "Time_End": 723.62,
        "Text": " the middle of conducting normal work, you probably don't want to take that risk in some"
      },
      {
        "Time_Start": 723.62,
        "Time_End": 724.94,
        "Text": " situations."
      },
      {
        "Time_Start": 724.94,
        "Time_End": 729.7,
        "Text": " There's also a potential single point of failure as it pertains to detection or prevention,"
      },
      {
        "Time_Start": 729.7,
        "Time_End": 736.94,
        "Text": " so all it would take is a relatively potentially high fidelity alert for the wind-avert driver,"
      },
      {
        "Time_Start": 736.94,
        "Time_End": 740.7,
        "Text": " and then there's only so many ways you can load drivers on Windows, you might have to"
      },
      {
        "Time_Start": 740.7,
        "Time_End": 744.64,
        "Text": " get really creative to get around an alert like that."
      },
      {
        "Time_Start": 744.64,
        "Time_End": 749.02,
        "Text": " And then there's everything associated with interacting with the driver, because just"
      },
      {
        "Time_Start": 749.02,
        "Time_End": 753.3,
        "Text": " loading the driver is not enough, specifically with wind-avert, you have to interact with"
      },
      {
        "Time_Start": 753.3,
        "Time_End": 758.18,
        "Text": " that driver, such as using IOCTLs or other exposed functionality, and then that has all"
      },
      {
        "Time_Start": 758.18,
        "Time_End": 760.02,
        "Text": " of its associated considerations."
      },
      {
        "Time_Start": 760.02,
        "Time_End": 763.98,
        "Text": " So if you're doing it with a reflective DLL, how are you loading that DLL?"
      },
      {
        "Time_Start": 763.98,
        "Time_End": 767.66,
        "Text": " There's all of these user mode detections that we need to take into consideration if"
      },
      {
        "Time_Start": 767.66,
        "Time_End": 772.98,
        "Text": " you're using .NET, like the sharp relay project, there's AMZ, there's all of the things associated"
      },
      {
        "Time_Start": 772.98,
        "Time_End": 778.88,
        "Text": " with .NET, unmanaged PEs, position independent shellcode, all of these."
      },
      {
        "Time_Start": 779.74,
        "Time_End": 783.76,
        "Text": " So there's multiple layers of consideration that we need to account for, and it can become"
      },
      {
        "Time_Start": 783.76,
        "Time_End": 788.52,
        "Text": " a relatively arduous process in a very locked-down environment."
      },
      {
        "Time_Start": 788.52,
        "Time_End": 792.96,
        "Text": " Loading a custom LSA authentication provider, this is specifically pulled from the README"
      },
      {
        "Time_Start": 792.96,
        "Time_End": 798.76,
        "Text": " of this project, but due to limitations on the Microsoft side of how custom LSA authentication"
      },
      {
        "Time_Start": 798.76,
        "Time_End": 807.24,
        "Text": " providers work, you can't load a custom authentication provider and then unload it without a reboot."
      },
      {
        "Time_Start": 807.24,
        "Time_End": 811.28,
        "Text": " You could, potentially, he mentions using something like a reflective loader to do something"
      },
      {
        "Time_Start": 811.28,
        "Time_End": 817.5600000000001,
        "Text": " like that, but going back to the risks associated with loading drivers, there could be stability"
      },
      {
        "Time_Start": 817.5600000000001,
        "Time_End": 825.0,
        "Text": " issues of the host machine if you don't account for errors appropriately, or there's something"
      },
      {
        "Time_Start": 825.0,
        "Time_End": 829.76,
        "Text": " lacking with your error handling, within 60 seconds or so, the machine could reboot because"
      },
      {
        "Time_Start": 829.76,
        "Time_End": 832.08,
        "Text": " of instability in the LSAS process."
      },
      {
        "Time_Start": 832.08,
        "Time_End": 836.0,
        "Text": " Another big risk, especially if we're operating in production."
      },
      {
        "Time_Start": 836.0,
        "Time_End": 840.32,
        "Text": " And then lastly, I mentioned you could change the start type of the landman server service"
      },
      {
        "Time_Start": 840.32,
        "Time_End": 845.12,
        "Text": " and reboot the host, but as you can imagine, in a lot of practical scenarios, either waiting"
      },
      {
        "Time_Start": 845.12,
        "Time_End": 850.34,
        "Text": " for or forcing a reboot is not an option, again, especially on servers, but maybe even"
      },
      {
        "Time_Start": 850.34,
        "Time_End": 858.28,
        "Text": " on workstations."
      },
      {
        "Time_Start": 858.28,
        "Time_End": 863.04,
        "Text": " The way that I first started approaching this was digging into some of the drivers associated"
      },
      {
        "Time_Start": 863.04,
        "Time_End": 869.5999999999999,
        "Text": " with servers that seem to be related to SMB, NetBIOS, anything associated with binding"
      },
      {
        "Time_Start": 869.5999999999999,
        "Time_End": 878.04,
        "Text": " to this target port of 4.4.5, and what I started with was primarily System Informer, IDAfree,"
      },
      {
        "Time_Start": 878.04,
        "Time_End": 884.4599999999999,
        "Text": " and WinDebug, all free, publicly accessible, and there's probably a hundred different ways"
      },
      {
        "Time_Start": 884.4599999999999,
        "Time_End": 890.16,
        "Text": " to obtain the same information that I'm going to step through here, again, reverse engineering"
      },
      {
        "Time_Start": 890.16,
        "Time_End": 895.52,
        "Text": " is not my primary focus for work, so there might even be a better way to do this, but"
      },
      {
        "Time_Start": 895.52,
        "Time_End": 897.98,
        "Text": " these are the primary tools that I used."
      },
      {
        "Time_Start": 897.98,
        "Time_End": 902.52,
        "Text": " And my goal when I first started doing this was just to do something to release the target"
      },
      {
        "Time_Start": 902.52,
        "Time_End": 908.88,
        "Text": " port, which in this case is 4.4.5 TCP, without requiring a reboot, loading a driver, or loading"
      },
      {
        "Time_Start": 908.88,
        "Time_End": 912.12,
        "Text": " a module directly into LSAS."
      },
      {
        "Time_Start": 912.12,
        "Time_End": 913.12,
        "Text": " So where can we start?"
      },
      {
        "Time_Start": 913.12,
        "Time_End": 917.9,
        "Text": " Well, we've mentioned a couple times already that you can disable the landman server service"
      },
      {
        "Time_Start": 917.9,
        "Time_End": 921.38,
        "Text": " after a reboot if you change the start type."
      },
      {
        "Time_Start": 921.38,
        "Time_End": 927.66,
        "Text": " So also, by simply resetting the start type of this service after, so you've disabled"
      },
      {
        "Time_Start": 927.66,
        "Time_End": 931.66,
        "Text": " landman server service, you've rebooted the host, 4.4.5 is no longer listening, you can"
      },
      {
        "Time_Start": 931.66,
        "Time_End": 937.4599999999999,
        "Text": " also change the start type back to auto start, and then within a couple minutes, 4.4.5 will"
      },
      {
        "Time_Start": 937.4599999999999,
        "Time_End": 942.02,
        "Text": " be rebound because landman server service will restart, all of the other associated"
      },
      {
        "Time_Start": 942.02,
        "Time_End": 943.6999999999999,
        "Text": " resources will be loaded."
      },
      {
        "Time_Start": 943.7,
        "Time_End": 949.98,
        "Text": " So we kind of have a starting point to reproduce and step through the behavior that we're interested"
      },
      {
        "Time_Start": 949.98,
        "Time_End": 950.98,
        "Text": " in."
      },
      {
        "Time_Start": 950.98,
        "Time_End": 954.98,
        "Text": " In this case, it's just binding to 4.4.5, but as we go through the slides, we'll kind"
      },
      {
        "Time_Start": 954.98,
        "Time_End": 959.94,
        "Text": " of connect the dots between inspecting what happens when you bind to 4.4.5, and then using"
      },
      {
        "Time_Start": 959.94,
        "Time_End": 968.26,
        "Text": " that to step backwards through actually unbinding the port."
      },
      {
        "Time_Start": 968.26,
        "Time_End": 973.78,
        "Text": " So the items of interest for me as I started this was, first, just simply identify the"
      },
      {
        "Time_Start": 973.78,
        "Time_End": 976.1,
        "Text": " process bound to the target port."
      },
      {
        "Time_Start": 976.1,
        "Time_End": 982.7,
        "Text": " Secondly, just triage relevant loaded modules, in this case it was mostly drivers, narrow"
      },
      {
        "Time_Start": 982.7,
        "Time_End": 987.78,
        "Text": " down an initial list of drivers that we want to start statically reversing in some way,"
      },
      {
        "Time_Start": 987.78,
        "Time_End": 994.06,
        "Text": " and lastly, I just put this note because I spent a lot of time stepping through different"
      },
      {
        "Time_Start": 994.0600000000001,
        "Time_End": 998.1400000000001,
        "Text": " versions of drivers when I was doing static analysis."
      },
      {
        "Time_Start": 998.1400000000001,
        "Time_End": 1003.34,
        "Text": " Probably a relatively junior reverse engineering mistake to make, but if you're doing your"
      },
      {
        "Time_Start": 1003.34,
        "Time_End": 1007.6400000000001,
        "Text": " kernel debugging on a remote host that's like a different Windows version, there's a reasonable"
      },
      {
        "Time_Start": 1007.6400000000001,
        "Time_End": 1011.2600000000001,
        "Text": " chance that the drivers could be different versions, and then when you're doing your"
      },
      {
        "Time_Start": 1011.2600000000001,
        "Time_End": 1014.82,
        "Text": " static analysis, the offsets will be different, and then nothing will make sense when you're"
      },
      {
        "Time_Start": 1014.82,
        "Time_End": 1015.82,
        "Text": " doing the debugging."
      },
      {
        "Time_Start": 1015.82,
        "Time_End": 1020.6600000000001,
        "Text": " So using a project like WinBindex can be very helpful just to make sure you have the same"
      },
      {
        "Time_Start": 1020.6999999999999,
        "Time_End": 1025.1,
        "Text": " versions of the drivers so when you're doing your static and your dynamic analysis, everything"
      },
      {
        "Time_Start": 1025.1,
        "Time_End": 1032.82,
        "Text": " lines up and you don't have the same problem that I did."
      },
      {
        "Time_Start": 1032.82,
        "Time_End": 1040.46,
        "Text": " So as a high-level starting point, just did a simple PowerShell cmdlet here to see what"
      },
      {
        "Time_Start": 1040.46,
        "Time_End": 1045.86,
        "Text": " was bound to 4.4.5, list through all the processes, and we see that the PID of 4, which is the"
      },
      {
        "Time_Start": 1045.8600000000001,
        "Time_End": 1050.7,
        "Text": " system process representative of a lot of kernel mode-related activity, was bound to"
      },
      {
        "Time_Start": 1050.7,
        "Time_End": 1053.7400000000002,
        "Text": " port 4.4.5, which is expected."
      },
      {
        "Time_Start": 1053.7400000000002,
        "Time_End": 1059.14,
        "Text": " And then using ProcessHacker or SystemInformer here in the bottom left, we can look at the"
      },
      {
        "Time_Start": 1059.14,
        "Time_End": 1064.3000000000002,
        "Text": " loaded modules, which shows, again, mostly if not all drivers here, along with their"
      },
      {
        "Time_Start": 1064.3000000000002,
        "Time_End": 1065.6000000000001,
        "Text": " associated descriptions."
      },
      {
        "Time_Start": 1065.6000000000001,
        "Time_End": 1070.3600000000001,
        "Text": " So I'm not too proud to admit I copied all of this into ChatGPT and I said, what should"
      },
      {
        "Time_Start": 1070.3600000000001,
        "Time_End": 1072.66,
        "Text": " I look at?"
      },
      {
        "Time_Start": 1072.66,
        "Time_End": 1075.14,
        "Text": " And thankfully, it gave me a pretty good list to start with."
      },
      {
        "Time_Start": 1075.14,
        "Time_End": 1082.0600000000002,
        "Text": " So it mentioned looking at the AFD driver, it mentioned looking at TCPIP, netbt.sys."
      },
      {
        "Time_Start": 1082.0600000000002,
        "Time_End": 1088.0600000000002,
        "Text": " A lot of these actually ended up being exactly where I needed to look for static analysis."
      },
      {
        "Time_Start": 1088.0600000000002,
        "Time_End": 1093.02,
        "Text": " So like I mentioned before, I used IDAfree to start digging through some of the static"
      },
      {
        "Time_Start": 1093.02,
        "Time_End": 1094.3000000000002,
        "Text": " analysis."
      },
      {
        "Time_Start": 1094.3000000000002,
        "Time_End": 1098.0,
        "Text": " And when I say digging through the static analysis, just making basic use of symbols."
      },
      {
        "Time_Start": 1098.0,
        "Time_End": 1103.76,
        "Text": " So downloaded the Microsoft symbols for these drivers, which are made available to everyone."
      },
      {
        "Time_Start": 1103.76,
        "Time_End": 1110.32,
        "Text": " And I just started looking for functions associated with behavior like port, or associated with"
      },
      {
        "Time_Start": 1110.32,
        "Time_End": 1115.88,
        "Text": " keywords like port, socket, bind, hopefully start pointing us in the right direction."
      },
      {
        "Time_Start": 1115.88,
        "Time_End": 1119.16,
        "Text": " And there were a lot of functions, because there were a lot of drivers to look through"
      },
      {
        "Time_Start": 1119.16,
        "Time_End": 1120.44,
        "Text": " that started to fall out."
      },
      {
        "Time_Start": 1120.44,
        "Time_End": 1124.8,
        "Text": " But it did allow for some initial narrowing down of what might be interesting."
      },
      {
        "Time_Start": 1124.8,
        "Time_End": 1130.12,
        "Text": " So just like ChatGPT told us, we see some interesting stuff in the AFD driver, like"
      },
      {
        "Time_Start": 1130.12,
        "Time_End": 1136.56,
        "Text": " bind here, we see some references to the TCPIP driver, and a lot more."
      },
      {
        "Time_Start": 1136.56,
        "Time_End": 1140.76,
        "Text": " So we've stepped through some very, very basic static analysis."
      },
      {
        "Time_Start": 1140.76,
        "Time_End": 1145.68,
        "Text": " And now that we have some interesting functions, we can attempt to do some also very basic"
      },
      {
        "Time_Start": 1145.68,
        "Time_End": 1146.8,
        "Text": " dynamic analysis."
      },
      {
        "Time_Start": 1146.8,
        "Time_End": 1151.52,
        "Text": " So we get the target VM configured for kernel debugging, because you're going to do this"
      },
      {
        "Time_Start": 1151.52,
        "Time_End": 1155.6,
        "Text": " remotely most of the time with kernel debugging on Windows."
      },
      {
        "Time_Start": 1155.6,
        "Time_End": 1160.2,
        "Text": " And you can, like I've mentioned a couple of times, set the landmine server service"
      },
      {
        "Time_Start": 1160.2,
        "Time_End": 1163.8799999999999,
        "Text": " to disabled, reboot, now 445 is unbound."
      },
      {
        "Time_Start": 1163.8799999999999,
        "Time_End": 1168.16,
        "Text": " And what I did was just snapshot the VM as 445 is unbound, because what we want to do"
      },
      {
        "Time_Start": 1168.16,
        "Time_End": 1173.56,
        "Text": " some dynamic analysis on is when we re-enable landmine server service, and we know that"
      },
      {
        "Time_Start": 1173.56,
        "Time_End": 1174.84,
        "Text": " the port will be rebound."
      },
      {
        "Time_Start": 1174.84,
        "Time_End": 1176.92,
        "Text": " So we snapshot when it's unbound."
      },
      {
        "Time_Start": 1176.92,
        "Time_End": 1180.6399999999999,
        "Text": " We write this simple PowerShell one-liner right here."
      },
      {
        "Time_Start": 1180.64,
        "Time_End": 1185.48,
        "Text": " And I just set a hotkey, so I can revert the snapshot, hotkey, it rebinds."
      },
      {
        "Time_Start": 1185.48,
        "Time_End": 1190.1200000000001,
        "Text": " Revert the snapshot, hotkey, it rebinds, and I can continuously step through using WinDebug"
      },
      {
        "Time_Start": 1190.1200000000001,
        "Time_End": 1193.9,
        "Text": " and see kind of what's going on when I hit these breakpoints."
      },
      {
        "Time_Start": 1193.9,
        "Time_End": 1197.74,
        "Text": " So I set breakpoints for a lot of the functions mentioned in the last slide, and eventually"
      },
      {
        "Time_Start": 1197.74,
        "Time_End": 1204.0,
        "Text": " that led to inspection of the TCPIP inet acquire port function."
      },
      {
        "Time_Start": 1204.0,
        "Time_End": 1211.36,
        "Text": " And this was reliably hit when I did that, like revert the snapshot and rebind 445."
      },
      {
        "Time_Start": 1211.36,
        "Time_End": 1215.4,
        "Text": " And every time I did that, I would hit inet acquire port, along with a lot of the other"
      },
      {
        "Time_Start": 1215.4,
        "Time_End": 1218.68,
        "Text": " functions, but this one just looked a little bit more interesting."
      },
      {
        "Time_Start": 1218.68,
        "Time_End": 1223.28,
        "Text": " But I wanted to be sure that hitting this breakpoint was associated with the functionality"
      },
      {
        "Time_Start": 1223.28,
        "Time_End": 1231.42,
        "Text": " that we're interested in, so stepped through this function in the static analysis."
      },
      {
        "Time_Start": 1231.42,
        "Time_End": 1238.1000000000001,
        "Text": " And you'll notice that, so as a note, there's several people on our team that are significantly"
      },
      {
        "Time_Start": 1238.1000000000001,
        "Time_End": 1242.94,
        "Text": " better reverse engineers than I am, and one of them, his name's Evan McBroom, made the"
      },
      {
        "Time_Start": 1242.94,
        "Time_End": 1247.2,
        "Text": " suggestion that I leave as little pseudocode on these slides as possible, because no one"
      },
      {
        "Time_Start": 1247.2,
        "Time_End": 1251.1200000000001,
        "Text": " wants to look at what IDAfree thinks the source code looks like."
      },
      {
        "Time_Start": 1251.1200000000001,
        "Time_End": 1254.68,
        "Text": " So I tried to do that, this was as little as I could get down to and still make sense"
      },
      {
        "Time_Start": 1254.68,
        "Time_End": 1258.5,
        "Text": " of this, but hopefully it's not too much."
      },
      {
        "Time_Start": 1258.5,
        "Time_End": 1265.48,
        "Text": " So in that TCPIP inet acquire port function, basically all I'm doing is looking for a place"
      },
      {
        "Time_Start": 1265.48,
        "Time_End": 1270.04,
        "Text": " that looks, or looking for something in the pseudocode that looks like it might end up"
      },
      {
        "Time_Start": 1270.04,
        "Time_End": 1274.48,
        "Text": " being the port value that is the target of this inet acquire port."
      },
      {
        "Time_Start": 1274.48,
        "Time_End": 1278.56,
        "Text": " We know something with a port is gonna happen, I'm hoping it's port 445, and I'm looking"
      },
      {
        "Time_Start": 1278.56,
        "Time_End": 1283.5,
        "Text": " through the pseudocode to say, like, where does it look like port 445 is gonna end up,"
      },
      {
        "Time_Start": 1283.5,
        "Time_End": 1284.84,
        "Text": " like a variable, for example."
      },
      {
        "Time_Start": 1284.84,
        "Time_End": 1292.62,
        "Text": " So I see a subsequent call to is port in exclusion, and the reason this is interesting is because"
      },
      {
        "Time_Start": 1292.62,
        "Time_End": 1299.4599999999998,
        "Text": " one of the two parameters for is port in exclusion was of type int16, which is somewhat likely"
      },
      {
        "Time_Start": 1299.4599999999998,
        "Time_End": 1304.82,
        "Text": " to be a TCP port number between zero and 65,000, et cetera."
      },
      {
        "Time_Start": 1304.82,
        "Time_End": 1311.6599999999999,
        "Text": " So that's why that specific function that was within the inet acquire port function"
      },
      {
        "Time_Start": 1311.66,
        "Time_End": 1316.44,
        "Text": " call was interesting, because it just seemed like a likely place to verify that what's"
      },
      {
        "Time_Start": 1316.44,
        "Time_End": 1319.52,
        "Text": " happening is associated with port 445."
      },
      {
        "Time_Start": 1319.52,
        "Time_End": 1324.5600000000002,
        "Text": " So the breakpoints are already set, start stepping through the execution of this function,"
      },
      {
        "Time_Start": 1324.5600000000002,
        "Time_End": 1332.4,
        "Text": " and because of the fast call calling convention, if the port that we're interested in is actually"
      },
      {
        "Time_Start": 1332.4,
        "Time_End": 1340.1200000000001,
        "Text": " port 445, we know that when is port in exclusion is called, it will exist in the RDX register."
      },
      {
        "Time_Start": 1340.1200000000001,
        "Time_End": 1343.2,
        "Text": " So we step through some of the execution of the instructions."
      },
      {
        "Time_Start": 1343.2,
        "Time_End": 1350.0200000000002,
        "Text": " When we finally hit acquire port, we step through, and we see in the RDX register that"
      },
      {
        "Time_Start": 1350.0200000000002,
        "Time_End": 1352.94,
        "Text": " it's actually port 445 being leveraged by this function."
      },
      {
        "Time_Start": 1352.94,
        "Time_End": 1358.2800000000002,
        "Text": " So now we know relatively definitively that when this function is called, when we're rebinding"
      },
      {
        "Time_Start": 1358.2800000000002,
        "Time_End": 1365.0600000000002,
        "Text": " to port 445, that inet acquire port and this is port in exclusion are relevant to that"
      },
      {
        "Time_Start": 1365.0600000000002,
        "Time_End": 1369.74,
        "Text": " rebinding behavior."
      },
      {
        "Time_Start": 1369.74,
        "Time_End": 1376.28,
        "Text": " But we're not really interested in binding to port 445, 445 is already bound by default."
      },
      {
        "Time_Start": 1376.28,
        "Time_End": 1383.14,
        "Text": " So this was where I kind of initially ended up, and my hope was that I could leverage"
      },
      {
        "Time_Start": 1383.14,
        "Time_End": 1388.94,
        "Text": " a slightly better understanding of the binding process to then understand the unbinding process."
      },
      {
        "Time_Start": 1388.94,
        "Time_End": 1392.9,
        "Text": " Because we have symbols, we have hopefully similarly named functions that we can kind"
      },
      {
        "Time_Start": 1392.9,
        "Time_End": 1399.04,
        "Text": " of step through this backwards is the hope."
      },
      {
        "Time_Start": 1399.04,
        "Time_End": 1402.6,
        "Text": " So what can we do to start understanding this unbinding process?"
      },
      {
        "Time_Start": 1402.6,
        "Time_End": 1407.46,
        "Text": " Well initially, with all the bring your own vulnerable driver tradecraft, I was hoping"
      },
      {
        "Time_Start": 1407.46,
        "Time_End": 1413.06,
        "Text": " that I could just look at these relevant drivers and identify like IOCTLs or other exposed"
      },
      {
        "Time_Start": 1413.06,
        "Time_End": 1417.92,
        "Text": " driver behavior and maybe call an IOCTL and say unbind this port."
      },
      {
        "Time_Start": 1417.92,
        "Time_End": 1422.1599999999999,
        "Text": " Thankfully something even more, I don't want to say even more straightforward because that's"
      },
      {
        "Time_Start": 1422.1599999999999,
        "Time_End": 1425.68,
        "Text": " not incredibly straightforward, at least to me, but something more straightforward than"
      },
      {
        "Time_Start": 1425.68,
        "Time_End": 1427.18,
        "Text": " that presented itself."
      },
      {
        "Time_Start": 1427.18,
        "Time_End": 1431.8200000000002,
        "Text": " So if we start at the bottom of the call stack, as was mentioned on this previous slide, we"
      },
      {
        "Time_Start": 1431.8200000000002,
        "Time_End": 1438.6200000000001,
        "Text": " see Servnet is directly responsible for initiating this behavior of binding to port 445."
      },
      {
        "Time_Start": 1438.6200000000001,
        "Time_End": 1445.66,
        "Text": " So if we start in Servnet and we start using just similarly named symbols to identify functions"
      },
      {
        "Time_Start": 1445.66,
        "Time_End": 1451.44,
        "Text": " that might be associated with unbinding behavior, we pretty quickly see some pretty obviously"
      },
      {
        "Time_Start": 1451.44,
        "Time_End": 1452.5,
        "Text": " named functions here."
      },
      {
        "Time_Start": 1452.5,
        "Time_End": 1457.56,
        "Text": " So for Servnet, Servnet workstation open listen socket, sorry some of these functions are"
      },
      {
        "Time_Start": 1457.56,
        "Time_End": 1459.48,
        "Text": " pretty longly named."
      },
      {
        "Time_Start": 1459.48,
        "Time_End": 1463.5,
        "Text": " We see a function for close listen socket and for allocate endpoint, we see a function"
      },
      {
        "Time_Start": 1463.5,
        "Time_End": 1467.3,
        "Text": " for close endpoint, add served name, delete served name."
      },
      {
        "Time_Start": 1467.3,
        "Time_End": 1474.72,
        "Text": " So pretty easy to associate maybe what functions would be unbinding port 445 based on the ones"
      },
      {
        "Time_Start": 1474.72,
        "Time_End": 1479.34,
        "Text": " that we know definitely bind port 445."
      },
      {
        "Time_Start": 1479.34,
        "Time_End": 1486.1,
        "Text": " And again, just using cross-references here to start at the function I previously mentioned."
      },
      {
        "Time_Start": 1486.1,
        "Time_End": 1494.8999999999999,
        "Text": " This one was Servnet close endpoint from the Servnet.sys driver and go to that function,"
      },
      {
        "Time_Start": 1494.8999999999999,
        "Time_End": 1499.58,
        "Text": " check what cross-references are there, so what other functions are called by this function."
      },
      {
        "Time_Start": 1499.58,
        "Time_End": 1505.02,
        "Text": " That leads me down to Servnet close endpoint, which I'm not even going to try to read this"
      },
      {
        "Time_Start": 1505.02,
        "Time_End": 1509.46,
        "Text": " one, very long function name here, which ultimately again just using cross-references"
      },
      {
        "Time_Start": 1509.46,
        "Time_End": 1516.04,
        "Text": " here leads me to a driver unload function call, which if there are any reverse engineers"
      },
      {
        "Time_Start": 1516.04,
        "Time_End": 1520.7,
        "Text": " here in the room, some people might already see why this could be interesting."
      },
      {
        "Time_Start": 1520.7,
        "Time_End": 1527.1,
        "Text": " But to dig in a little more, we first want to know how we can determine if this driver"
      },
      {
        "Time_Start": 1527.1,
        "Time_End": 1530.2,
        "Text": " unload code path is ever reached."
      },
      {
        "Time_Start": 1530.2,
        "Time_End": 1533.02,
        "Text": " So how can we do that?"
      },
      {
        "Time_Start": 1533.02,
        "Time_End": 1538.1,
        "Text": " One, we could just be a good reverse engineer and step through all of this pseudocode and"
      },
      {
        "Time_Start": 1538.1,
        "Time_End": 1542.54,
        "Text": " disassembly until we have a very thorough understanding of what's happening in the"
      },
      {
        "Time_Start": 1542.54,
        "Time_End": 1544.02,
        "Text": " related drivers."
      },
      {
        "Time_Start": 1544.02,
        "Time_End": 1549.3,
        "Text": " Or two, we can just let Jesus take the wheel and start blindly disabling services."
      },
      {
        "Time_Start": 1549.3,
        "Time_End": 1554.1,
        "Text": " I'll let everybody take a guess on which approach I took."
      },
      {
        "Time_Start": 1554.1,
        "Time_End": 1559.3799999999999,
        "Text": " But there's a little bit more that we need to consider here, and that is, you can see"
      },
      {
        "Time_Start": 1559.38,
        "Time_End": 1565.46,
        "Text": " at the bottom of this slide, I'm using process hacker, I think, here to attempt just stopping"
      },
      {
        "Time_Start": 1565.46,
        "Time_End": 1568.74,
        "Text": " the Servnet driver, because that's the one we think is relevant."
      },
      {
        "Time_Start": 1568.74,
        "Time_End": 1572.1000000000001,
        "Text": " We might be able to call that driver unload function."
      },
      {
        "Time_Start": 1572.1000000000001,
        "Time_End": 1575.94,
        "Text": " But you'll see in the bottom left of this slide, we can't stop it for some reason related"
      },
      {
        "Time_Start": 1575.94,
        "Time_End": 1578.48,
        "Text": " to service dependence."
      },
      {
        "Time_Start": 1578.48,
        "Time_End": 1581.0200000000002,
        "Text": " So why are we even trying to stop the service?"
      },
      {
        "Time_Start": 1581.0200000000002,
        "Time_End": 1588.0200000000002,
        "Text": " Well, by stopping the Servnet service, which is responsible for the Servnet driver, you"
      },
      {
        "Time_Start": 1588.02,
        "Time_End": 1591.02,
        "Text": " should be able to call its respective driver unload function."
      },
      {
        "Time_Start": 1591.02,
        "Time_End": 1594.78,
        "Text": " This is defined in the WDM driver framework."
      },
      {
        "Time_Start": 1594.78,
        "Time_End": 1597.1,
        "Text": " Most drivers should call the unload function."
      },
      {
        "Time_Start": 1597.1,
        "Time_End": 1601.98,
        "Text": " They don't all call it, but that will be ideally what will happen."
      },
      {
        "Time_Start": 1601.98,
        "Time_End": 1604.78,
        "Text": " And why are service dependencies relevant?"
      },
      {
        "Time_Start": 1604.78,
        "Time_End": 1612.5,
        "Text": " Well, MSDN specifies that a service dependent specifies the names of services or group that"
      },
      {
        "Time_Start": 1612.5,
        "Time_End": 1615.42,
        "Text": " must start before the service in question."
      },
      {
        "Time_Start": 1615.42,
        "Time_End": 1622.8600000000001,
        "Text": " So in most cases, in default builds of Windows, the Servnet service is a dependent of the"
      },
      {
        "Time_Start": 1622.8600000000001,
        "Time_End": 1627.14,
        "Text": " Serv2 service, which is a dependent of the landman server service."
      },
      {
        "Time_Start": 1627.14,
        "Time_End": 1630.7,
        "Text": " So there's some nested dependency here."
      },
      {
        "Time_Start": 1630.7,
        "Time_End": 1635.14,
        "Text": " But we step through those dependencies, and we're starting to connect some dots back to"
      },
      {
        "Time_Start": 1635.14,
        "Time_End": 1639.3400000000001,
        "Text": " the beginning of this presentation, where we're disabling the landman server service,"
      },
      {
        "Time_Start": 1639.3400000000001,
        "Time_End": 1641.68,
        "Text": " we're rebooting the host, 445 is no longer bound."
      },
      {
        "Time_Start": 1641.68,
        "Time_End": 1646.2,
        "Text": " So now we've found a path back from this driver unload function that if we can stop"
      },
      {
        "Time_Start": 1646.2,
        "Time_End": 1651.3600000000001,
        "Text": " the Servnet service, which is a dependency of Serv2, which is a dependency of landman"
      },
      {
        "Time_Start": 1651.3600000000001,
        "Time_End": 1659.92,
        "Text": " server, then potentially we'll reach the code path that is responsible for unbinding the"
      },
      {
        "Time_Start": 1659.92,
        "Time_End": 1662.2,
        "Text": " port of 445."
      },
      {
        "Time_Start": 1662.2,
        "Time_End": 1670.28,
        "Text": " You can also use System Informer and Process Hacker to pretty easily identify service dependence."
      },
      {
        "Time_Start": 1670.28,
        "Time_End": 1674.8,
        "Text": " So here you can see I'm looking at, it looks like the Servnet service, and you can see"
      },
      {
        "Time_Start": 1674.8,
        "Time_End": 1678.12,
        "Text": " the dependencies of Serv2 and landman server."
      },
      {
        "Time_Start": 1678.12,
        "Time_End": 1680.2,
        "Text": " But all of this information just comes from registry."
      },
      {
        "Time_Start": 1680.2,
        "Time_End": 1686.16,
        "Text": " So for Serv2, for example, you'll see the value of depend on service, which is Servnet"
      },
      {
        "Time_Start": 1686.16,
        "Time_End": 1689.48,
        "Text": " here."
      },
      {
        "Time_Start": 1689.48,
        "Time_End": 1697.3999999999999,
        "Text": " But first we started through binding to 445, now we're trying to take guesses at unbinding"
      },
      {
        "Time_Start": 1697.4,
        "Time_End": 1702.5600000000002,
        "Text": " to 445, and also service dependencies are somehow relevant to all this."
      },
      {
        "Time_Start": 1702.5600000000002,
        "Time_End": 1710.16,
        "Text": " But this all comes together by basically working backwards from where we started and interacting"
      },
      {
        "Time_Start": 1710.16,
        "Time_End": 1715.8400000000001,
        "Text": " with these services in a specific order where the service dependents are not an issue for"
      },
      {
        "Time_Start": 1715.8400000000001,
        "Time_End": 1716.8400000000001,
        "Text": " us."
      },
      {
        "Time_Start": 1716.8400000000001,
        "Time_End": 1721.72,
        "Text": " So we can reconfigure the target services that we've talked about by starting with landman"
      },
      {
        "Time_Start": 1721.72,
        "Time_End": 1722.72,
        "Text": " server service."
      },
      {
        "Time_Start": 1722.72,
        "Time_End": 1726.0,
        "Text": " We do just like we did before, we set that to disabled."
      },
      {
        "Time_Start": 1726.0,
        "Time_End": 1731.84,
        "Text": " The reason we need to set this to disabled is there's this concept of service triggers"
      },
      {
        "Time_Start": 1731.84,
        "Time_End": 1737.44,
        "Text": " where a service in Windows can be, depending on its start type, can be triggered to be"
      },
      {
        "Time_Start": 1737.44,
        "Time_End": 1742.96,
        "Text": " enabled a number of different ways, like for an example, interacting with an RPC interface."
      },
      {
        "Time_Start": 1742.96,
        "Time_End": 1747.48,
        "Text": " The landman server service has multiple triggers, those triggers are hit very regularly, so"
      },
      {
        "Time_Start": 1747.48,
        "Time_End": 1751.84,
        "Text": " if you don't set it to a disabled state and then stop the service, one of the service"
      },
      {
        "Time_Start": 1751.84,
        "Time_End": 1753.16,
        "Text": " triggers will just re-enable it."
      },
      {
        "Time_Start": 1753.16,
        "Time_End": 1757.28,
        "Text": " If you stop it, it'll stop, but only for like 10 seconds maybe, for example."
      },
      {
        "Time_Start": 1757.28,
        "Time_End": 1762.0,
        "Text": " So you want to disable it, you want to stop it, then you stop the serve to service, and"
      },
      {
        "Time_Start": 1762.0,
        "Time_End": 1766.78,
        "Text": " then you stop the serve net service in that order because of the order of dependencies,"
      },
      {
        "Time_Start": 1766.78,
        "Time_End": 1772.0800000000002,
        "Text": " and then the last step is optional, but you can pray that 445 is unbound."
      },
      {
        "Time_Start": 1772.0800000000002,
        "Time_End": 1777.68,
        "Text": " I did also want to note before I move on from this slide that in some versions of Windows,"
      },
      {
        "Time_Start": 1777.68,
        "Time_End": 1782.3600000000001,
        "Text": " specifically Windows servers, I haven't done too much digging on this, but it's not always"
      },
      {
        "Time_Start": 1782.5600000000002,
        "Time_End": 1784.92,
        "Text": " this specific order of services."
      },
      {
        "Time_Start": 1784.92,
        "Time_End": 1792.5600000000002,
        "Text": " This is what I've personally seen on our assessments, like 90-95% of the time, especially on workstations,"
      },
      {
        "Time_Start": 1792.5600000000002,
        "Time_End": 1796.92,
        "Text": " but newer versions of Windows, newer versions of Windows server, there might be like an"
      },
      {
        "Time_Start": 1796.92,
        "Time_End": 1802.72,
        "Text": " additional service sandwiched in here somewhere, but I've always been able to do this, just"
      },
      {
        "Time_Start": 1802.72,
        "Time_End": 1807.2800000000002,
        "Text": " maybe there's an additional service that's also a dependent of one of these services,"
      },
      {
        "Time_Start": 1807.28,
        "Time_End": 1813.96,
        "Text": " so that's definitely something to look for if you're targeting newer Windows servers,"
      },
      {
        "Time_Start": 1813.96,
        "Time_End": 1816.32,
        "Text": " for example."
      },
      {
        "Time_Start": 1816.32,
        "Time_End": 1822.8,
        "Text": " But we don't want to just disable these services and hope that 445 is unbound, just like when"
      },
      {
        "Time_Start": 1822.8,
        "Time_End": 1828.72,
        "Text": " we were binding, I personally wanted to just make sure that 445 was associated with the"
      },
      {
        "Time_Start": 1828.72,
        "Time_End": 1831.32,
        "Text": " functions that we've done some analysis on."
      },
      {
        "Time_Start": 1831.32,
        "Time_End": 1836.72,
        "Text": " So just like before, inet acquire port, there's a function called inet release port, it has"
      },
      {
        "Time_Start": 1836.72,
        "Time_End": 1840.84,
        "Text": " the same function prototype, so we should just be able to step through some of the instruction"
      },
      {
        "Time_Start": 1840.84,
        "Time_End": 1848.2,
        "Text": " calls, it also has the exact same call to is port an exclusion, so we already know ideally"
      },
      {
        "Time_Start": 1848.2,
        "Time_End": 1854.44,
        "Text": " where the port should be a specific parameter, we know what register that port should be"
      },
      {
        "Time_Start": 1854.44,
        "Time_End": 1860.44,
        "Text": " in, and when we hit that, we stop all of these services with our breakpoint set, we step"
      },
      {
        "Time_Start": 1860.44,
        "Time_End": 1867.2,
        "Text": " through until we reach is port an exclusion, and we see that just like we had hoped, port"
      },
      {
        "Time_Start": 1867.2,
        "Time_End": 1875.44,
        "Text": " 445 is in the RDX register, which means that is what these functions are interacting with."
      },
      {
        "Time_Start": 1875.44,
        "Time_End": 1880.4,
        "Text": " So just to verify, there's a lot of ways you could do this, but just using a PowerShell"
      },
      {
        "Time_Start": 1880.4,
        "Time_End": 1885.1200000000001,
        "Text": " commandlet here, we check if 445 is unbound, and after disabling these services in the"
      },
      {
        "Time_Start": 1885.1200000000001,
        "Time_End": 1890.44,
        "Text": " specified order, without a reboot, without loading a driver, without loading a custom"
      },
      {
        "Time_Start": 1890.44,
        "Time_End": 1900.5600000000002,
        "Text": " LSA authentication provider, we have unbound port 445."
      },
      {
        "Time_Start": 1900.5600000000002,
        "Time_End": 1908.7600000000002,
        "Text": " So that was a lot of reverse engineering, and to kind of from a high level describe"
      },
      {
        "Time_Start": 1908.7600000000002,
        "Time_End": 1913.8000000000002,
        "Text": " what happened, what were the important pieces during the static and dynamic analysis, if"
      },
      {
        "Time_Start": 1913.8,
        "Time_End": 1919.68,
        "Text": " you imagine the service control manager interactions that we just stepped through, that would happen"
      },
      {
        "Time_Start": 1919.68,
        "Time_End": 1924.52,
        "Text": " down here, like below where the graphic starts, so you stop the services, you stop land main"
      },
      {
        "Time_Start": 1924.52,
        "Time_End": 1929.32,
        "Text": " server service, serve 2, and then when you get to serve net, when you stop that service"
      },
      {
        "Time_Start": 1929.32,
        "Time_End": 1934.84,
        "Text": " successfully, the driver unload function is called, driver unload makes a few more calls"
      },
      {
        "Time_Start": 1934.84,
        "Time_End": 1938.9199999999998,
        "Text": " within that driver until you eventually reach this function that we briefly mentioned, serve"
      },
      {
        "Time_Start": 1938.92,
        "Time_End": 1944.2,
        "Text": " net workstation close listen socket, which then makes a few virtual function calls, ultimately"
      },
      {
        "Time_Start": 1944.2,
        "Time_End": 1953.5600000000002,
        "Text": " to inet release port, which is responsible for unbinding port 445 in this case."
      },
      {
        "Time_Start": 1953.5600000000002,
        "Time_End": 1961.24,
        "Text": " So we have a way to unbind port 445 that meets our previously defined prerequisites, and"
      },
      {
        "Time_Start": 1961.24,
        "Time_End": 1966.04,
        "Text": " to quickly step through, or before we step through automating some of this abuse, I just"
      },
      {
        "Time_Start": 1966.04,
        "Time_End": 1972.96,
        "Text": " wanted to make a couple notes about when you're leveraging this technique."
      },
      {
        "Time_Start": 1972.96,
        "Time_End": 1978.6,
        "Text": " Probably most importantly, if you're leveraging this remotely, a lot of tools will make use"
      },
      {
        "Time_Start": 1978.6,
        "Time_End": 1987.6399999999999,
        "Text": " of RPC over named pipes, and if you're leveraging named pipes, targeting a remote host to disable"
      },
      {
        "Time_Start": 1987.6399999999999,
        "Time_End": 1993.08,
        "Text": " these services, that will work, but it won't work after you disable these services, because"
      },
      {
        "Time_Start": 1993.16,
        "Time_End": 1998.16,
        "Text": " you're disabling the services associated with named pipe communication."
      },
      {
        "Time_Start": 1998.16,
        "Time_End": 2000.6000000000001,
        "Text": " So definitely something to consider."
      },
      {
        "Time_Start": 2000.6000000000001,
        "Time_End": 2007.6000000000001,
        "Text": " If you want to disable this remotely, or leverage like impact that you're proxying into a network,"
      },
      {
        "Time_Start": 2007.6000000000001,
        "Time_End": 2011.68,
        "Text": " by default, like the services.py example script, that uses named pipes."
      },
      {
        "Time_Start": 2011.68,
        "Time_End": 2015.16,
        "Text": " So you'll be able to disable it on a remote host, you won't be able to re-enable it on"
      },
      {
        "Time_Start": 2015.16,
        "Time_End": 2016.4,
        "Text": " a remote host."
      },
      {
        "Time_Start": 2016.4,
        "Time_End": 2021.0000000000002,
        "Text": " But there is a way to do this, because RPC can also be interacted with, depending on"
      },
      {
        "Time_Start": 2021.0,
        "Time_End": 2027.32,
        "Text": " the interface RPC over TCP, which there's a lot of ways to leverage RPC over TCP as"
      },
      {
        "Time_Start": 2027.32,
        "Time_End": 2028.88,
        "Text": " well."
      },
      {
        "Time_Start": 2028.88,
        "Time_End": 2034.32,
        "Text": " Some of which are also impact-based solutions, or the SC binary, for example."
      },
      {
        "Time_Start": 2034.32,
        "Time_End": 2037.32,
        "Text": " Just wanted to make this note, because it's important to understand the tool that you're"
      },
      {
        "Time_Start": 2037.32,
        "Time_End": 2042.8,
        "Text": " using to interact with the service control manager, because if it leverages named pipes,"
      },
      {
        "Time_Start": 2042.8,
        "Time_End": 2045.44,
        "Text": " you won't be able to use it after you disable these services."
      },
      {
        "Time_Start": 2045.44,
        "Time_End": 2052.32,
        "Text": " If it leverages RPC over TCP, you will be able to use it after these services are disabled."
      },
      {
        "Time_Start": 2052.32,
        "Time_End": 2058.2400000000002,
        "Text": " A bonus, in my opinion, of leveraging this technique to unbind 445, is that you conduct"
      },
      {
        "Time_Start": 2058.2400000000002,
        "Time_End": 2062.12,
        "Text": " a series of simple interactions with the service control manager, it's unbound, and then to"
      },
      {
        "Time_Start": 2062.12,
        "Time_End": 2066.2400000000002,
        "Text": " rebind it, because of the service triggers that I mentioned a couple slides ago, all"
      },
      {
        "Time_Start": 2066.2400000000002,
        "Time_End": 2072.28,
        "Text": " you really have to do is set the start type of landman server service to auto start, what"
      },
      {
        "Time_Start": 2072.28,
        "Time_End": 2073.92,
        "Text": " it was in its default state."
      },
      {
        "Time_Start": 2073.92,
        "Time_End": 2078.6,
        "Text": " And because of its service triggers, within 10 to 60 seconds is roughly what I've seen"
      },
      {
        "Time_Start": 2078.6,
        "Time_End": 2082.2400000000002,
        "Text": " in production, everything will just start again."
      },
      {
        "Time_Start": 2082.2400000000002,
        "Time_End": 2086.6,
        "Text": " Because you set it to auto start, a service trigger starts the landman server service,"
      },
      {
        "Time_Start": 2086.6,
        "Time_End": 2090.88,
        "Text": " and because serve two is a dependent of landman server, it starts the serve two service, and"
      },
      {
        "Time_Start": 2090.88,
        "Time_End": 2094.56,
        "Text": " because serve net is a dependent of serve two, it starts the serve net service, which"
      },
      {
        "Time_Start": 2094.56,
        "Time_End": 2096.2400000000002,
        "Text": " binds to port 445."
      },
      {
        "Time_Start": 2096.2400000000002,
        "Time_End": 2101.6,
        "Text": " So you conduct this very simple interaction with service control manager, and service"
      },
      {
        "Time_Start": 2101.6,
        "Time_End": 2104.7599999999998,
        "Text": " control manager takes care of the rest for you."
      },
      {
        "Time_Start": 2104.7599999999998,
        "Time_End": 2110.6,
        "Text": " I wrote two pretty simple POCs, one in Python, if you like proxying things into a network,"
      },
      {
        "Time_Start": 2110.6,
        "Time_End": 2116.04,
        "Text": " and another in a BoF, but again, this basically boils down to a series of pretty straightforward"
      },
      {
        "Time_Start": 2116.04,
        "Time_End": 2119.38,
        "Text": " interactions with the service control manager."
      },
      {
        "Time_Start": 2119.38,
        "Time_End": 2125.36,
        "Text": " So the Python script, which I want to note first, is very heavily based on the WMI Exec"
      },
      {
        "Time_Start": 2125.36,
        "Time_End": 2131.2,
        "Text": " Pro project, I have a link to the author's GitHub here at the bottom of the slide, and"
      },
      {
        "Time_Start": 2131.48,
        "Time_End": 2135.72,
        "Text": " what it does is, just like the BoF I'll show here in a second, it has a stop function,"
      },
      {
        "Time_Start": 2135.72,
        "Time_End": 2137.48,
        "Text": " a check function, and a start function."
      },
      {
        "Time_Start": 2137.48,
        "Time_End": 2142.7599999999998,
        "Text": " So if you want to see if 445's bound, you can run check, if you want to stop it, stop,"
      },
      {
        "Time_Start": 2142.7599999999998,
        "Time_End": 2148.2799999999997,
        "Text": " and you can see here that it basically just automates those service control manager interactions"
      },
      {
        "Time_Start": 2148.2799999999997,
        "Time_End": 2149.2799999999997,
        "Text": " that we've talked about."
      },
      {
        "Time_Start": 2149.2799999999997,
        "Time_End": 2154.56,
        "Text": " So start type of disabled, stop, stop, stop, and then hopefully 445 is unbound."
      },
      {
        "Time_Start": 2154.56,
        "Time_End": 2158.2,
        "Text": " If you want to make sure, you can use the check function, and the root of my logic here"
      },
      {
        "Time_Start": 2158.2,
        "Time_End": 2163.7599999999998,
        "Text": " is basically if servnet is stopped, because serv2 and landman server should have to be"
      },
      {
        "Time_Start": 2163.7599999999998,
        "Time_End": 2169.64,
        "Text": " stopped to stop servnet, because of the dependencies, if servnet is stopped, 445 is very likely"
      },
      {
        "Time_Start": 2169.64,
        "Time_End": 2173.08,
        "Text": " unbound, so that's the root logic of the check here."
      },
      {
        "Time_Start": 2173.08,
        "Time_End": 2177.64,
        "Text": " This again, I'm leveraging over proxy chains, because it's written in Python, so if you"
      },
      {
        "Time_Start": 2177.64,
        "Time_End": 2184.3599999999997,
        "Text": " like proxying your tools in over socks, this would be a potential option for you."
      },
      {
        "Time_Start": 2184.36,
        "Time_End": 2189.48,
        "Text": " And then like I mentioned, also wrote a bof, and this is heavily based on the bof registry"
      },
      {
        "Time_Start": 2189.48,
        "Time_End": 2197.2000000000003,
        "Text": " tool, again, linked to the author's original code here, but implemented a stop, start,"
      },
      {
        "Time_Start": 2197.2000000000003,
        "Time_End": 2202.4,
        "Text": " and check function, which you can see just conducts the exact same service control manager"
      },
      {
        "Time_Start": 2202.4,
        "Time_End": 2206.56,
        "Text": " interactions."
      },
      {
        "Time_Start": 2206.56,
        "Time_End": 2211.6400000000003,
        "Text": " I did also want to note that you don't need to use my tools to do this."
      },
      {
        "Time_Start": 2211.64,
        "Time_End": 2216.92,
        "Text": " Like I mentioned before, the sc.exe binary, which I'm suggesting first, because this actually"
      },
      {
        "Time_Start": 2216.92,
        "Time_End": 2221.96,
        "Text": " defaults to RPC over TCP, you can leverage that binary."
      },
      {
        "Time_Start": 2221.96,
        "Time_End": 2227.3199999999997,
        "Text": " I know when I mention that, a lot of folks probably think executing that binary on host,"
      },
      {
        "Time_Start": 2227.3199999999997,
        "Time_End": 2232.4,
        "Text": " but something that our team and a lot of other red teams in pen testing shops are doing is"
      },
      {
        "Time_Start": 2232.4,
        "Time_End": 2241.88,
        "Text": " proxying in tools from a remote Windows host using a proxy software like Proxifier or Proxycap,"
      },
      {
        "Time_Start": 2241.88,
        "Time_End": 2247.84,
        "Text": " and you can proxy sc.exe from a remote non-domain joined host over socks into the target network"
      },
      {
        "Time_Start": 2247.84,
        "Time_End": 2253.08,
        "Text": " is an option, and you just use these four commands, again, disable, stop, stop, stop,"
      },
      {
        "Time_Start": 2253.08,
        "Time_End": 2255.28,
        "Text": " and then 445 will likely be unbound."
      },
      {
        "Time_Start": 2255.28,
        "Time_End": 2259.96,
        "Text": " Or if you just want to use the original WMI exec pro project, that defaults to RPC over"
      },
      {
        "Time_Start": 2259.96,
        "Time_End": 2263.32,
        "Text": " TCP, which is why I'm recommending it."
      },
      {
        "Time_Start": 2263.32,
        "Time_End": 2268.16,
        "Text": " And a little bit longer of commands here, but again, it just boils down to disabling"
      },
      {
        "Time_Start": 2268.16,
        "Time_End": 2272.4,
        "Text": " landman server service, stop, stop, and then stop."
      },
      {
        "Time_Start": 2272.4,
        "Time_End": 2276.56,
        "Text": " And then if you want to check, you can just use the get info action to see if, like I"
      },
      {
        "Time_Start": 2276.56,
        "Time_End": 2283.64,
        "Text": " mentioned before, the root of the logic previously was checking if servnet was running."
      },
      {
        "Time_Start": 2283.64,
        "Time_End": 2287.7200000000003,
        "Text": " So you can do that with WMI exec pro as well."
      },
      {
        "Time_Start": 2287.7200000000003,
        "Time_End": 2291.5600000000004,
        "Text": " I recommend these tools, but any tool that you like to interact with Service Control"
      },
      {
        "Time_Start": 2291.5600000000004,
        "Time_End": 2298.4,
        "Text": " Manager, like it's basically four simple interactions to stop and then as little as one to restart"
      },
      {
        "Time_Start": 2298.4,
        "Time_End": 2301.6400000000003,
        "Text": " the service."
      },
      {
        "Time_Start": 2301.6400000000003,
        "Time_End": 2308.92,
        "Text": " So I wanted to, before I give a demonstration, give a quick shout out to Garrett, who's not"
      },
      {
        "Time_Start": 2308.92,
        "Time_End": 2315.6400000000003,
        "Text": " here, one of our coworkers, but Chris, who is here, for helping me get lab access to"
      },
      {
        "Time_Start": 2315.8799999999997,
        "Time_End": 2321.08,
        "Text": " a more production-similar SCCM environment so I could demonstrate some of the impact"
      },
      {
        "Time_Start": 2321.08,
        "Time_End": 2323.68,
        "Text": " associated with this technique."
      },
      {
        "Time_Start": 2323.68,
        "Time_End": 2331.3599999999997,
        "Text": " And also Garrett, Chris, and Diego, and a lot of people in the open source community"
      },
      {
        "Time_Start": 2331.3599999999997,
        "Time_End": 2337.7999999999997,
        "Text": " as well as our team for the misconfiguration project that helps document a lot of the SCCM"
      },
      {
        "Time_Start": 2337.7999999999997,
        "Time_End": 2343.3199999999997,
        "Text": " abuse cases, also the one that I'll be demonstrating here with this technique."
      },
      {
        "Time_Start": 2343.32,
        "Time_End": 2348.6000000000004,
        "Text": " But there's a lot of tunneling and reverse port forwarding and SOCKS proxying that happens"
      },
      {
        "Time_Start": 2348.6000000000004,
        "Time_End": 2349.84,
        "Text": " in this demo."
      },
      {
        "Time_Start": 2349.84,
        "Time_End": 2355.56,
        "Text": " So I first wanted to give a very quick review of what tunneling is relevant for folks that"
      },
      {
        "Time_Start": 2355.56,
        "Time_End": 2357.88,
        "Text": " haven't done a lot of proxying before."
      },
      {
        "Time_Start": 2357.88,
        "Time_End": 2361.0,
        "Text": " Hopefully this will help make a little bit better sense of what's happening in the demo"
      },
      {
        "Time_Start": 2361.0,
        "Time_End": 2362.0,
        "Text": " here in a second."
      },
      {
        "Time_Start": 2362.0,
        "Time_End": 2368.6800000000003,
        "Text": " So the important pieces are we'll need traffic in two directions."
      },
      {
        "Time_Start": 2368.68,
        "Time_End": 2373.68,
        "Text": " We'll need traffic coming from our attacker machine into the target network."
      },
      {
        "Time_Start": 2373.68,
        "Time_End": 2377.0,
        "Text": " The reason we need that is because we need to coerce authentication."
      },
      {
        "Time_Start": 2377.0,
        "Time_End": 2379.6,
        "Text": " That'll be the starting point for our relay."
      },
      {
        "Time_Start": 2379.6,
        "Time_End": 2383.7999999999997,
        "Text": " And then we need traffic coming back from the target network to our attacker host."
      },
      {
        "Time_Start": 2383.7999999999997,
        "Time_End": 2388.4199999999996,
        "Text": " That'll be because the authentication that we've coerced, we have to be able to do something"
      },
      {
        "Time_Start": 2388.4199999999996,
        "Time_End": 2389.4199999999996,
        "Text": " with it."
      },
      {
        "Time_Start": 2389.4199999999996,
        "Time_End": 2390.4199999999996,
        "Text": " It comes back to us."
      },
      {
        "Time_Start": 2390.4199999999996,
        "Time_End": 2391.4199999999996,
        "Text": " We relay it somewhere else."
      },
      {
        "Time_Start": 2391.4199999999996,
        "Time_End": 2393.5,
        "Text": " That goes back into the network."
      },
      {
        "Time_Start": 2393.5,
        "Time_End": 2398.12,
        "Text": " So all of that action is happening on our compromised host."
      },
      {
        "Time_Start": 2398.12,
        "Time_End": 2405.6,
        "Text": " Usually with built-in agent functionality, but you can use Windows SSH, or SSH has been"
      },
      {
        "Time_Start": 2405.6,
        "Time_End": 2410.7799999999997,
        "Text": " default on Windows since build 16.07, so SSH is probably there."
      },
      {
        "Time_Start": 2410.7799999999997,
        "Time_End": 2413.92,
        "Text": " You don't need to have this capability built into your agent."
      },
      {
        "Time_Start": 2413.92,
        "Time_End": 2422.56,
        "Text": " But we'll create a SOCKS tunnel, which will allow us to proxy in from our attacker machine,"
      },
      {
        "Time_Start": 2422.56,
        "Time_End": 2427.64,
        "Text": " do like Petit Patam, Printerbug, whatever your favorite coercion tool is, and that goes"
      },
      {
        "Time_Start": 2427.64,
        "Time_End": 2433.92,
        "Text": " into the network through our compromised host here, and hits whatever our actual target"
      },
      {
        "Time_Start": 2433.92,
        "Time_End": 2434.92,
        "Text": " is."
      },
      {
        "Time_Start": 2434.92,
        "Time_End": 2440.24,
        "Text": " And the reason that that traffic can make it back to us is because now we have a pretty"
      },
      {
        "Time_Start": 2440.24,
        "Time_End": 2443.3199999999997,
        "Text": " convenient way to unbind port 445."
      },
      {
        "Time_Start": 2443.3199999999997,
        "Time_End": 2447.72,
        "Text": " We do some type of reverse port forward on this host, and then when like Petit Patam"
      },
      {
        "Time_Start": 2447.72,
        "Time_End": 2452.08,
        "Text": " or Printerbug hits one of these hosts, whatever we're targeting, it comes back to our host."
      },
      {
        "Time_Start": 2452.08,
        "Time_End": 2456.88,
        "Text": " We've taken over port 445, which redirects that traffic back to us, and gives like two"
      },
      {
        "Time_Start": 2456.88,
        "Time_End": 2461.64,
        "Text": " ways through the SOCKS and reverse port forward that traffic can bounce back and forth between"
      },
      {
        "Time_Start": 2461.64,
        "Time_End": 2464.52,
        "Text": " our attacker machine and the target network."
      },
      {
        "Time_Start": 2464.52,
        "Time_End": 2468.6,
        "Text": " So what does that look like in a practical example?"
      },
      {
        "Time_Start": 2468.6,
        "Time_End": 2475.72,
        "Text": " So I've jumped through a couple things because this technique has several steps, and also"
      },
      {
        "Time_Start": 2475.72,
        "Time_End": 2480.2,
        "Text": " it's recorded because every time I do this live, something goes wrong, so I'll save everybody"
      },
      {
        "Time_Start": 2480.2,
        "Time_End": 2481.48,
        "Text": " that trouble."
      },
      {
        "Time_Start": 2481.48,
        "Time_End": 2485.28,
        "Text": " But what I've started with here is I already have a SOCKS tunnel that's identified here"
      },
      {
        "Time_Start": 2485.28,
        "Time_End": 2488.0,
        "Text": " in the Cobalt Strike interface."
      },
      {
        "Time_Start": 2488.0,
        "Time_End": 2490.2400000000002,
        "Text": " Like I mentioned before, it does not have to be Cobalt Strike."
      },
      {
        "Time_Start": 2490.2400000000002,
        "Time_End": 2495.56,
        "Text": " You can use any C2, you don't even have to use a C2, use SSH, use something else."
      },
      {
        "Time_Start": 2495.56,
        "Time_End": 2498.32,
        "Text": " I'm just using it as an example."
      },
      {
        "Time_Start": 2498.32,
        "Time_End": 2504.2,
        "Text": " And I have some sort of access as any domain user that has local admin somewhere."
      },
      {
        "Time_Start": 2504.2,
        "Time_End": 2508.28,
        "Text": " So I have local admin on a host, I'm a normal domain user, and I already have a SOCKS tunnel"
      },
      {
        "Time_Start": 2508.28,
        "Time_End": 2509.72,
        "Text": " set up."
      },
      {
        "Time_Start": 2509.7200000000003,
        "Time_End": 2513.4800000000005,
        "Text": " So the first thing I'm doing is using Garrett's tool called SCCM Hunter."
      },
      {
        "Time_Start": 2513.4800000000005,
        "Time_End": 2518.7200000000003,
        "Text": " I've already done some SCCM enumeration, so I show that I've done that enumeration."
      },
      {
        "Time_Start": 2518.7200000000003,
        "Time_End": 2525.2000000000003,
        "Text": " I see a site server, I see some interesting SCCM stuff."
      },
      {
        "Time_Start": 2525.2000000000003,
        "Time_End": 2531.4,
        "Text": " And then I also do a port scan, so I'm basically just showing there's also an SCCM site database"
      },
      {
        "Time_Start": 2531.4,
        "Time_End": 2532.92,
        "Text": " here somewhere in the target network."
      },
      {
        "Time_Start": 2532.92,
        "Time_End": 2536.92,
        "Text": " All of this is happening over that SOCKS tunnel, so I'm using proxy chains."
      },
      {
        "Time_Start": 2536.92,
        "Time_End": 2542.4,
        "Text": " So there's mssql listening on that SCCM site database."
      },
      {
        "Time_Start": 2542.4,
        "Time_End": 2549.28,
        "Text": " Now I run SCCM Hunter with this mssql command, and there's a lot happening here, but the"
      },
      {
        "Time_Start": 2549.28,
        "Time_End": 2553.28,
        "Text": " important part is that there's an LDAP query conducted, it gets relevant information like"
      },
      {
        "Time_Start": 2553.28,
        "Time_End": 2557.12,
        "Text": " the SID, and then constructs this SQL statement."
      },
      {
        "Time_Start": 2557.12,
        "Time_End": 2561.7200000000003,
        "Text": " The reason this SQL statement is relevant is because when the relay successfully occurs,"
      },
      {
        "Time_Start": 2561.7200000000003,
        "Time_End": 2565.6,
        "Text": " this is what will be executed on the target SQL database."
      },
      {
        "Time_Start": 2565.6,
        "Time_End": 2571.94,
        "Text": " And what all of this boils down to is add me, my normal domain user, as an administrator"
      },
      {
        "Time_Start": 2571.94,
        "Time_End": 2578.12,
        "Text": " in the SCCM site database."
      },
      {
        "Time_Start": 2578.12,
        "Time_End": 2583.16,
        "Text": " So this is where we can leverage this technique that we've talked about to unbind 445."
      },
      {
        "Time_Start": 2583.16,
        "Time_End": 2588.16,
        "Text": " I know this text is probably super small, so I'm going to try to be a little verbose."
      },
      {
        "Time_Start": 2588.16,
        "Time_End": 2594.0,
        "Text": " First I just run help, so here in the bottom left, an incredibly tiny text that shows just"
      },
      {
        "Time_Start": 2594.0,
        "Time_End": 2599.04,
        "Text": " the check, stop, start commands that we've talked about."
      },
      {
        "Time_Start": 2599.04,
        "Time_End": 2603.96,
        "Text": " So the output from running check, it just says true, because by default, 445 is going"
      },
      {
        "Time_Start": 2603.96,
        "Time_End": 2606.48,
        "Text": " to be bound."
      },
      {
        "Time_Start": 2606.48,
        "Time_End": 2614.48,
        "Text": " So next I'm running a shell netstat tack ANO, parsing out 445, and this is just to like"
      },
      {
        "Time_Start": 2614.48,
        "Time_End": 2618.76,
        "Text": " sanity check, don't just trust my tool, actually verify."
      },
      {
        "Time_Start": 2618.76,
        "Time_End": 2623.04,
        "Text": " Don't know if I'd recommend running a shell command in production, but just a second check"
      },
      {
        "Time_Start": 2623.08,
        "Time_End": 2628.4,
        "Text": " that 445 is bound, then we run stop, it does the service control manager interactions that"
      },
      {
        "Time_Start": 2628.4,
        "Time_End": 2636.16,
        "Text": " we've talked about, oops, and we see that it's now false."
      },
      {
        "Time_Start": 2636.16,
        "Time_End": 2642.7599999999998,
        "Text": " So it's true, and then false after we run stop."
      },
      {
        "Time_Start": 2642.7599999999998,
        "Time_End": 2647.0,
        "Text": " And we run another netstat command to verify that 445 is actually no longer listening."
      },
      {
        "Time_Start": 2647.0,
        "Time_End": 2651.96,
        "Text": " Again, no reboot, no loading a driver, anything like that."
      },
      {
        "Time_Start": 2651.96,
        "Time_End": 2656.1,
        "Text": " So now we actually do our reverse port forward, you can do this with SSH."
      },
      {
        "Time_Start": 2656.1,
        "Time_End": 2660.32,
        "Text": " Another tool, I'm doing it with Cobalt Strike built-in functionality, but I run the rportforward"
      },
      {
        "Time_Start": 2660.32,
        "Time_End": 2664.64,
        "Text": " local command, now I have a SOX tunnel and a reverse port forward, so I have the ability"
      },
      {
        "Time_Start": 2664.64,
        "Time_End": 2670.7200000000003,
        "Text": " to send traffic both ways through my agent."
      },
      {
        "Time_Start": 2670.7200000000003,
        "Time_End": 2675.96,
        "Text": " And here on the left, big long ugly command, but all this is is ntlm relay x, I'm targeting"
      },
      {
        "Time_Start": 2675.96,
        "Time_End": 2681.64,
        "Text": " the mssql server that I already verified is there through a proxy to in-map scan, and"
      },
      {
        "Time_Start": 2681.64,
        "Time_End": 2685.52,
        "Text": " I'm saying, hey, when you hit that server, execute that SQL statement that Garrett's"
      },
      {
        "Time_Start": 2685.52,
        "Time_End": 2690.62,
        "Text": " SCCM hunter generated for us already."
      },
      {
        "Time_Start": 2690.62,
        "Time_End": 2695.2,
        "Text": " So now ntlm relay x is listening on the left, all the tunnels should allow the traffic to"
      },
      {
        "Time_Start": 2695.2,
        "Time_End": 2702.56,
        "Text": " reach it, and petit putam is executed, again, over proxy, targeting the, oops, targeting"
      },
      {
        "Time_Start": 2702.56,
        "Time_End": 2712.24,
        "Text": " the mssql service, and it reaches the site database, it makes it back through the reverse"
      },
      {
        "Time_Start": 2712.24,
        "Time_End": 2719.64,
        "Text": " port forward, you can see that the ntlm relay was successful, that's right here, if you"
      },
      {
        "Time_Start": 2719.64,
        "Time_End": 2727.72,
        "Text": " can see the text, and now, because the SQL statement successfully executed, based on"
      },
      {
        "Time_Start": 2727.7200000000003,
        "Time_End": 2735.5200000000004,
        "Text": " the SCCM takeover primitive that we're abusing, we should be added to that database as an"
      },
      {
        "Time_Start": 2735.5200000000004,
        "Time_End": 2742.2400000000002,
        "Text": " administrator, so we go back to SCCM hunter, I want to verify first that I am an admin,"
      },
      {
        "Time_Start": 2742.2400000000002,
        "Time_End": 2748.5600000000004,
        "Text": " I use SCCM hunter, my domain user is now added as an administrator, so that's basically the"
      },
      {
        "Time_Start": 2748.5600000000004,
        "Time_End": 2754.6000000000004,
        "Text": " primitive there, but just to kind of take it a half step further to demonstrate what"
      },
      {
        "Time_Start": 2754.6,
        "Time_End": 2759.64,
        "Text": " leveraging this abuse would look like, I do get device, get the relevant kind of metadata"
      },
      {
        "Time_Start": 2759.64,
        "Time_End": 2764.16,
        "Text": " about the primary site server that we're targeting, and then I run the script command to just"
      },
      {
        "Time_Start": 2764.16,
        "Time_End": 2768.92,
        "Text": " see if I can execute code arbitrarily on this primary site server."
      },
      {
        "Time_Start": 2768.92,
        "Time_End": 2775.24,
        "Text": " I get an error that says alternative approval credentials are required, this is a configuration"
      },
      {
        "Time_Start": 2775.24,
        "Time_End": 2780.68,
        "Text": " that can exist in SCCM deployments, so that's not gonna stop us, Garrett has already accounted"
      },
      {
        "Time_Start": 2780.68,
        "Time_End": 2789.72,
        "Text": " for this in SCCM hunter and added functionality to leverage an additional user as that approver,"
      },
      {
        "Time_Start": 2789.72,
        "Time_End": 2794.64,
        "Text": " so in this command, I'm just specifying my domain user, which is already added as an"
      },
      {
        "Time_Start": 2794.64,
        "Time_End": 2799.74,
        "Text": " admin, any other domain user that will be the approver, and the first thing I do is"
      },
      {
        "Time_Start": 2799.74,
        "Time_End": 2803.08,
        "Text": " I add that other domain user as an admin, we're already an admin, we can add another"
      },
      {
        "Time_Start": 2803.08,
        "Time_End": 2808.2799999999997,
        "Text": " admin, so now I have two admins in the site database, and I use that second user that"
      },
      {
        "Time_Start": 2808.28,
        "Time_End": 2816.6800000000003,
        "Text": " I've added as the approver, so I again get the device information that I need, then"
      },
      {
        "Time_Start": 2816.6800000000003,
        "Time_End": 2821.44,
        "Text": " I interact with the primary site server that we're attempting to get privileged code execution"
      },
      {
        "Time_Start": 2821.44,
        "Time_End": 2826.7000000000003,
        "Text": " on, and I list the contents of the public folder, the only reason I'm doing this is"
      },
      {
        "Time_Start": 2826.7000000000003,
        "Time_End": 2830.76,
        "Text": " because the scripts that I'll be executing, all it does is drop a text file called we"
      },
      {
        "Time_Start": 2830.76,
        "Time_End": 2834.76,
        "Text": " made it to the public folder, the contents of the file will be the user context that"
      },
      {
        "Time_Start": 2834.76,
        "Time_End": 2839.5600000000004,
        "Text": " we're executing in, just because I want to make sure it's privileged, so I list the contents"
      },
      {
        "Time_Start": 2839.5600000000004,
        "Time_End": 2850.7200000000003,
        "Text": " of the folder, then we run script again, hopefully with the additional approver credentials,"
      },
      {
        "Time_Start": 2850.7200000000003,
        "Time_End": 2855.76,
        "Text": " everything works, it looks like based on the results, there's no result because all it's"
      },
      {
        "Time_Start": 2855.76,
        "Time_End": 2859.36,
        "Text": " doing is creating a file, but it says it's successfully executed, so we're going to again"
      },
      {
        "Time_Start": 2859.36,
        "Time_End": 2863.6400000000003,
        "Text": " list the public folder, and the we made it file was dropped, but we want to know the"
      },
      {
        "Time_Start": 2863.64,
        "Time_End": 2868.16,
        "Text": " user context that we executed in, we cat that file, we see that we executed on the"
      },
      {
        "Time_Start": 2868.16,
        "Time_End": 2875.96,
        "Text": " primary site server in a system context, and then the last little bit here, because cleaning"
      },
      {
        "Time_Start": 2875.96,
        "Time_End": 2885.3199999999997,
        "Text": " up is important, is the second script is just deleting that file, and then we list again,"
      },
      {
        "Time_Start": 2885.3199999999997,
        "Time_End": 2893.2799999999997,
        "Text": " and we made it has been removed from the public folder of the primary site server, so we've"
      },
      {
        "Time_Start": 2893.28,
        "Time_End": 2899.6800000000003,
        "Text": " talked about a lot here between the static and dynamic reversing of the binding process,"
      },
      {
        "Time_Start": 2899.6800000000003,
        "Time_End": 2904.7200000000003,
        "Text": " how does that relate to unbinding, and then actually implementing the theory that we had,"
      },
      {
        "Time_Start": 2904.7200000000003,
        "Time_End": 2909.6800000000003,
        "Text": " but to kind of summarize all that, simple interactions with the service control manager"
      },
      {
        "Time_Start": 2909.6800000000003,
        "Time_End": 2915.0,
        "Text": " can result in port 445 being unbound, and the demo that we just went through is kind"
      },
      {
        "Time_Start": 2915.0,
        "Time_End": 2920.32,
        "Text": " of an example of why that is important, at least for us on assessments, and then again"
      },
      {
        "Time_Start": 2920.32,
        "Time_End": 2923.6000000000004,
        "Text": " the important note, if you're doing this remotely, you probably want to conduct this"
      },
      {
        "Time_Start": 2923.6000000000004,
        "Time_End": 2929.44,
        "Text": " over using RPC over TCP, because you'll have connectivity issues once you disable if you're"
      },
      {
        "Time_Start": 2929.44,
        "Time_End": 2935.76,
        "Text": " using named pipes, I will be releasing the both in Python implementations that you saw"
      },
      {
        "Time_Start": 2935.76,
        "Time_End": 2943.4,
        "Text": " in these demos, probably within the next few days, like sometime this week most likely,"
      },
      {
        "Time_Start": 2943.4,
        "Time_End": 2947.44,
        "Text": " but I also want to remind you if you're having a problem with one of my tools, I don't always"
      },
      {
        "Time_Start": 2947.44,
        "Time_End": 2951.62,
        "Text": " write the best code, you don't have to use them, there's an endless number of tools out"
      },
      {
        "Time_Start": 2951.62,
        "Time_End": 2955.32,
        "Text": " there that you can use to interact with service control manager, use your favorite one, maybe"
      },
      {
        "Time_Start": 2955.32,
        "Time_End": 2961.2000000000003,
        "Text": " just check if it's using RPC over TCP by default, and hopefully the technique that's presented"
      },
      {
        "Time_Start": 2961.2000000000003,
        "Time_End": 2968.2400000000002,
        "Text": " here will provide somewhat of a lower touch solution to taking over inbound port 445 TCP"
      },
      {
        "Time_Start": 2968.2400000000002,
        "Time_End": 2976.36,
        "Text": " traffic so you can conduct your targeted NTLM relay attacks."
      },
      {
        "Time_Start": 2976.36,
        "Time_End": 2986.92,
        "Text": " And thank you very much for your time."
      },
      {
        "Time_Start": 2986.92,
        "Time_End": 2988.36,
        "Text": " I think we have a few minutes."
      },
      {
        "Time_Start": 2988.36,
        "Time_End": 2989.36,
        "Text": " Yes, we do."
      },
      {
        "Time_Start": 2989.36,
        "Time_End": 2992.44,
        "Text": " Thank you very much for the presentation, quite interesting."
      },
      {
        "Time_Start": 2992.44,
        "Time_End": 2997.56,
        "Text": " So do we have any questions?"
      },
      {
        "Time_Start": 2997.56,
        "Time_End": 3004.36,
        "Text": " Nobody?"
      },
      {
        "Time_Start": 3004.36,
        "Time_End": 3007.0,
        "Text": " Any ideas what we can do for detection?"
      },
      {
        "Time_Start": 3007.0,
        "Time_End": 3011.2000000000003,
        "Text": " Maybe somehow something starting to listen on that port that is not expected to?"
      },
      {
        "Time_Start": 3011.2000000000003,
        "Time_End": 3013.2000000000003,
        "Text": " I have no idea how common that is."
      },
      {
        "Time_Start": 3013.2000000000003,
        "Time_End": 3018.8,
        "Text": " Yeah, perfectly timed question, I was just chatting with someone named Lucas, I'm not"
      },
      {
        "Time_Start": 3018.8,
        "Time_End": 3023.7000000000003,
        "Text": " sure if they're in here or not, but gave me a couple great ideas that they have already"
      },
      {
        "Time_Start": 3023.7000000000003,
        "Time_End": 3031.36,
        "Text": " implemented internally for this, which is from a couple different perspectives, one"
      },
      {
        "Time_Start": 3031.36,
        "Time_End": 3038.8,
        "Text": " kind of specific to the attack is looking for non-standard processes listening on port"
      },
      {
        "Time_Start": 3038.8,
        "Time_End": 3039.8,
        "Text": " 445."
      },
      {
        "Time_Start": 3039.8,
        "Time_End": 3043.6,
        "Text": " So it should be system, it's kernel things happening that is normal."
      },
      {
        "Time_Start": 3043.6,
        "Time_End": 3047.84,
        "Text": " So if there's a process other than system listening on 445, that should be relatively"
      },
      {
        "Time_Start": 3047.84,
        "Time_End": 3049.6800000000003,
        "Text": " high fidelity."
      },
      {
        "Time_Start": 3049.6800000000003,
        "Time_End": 3058.0,
        "Text": " As well as, let's see, there was some RPC filtering potential as well, but I might have"
      },
      {
        "Time_Start": 3058.0,
        "Time_End": 3059.6,
        "Text": " to follow up on that."
      },
      {
        "Time_Start": 3060.24,
        "Time_End": 3066.2799999999997,
        "Text": " Oh, the other one that he also mentioned, that Lucas also mentioned, was the disabling"
      },
      {
        "Time_Start": 3066.2799999999997,
        "Time_End": 3068.64,
        "Text": " of services in a particular order."
      },
      {
        "Time_Start": 3068.64,
        "Time_End": 3074.92,
        "Text": " So I wouldn't imagine on workstations or servers that it would be standard practice for anything"
      },
      {
        "Time_Start": 3074.92,
        "Time_End": 3080.2599999999998,
        "Text": " to disable even landmine server service, more specifically all three of these sequentially."
      },
      {
        "Time_Start": 3080.2599999999998,
        "Time_End": 3085.04,
        "Text": " So if that happens in a certain time period threshold or really at all, I think that would"
      },
      {
        "Time_Start": 3085.04,
        "Time_End": 3087.68,
        "Text": " be a pretty reliable way to detect this."
      },
      {
        "Time_Start": 3088.4,
        "Time_End": 3089.4,
        "Text": " Cool, thanks."
      },
      {
        "Time_Start": 3099.5200000000004,
        "Time_End": 3101.2400000000002,
        "Text": " Cool finding, Nick."
      },
      {
        "Time_Start": 3101.2400000000002,
        "Time_End": 3106.0400000000004,
        "Text": " The thing I was wondering is, did you notice any instabilities or crashes or other stuff"
      },
      {
        "Time_Start": 3106.0400000000004,
        "Time_End": 3108.32,
        "Text": " when you disable three of those services?"
      },
      {
        "Time_Start": 3108.32,
        "Time_End": 3113.1600000000003,
        "Text": " I can imagine, of course, a server not being accessible anymore over Samba, whatever."
      },
      {
        "Time_Start": 3113.1600000000003,
        "Time_End": 3116.6000000000004,
        "Text": " But did you encounter any other stuff while doing ops?"
      },
      {
        "Time_Start": 3116.6,
        "Time_End": 3122.8399999999997,
        "Text": " Yeah, that's a great question, probably something I should have elaborated on more."
      },
      {
        "Time_Start": 3122.8399999999997,
        "Time_End": 3128.7999999999997,
        "Text": " We've used this on a lot of assessments, almost every Windows assessment in the last six months,"
      },
      {
        "Time_Start": 3128.7999999999997,
        "Time_End": 3131.12,
        "Text": " and we've had no stability issues."
      },
      {
        "Time_Start": 3131.12,
        "Time_End": 3136.4,
        "Text": " I don't say that with the intention of convincing you that there are no stability issues."
      },
      {
        "Time_Start": 3136.4,
        "Time_End": 3141.7599999999998,
        "Text": " Whenever I drop in on an assessment and somebody is doing this on a production server or something"
      },
      {
        "Time_Start": 3141.76,
        "Time_End": 3146.88,
        "Text": " that's important, I think it would be incredibly important to understand what's running on"
      },
      {
        "Time_Start": 3146.88,
        "Time_End": 3149.0400000000004,
        "Text": " the host that relies on things like name pipes."
      },
      {
        "Time_Start": 3149.0400000000004,
        "Time_End": 3153.4,
        "Text": " Because if a critical service relies on name pipes, for example, you're going to cause"
      },
      {
        "Time_Start": 3153.4,
        "Time_End": 3154.4,
        "Text": " massive issues."
      },
      {
        "Time_Start": 3154.4,
        "Time_End": 3159.2000000000003,
        "Text": " So I feel a lot better about doing this on workstations, just because generally, hopefully,"
      },
      {
        "Time_Start": 3159.2000000000003,
        "Time_End": 3163.0,
        "Text": " there's not critical services running on somebody's laptop."
      },
      {
        "Time_Start": 3163.0,
        "Time_End": 3167.28,
        "Text": " But definitely understanding what's happening on the server would be important."
      },
      {
        "Time_Start": 3167.28,
        "Time_End": 3168.28,
        "Text": " Great question."
      },
      {
        "Time_Start": 3168.28,
        "Time_End": 3169.28,
        "Text": " Cool, thank you."
      },
      {
        "Time_Start": 3172.5600000000004,
        "Time_End": 3174.0400000000004,
        "Text": " There's another one."
      },
      {
        "Time_Start": 3178.6800000000003,
        "Time_End": 3181.32,
        "Text": " Yeah, thanks for the talk."
      },
      {
        "Time_Start": 3181.32,
        "Time_End": 3187.32,
        "Text": " I was also thinking about detection capabilities and what was your experience during your engagements."
      },
      {
        "Time_Start": 3187.32,
        "Time_End": 3191.92,
        "Text": " I mean, you mentioned you used it for almost half a year now."
      },
      {
        "Time_Start": 3191.92,
        "Time_End": 3199.0400000000004,
        "Text": " Do you have any scenario where it got detected, like from an EDR or maybe by some kind of monitoring,"
      },
      {
        "Time_Start": 3199.04,
        "Time_End": 3202.8,
        "Text": " which is specifically looking for those kind of services being stopped?"
      },
      {
        "Time_Start": 3202.8,
        "Time_End": 3205.4,
        "Text": " So did you have any experience on this?"
      },
      {
        "Time_Start": 3205.4,
        "Time_End": 3211.72,
        "Text": " Yeah, so the question was, the time that we've been using this, have we had any detections"
      },
      {
        "Time_Start": 3211.72,
        "Time_End": 3214.24,
        "Text": " or preventions associated with the technique?"
      },
      {
        "Time_Start": 3214.24,
        "Time_End": 3215.24,
        "Text": " We have not."
      },
      {
        "Time_Start": 3215.24,
        "Time_End": 3223.16,
        "Text": " And just my biased opinion, I think a lot of our customers put very heavy emphasis on"
      },
      {
        "Time_Start": 3223.16,
        "Time_End": 3228.68,
        "Text": " their security programs and generally, relatively mature."
      },
      {
        "Time_Start": 3228.6800000000003,
        "Time_End": 3230.1200000000003,
        "Text": " We have to work really hard."
      },
      {
        "Time_Start": 3230.1200000000003,
        "Time_End": 3236.5600000000004,
        "Text": " I think we have to work really hard to compromise and not be detected while we're doing that."
      },
      {
        "Time_Start": 3236.5600000000004,
        "Time_End": 3240.32,
        "Text": " And in all of those environments, we haven't had detection or prevention."
      },
      {
        "Time_Start": 3240.32,
        "Time_End": 3247.5600000000004,
        "Text": " And again, on the flip side of that, I'm not saying that you're completely evasive, fully"
      },
      {
        "Time_Start": 3247.5600000000004,
        "Time_End": 3248.5600000000004,
        "Text": " undetectable."
      },
      {
        "Time_Start": 3248.5600000000004,
        "Time_End": 3251.88,
        "Text": " There's obvious telemetry associated with this technique."
      },
      {
        "Time_Start": 3251.88,
        "Time_End": 3257.0000000000005,
        "Text": " And I won't say in six months that there won't be a popular correlation for doing this."
      },
      {
        "Time_Start": 3257.04,
        "Time_End": 3262.04,
        "Text": " But currently, we've had no problems up to today."
      },
      {
        "Time_Start": 3268.04,
        "Time_End": 3269.04,
        "Text": " Anyone else?"
      },
      {
        "Time_Start": 3272.04,
        "Time_End": 3273.04,
        "Text": " This does not seem to be the case."
      },
      {
        "Time_Start": 3273.04,
        "Time_End": 3276.04,
        "Text": " Okay, so this concludes basically our second block."
      },
      {
        "Time_Start": 3276.04,
        "Time_End": 3279.04,
        "Text": " Thanks again, Nick, for your contribution to Toolbus."
      },
      {
        "Time_Start": 3287.0,
        "Time_End": 3288.04,
        "Text": " Thank you."
      }
    ]
  }
}