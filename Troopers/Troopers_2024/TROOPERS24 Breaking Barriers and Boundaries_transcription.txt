{
  "webpage_url": "https://www.youtube.com/watch?v=D_biIsaxaAY",
  "title": "TROOPERS24: Breaking Barriers and Boundaries",
  "description": "Talk by Alexander Heinrich and Jiska Classen - June 27th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/f3jsgf/\n\nMore impressions:\n  / wearetroopers  \n  / ernw_itsec  \nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 3416,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240909"
}

This text was transcribed using whisper model: large-v2

 So, thank you for the introduction, and also for being here this early in the morning after  the 10k run and everything.  Today, we are going to show you how to break a lot of the barriers in the satellite messaging  on iOS.  My name is Jiska.  And I'm Alex.  I'm working at Hasso Plattner Institute in Potsdam.  And I work at CIMU, so same as Nils yesterday, and I'm a PhD student there, yeah.  So for those of you who don't use the satellite messaging every day, we will have a short  recap on all the features.  So the first feature they introduced is emergency SOS, and the idea is that when you're off  the grid, you don't have a Wi-Fi connection, and you try to make an emergency call, but  that failed, you will be presented with a UI to bootstrap some communication with first  responders in a very efficient format.  The next feature they added is find my other satellite where you can share your location  every 15 minutes with your friends.  Same conditions apply, no Wi-Fi, no satellite coverage, but at least no failed emergency  call which is a bit of an advantage for us as researchers because we don't want to cause  any false alarms to first responders.  These two features were the first two launched in iOS 16.1, and then in iOS 17, they decided  to enhance all of this emergency SOS with something that is implementation-wise super  similar but with another back end for roadside assistance, so when you and your car are stuck  somewhere and you need some help and don't have any cellular coverage, you could get  some help via satellite, but this is a US-only feature because it needs the collaboration  of a company that helps you, and here in Germany, for example, that would be ADAC, and there  is no such collaboration.  The latest feature added, again, US-only is text messaging, so this is going to be in  iOS 18.  You can see me here texting with Christine who is in the US, so I already tried the feature,  and again, no Wi-Fi or cellular coverage is a precondition.  The other precondition is the person you're texting with needs to be on iOS 18.  I think they also need to be in the US, so there's lots of regional restrictions, and  for SMS, it's even more complex, like you can send SMS over satellite, but then your  network provider needs to forward this, and at least my network provider here in Germany  doesn't, so I cannot really test the feature.  So this is a lot of stuff implemented.  There is one more thing that everyone can try any time which is a demo mode, and this  demo mode helps you to make yourself familiar because this whole UI is not super easy to  use, and imagine yourself being in an emergency situation, and the first time being presented  with this UI, this might overwhelm you, so they decided to add a demo mode as well.  But the demo mode does not actively send anything over the air.  It just sends us like where satellites are, so you have an idea of how you would get a  connection to a satellite, but you cannot really use it for any like security research.  All of this communication is based on the global star satellite network, so you have  some satellites orbiting earth, and also ground stations, and those ground stations can send  something to those satellites, and they can send it or reflect it to the ground station,  so they don't really modify the signal in a way, but they are more like mirrors in space  and forward the same signal to a ground station.  The overall network looks like this.  You send, for example, your location to a satellite, and then the satellite reflects  that to a ground station.  The ground station is connected to some Apple server, and that in turn sends it to an iPhone  which is connected to the internet, and this can receive the message.  Just for all the terms that we are using.  Apple has two other internal terms that we will be using in this presentation.  They call the satellite a target, and the ground station an anchor, like because you  are like targeting the satellite and then get the reflection, and for the communication,  it is essential that the satellite is in reach of both you as a sender, but also the  ground station as it is just reflecting the signal.  From iOS, you can also extract a map of the global star services currently used by Apple,  so you can see the ground stations in use.  You can also see the supported countries, even though I think like on the very top of  Canada, there is not really coverage, but I just marked the whole countries if they  are supported or not, and the red dots are some radio exclusion zones, so they don't  want you to send everywhere to not disrupt any other services, and you can see there  is even ground stations in use in countries that don't have satellite support yet, and  the global star infrastructure is even larger than this, so Apple doesn't use all of it,  it's just the portion that Apple is currently using.  With this, we will dive into more technical details, which is the find my location sharing.  So we are always interested in wireless research, and sending your location of a satellite connection  is something new that hasn't been possible before, so we wanted to know how it works.  So before I can tell you how the satellite connection and the sharing of your location  works, I want to tell you how does find my location sharing work in general, because  also that has not been really documented in public before.  So first, when you are sharing or requesting a friend's location, you set up a connection  to an Apple server, you just send a request, and that request is forwarded over Apple's  push notifications to the iPhone of your friend.  Of course, your friend can have multiple devices, but there is only always one device which  is responsible for sharing your location, normally it's your iPhone or your Apple Watch,  and that iPhone then receives this, can you please send me your current location over  push notification, and then starts getting location updates and shares them back to the  Apple server, where the Apple server can then start forwarding these also as push notifications  back to your device.  So then you can see where your friend is, and you also have live updates, so you can  see when they are moving, if they are in a car, or if you are trying to find someone  who is moving around in the city, that would work as well with the live updates.  And all this happens while the friend's phone can be turned off, not really turned off,  but in standby in the pocket.  But Apple has also added end-to-end encryption, which is nice, so every time you share your  location with one of your friends, you have one key, which is called key for sharing location  with friends, or friends key, and that key is a public-private key pair that's sitting  on your iPhone, and it's shared over a secure channel, similar to iMessage to your friend's  iPhone, so they can then use this private key to decrypt your encrypted locations.  So every time you have one location, your iPhone uses EC-IAS encryption, which is a  defined standard, and based on elliptic curves, and then in the end, an AES, symmetric encryption  to get the encrypted location.  If you are really curious which exact EC-IAS method is used, I've written it down here,  but it's a pretty standard combination.  So now we want to talk about satellite location sharing, since we now know how it generally  works.  In the same way, Apple didn't want to weaken your security of your locations that are shared  when they are shared over satellite, but still, how can you make a connection to a satellite  so that the satellite knows which device is connected to it, or like the ground station  better than the satellite, and who is going to share this location so that the friends  can also see your location, not someone else's location.  For this, Apple uses so-called LLC keys, they also have some other names, like transport  keys for example, but most times they're called LLC keys, and they are generated on your phone,  it's a public key, in your secure enclave, so this key cannot be extracted at all.  You can only get a public key or perform some operations on the key, like a key exchange  for example.  And that will be done, so you get the public key out of your phone, your phone generates  30 of these keys, and one key is marked as last resort, so when all of the 30 keys are  used up, the last resort key can always be used to continue satellite communication.  So then Apple needs to know what are the keys that you have, so there's an API where your  iPhone just shares all the public keys back to Apple, and Apple generates one server key  for each of your public keys.  So these server keys are then stored at Apple's site, and also sent back to your iPhone, but  only the public key, since the private key can just rest in Apple's database, and in  the end, this can then form a key exchange on your phone, so you have, even when your  phone is offline, it doesn't have any internet connection, you have your private key and  your secure enclave, and you have the public key from Apple also stored in your keychain,  and these two keys can be used to create a secure shared secret, which is called a session  key, and that will be used to initiate a satellite communication.  So when the iPhone wants to talk to the satellite, you could think maybe there is a special chip  that Apple has added to the iPhone that does satellite communication.  For sure they have added a special antenna, but the chip is actually just the same iPhone  baseband modem, so the Qualcomm modem does all the communication with satellites, and  to initiate the satellite communication, the session key will be shared, and also the identifier  from which LLC key this has been generated, and also your encrypted location, it all goes  to the baseband, and then the baseband just handles all the satellite communication, so  it connects to the satellite, which then mirrors back to the ground station, then your location  is stored, it's still the same encrypted location, it's a bit more packed, so it's  using less data, but your friend can still see where you are, even though you don't have  an internet connection.  And now Jiska will continue to tell you more about emergency SOS.  So a bit more about how emergency SOS works under the hood, first of all, you call emergency  services, and when that fails in your phone, you would see a new button, so this is not  really intuitive to use, some people might not even try to, like, call emergency services  if they see they have low reception, but whatever, like, when this happens, then they can initiate  this emergency texting, so it's a little bit hidden and not in the standard UI.  And even if you would bypass that, so we had a previous talk on that, you cannot just initiate  this, you need to set several hooks to get there if you're not doing an actual emergency  call.  And then you would send a lot of information, so first you put in some questionnaire, where  you answer several questions in a very compressed format to efficiently tell the emergency services  what kind of help you need.  And then, like, next part is you can, like, initialise, like, text messages, and your  medical ID will be sent.  Something super important is that they also send your battery state in just two bits,  so they have four battery states, more than 60 per cent, or the other 60, 30, 10 per cent,  so if at some point you stop messaging, the first responders would know this, and these  two bits are also sent in, like, every message, so that keeps them updated about your current  state, and another thing is location updates, so depending on how much you move and so on,  but, like, every few minutes, there will be another message in the background that  it just sends your current location while your emergency call or emergency texting session  is open.  If you're inactive for two hours, the session will be closed, but otherwise, even if you  disconnect and reconnect, your emergency session is still the same, and just updates this information  whenever you are connected.  They have a very special text compression which we also measured a bit, so, while you're  online, your phone would download so-called compression codecs which are language-specific  for all the languages that you have set on your phone, so not like all supported languages,  but on my phone, it was just English and German being downloaded, and it would try to compress  your text with this language compression codecs, and, if they compress, then they would use  that codec, otherwise, they don't, so if you just write something like la-la-la-la-la which  is not in any dictionary, they wouldn't use the compression codec.  We tried generating a bunch of messages using chat GPT, the best tool for texting, and tried  how well the compression works for rather short messages like this have like 35 characters  on average, the compression is down to 12 characters, but it really depends on your  message length and how well the text that you write compresses.  And they are using full, like they are not using 7-bit ASCII, but they use a full byte  per character, so maybe they could save more with supporting less characters, but whatever,  this is what they do.  And roadside assistant is pretty much the same text stack, so it's just different UI,  but technologically, just the same thing.  Now, what are our reverse engineering options?  So most things, we just reverse engineered with a rather passive set-up where the most  important part was this sector for the communication going on between the iPhone and the baseband.  You can access this with a so-called baseband debug profile, so you install that to a phone  which can be non-j-broken, and then you would see all the messages exchanged between your  phone and the baseband.  Of course, the baseband then is sending like modulating a waveform at some point which  is not one-to-one the same thing that is happening in the QMI messages, so there's  some more abstraction to this, but the cool part about QMI is we see what the modem is  instructed to do and what is then received as a reply after decoding.  And from this, we gain some insights into how this whole satellite communication works.  So we have some iOS processes and the baseband, and they talk to each other over QMI.  They start with some orientation updates, and a target and general config list.  This is meant to be like you're somewhere on earth with some location, and you want  to point at a satellite, and the problem is that the phone does not have any accelerator  like the baseband chip itself doesn't know in which orientation your phone is and where  you are, so this all needs to be sent to the baseband chip in order to help you pointing  correctly and setting the beamforming and stuff on the phone itself.  So this is general config going there that only has to do with the whole thing of you  pointing the phone towards the satellite.  Next is some activation steps where the chip gets secrets from you.  So these are the LLC identifier, which is just a hash of the public key, so that Apple  knows about the key that you previously exchanged with them while being online, what Alex just  explained for Find My, and also the shared secret is sent to the baseband, which is the  result from this offline exchange.  So with these two things, the phone then connects to the satellite, and also at the point where  the keys are being used, they're already being deactivated, so there's like this 30 LLC keys,  and except from the last restored key, the key is just going to be deleted after this  activation step.  Then if everything goes well, the satellite will send you back that you have a connection  established, and then you initialise something that's called a registration, and now, depending  on what you had in the activation, like if the keys were valid or not, you will get a  security config usage.  Otherwise, you might also get something like that there's an update needed, and so on,  so if you experiment with invalid keys, that might get you to different messages, so this  is what happens on success, you will get a security config usage with some more security  information for the whole connection.  Then you do the actual message transmission, which can be a Find My message, but it could  also be multiple emergency messages, and then their reception is confirmed by the satellite,  hopefully at some point, and you will get progress and confirmation for emergency texting,  you will also get messages back from the first responders, and after all of this is done,  you disconnect.  For the case of Find My, you really just send that one single Find My message and disconnect  I guess to save battery power, and because you can just send a Find My message every  15 minutes.  This is a lot of passive observation that you can do, but, for some things, you need  a real phone, like an iPhone 14 on that you can tamper with some settings to see what  happens in a real network, and we only had an iPhone 13 mini security research device  at that point in time, and there was no iOS 16 jailbreak, but luckily, we got an SRD and  could try a couple of these things, so it's a bit different from a jailbroken phone, but  we could still hook stuff with Frida, and try out a couple of ideas that we had before,  and with this, I'm handing over to Alex to show you what we tried.  Yes, so we already had the idea to do free satellite messaging, even though Apple hadn't  announced it with iOS 18 back then, but our idea was, okay, we want to have free satellite  messaging on an iPhone 14, which has no jailbreak, because there was no jailbreak available.  We needed to do some tricks, maybe, to get our message sent just over the Find My location  sharing.  Why did we want to check if that's possible?  Because now the satellite messages, they are expensive.  Apple always says they are free for two years, and then they extend the two years for another  two years, but we don't know if they will charge for it at some point, but at least  satellite communication cannot be free forever, so we thought maybe we can do it for free,  so what was our initial idea?  We thought, okay, there is so many GPS locations you can have, and they are basically in this  format of, you just have a float number that is shared, and in the data that's actually  shared, we have ten digits for each position, for the position, for latitude and longitude,  each, and that would allow us to send eight bytes of data just encoded in an actual GPS  location, so we thought, okay, let's map an alphabet on this, on the coordinates, so we  can have some characters, we have our ten-digit space, so that would allow us to have, like,  two digits, could map on one character, and in the end, like, a hello world message should  be possible, so we had the idea, okay, let's go take an iPhone 14 that is just a regular  device, put in the fake location of Xcode or some developer tools, and then just start  location sharing of a satellite in the idea that maybe the baseband gets the actual location  so we can actually connect to the satellite, but then the process that actually shares  the location takes our fake location, yeah, but Apple was a bit smarter here, because  obviously when you use fake locations with Xcode, the device knows that, and some system  processes, they just don't process that fake location, same here, and even if you try doing  that, then Apple or the device will start to lock you out of satellite communication  entirely for a few days, so then I thought, like, okay, maybe, I don't know, it just came  newly, so maybe it has been turned off, because there's a bug or something, but with Yizka's phone  everything was working fine, so I was a bit confused, okay, after two days everything was  working again, and I also saw on the locks that there's, like, something, a blocking mode or  something, because I always reach this part, but never connected to the satellite, yeah, but then  the jailbreak came, and our research device arrived, and we had the idea, okay, but  in the end, this actual satellite message with your location data contains 82 bytes, so in this  82 bytes, it's just a tiny little bit of location, and the rest is just encryption, so there's a  ephemeral public key that has to be sent, that takes a lot of bytes, and an authentication tag  in the end, and since everything is somehow encrypted or contains data that looks kind of  random, we thought maybe Apple doesn't know if we replace this whole set of bytes with our own  message, and then we found out, okay, we could even send more bytes than just 83, we could send  up to 160 bytes, so this was actually working, we were just replacing the location message  with our custom message, but Apple was a bit, we reported this, and now  they limited us back to 82 bytes, but it actually still works, and in the end, when you  want to receive a message, because the find my location sharing only works one way, you can only  share but not receive locations of a satellite, you need an internet connection, but at least you can  send some messages to your friends, and we have also made a demo app, it's still called Satellite Send,  so you just, it's designed like a messenger, you share, Yizka has made some awesome hooks  in there that just connect immediately to the satellite API and start sharing the message,  but it actually still sends, says something about your location is being shared in a minute, and  Yizka has more details on this. Yes, let's wait for a few seconds now, it's just saying like it's  sending your location, but like triggered via our messaging app, so you see it's still, the phone  still thinks there is a location being shared over find my, but for real, it's other data.  All right, should be sent in a few seconds. I do these things on my balcony at home, and then it  always takes a little bit. All right. So how does this work? Apple has a ton of private APIs that  they don't expose to regular apps, but that you can actually include in your app, and use when  you're jailbroken, so this thing would never make it through app review, but you can use a private  API, you also need a special entitlement that usually only Apple's binaries would get, and then  you can call into this SP owner framework. SP owner is for search party, because search party  daemon is the thing that does find my location sharing, and there is two important functions  here. One of them is you can call, hey, I want to publish my current location, which is triggering  the dialogue, and then I'm using a second method which is also super important here for seeing what  the status is, because, for some reasons, like it might be that you're currently still connected to  Wi-Fi and you are not even allowed to send location or share location over satellite, and then you  would get error messages back from the API, and that's why I subscribe to the status and then  update the message bubble from grey to blue if it was actually sent. So this is one part of  the API, but this can only allow you to share a location, so triggering this does nothing with  messaging, and for messaging, you need to get even further and hook into the search party daemon  itself, so my idea was what is the dirtiest way of doing this? I just write into a file that the  search party daemon can read from my app, so this is just a shared folder, or not really shared  folder but a folder being used by the search party daemon and accessible by the search party daemon  that my app writes to, and then I set something that is called a tweak, so with DOS, you can  program tweaks on jailbroken phones, similar to Frida, but it just always runs in the background  and hooks this city, so you find my message function when a message is sent to replace  the location with the text that is in that file. So these are the two parts that you need for  sending arbitrary text messages, and that's the sending, we also want to receive messages, and  that's what Alex implemented. So to receive messages, your phone needs to access a lot of  different keys and files that also are used by the Find My app, but in the end, all this just  needs to be done to send one request to Apple's server, so you send basically the same request  that I was showing before that would trigger live location updates, but you can set it to just  shallow, and then it will send the last location update that Apple has stored, so it's in some Apple  domain, find my service fetch, and what you need to send to Apple is a FM ID, so a Find My ID of the user  of whom you want to have the location, and the Find My ID basically is the Apple ID of the user, and  the Apple ID is not the email address, it's a number that is just a fixed number assigned to each Apple  ID, and then you have the location ID which is for each location sharing session, there's one location  ID. So this is sent to Apple server, Apple server then responds if you are actually sharing with  that person, the location timestamp, the location, and a format, and in this case, if the format is set to  one, it's a satellite location update, and the location in our case, it will always be base64  encoded data, but since we just send a text instead of an encrypted location format, this we can  always just decode it with UTF-8, at the moment it's not encrypted and somehow, but it's just a demo,  so in the end, then you will receive the message, and it's a satellite message, so what you can see  here, this is a message sent from Sumo, this is not fake, it's an actual satellite message that we send,  and I just changed the email address, yeah, how do you get, I want to get into some details, how do you  get actually this find my ID and location ID, because there's a lot of things you need to access,  you need to have authorization to the Apple server, you need to have search party tokens for iCloud and  so on, but you also need to have this data about your friend you're sharing your location with,  cool thing is, we also did some research and find my before about Turcas and Airtex, and we found  out that there are some folders on the system that sound interesting, for example, in this case, it's  a secure location shared key, secure location is the name for sharing location with friends of a  find my, and in that folder, we can find a file which is called dot record, it's just a plist,  so it's just an XML file that has three entries, and that entries is our nonce attack and some  encrypted data, and now we just need to decrypt it, how do we decrypt it, there's a key that's  just stored on your iPhone, it's called beacon store key, and you can use that key to, and just  some simple AES to decrypt this data, and then in the end, you will also get a new plist out there  that contains all the data you will need to receive the location, so there are other interesting  record files, I will do a short detour here, because what can we also find, we can find a lot  of things that has name beacon, beacon that's all your devices that are in the find my network, so  the find my network is this like offline finding function when your iPhone is lost, doesn't have  any connection, say you're on a connection or something, you can still find it, because it's  sending this Bluetooth beacons out there, our attacks work exactly the same way, and now there's  loads of devices that are also supported, which are third-party devices, since they collaborate  with Apple, so you can purchase third-party tags and so on, in the own beacons, you find all the  information you get to, you need to get their location, in the beacon naming record, you find  the name and the beacon estimated location is like the last location of that, and then the last  files we found, there are safe locations, so there's also location data about you, so there are safe  locations, other locations that you have marked as safe, so you can leave your keys at home, for  example, and your iPhone wouldn't send you a message, hey you lost your keys at home, please go back,  but also office locations, and like all the locations where people have marked, where you can  say, okay this is the location, where I don't need to be annoyed by my phone, that I left my laptop  there or so, and then there's a secure location label, these are the locations where you want to  be notified, when one of your friends is getting there, because there is not just the location  sharing feature, you also have this feature, where your friends can set, okay I want to get a  notification when this, when my friend gets home, so home location would also be in there, and your  iPhone would just recognize, why am I telling you all of this, it's a bit of our other research, doesn't  not 100% relate to satellite, besides receiving messages, but we found CVE in here, so  vulnerability, and the vulnerability is not so, not really complicated, but the outcome is rather big,  so what we found, is that this beacon store key, you can just request any key entry from your  keychain on your Mac, and it should ask you for your Mac password, because then says, yeah this app  wants to access this key, do you want to give it to it, but in that case it was not asking for a password,  because you can always request the metadata of each key, and in the metadata there was a mistake,  because here you can see the key is in two places, it's in the V data, which is the actual securely  stored data, and then it's also in the general attribute, which is an attribute that you can use  to describe your key, so any app that was running on your Mac, could just send to the  keychain, hey please give me this key, it would get the key entry, but not the actual key back,  but the key was stored in the general attribute, so it could just get all these files from your system  and decrypt them, what could this app do, we have made a long time ago, an app called OpenHaystack,  which can be used to find things over Find My, and I just modified it to find all my devices,  and in this case, yeah you can see all my devices, they are hanging around in Hala 2 here, so yeah,  it's a pretty big impact, even though the actual issue here was not a really big hard  buffer overflow that had to be exploited, but Apple has fixed this in the recent updates,  so 14.5, 17.5 are safe, the general attribute is empty again, and the key is asking for your  Mac password when you're trying to request it, yeah and now Jiska will tell you more about how we bypass  some restrictions. So yeah, this is what we promised you to be in the talk, and new content  on how to break some of the barriers. When we got our research devices, we were kind of shocked  because we got a Korean security research device, so Korean means in your model number, there is a  two-letter part that determines in which country it was produced, and that might lock down some  features, especially in Korea, Find My Friends is not allowed, so you cannot share your location  or your friend's location in Korea, and so we could not set this up on the phone, but at that  point in time, we were on iOS 17, and the only feature that we can use without using any emergency  services is the Find My Friends location sharing, so we couldn't use it for what we wanted,  and had a challenge of hacking through the restrictions, and so we were like, okay,  what we want is like maybe an American SRD that would be LL or something as country code,  so there's different country codes, not necessarily what you would associate with it, but you can just  think of wishing for another country code. So, what did we do? We changed it. To change it,  there is one really helpful file that is also being used a lot by jailbreakers, so there is  a lib mobile and this library holds a lot of the properties of your phone, and it is being cached  in a plist file, so certain properties are received at some point, and then cached into  the file for not being retrieved from the hardware for real, and you can edit this file. So, when you  would do like a full reset of the phone, then it would also reset that cache, but otherwise,  you can override it, and it would keep that. But another issue with changing the model number  like this is that it wouldn't update, so even if you edit the file, you don't see it, and you need  to erase all content and settings, so not a full reset of the phone, just erasing the contents and  settings, and once you do that, and go through the process, and re-log into your account,  you can use the find my friends feature on a security research device, so this is something  you can of course not do on a non-jailbroken phone in any way. You can also not do this with  certain security bypasses, so, for example, Kawabanga allowed you to override a file in memory,  but you would not have it reboot persistent, and if you would reboot the phone, or go through this  erase all contents and settings part, then Kawabanga wouldn't be active any more, so you  cannot use arbitrary bypasses for this, but you need to go for this erase contents and settings,  and so not possible with all set-ups that you can imagine, and another thing where this would  not work is if you actually have a Korean Apple ID and created it on that phone, then it doesn't  work. That's something that Alex tried in the very beginning, so I said I found a bypass,  here's my notes, can you try to reproduce, and he was like it doesn't work for me, and he actually  created a new Apple ID on his new security research device which while it was set to Korean,  and so when he logged in already in some of his iCloud settings apparently it just said like he  has a Korean device account and cannot use it, so this bypass will likely not work for Korean people,  but only for people who had at some point created an Apple ID on a non-Korean device.  And with that, there is even more regional restrictions.  So I just rolled out those services country by country starting in iOS 16.1 with the US and  Canada, Germany was added in iOS 16.2, lucky for us, so we could test stuff early on.  But some other countries followed later, and there might even be more countries to follow.  Here's again the map, and you can see the coloured countries that have support, and it doesn't really  match with the ground stations that you see, and you can also draw a coverage map based on  the orbiting satellites combined with the ground stations, and that's also something that Global  Star which is the network operator provides, so they have coverage maps, and so just look here,  we do not have Poland covered by Apple, but Poland is covered on the Global Star map,  so it should be working somehow, right? I mean, their services are offered in Poland at least  theoretically, and for me living in Potsdam, it's not so far going there, so always worth a visit.  From our previous talks, you might know that there is some configurations,  configuring what is allowed in your country, and which countries have satellite services,  and that is of course something that we can override, so I was like, okay, it sounds like  a weekend trip, I eat some pierogi, and also change the country code from Germany to Poland,  and just see what happens, so what would you guess? Well, a bit of detour here, like I'd made  the mistake of not setting my iPhone as primary location-sharing device before crossing the border,  and then I was having issues with setting this up again, so that would have needed more hooks,  so I was like driving over the border, and then back to set up my phone, and then back to the  border again to see if it works or not. A bit chaotic, but I mean, that's how you spend your  weekend as a wireless security researcher on a German-Polish border, and at some point, I was  like, okay, now I can share my location over Find My, and you can see I have a position  marked like somewhere close to the border, and now you might say, okay, are you sure, Yuska, that  this was actually being sent from Poland? Did your phone think it was in Poland or not?  And there's a couple of daemons on the device, I think like country daemon and so on, they figure  out where you are also based on not just like GPS location, but also the cell towers that you see,  and the country code that they have, so I might have received maybe a cell tower from Germany  or something and have the wrong location, but what gives us insight into this is with the  wireless security sector, we can see what my phone is actually sending to the satellite and what it  is claiming at that point as location, so I just double-checked, and it was claiming that it is in  Poland, but I could still establish the connection. So, yes, so here we are testing all those things.  There is still one more barrier where it said like, okay, this is super annoying, so when you  send your message from somewhere, it would say like send again in 15 minutes, I'm like,  15 minutes, it's just way too long, and I found that setting to be in another property list of  the search party daemon where it stores when the last location was sent. This is again something  that you can only edit on a jailbroken device, like you cannot do this on a regular device, but  when you edit this, or hook it with Frida, like reading the property, and restart the daemon so  that they would read the property again, then you can send it more often, so you can set it to null,  or just remove the property entirely, which is the state for when you have never sent a find  my message before, and you can send the next message. So you can successfully send more  messages than every 15 minutes. Editing by hand, of course, I had multiple minutes in between  sending, but like one or two minutes in between, and not like 15 minutes. That was super helpful  for testing some features, also for making some recordings to not have to wait 15 minutes every  time. Some disclaimer, so, I mean, maybe you see this and you say, like, I want to bypass this on  my own, but when you get the LLC keys, then Apple also knows your Apple ID. That's how they can  associate your location shared over find my if you're actually find my ID, and that means Apple  could track you down for doing this. They might block your Apple ID. They didn't do during our  experiments, but I can imagine if more people started abusing this, and especially hook some  stuff for the bypasses that might happen. But still, I mean, you can bypass. It's all implemented  in software. And then we had our satellite messenger, but iOS 18 came, right, and so we were  watching the WWDC keynote, and we're like, okay, messages via satellite. I mean, we had that before,  but, like, it's coming in iOS 18. It has some restrictions, so, like, I mean, iMessage SMS  over satellite is cool, but it's a US-only feature, and I guess it's not coming to Europe  anytime soon, like Apple stopped rolling out all the cool features to Germany or the European  Union in general for the Digital Markets Act, so, effectively, anything that is a cool feature but  uses an API that cannot be used by third-party apps, it's just not coming, so super sad for us,  but might be a motivation for using maybe our satellite messenger, and, I mean, it was first,  it is free, so it's probably a good alternative. So even though we were a bit disappointed by  how all of this turned out, we wanted to look into how does it work, like how does iOS 18  implement this, and there's a couple of things being updated, so, in the very first beta that  was released like two weeks ago or so, they changed a couple of things, so there's comm  centre which is the demand-handling baseband stuff has new message types being added,  so the first ones you can see is this whole emergency texting and find my stuff  and roadside, but they have a new thing that's called carrier pigeon iMessage light,  so this is the iMessage feature. They also have something called set SMS, so this is the satellite  SMS feature, so it's all there already. And they also have feature flags relating to those names,  but those feature flags are in identity services, IDS, just a different demand because messaging  and key exchange for messaging is implemented there. Interestingly, also, like if you are on  that beta and have satellite services enabled, you would get a new config plist, and you can  notice here we do have a couple of new services, so we have emergency and find my roadside for the  US, but we also have new features in the US which are iMessage light and set SMS, and, well, there  is one trick that you might remember, so this time, we just say whatever, we are Germans, and  we want to use those features, and, yes, it works, so this is me messaging with Christine, so Christine  was so kind and she updated her, like she has a test device that she also updated to the latest  iOS beta, and she is located in the US, so that makes sure that there is no restrictions or  anything, and so we were actually texting here, so, and she allowed me to share the picture of  her cute dog, Honey, but then you see how the normal iMessages are switched to satellite, and  this is actually me next to the troopers' hotel texting and trying out those things, so, yay, it  works! Even in Europe, so it's just a software restriction again. Some notes on this, so, under  the hood, you do have a key exchange going on in the identity services team, and that is just  supported if also your communication partner is on iOS 18 and has everything correctly set up, and  by default, when your contact has iMessage, like it would always try to contact the other person  over iMessage and not with the satellite SMS feature, so satellite SMS is really just a  fallback, and, from how I understood it, what happens is that your phone would send an SMS  over satellite to your own network operator which then in turn makes an SMS from it and send it to  somewhere, so that means that your network provider needs to support receiving those messages  from Apple and forwarding in both directions to actually have SMS service, and you can also see  this message here, like, I'm using, like, I also tried getting different SIM, and I got an eSIM,  and that was Austrian or something, and it just said your network provider does not support this  feature yet, so it just wouldn't send it, so there's probably some hooks to get around this,  but then still, like, if your network provider doesn't support the forwarding, there is a point  in sending SMS to Apple server, it's probably just getting stuck somewhere. So maybe that teases you  into updating your iPhone to iOS 18, but only in the US, not in Germany, so if you're in Germany,  we have something for you, which is a release of our satellite messenger. Please note it does not  have any bypasses for restrictions, so this is really just the whole thing of replacing a find  my message with an arbitrary text message on a jailbroken phone, so you still have all the country  restrictions, the 15-minute limit and everything, it's just a service on top of this, and it's online, so you can get it here.  And if you wonder about the nicely, totally cool slide we made here, it's, we called this satellite  messenger Saftelite, and the idea behind that was there's, like, some service called SFT, like, some  packages are marked with SFT that are handling satellite messages, and we were always, like, what  is SFT? It's probably Saftelite, yeah. Yeah, Alex asked me, I think, like, a few months ago, what is, what does SFT stand for,  which is, like, Saftelite, obviously, so we were, like, okay, that's a Saftelite messenger, and yeah, so with this, we do have a little bit of time for Q&A, we also have some social media if you want to follow us.  All right, thank you very much for the great talk. Are there questions? And I believe there are.  I could just start with one, because I have one. Did you also already look into the radio side of this? So, what is actually transmitted over the air, regarding that?  Yes, but unfinished, so not on the slides. Ah, okay. Work in progress. Looking forward to that. Any other questions?  Hello, thanks for the talk. When there is an emergency SOS, where is the PSAP, or the emergency center? Do you know if, in which country, and how they communicate with the local firemen or whatever?  So, from how I understood it, I mean, I don't have any access to the back end, so it's, like, some stuff I'm just guessing, but, like, so Apple gives you a separate encryption key for those messages, and I think Apple knows the encryption key and can decrypt the emergency texting messages locally, like, on their servers,  and so they act as, like, middlemen for then forwarding the emergency messages to some emergency center. Probably they just have, like, very few. I mean, they can then dispatch this again to someone who is nearby, so I don't think that, like, every little, like, first responder center or something has, like, satellite connectivity features,  so it's just, like, some people then dispatching again, which is totally sufficient, I guess. I mean, how many emergency calls are there where people really need satellite services? There's a few instances, like, when there were, like, the wildfires in Hawaii where, like, some people used it and also publicly talked about it, but I guess in most cases, when you have no cellular coverage, you hopefully don't have an accident,  and even then, like, it's really just a few per week, I hope. Thanks.  More questions.  Yeah, we saw in the demo that it took quite long to transmit the message. How long is the actual message in total?  So, the reason why it takes long in the demo videos is that I hate going outside, so I just sit at home at my table and have, like, the windows next to me, and so if I would actually step out on the balcony, it works much faster, so you don't really notice that it takes super long when you're, like, the iMessage feature and stuff, it's more smoothly.  Yeah, but the maximum length is 160 bytes. Like, that now has been limited further by Apple for the Find My message, but there we were able to try out byte-by-byte when do we reach a level where the satellite just doesn't acknowledge our message.  Yeah, and maybe to add to this, so if you're using iMessage over satellite, you can also not send any photos, so also Christine, I guess she wanted to send me more pics of honey and was like, oh, I cannot send you any pictures. Imagine how many messages you need to send dog photos in 160 bytes.  All right, so if there are no questions anymore, then we would like to prepare the stage for the next talk. Thanks for attending, and thanks again for the great talk.  Thank you.