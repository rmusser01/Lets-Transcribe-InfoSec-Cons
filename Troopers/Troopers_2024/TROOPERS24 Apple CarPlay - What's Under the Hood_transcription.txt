{
  "webpage_url": "https://www.youtube.com/watch?v=cHhxJzavq5I",
  "title": "TROOPERS24: Apple CarPlay - What's Under the Hood",
  "description": "Talk by Hannah N\u00f6ttgen - June 27th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/8mcykg/\n\nMore impressions:\n  / wearetroopers  \n  / ernw_itsec  \nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 1902,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240909"
}

This text was transcribed using whisper model: large-v2

 Thank you for the introduction and I'm glad to see so many people here in the last slot.  As already said, my name is Hanna NÃ¶ttgen and I'm currently working at CIMO and my research  topic is Apple CarPlay and this is also what this talk here is about. A little disclaimer  at the beginning, this will be a reversing talk and we have a little bit of security at the end.  Okay, so what is CarPlay? Like the first question. So here we can see a lot of CarPlay  related things. So we have the iPhone as main component in Apple CarPlay. It runs the application  and then we see different connection options. Like we have wireless connections over Bluetooth  and Wi-Fi but we also can have a cabled option over lightning cable. We have the integration  of native apps like Siri for voice recognition, phone calls, iMessages and of course navigation.  Additionally we have in CarPlay third-party functionalities. Like here for example we have  the FordPass app for remote controlling your car, EasyPark or Domino's for ordering pizza on the  go. This very important feature. Then we have peripheral devices like we have the sound system  of our car integrated, the touch display of our head unit and so the next thing which will come  with CarPlay 2.0 is like integration of instrument cluster or digital instrument cluster.  So for Apple CarPlay, Apple didn't reinvent the wheel. So they use already familiar protocols.  We have here the iApp version 2 protocol for accessory communication and the main purpose  in CarPlay is the authentication but we also have the AirPlay protocol which is known as  common streaming protocol.  Yeah so my main motivation to research this topic was a little bit security related. So  first I asked the question why CarPlay could be an interesting target for an attacker.  So we have a few cool features coming with this. We have a kind of remote execution because the  apps from CarPlay can be started over touch input on the head unit and sometimes we also have  keyboard input. Also CarPlay has access to a wealth of private information like  iMessage, emails, what I already mentioned and we should not forget that it has influence on  driver safety so it could easily distract the driver. What also is worth mentioning is that  CarPlay is allowed to do all of these things without unlocking the iPhone because this is  a default setting in CarPlay. So in the next few slides I want to introduce you a bit of my setup.  So I had two different head units. The first one was a Ford Sync 3 head unit attached to the  whole car. The problem was it was very uncomfortable to work with and my neighbors thought I tried to  steal the car or something and yeah the next thing that the experiments were draining the car  battery so you already had to start the engine after 50 minutes. Also at the beginning I was a  little bit scared because I don't know what's going on there and I had the thought of  crashing anything and so I got a second setup like a Sony standalone head unit and this makes the  work a lot easier. So here you can see the wired CarPlay setup. We have an iPhone 8 jailbroken  connected with lightning to the car and since you use lightning cable for the connection to the car  you have to use Wi-Fi for connecting your notebook via Frida because there is no suitable adapter.  So here is the wireless setup. My problem was my personal car was not able to do wireless CarPlay  so we do a trick and bought like this off-the-shelf product which is called CarLink Kit 4.0 adapter  and so we could make a wireless connection between iPhone and car which was very useful  for example for packet capturing and also dynamic reversing was easier and yeah then we had  the port free and we could connect our notebook over lightning. So now we do a little bit of a  deep dive into CarPlay system. So this is the short version of included processes that are  important for CarPlay. So we see here our main applications CarPlay with its two smaller sidekicks  like CarPlay wallpaper and CarPlay settings and then they also work together with the springboard  and the backboard daemon and they are responsible for processing UI or touch events.  So here the accessory daemon is used for communicating our iApp version 2.0.  We have the media server daemon which is responsible for CarPlay and yeah like the  CarKit daemon is the one daemon instrumenting all the stuff over this so-called CarKit service  but we have later more on this. Yeah so what are important workflows like in CarPlay.  So for starting CarPlay the car is communicating we assume here the wireless setting  over bluetooth classic and makes the standard device and service discovery with the iPhone.  So the bluetooth daemon then sends the information to the user event agent which is like  the neighbor process of the launch daemon and together they then take care of starting all the  processes needed for CarPlay like the CarPlay application itself, CarKit daemon or accessory daemon.  The next thing is forwarding data in the system over iApp version 2.0. So we also see later that  that the iApp data can sit of various stacks. So here in this example we have bluetooth  and wi-fi. So the bluetooth messages are taken care of by the bluetooth daemon and the  wi-fi packages go to the media server daemon. They then process all this data in the  core accessory framework which is an objective c implemented and they then have a server client  model over xpc which is apple's inter-process communication with the accessory daemon.  So the client can invoke messages in the server so incoming messages are transported from the  client side to the server side but also the server can invoke functions when it wants to  send data to the car. So now we somehow have to distribute information inside the CarPlay system  and therefore we have two different ways. So here the first one is over the ACC external  accessory server and this then connects to the other processes also again over the core  accessory framework and then we have a long list of processes that somehow receive information  from this. But this is more like the server knocks on the door and says hey i found a new  accessory when you want to have more information then you have to go and ask Karkit for this.  And therefore the Karkit daemon and its Karkit service agent are responsible and again we have  here they are connected again over xpc with other processes. Here we have the Karkit  framework which is also an Objective-C framework and this framework for example instructs  the preferences application to set the preferences accordingly in the menu or  we can also set the Wi-Fi credentials for the Wi-Fi daemon or start advertising AirPlay over Bonjour.  Now we speak of AirPlay. So the next thing in CarPlay is like the AirPlay functionality.  So the AirPlay packets are arriving over Wi-Fi and wireless or like ethernet in the wired option  and then the media server daemon has the AirPlay sender framework and also more important the  AP transport framework and opposite to the other frameworks this is a C implementation  and interesting classes here is the main AirPlay session class which could have multiple streams  and in the streams then there are http packages for control messages or we also can have screen  packages for video stream. So these packets then are transformed to core media types and  they are then sent to the media framework so they can do their magic and then all these things are  sent to CarPlay and it's other processes so they can calculate the UI.  Now we want to talk about the iPod accessory protocol version 2 or in short  iOp version 2. So here on this slide you can see all official information from Apple that you find  to this protocol. So very generous. The reason here is that this protocol is part of the MFI  program and manufacturer can register for this MFI but they have to sign an NDA and also if you  produce a device you have to pay a fee to Apple and also every device you produce has to have  this special authentication processor which is called MFI chip. So now what we found out so far  so it's a proprietary protocol from Apple and in CarPlay it's used for  transmitting accessory data also authentication and out-of-band establishment of Wi-Fi connections.  So how we already saw it can sit on top of various sticks so we have USB, Bluetooth or Wi-Fi like  AirPlay. AirPlay is Wi-Fi. For CarPlay there's always a specific pattern  which consists of three to four steps. So we have the link initialization where the head unit starts  and the communication and send a fixed packet and the iPhone answers then with the same packet  and then we have a bit of link negotiation setting link timer and stuff so that which is  important if you have a timeout. The cars then sending the accessory information which includes  like manufacturer data, display size, mode if we are connected over Bluetooth or USB  such things. Then we have the authentication phase which is a challenge response  but we have an extra slide for this. And then when you are on wireless CarPlay we have also  an out-of-band Wi-Fi establishment so credentials of the Wi-Fi or of the car hotspot  are then sent to the iPhone over its Bluetooth connection.  Yeah so packets. I won't bore you with that a lot but we have two different packet types  in IAP version 2. So only the first one are these FF55 type and yeah it's like  setting up your protocol. And the interesting thing here is which we also encounter with the  other packet type we have a checksum which is a one byte long and it's a two's complement checksum  so we have here no authentication reason or something. Yeah so this is the second packet  type the FF58 type. It has three additional bytes for acknowledgement and session data flag  for example. And yeah when we have session data then we have an additional accessory capsule  where we exactly have one. And also we have then we can have multiple data headers like when we have  for example two integers then there are two data header. Also session data has its own checksum at  the end. Okay yeah authentication in IAP version 2. So this is one of the main tasks and in the  first step the head unit sends an certificate which is stored in this MFI chip together with  the private key material and the iPhone then checks the certificate. And if this is valid  then iPhone sends a 90 byte nonce. Then the car signs it with its private key and  sends it back. So if something went wrong you see here you get a message that this accessory is not  supported. And a thing also worth mentioning here is that only the accessory authenticates  but the iPhone didn't have to authenticate. Okay so the next thing is like an wireless  car play the wi-fi handover. We can see here a timeline of the bluetooth connection.  So we have a normal bluetooth device discovery and service discovery protocol.  We have a pairing phase like for encrypting with this link here. And we can have numeric comparison  or just works and the manufacturer of the car decides here which method is used.  Yeah on top then two RF com channels are established and we see here in channel one  then I have version 2 data is transmitted. And at the very end of the communication  the wi-fi credentials are transmitted. Okay so to the next protocol.  With AirPlay the information situation is better a lot better. So this is Apple's protocol for  streaming video and audio content. And we know that the communicating devices have to  be in the same network. And we have developer information for this. And  yeah already some reversing efforts from other researchers like we have open AirPlay implementation.  But some things stay closed source. For example  these MFI authentication just works when you have the additional hardware like this MFI chip.  Okay here you can see the timeline for AirPlay in CarPlay. At the beginning we have again  device discovery and this is done over IPv6. And if this doesn't work we have a fallback to IPv4.  And this is then followed by the standard Bonjour discovery from Apple.  And yeah the car and the iPhone they get their destination ports of the first stream.  And also the type of authentication is determined during Bonjour because they have a special  record where the flags for AirPlay then are set. After this we start five different AirPlay streams  like we have four for TCP and data. And then we have one UDP for network timing protocol  which is used for synchronizing time between the two devices. So in the next slides I now want to  discuss the different streams. So the first stream is unencrypted and it's simply an HTTP  request and response. So and the main goal is that the car can offer its AirPlay receiver ID.  When the iPhone gets this receiver ID it says done and we can start with the control stream.  I think this is the most important one because  it sets up the other things and also is responsible for authentication at encryption.  Yeah here we have it consists or the three initial steps are here the pair setup phase.  So the car sends a salt and a public key or they exchange public keys and calculate proofs for this.  In the second step a shared secret is calculated like they again they exchange  public key session public keys and from this they derive then a shared secret for a chachacha  20 poly one three or five. And this is a standardized encryption and it's encrypted  and also authenticated. So in the authentication setup phase this is the step which is especially  for MFI authentication and here the iPhone sends a public key but it's not really treated as a  public key because the car then simply generates its own a pencil to the public key of the iPhone  and does a signature over this. And then the car sends everything back also with the certificate  which is in the which is stored in the MFI chip. But the CarPlay control has also further tasks.  Here we can see the most important ones. So it sets up the other streams. It sets up also the  human interface device which is in fact the touch display.  Then the iPhone switches off the bluetooth of the car or the head unit and we have a  feedback which is kind of an heartbeat so for controlling your connection.  So then we have the CarPlay event stream and this is a bit funny because in CarPlay event we have  exactly the same communication over IAP version two which we saw  which we saw on bluetooth. And yeah so we have a second or third round of authentication  and it's also the same certificate use that is used in the all setup phase.  And yeah possible reasons for that could be that maybe the accessory daemon has no access to the  AirPlay pairing I could imagine. But maybe it's also a thing that we have to stay compatible between  wireless and wired CarPlay. Okay so the next task of the event stream is like  sending so-called hit reports and this is so in short this is coordinates of touch events.  So there are coordinates in it and the packets are transferred to the media server daemon  which encapsulates them in core media types and then this is forwarded to the CarPlay application  and the other small helpers. So they calculate like in their imaginary display what this touch event  would trigger in their imaginary display. Then they are rendering a video stream  which is HEVC encoded and stream it back over the CarPlay one stream. So here's no  real data, real private data transmitted because we only have this kind of video stream.  Okay so now the rather short security part. Spoiler we found something but we can't talk  about it yet. So I have to bore you with these theoretical and default stuff.  Yeah but it's not my fault. I reported in March and 10 days ago I was told I can't talk about this.  So until now I don't really get a plan fixing date or something.  Okay so security on availability. We tried dosing with a simple SYN flooding and it works.  So the head unit became unresponsive. So we tried it on both targets. We tried on iPhone  and on the head unit. It works but you have to be in the car hotspot for this. So  then I think it would be just easier to get a Wi-Fi jammer or something.  Also I found a cool cache but it did not work because maybe this was  legacy thing or maybe there are other files but manipulating this cache had no result.  So attacking authentication. Yeah like this is very hard because we have three rounds of it  and the weakest challenge is 19 bytes long. So replay attack here is hard to impossible  and the only way would be to get like the private keys of the MFI chip.  So MFI is your hardest enemy here.  Confidentiality. So with confidentiality it's also difficult because we only have like this  video stream and it's encrypted with cha-cha-cha poly and session keys. So you have to be there  in every session to read like this key material to decrypt this video stream and therefore you  have also you need physical access like to these to the head unit and then I think it's just easier  to install some device for screen capturing because this is already a pretty hard attacker model.  So what I saw till now Apple did here a pretty decent job and I mean they used custom protocols  but they were already long in production. So we know Airplay had some problems in the past but  I think these things are already fixed. Yeah so now to future work you somehow have to beat  this MFI chip but I leave this to the hardware people. We're currently building a fuzzer on  iApp version 2 because this is a pretty old protocol. I mean who has today an iPod?  No one. So and also I could imagine that we can somehow mess with these touch events.  So on the long term we see here CarPlay 2.0 is at the start. So here we have news from yesterday  and seems like it will get fancy. The launch is planned of the end for the end of this year  together with Aston Martin. But yeah so CarPlay 2.0 is coming but I think it's hard to argue to  get an Aston Martin as research car. So maybe I have to wait a little bit for this. So here you  can see in short the contribution I made. So I had identified the underlying protocols of CarPlay.  Reversed iApp version 2.0. We had a quick overview of the Airplay usage in CarPlay  and a very short security analysis. So on this slide I have my image sources  and now feel free to ask questions.  All right thank you for your insights. We do have time for one or two quick questions.  No it's not your problem but or not your fault but the closing ceremony starts at five. So be quick.  One quick question. You mentioned at the beginning of your talk you made your investigation with an  iPhone 8. For iPhone 8 you wouldn't get the newest iOS version. Do you know if the newest version has  changes on this Airplay code or on the protocols?  I didn't look into newer versions but I think Airplay is already like a pretty used protocol.  So I won't expect, so I don't know for sure, but I won't expect that they have any kind of changes there.  All right do we have another short and quick question?  All right I don't see any hands so please join me at saying thank you Hanna and you did it guys.