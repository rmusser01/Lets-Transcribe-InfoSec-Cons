{
  "metadata": {
    "webpage_url": "https://www.youtube.com/watch?v=tZmollb8NXk",
    "title": "TROOPERS24: Fuzzing at Mach Speed: Uncovering IPC Vulnerabilities on MacOS",
    "description": "Talk by Dillon Franke - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/lb9pjt\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
    "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
    "duration": 3486,
    "channel": "TROOPERS IT Security Conference",
    "uploader": "TROOPERS IT Security Conference",
    "upload_date": "20240902"
  },
  "segments": {
    "metadata": {
      "webpage_url": "https://www.youtube.com/watch?v=tZmollb8NXk",
      "title": "TROOPERS24: Fuzzing at Mach Speed: Uncovering IPC Vulnerabilities on MacOS",
      "description": "Talk by Dillon Franke - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/lb9pjt\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
      "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
      "duration": 3486,
      "channel": "TROOPERS IT Security Conference",
      "uploader": "TROOPERS IT Security Conference",
      "upload_date": "20240902"
    },
    "segments": [
      {
        "Time_Start": 0.0,
        "Time_End": 13.0,
        "Text": "This text was transcribed using whisper model: large-v2\n\n All right, we'll just go for it like this."
      },
      {
        "Time_Start": 13.0,
        "Time_End": 15.52,
        "Text": " Sorry about that, everyone."
      },
      {
        "Time_Start": 15.52,
        "Time_End": 19.76,
        "Text": " Even though there was a little hiccup there, that actually went a lot better than my troopers"
      },
      {
        "Time_Start": 19.76,
        "Time_End": 27.0,
        "Text": " talk in 2022, because I actually got food poisoning and COVID on the day of my talk."
      },
      {
        "Time_Start": 27.0,
        "Time_End": 30.92,
        "Text": " So I'd say things are going a lot better this time around already."
      },
      {
        "Time_Start": 30.92,
        "Time_End": 32.2,
        "Text": " Thanks for bearing with me, though."
      },
      {
        "Time_Start": 32.2,
        "Time_End": 38.84,
        "Text": " I'm really excited to speak about some research that I've done the past year or so, fuzzing"
      },
      {
        "Time_Start": 38.84,
        "Time_End": 45.56,
        "Text": " mock IPC mechanisms, but more importantly, talk about fuzzing in general, and how hopefully"
      },
      {
        "Time_Start": 45.56,
        "Time_End": 51.0,
        "Text": " you can apply it to research projects you want to do, find security vulnerabilities,"
      },
      {
        "Time_Start": 51.0,
        "Time_End": 58.12,
        "Text": " make software safer, and hopefully bring something back to your respective teams."
      },
      {
        "Time_Start": 58.12,
        "Time_End": 60.32,
        "Text": " So a quick bit about who I am."
      },
      {
        "Time_Start": 60.32,
        "Time_End": 61.8,
        "Text": " My name is Dylan Franke."
      },
      {
        "Time_Start": 61.8,
        "Time_End": 64.68,
        "Text": " I'm from San Francisco, California."
      },
      {
        "Time_Start": 64.68,
        "Time_End": 70.36,
        "Text": " I am a Senior Proactive Security Consultant at Mandiant, now part of Google."
      },
      {
        "Time_Start": 70.36,
        "Time_End": 76.84,
        "Text": " I mostly do pen testing consulting right now, so application security, source code reviews,"
      },
      {
        "Time_Start": 76.84,
        "Time_End": 78.76,
        "Text": " and embedded device assessments primarily."
      },
      {
        "Time_Start": 79.52000000000001,
        "Time_End": 81.72,
        "Text": " I also do a lot of reverse engineering."
      },
      {
        "Time_Start": 81.72,
        "Time_End": 88.92,
        "Text": " So I also did a job rotation on Mandiant's Flare team, which is a malware reverse engineering"
      },
      {
        "Time_Start": 88.92,
        "Time_End": 97.36000000000001,
        "Text": " team, specialized also in searching for exploits that are used in the real world, doing zero-day"
      },
      {
        "Time_Start": 97.36000000000001,
        "Time_End": 100.52000000000001,
        "Text": " vulnerability research and exploit development."
      },
      {
        "Time_Start": 100.52000000000001,
        "Time_End": 106.88000000000001,
        "Text": " And I'm currently doing a project with Project Zero, extending some of the research that"
      },
      {
        "Time_Start": 106.88,
        "Time_End": 113.52,
        "Text": " I'm talking about today, trying to find and make finding zero days harder for attackers"
      },
      {
        "Time_Start": 113.52,
        "Time_End": 116.19999999999999,
        "Text": " out there."
      },
      {
        "Time_Start": 116.19999999999999,
        "Time_End": 118.8,
        "Text": " So let's go ahead and jump right into things."
      },
      {
        "Time_Start": 118.8,
        "Time_End": 120.75999999999999,
        "Text": " Who is this talk for?"
      },
      {
        "Time_Start": 120.75999999999999,
        "Time_End": 123.75999999999999,
        "Text": " I really want this to be applicable to everyone here."
      },
      {
        "Time_Start": 123.75999999999999,
        "Time_End": 130.24,
        "Text": " I hope, first and foremost, it'll be applicable to offensive security researchers like myself."
      },
      {
        "Time_Start": 130.24,
        "Time_End": 136.44,
        "Text": " You'll hopefully learn how to use fuzzing to identify memory corruption issues."
      },
      {
        "Time_Start": 137.0,
        "Time_End": 138.0,
        "Text": " And craft exploits."
      },
      {
        "Time_Start": 138.0,
        "Time_End": 142.32,
        "Text": " However, I really hope it's useful as well for defensive security engineers, the blue"
      },
      {
        "Time_Start": 142.32,
        "Time_End": 148.56,
        "Text": " teamers out there, software developers, and mobile application researchers."
      },
      {
        "Time_Start": 148.56,
        "Time_End": 152.04,
        "Text": " So just a little bit of an overview about what we're going to be talking about today."
      },
      {
        "Time_Start": 152.04,
        "Time_End": 160.0,
        "Text": " I'm going to start with a crash course on what fuzzing is and macOS IPC mechanisms."
      },
      {
        "Time_Start": 160.0,
        "Time_End": 163.96,
        "Text": " We're going to start from a very basic level and build up so that we can all be on the"
      },
      {
        "Time_Start": 163.96,
        "Time_End": 165.96,
        "Text": " same playing field here."
      },
      {
        "Time_Start": 165.96,
        "Time_End": 170.6,
        "Text": " Then I'm going to talk about the fuzzing cycle, which is kind of a way that I like to think"
      },
      {
        "Time_Start": 170.6,
        "Time_End": 176.08,
        "Text": " about fuzzing and identifying memory corruption issues."
      },
      {
        "Time_Start": 176.08,
        "Time_End": 179.0,
        "Text": " And then we're going to talk about kind of next steps in my research."
      },
      {
        "Time_Start": 179.0,
        "Time_End": 182.64000000000001,
        "Text": " And then we'll leave some time for Q&A."
      },
      {
        "Time_Start": 182.64000000000001,
        "Time_End": 183.72,
        "Text": " So let's start very basic."
      },
      {
        "Time_Start": 183.72,
        "Time_End": 184.72,
        "Text": " What is fuzzing?"
      },
      {
        "Time_Start": 184.72,
        "Time_End": 190.52,
        "Text": " Fuzzing, the way I like to define it, is just sending unexpected inputs to a system in the"
      },
      {
        "Time_Start": 190.52,
        "Time_End": 194.0,
        "Text": " hopes of making something unexpected happen."
      },
      {
        "Time_Start": 194.0,
        "Time_End": 197.36,
        "Text": " So very basic definition."
      },
      {
        "Time_Start": 197.36,
        "Time_End": 204.88,
        "Text": " Now an attack vector, I like to define as a channel to send an input to a system."
      },
      {
        "Time_Start": 204.88,
        "Time_End": 207.16,
        "Text": " An attack vector can really be anything."
      },
      {
        "Time_Start": 207.16,
        "Time_End": 212.96,
        "Text": " And I urge you to get creative in thinking about what might be an attack vector out there."
      },
      {
        "Time_Start": 212.96,
        "Time_End": 217.92000000000002,
        "Text": " So on a laptop, for example, Bluetooth connections, incoming packets that are being parsed by"
      },
      {
        "Time_Start": 218.20000000000002,
        "Time_End": 221.28000000000003,
        "Text": " the Bluetooth protocol might be an attack vector."
      },
      {
        "Time_Start": 221.28000000000003,
        "Time_End": 227.00000000000003,
        "Text": " Inter-process communications, notifications being pushed to your phone, peripherals connected"
      },
      {
        "Time_Start": 227.00000000000003,
        "Time_End": 230.12,
        "Text": " to your device, or a wireless connection."
      },
      {
        "Time_Start": 230.12,
        "Time_End": 235.04000000000002,
        "Text": " All of these and more can be attack vectors."
      },
      {
        "Time_Start": 235.04000000000002,
        "Time_End": 236.34000000000003,
        "Text": " Couple examples here."
      },
      {
        "Time_Start": 236.34000000000003,
        "Time_End": 240.52,
        "Text": " On Adobe Acrobat, simply opening a PDF."
      },
      {
        "Time_Start": 240.52,
        "Time_End": 247.4,
        "Text": " The PDF there might be an attack vector that an attacker could exploit for a victim."
      },
      {
        "Time_Start": 247.4,
        "Time_End": 251.88,
        "Text": " A query parameter in a Google search could be an attack vector."
      },
      {
        "Time_Start": 251.88,
        "Time_End": 256.16,
        "Text": " A smartwatch that's handling Bluetooth data coming from your phone could also be an attack"
      },
      {
        "Time_Start": 256.16,
        "Time_End": 257.16,
        "Text": " vector."
      },
      {
        "Time_Start": 257.16,
        "Time_End": 260.28000000000003,
        "Text": " So you can really get creative here."
      },
      {
        "Time_Start": 260.28000000000003,
        "Time_End": 262.44,
        "Text": " So why do we want to fuzz?"
      },
      {
        "Time_Start": 262.44,
        "Time_End": 264.12,
        "Text": " Why is that useful?"
      },
      {
        "Time_Start": 264.12,
        "Time_End": 269.96,
        "Text": " And it's because in memory-unsafe languages, C and C++, which build virtually all the software"
      },
      {
        "Time_Start": 269.96,
        "Time_End": 275.52,
        "Text": " that we rely on, we want to send input that causes a crash."
      },
      {
        "Time_Start": 275.84,
        "Time_End": 279.79999999999995,
        "Text": " And this is possible because they deal with memory unsafely."
      },
      {
        "Time_Start": 279.79999999999995,
        "Time_End": 284.28,
        "Text": " Depending on the type of crash that we're able to generate, our inputs might be able"
      },
      {
        "Time_Start": 284.28,
        "Time_End": 292.12,
        "Text": " to trigger a buffer overflow, a heap overflow, a use-after-free, a double-free, or a memory"
      },
      {
        "Time_Start": 292.12,
        "Time_End": 295.64,
        "Text": " leak, which can help us bypass ASLR."
      },
      {
        "Time_Start": 295.64,
        "Time_End": 303.0,
        "Text": " And here's just an example of a vulnerability that was disclosed in Adobe Acrobat."
      },
      {
        "Time_Start": 303.0,
        "Time_End": 306.6,
        "Text": " This is, first of all, calling out, number one, the attack vector."
      },
      {
        "Time_Start": 306.6,
        "Time_End": 308.64,
        "Text": " Let me get this laser pointer."
      },
      {
        "Time_Start": 308.64,
        "Time_End": 314.84,
        "Text": " The attack vector here is opening a malicious file, and it says, the existence of an object"
      },
      {
        "Time_Start": 314.84,
        "Time_End": 318.24,
        "Text": " prior to performing operations on the object."
      },
      {
        "Time_Start": 318.24,
        "Time_End": 322.6,
        "Text": " That's textbook terms for a use-after-free vulnerability."
      },
      {
        "Time_Start": 322.6,
        "Time_End": 328.6,
        "Text": " So given this attack vector and a fuzzer that was able to find a crafted input to trigger"
      },
      {
        "Time_Start": 328.6,
        "Time_End": 334.72,
        "Text": " this vulnerability, an attacker was able to abuse this."
      },
      {
        "Time_Start": 334.72,
        "Time_End": 338.44,
        "Text": " So there are two main types of fuzzing that we're going to talk about today."
      },
      {
        "Time_Start": 338.44,
        "Time_End": 340.48,
        "Text": " The first is mutation-based fuzzing."
      },
      {
        "Time_Start": 340.48,
        "Time_End": 346.16,
        "Text": " This is where we take existing inputs that we know are valid through an attack vector,"
      },
      {
        "Time_Start": 346.16,
        "Time_End": 350.72,
        "Text": " and we modify them to create new and more interesting inputs, then we send them back"
      },
      {
        "Time_Start": 350.72,
        "Time_End": 352.54,
        "Text": " to the program."
      },
      {
        "Time_Start": 352.54,
        "Time_End": 354.88,
        "Text": " Another type is grammar-based fuzzing."
      },
      {
        "Time_Start": 354.96,
        "Time_End": 360.92,
        "Text": " This is where we generate inputs based on a specified rule or syntax that defines a"
      },
      {
        "Time_Start": 360.92,
        "Time_End": 362.8,
        "Text": " structure of valid inputs."
      },
      {
        "Time_Start": 362.8,
        "Time_End": 367.04,
        "Text": " So for example, if you're trying to fuzz a web browser, you might write a grammar to"
      },
      {
        "Time_Start": 367.04,
        "Time_End": 375.36,
        "Text": " produce valid JavaScript, and then create a bunch of interesting mutations on valid"
      },
      {
        "Time_Start": 375.36,
        "Time_End": 378.0,
        "Text": " JavaScript syntax."
      },
      {
        "Time_Start": 378.0,
        "Time_End": 382.2,
        "Text": " Today though, we're going to be focused on the former here, mutation-based fuzzing, and"
      },
      {
        "Time_Start": 382.2,
        "Time_End": 384.15999999999997,
        "Text": " the research I'm going to talk to you about."
      },
      {
        "Time_Start": 384.15999999999997,
        "Time_End": 389.24,
        "Text": " Okay, let's do a quick crash course into the XNU kernel."
      },
      {
        "Time_Start": 389.24,
        "Time_End": 393.52,
        "Text": " This is the kernel that powers macOS."
      },
      {
        "Time_Start": 393.52,
        "Time_End": 398.2,
        "Text": " There's three main layers of the XNU kernel that I want to talk about."
      },
      {
        "Time_Start": 398.2,
        "Time_End": 400.15999999999997,
        "Text": " First off is the mock layer."
      },
      {
        "Time_Start": 400.15999999999997,
        "Time_End": 406.12,
        "Text": " This is responsible for most of your low-level tasks like thread management, IPC, inter-process"
      },
      {
        "Time_Start": 406.12,
        "Time_End": 409.15999999999997,
        "Text": " communication, and memory management."
      },
      {
        "Time_Start": 409.16,
        "Time_End": 414.48,
        "Text": " You also have the BSD layer, which handles higher-level tasks, things like file system"
      },
      {
        "Time_Start": 414.48,
        "Time_End": 420.0,
        "Text": " accesses, read and writes, and network protocols."
      },
      {
        "Time_Start": 420.0,
        "Time_End": 425.72,
        "Text": " And then there's IOKit, which is a framework for developing device drivers."
      },
      {
        "Time_Start": 425.72,
        "Time_End": 429.88,
        "Text": " Once again, we're going to be honing in on the mock layer here, and specifically inter-process"
      },
      {
        "Time_Start": 429.88,
        "Time_End": 433.24,
        "Text": " communications."
      },
      {
        "Time_Start": 433.24,
        "Time_End": 436.64000000000004,
        "Text": " So what is inter-process communication or IPC?"
      },
      {
        "Time_Start": 436.64,
        "Time_End": 442.32,
        "Text": " At a very basic level, processes need to talk to each other for different reasons."
      },
      {
        "Time_Start": 442.32,
        "Time_End": 445.47999999999996,
        "Text": " One process might need to tell another that it's done reading a file."
      },
      {
        "Time_Start": 445.47999999999996,
        "Time_End": 448.8,
        "Text": " It can continue the task that it was doing."
      },
      {
        "Time_Start": 448.8,
        "Time_End": 452.2,
        "Text": " One might be blocking, waiting for a network response."
      },
      {
        "Time_Start": 452.2,
        "Time_End": 457.46,
        "Text": " And so processes are talking to each other all the time on modern operating systems."
      },
      {
        "Time_Start": 457.46,
        "Time_End": 461.03999999999996,
        "Text": " On macOS, there's a lot of different ways they can do this."
      },
      {
        "Time_Start": 461.03999999999996,
        "Time_End": 463.0,
        "Text": " A few are listed here."
      },
      {
        "Time_Start": 463.56,
        "Time_End": 469.6,
        "Text": " Mock messages are what we're going to be focusing on, because they're the lowest-level IPC mechanism"
      },
      {
        "Time_Start": 469.6,
        "Time_End": 475.28,
        "Text": " and the direct basis for which many other mechanisms are built on top of."
      },
      {
        "Time_Start": 475.28,
        "Time_End": 483.46,
        "Text": " So my thought was, if we target this base IPC mechanism and try to generate crashes,"
      },
      {
        "Time_Start": 483.46,
        "Time_End": 487.28,
        "Text": " we might be able to find some interesting things going on that we can take advantage"
      },
      {
        "Time_Start": 487.28,
        "Time_End": 491.44,
        "Text": " of as an attacker."
      },
      {
        "Time_Start": 491.44,
        "Time_End": 493.71999999999997,
        "Text": " What are mock ports?"
      },
      {
        "Time_Start": 493.71999999999997,
        "Time_End": 499.26,
        "Text": " So a mock port is essentially an IPC message queue."
      },
      {
        "Time_Start": 499.26,
        "Time_End": 503.6,
        "Text": " So you can think of it as a mailbox that's managed by the kernel."
      },
      {
        "Time_Start": 503.6,
        "Time_End": 507.08,
        "Text": " So messages are going to come into these mock ports."
      },
      {
        "Time_Start": 507.08,
        "Time_End": 513.0,
        "Text": " The kernel is then going to distribute them to the processes that need to receive them."
      },
      {
        "Time_Start": 513.0,
        "Time_End": 519.36,
        "Text": " There's this notion of a port write, which is a handle to a mock port that allows either"
      },
      {
        "Time_Start": 519.36,
        "Time_End": 525.28,
        "Text": " sending or receiving messages to the port."
      },
      {
        "Time_Start": 525.28,
        "Time_End": 529.96,
        "Text": " And you can actually, if you have a Mac system, see these mock ports and list some pretty"
      },
      {
        "Time_Start": 529.96,
        "Time_End": 531.44,
        "Text": " detailed information about them."
      },
      {
        "Time_Start": 531.44,
        "Time_End": 536.96,
        "Text": " If you use the LSMP tool here, it'll show you all of the mock ports that are on your"
      },
      {
        "Time_Start": 536.96,
        "Time_End": 541.48,
        "Text": " system, and you'll be able to see different details about them."
      },
      {
        "Time_Start": 541.48,
        "Time_End": 547.44,
        "Text": " For example, whether they have receive writes, send writes, which processes are sending and"
      },
      {
        "Time_Start": 547.44,
        "Time_End": 549.2,
        "Text": " receiving to them."
      },
      {
        "Time_Start": 549.2,
        "Time_End": 553.12,
        "Text": " And a lot of other pieces of information."
      },
      {
        "Time_Start": 553.12,
        "Time_End": 555.72,
        "Text": " But they're being used constantly by the operating system."
      },
      {
        "Time_Start": 555.72,
        "Time_End": 561.08,
        "Text": " So they are ripe for taking advantage of."
      },
      {
        "Time_Start": 561.08,
        "Time_End": 567.5200000000001,
        "Text": " Let's go through a basic example of how one would establish a mock connection using mock"
      },
      {
        "Time_Start": 567.5200000000001,
        "Time_End": 571.24,
        "Text": " ports and mock IPC mechanisms."
      },
      {
        "Time_Start": 571.24,
        "Time_End": 573.5600000000001,
        "Text": " So first, a couple terms."
      },
      {
        "Time_Start": 573.5600000000001,
        "Time_End": 579.5600000000001,
        "Text": " The bootstrap server is a special mock port that helps establish and facilitate connections"
      },
      {
        "Time_Start": 579.5600000000001,
        "Time_End": 581.2800000000001,
        "Text": " with other mock ports."
      },
      {
        "Time_Start": 581.2800000000001,
        "Time_End": 587.9200000000001,
        "Text": " By default, every process on the system has a send write to this bootstrap server."
      },
      {
        "Time_Start": 587.9200000000001,
        "Time_End": 591.12,
        "Text": " Additionally, mock services."
      },
      {
        "Time_Start": 591.12,
        "Time_End": 596.72,
        "Text": " A mock service is just a special mock port with a name that is registered with the bootstrap"
      },
      {
        "Time_Start": 596.72,
        "Time_End": 597.72,
        "Text": " server."
      },
      {
        "Time_Start": 597.72,
        "Time_End": 601.84,
        "Text": " So, for example, let's say we have a service called com.apple.troopers."
      },
      {
        "Time_Start": 601.84,
        "Time_End": 607.84,
        "Text": " That's going to be registered with the bootstrap server, and it is going to know about it."
      },
      {
        "Time_Start": 607.84,
        "Time_End": 613.6800000000001,
        "Text": " So now let's say that Alice would like to communicate with a service."
      },
      {
        "Time_Start": 613.6800000000001,
        "Time_End": 615.7,
        "Text": " Or create a service, rather."
      },
      {
        "Time_Start": 615.7,
        "Time_End": 617.96,
        "Text": " And let others communicate with it."
      },
      {
        "Time_Start": 617.96,
        "Time_End": 623.36,
        "Text": " So Alice is going to first allocate a new mock port, which will give her a receive write"
      },
      {
        "Time_Start": 623.36,
        "Time_End": 624.36,
        "Text": " to that port."
      },
      {
        "Time_Start": 624.36,
        "Time_End": 629.72,
        "Text": " So she can check that mailbox and grab any messages that are sent to it."
      },
      {
        "Time_Start": 629.72,
        "Time_End": 634.72,
        "Text": " Alice is then going to register her service using that specific service name, com.apple.troopers,"
      },
      {
        "Time_Start": 634.72,
        "Time_End": 636.4,
        "Text": " with the bootstrap server."
      },
      {
        "Time_Start": 636.4,
        "Time_End": 641.96,
        "Text": " And by doing this, she is giving the bootstrap server a send write to the port that Alice"
      },
      {
        "Time_Start": 641.96,
        "Time_End": 644.94,
        "Text": " has a receive write to."
      },
      {
        "Time_Start": 644.94,
        "Time_End": 651.32,
        "Text": " Now Bob is going to come along and ask the bootstrap service for the service named com.apple.troopers."
      },
      {
        "Time_Start": 651.32,
        "Time_End": 656.08,
        "Text": " And the server will give Bob a copy of that send write for Alice's mock port."
      },
      {
        "Time_Start": 656.08,
        "Time_End": 661.08,
        "Text": " And Bob can now send messages to Alice's mock port, which Alice can then receive with"
      },
      {
        "Time_Start": 661.08,
        "Time_End": 665.5600000000001,
        "Text": " her receive write."
      },
      {
        "Time_Start": 665.5600000000001,
        "Time_End": 674.0,
        "Text": " So all mock messages are sent via this function that you see here called mock underscore message."
      },
      {
        "Time_Start": 674.0,
        "Time_End": 677.7800000000001,
        "Text": " This is a low-level API that's used."
      },
      {
        "Time_Start": 677.7800000000001,
        "Time_End": 683.6400000000001,
        "Text": " And really, the two important things to notice about this, first, it's used for both sending"
      },
      {
        "Time_Start": 683.72,
        "Time_End": 687.08,
        "Text": " and receiving mock messages."
      },
      {
        "Time_Start": 687.08,
        "Time_End": 691.12,
        "Text": " And the struct that we really care about here is this first one here, this mock message"
      },
      {
        "Time_Start": 691.12,
        "Time_End": 692.12,
        "Text": " header T."
      },
      {
        "Time_Start": 692.12,
        "Time_End": 699.88,
        "Text": " I won't dive too much into the syntax here, but this contains a bunch of important information"
      },
      {
        "Time_Start": 699.88,
        "Time_End": 705.88,
        "Text": " like which mock port is being sent to, where the reply should be sent back to, this specific"
      },
      {
        "Time_Start": 705.88,
        "Time_End": 707.72,
        "Text": " message ID."
      },
      {
        "Time_Start": 707.72,
        "Time_End": 712.2,
        "Text": " And then there's this body field, which is just a binary blob."
      },
      {
        "Time_Start": 712.2,
        "Time_End": 719.96,
        "Text": " And there's actually no sort of syntax or length that is necessary here."
      },
      {
        "Time_Start": 719.96,
        "Time_End": 728.0400000000001,
        "Text": " So it's really a freeform building block IPC mechanism that other IPC mechanisms can build"
      },
      {
        "Time_Start": 728.0400000000001,
        "Time_End": 729.5600000000001,
        "Text": " off of."
      },
      {
        "Time_Start": 729.5600000000001,
        "Time_End": 736.1600000000001,
        "Text": " So that's a little bit of a background on macOS IPC mechanisms."
      },
      {
        "Time_Start": 736.1600000000001,
        "Time_End": 740.12,
        "Text": " Now let's jump into the fuzzing cycle here."
      },
      {
        "Time_Start": 740.12,
        "Time_End": 747.0,
        "Text": " This is kind of a process that I've coined for myself and how I like to think about research."
      },
      {
        "Time_Start": 747.0,
        "Time_End": 750.84,
        "Text": " The first step here is really going to be identifying an attack vector."
      },
      {
        "Time_Start": 750.84,
        "Time_End": 756.92,
        "Text": " So finding something you think is interesting, something that is exposed and available for"
      },
      {
        "Time_Start": 756.92,
        "Time_End": 759.6,
        "Text": " attackers to interact with."
      },
      {
        "Time_Start": 759.6,
        "Time_End": 763.28,
        "Text": " If it's exposed via network protocol, that's even better."
      },
      {
        "Time_Start": 763.28,
        "Time_End": 767.16,
        "Text": " It's a lot easier to send your inputs to."
      },
      {
        "Time_Start": 767.1999999999999,
        "Time_End": 770.88,
        "Text": " Then we're going to talk about generating a corpus of inputs."
      },
      {
        "Time_Start": 770.88,
        "Time_End": 776.52,
        "Text": " So how do we generate those valid messages to send through that attack vector?"
      },
      {
        "Time_Start": 776.52,
        "Time_End": 779.24,
        "Text": " Then we're going to talk about creating a fuzzing harness."
      },
      {
        "Time_Start": 779.24,
        "Time_End": 784.48,
        "Text": " That's the actual code that will send your input through the attack vector and to your"
      },
      {
        "Time_Start": 784.48,
        "Time_End": 786.48,
        "Text": " target."
      },
      {
        "Time_Start": 786.48,
        "Time_End": 789.76,
        "Text": " Then we'll fuzz and hopefully produce crashes."
      },
      {
        "Time_Start": 789.76,
        "Time_End": 795.9399999999999,
        "Text": " And then we'll identify relevant crashes that might be useful for crafting an exploit."
      },
      {
        "Time_Start": 795.94,
        "Time_End": 799.3000000000001,
        "Text": " So let's jump into this fuzzing cycle here."
      },
      {
        "Time_Start": 799.3000000000001,
        "Time_End": 801.62,
        "Text": " We learned a little bit about mock messages."
      },
      {
        "Time_Start": 801.62,
        "Time_End": 806.58,
        "Text": " I'm going to talk briefly about how they've been abused in the past and why we should"
      },
      {
        "Time_Start": 806.58,
        "Time_End": 808.82,
        "Text": " care about them."
      },
      {
        "Time_Start": 808.82,
        "Time_End": 811.7,
        "Text": " The first reason is for sandbox escapes."
      },
      {
        "Time_Start": 811.7,
        "Time_End": 815.3000000000001,
        "Text": " Let's say that we have a web browser process."
      },
      {
        "Time_Start": 815.3000000000001,
        "Time_End": 822.3000000000001,
        "Text": " An attacker has an exploit to get code execution within the browser renderer process."
      },
      {
        "Time_Start": 822.3000000000001,
        "Time_End": 826.22,
        "Text": " This is usually not going to be very useful to an attacker on their own because they're"
      },
      {
        "Time_Start": 826.22,
        "Time_End": 831.0200000000001,
        "Text": " running in a sandboxed, restricted context, they're not going to be able to access files"
      },
      {
        "Time_Start": 831.0200000000001,
        "Time_End": 835.5400000000001,
        "Text": " on the system or do really anything that they care about."
      },
      {
        "Time_Start": 835.5400000000001,
        "Time_End": 842.7400000000001,
        "Text": " However, even these restricted sandbox processes can often send mock IPC messages to other"
      },
      {
        "Time_Start": 842.7400000000001,
        "Time_End": 845.1,
        "Text": " processes on the system."
      },
      {
        "Time_Start": 845.1,
        "Time_End": 847.22,
        "Text": " Many of which are not sandboxed."
      },
      {
        "Time_Start": 847.22,
        "Time_End": 853.1800000000001,
        "Text": " So by sending a crafted mock IPC message to a message handler that we can take advantage"
      },
      {
        "Time_Start": 853.1800000000001,
        "Time_End": 858.62,
        "Text": " of, we could go ahead and jump out of that sandbox escape and get into an unrestricted"
      },
      {
        "Time_Start": 858.62,
        "Time_End": 860.4200000000001,
        "Text": " context."
      },
      {
        "Time_Start": 860.4200000000001,
        "Time_End": 864.94,
        "Text": " Additionally, there's the potential for privilege escalation here."
      },
      {
        "Time_Start": 864.94,
        "Time_End": 870.26,
        "Text": " We could be in an unprivileged process where we have code execution, but we take advantage"
      },
      {
        "Time_Start": 870.26,
        "Time_End": 875.74,
        "Text": " of once again a mock message handler and a privileged process and then execute under"
      },
      {
        "Time_Start": 875.74,
        "Time_End": 879.1,
        "Text": " that context."
      },
      {
        "Time_Start": 879.1,
        "Time_End": 884.86,
        "Text": " Here's a couple really interesting links to previous exploits that have dealt with mock"
      },
      {
        "Time_Start": 884.86,
        "Time_End": 888.5,
        "Text": " messages and exploiting those mock message handlers."
      },
      {
        "Time_Start": 888.5,
        "Time_End": 895.62,
        "Text": " The first one I got to see at Black Hat was a very cool race condition in the Mojo framework"
      },
      {
        "Time_Start": 895.62,
        "Time_End": 897.98,
        "Text": " in Chrome."
      },
      {
        "Time_Start": 897.98,
        "Time_End": 903.0600000000001,
        "Text": " And the second one here, which was a huge inspiration for me, this is like an eight"
      },
      {
        "Time_Start": 903.1,
        "Time_End": 913.82,
        "Text": " part blog series about crafting a Safari RCE exploit and a sandbox escape using IPC messages."
      },
      {
        "Time_Start": 913.82,
        "Time_End": 919.86,
        "Text": " So definitely recommend that as a read if any of this interests you."
      },
      {
        "Time_Start": 919.86,
        "Time_End": 924.7800000000001,
        "Text": " So the next thing I wanted to do here is figure out what I should target."
      },
      {
        "Time_Start": 924.7800000000001,
        "Time_End": 931.0200000000001,
        "Text": " I knew I wanted to target IPC mechanisms and mock IPC messages, but I wanted to narrow"
      },
      {
        "Time_Start": 931.02,
        "Time_End": 933.3,
        "Text": " that down a little bit."
      },
      {
        "Time_Start": 933.3,
        "Time_End": 939.46,
        "Text": " And so I wanted to determine which processes could actually allow for that sandbox escape"
      },
      {
        "Time_Start": 939.46,
        "Time_End": 942.14,
        "Text": " and would be meaningful."
      },
      {
        "Time_Start": 942.14,
        "Time_End": 947.9,
        "Text": " So there's a tool called SBtool, which was written by Jonathan Levin."
      },
      {
        "Time_Start": 947.9,
        "Time_End": 950.46,
        "Text": " He does a lot of macOS research."
      },
      {
        "Time_Start": 950.46,
        "Time_End": 952.42,
        "Text": " He's written multiple books."
      },
      {
        "Time_Start": 952.42,
        "Time_End": 954.62,
        "Text": " Very smart guy."
      },
      {
        "Time_Start": 954.62,
        "Time_End": 961.98,
        "Text": " And this SBtool uses macOS's built-in sandbox check function to determine which mock services"
      },
      {
        "Time_Start": 961.98,
        "Time_End": 966.18,
        "Text": " a given process can send messages to."
      },
      {
        "Time_Start": 966.18,
        "Time_End": 971.66,
        "Text": " So those message handlers that we can send to from a sandbox context are ones that we"
      },
      {
        "Time_Start": 971.66,
        "Time_End": 974.3,
        "Text": " might be able to exploit for a sandbox escape."
      },
      {
        "Time_Start": 974.3,
        "Time_End": 976.74,
        "Text": " So you can see us using this here."
      },
      {
        "Time_Start": 976.74,
        "Time_End": 983.46,
        "Text": " These are all of the mock services we can interact with from Safari is the process I"
      },
      {
        "Time_Start": 983.46,
        "Time_End": 986.5400000000001,
        "Text": " ran this against, I believe."
      },
      {
        "Time_Start": 986.5400000000001,
        "Time_End": 992.9000000000001,
        "Text": " So we went from first of all having all macOS processes as ones we could target to then"
      },
      {
        "Time_Start": 992.9000000000001,
        "Time_End": 999.46,
        "Text": " just ones with a mock service exposed finally to a smaller subset of processes with a sandbox"
      },
      {
        "Time_Start": 999.46,
        "Time_End": 1002.7,
        "Text": " allowed mock service."
      },
      {
        "Time_Start": 1002.7,
        "Time_End": 1004.82,
        "Text": " Okay."
      },
      {
        "Time_Start": 1004.82,
        "Time_End": 1009.0600000000001,
        "Text": " So now we have a small grouping of processes we want to look at."
      },
      {
        "Time_Start": 1009.0600000000001,
        "Time_End": 1011.38,
        "Text": " Now we need to find an entry point."
      },
      {
        "Time_Start": 1011.38,
        "Time_End": 1017.9399999999999,
        "Text": " So an entry point is gonna be how we actually send our input and, you know, send it through"
      },
      {
        "Time_Start": 1017.9399999999999,
        "Time_End": 1021.14,
        "Text": " an attack vector to the target."
      },
      {
        "Time_Start": 1021.14,
        "Time_End": 1026.26,
        "Text": " So as we talked about, we know that mock message is used to send mock messages from one process"
      },
      {
        "Time_Start": 1026.26,
        "Time_End": 1028.74,
        "Text": " to another."
      },
      {
        "Time_Start": 1028.74,
        "Time_End": 1029.98,
        "Text": " And we see that going on here."
      },
      {
        "Time_Start": 1029.98,
        "Time_End": 1031.38,
        "Text": " We have a sending process."
      },
      {
        "Time_Start": 1031.38,
        "Time_End": 1033.18,
        "Text": " It calls mock message."
      },
      {
        "Time_Start": 1033.18,
        "Time_End": 1035.94,
        "Text": " It sends this message by land."
      },
      {
        "Time_Start": 1035.94,
        "Time_End": 1040.1,
        "Text": " The kernel processes that, passes it to the receiving process."
      },
      {
        "Time_Start": 1040.1,
        "Time_End": 1045.54,
        "Text": " The message handler accepts it and says, okay, we got a message by land."
      },
      {
        "Time_Start": 1045.54,
        "Time_End": 1051.06,
        "Text": " So you might say, why don't we just modify the real mock messages being sent?"
      },
      {
        "Time_Start": 1051.06,
        "Time_End": 1052.6999999999998,
        "Text": " And that's a great idea."
      },
      {
        "Time_Start": 1052.6999999999998,
        "Time_End": 1053.86,
        "Text": " We can absolutely do that."
      },
      {
        "Time_Start": 1053.86,
        "Time_End": 1056.2199999999998,
        "Text": " That's how I started."
      },
      {
        "Time_Start": 1056.2199999999998,
        "Time_End": 1063.86,
        "Text": " You can use Frida or LLDB, a debugger, and set a break point on the mock message function."
      },
      {
        "Time_Start": 1063.86,
        "Time_End": 1066.3799999999999,
        "Text": " You can then wait for it to be called."
      },
      {
        "Time_Start": 1066.38,
        "Time_End": 1070.5400000000002,
        "Text": " You can mutate the mock message that you see being sent."
      },
      {
        "Time_Start": 1070.5400000000002,
        "Time_End": 1074.7800000000002,
        "Text": " And instead of saying by land, we're saying by sea now."
      },
      {
        "Time_Start": 1074.7800000000002,
        "Time_End": 1078.8200000000002,
        "Text": " And then the kernel will process that and send it to the message handler."
      },
      {
        "Time_Start": 1078.8200000000002,
        "Time_End": 1081.9,
        "Text": " So this is a very valid way to fuzz."
      },
      {
        "Time_Start": 1081.9,
        "Time_End": 1088.5800000000002,
        "Text": " And it's a really great way to get your hands dirty and really dive in pretty easily."
      },
      {
        "Time_Start": 1088.5800000000002,
        "Time_End": 1089.74,
        "Text": " It's simple."
      },
      {
        "Time_Start": 1089.74,
        "Time_End": 1092.88,
        "Text": " And it's also really similar to the end exploit."
      },
      {
        "Time_Start": 1092.88,
        "Time_End": 1097.7600000000002,
        "Text": " So you're gonna need to send a mock message through the kernel, through all these different"
      },
      {
        "Time_Start": 1097.7600000000002,
        "Time_End": 1102.44,
        "Text": " layers to your message handler, ultimately, when you're writing the exploit."
      },
      {
        "Time_Start": 1102.44,
        "Time_End": 1105.0800000000002,
        "Text": " So those are a couple pros."
      },
      {
        "Time_Start": 1105.0800000000002,
        "Time_End": 1108.68,
        "Text": " The cons of doing this, first of all, it's really slow, because you have to wait for"
      },
      {
        "Time_Start": 1108.68,
        "Time_End": 1113.48,
        "Text": " the application to send messages in order to mutate and fuzz them."
      },
      {
        "Time_Start": 1113.48,
        "Time_End": 1118.16,
        "Text": " There's also a lot of points of potential failure along the way."
      },
      {
        "Time_Start": 1118.16,
        "Time_End": 1120.68,
        "Text": " We're having to go through the kernel here."
      },
      {
        "Time_Start": 1120.68,
        "Time_End": 1126.64,
        "Text": " It's slower and can cause bad things to happen if we do something wrong."
      },
      {
        "Time_Start": 1126.64,
        "Time_End": 1130.44,
        "Text": " And we're also dealing with two different process spaces here."
      },
      {
        "Time_Start": 1130.44,
        "Time_End": 1134.8400000000001,
        "Text": " This is important for a reason we'll talk about in a minute called code coverage."
      },
      {
        "Time_Start": 1134.8400000000001,
        "Time_End": 1139.4,
        "Text": " That's actually understanding where our fuzzed input is getting to in the code that we're"
      },
      {
        "Time_Start": 1139.4,
        "Time_End": 1140.4,
        "Text": " fuzzing."
      },
      {
        "Time_Start": 1140.4,
        "Time_End": 1146.1200000000001,
        "Text": " And it can be difficult to determine which message actually caused a crash in our receiving"
      },
      {
        "Time_Start": 1146.1200000000001,
        "Time_End": 1149.26,
        "Text": " process."
      },
      {
        "Time_Start": 1149.26,
        "Time_End": 1154.96,
        "Text": " So what if instead of waiting for that mock message function to be called by the system,"
      },
      {
        "Time_Start": 1154.96,
        "Time_End": 1157.3,
        "Text": " we just write a program to call it ourselves?"
      },
      {
        "Time_Start": 1157.3,
        "Time_End": 1161.48,
        "Text": " So we cut out sort of the middleman here, and we say..."
      },
      {
        "Time_Start": 1161.48,
        "Time_End": 1167.44,
        "Text": " Let's just call mock message in a C program that we write."
      },
      {
        "Time_Start": 1167.44,
        "Time_End": 1173.66,
        "Text": " So this is a lot better, because we don't have to wait for mock message to be called."
      },
      {
        "Time_Start": 1173.66,
        "Time_End": 1176.46,
        "Text": " But we still have to deal with the kernel here."
      },
      {
        "Time_Start": 1176.46,
        "Time_End": 1181.7,
        "Text": " So what if we went ahead and directly called the message handler?"
      },
      {
        "Time_Start": 1181.7,
        "Time_End": 1184.74,
        "Text": " So instead of calling mock message, we say..."
      },
      {
        "Time_Start": 1184.74,
        "Time_End": 1188.74,
        "Text": " We're just gonna call this message handler function, whatever that might be, directly,"
      },
      {
        "Time_Start": 1188.74,
        "Time_End": 1191.96,
        "Text": " and pass our input into it."
      },
      {
        "Time_Start": 1191.96,
        "Time_End": 1195.3400000000001,
        "Text": " This does require some reverse engineering, but we're not afraid of that."
      },
      {
        "Time_Start": 1195.3400000000001,
        "Time_End": 1197.54,
        "Text": " So we'll jump into that."
      },
      {
        "Time_Start": 1197.54,
        "Time_End": 1201.26,
        "Text": " And this I like to refer to as getting close to the system of interest."
      },
      {
        "Time_Start": 1201.26,
        "Time_End": 1203.7,
        "Text": " So we care about this message handler."
      },
      {
        "Time_Start": 1203.7,
        "Time_End": 1207.66,
        "Text": " Instead of going all the way from here and sending messages through the kernel, we should"
      },
      {
        "Time_Start": 1207.66,
        "Time_End": 1210.02,
        "Text": " get as close as we possibly can."
      },
      {
        "Time_Start": 1210.02,
        "Time_End": 1215.98,
        "Text": " And write a harness that will directly call that message handler of interest."
      },
      {
        "Time_Start": 1215.98,
        "Time_End": 1218.8600000000001,
        "Text": " The pros of this, it's very fast."
      },
      {
        "Time_Start": 1218.8600000000001,
        "Time_End": 1219.8600000000001,
        "Text": " We're calling it directly."
      },
      {
        "Time_Start": 1219.8600000000001,
        "Time_End": 1220.9,
        "Text": " There's no waiting."
      },
      {
        "Time_Start": 1220.9,
        "Time_End": 1223.3600000000001,
        "Text": " There's no kernel processing."
      },
      {
        "Time_Start": 1223.3600000000001,
        "Time_End": 1225.56,
        "Text": " It's also in the same process space."
      },
      {
        "Time_Start": 1225.56,
        "Time_End": 1232.26,
        "Text": " So it's easy to instrument and get code coverage about where we're getting to in the process."
      },
      {
        "Time_Start": 1232.26,
        "Time_End": 1238.62,
        "Text": " And it's easy to know which input caused a crash and replicate it when we need to."
      },
      {
        "Time_Start": 1238.62,
        "Time_End": 1242.86,
        "Text": " It is different from the end exploit that we'll craft, because we are gonna have to"
      },
      {
        "Time_Start": 1242.86,
        "Time_End": 1247.1,
        "Text": " use the kernel when we develop that exploit."
      },
      {
        "Time_Start": 1247.1,
        "Time_End": 1248.22,
        "Text": " And we'll talk about this later."
      },
      {
        "Time_Start": 1248.22,
        "Time_End": 1252.14,
        "Text": " But it might be naive about initialization routines."
      },
      {
        "Time_Start": 1252.14,
        "Time_End": 1258.02,
        "Text": " This receiving process might need specific initialization routines called before it can"
      },
      {
        "Time_Start": 1258.02,
        "Time_End": 1260.5,
        "Text": " process messages."
      },
      {
        "Time_Start": 1261.5,
        "Time_End": 1262.62,
        "Text": " Okay."
      },
      {
        "Time_Start": 1262.62,
        "Time_End": 1267.5,
        "Text": " But this, in general, is the approach that I've spent most of my time using."
      },
      {
        "Time_Start": 1267.5,
        "Time_End": 1271.46,
        "Text": " Calling that message handler directly with our inputs."
      },
      {
        "Time_Start": 1271.46,
        "Time_End": 1272.8,
        "Text": " Okay."
      },
      {
        "Time_Start": 1272.8,
        "Time_End": 1275.42,
        "Text": " So we identified an attack vector."
      },
      {
        "Time_Start": 1275.42,
        "Time_End": 1279.78,
        "Text": " But now we have to figure out what should we actually send through the attack vector."
      },
      {
        "Time_Start": 1279.78,
        "Time_End": 1283.82,
        "Text": " Sending totally random data is not likely to produce anything meaningful."
      },
      {
        "Time_Start": 1283.82,
        "Time_End": 1288.5,
        "Text": " I'm sure anyone who's pentested has seen that as well."
      },
      {
        "Time_Start": 1288.5,
        "Time_End": 1293.82,
        "Text": " If you're fuzzing a web application with just random bits, you're likely not gonna"
      },
      {
        "Time_Start": 1293.82,
        "Time_End": 1295.16,
        "Text": " get very far."
      },
      {
        "Time_Start": 1295.16,
        "Time_End": 1300.74,
        "Text": " There are exception handlers that will catch malformed input, especially when you're fuzzing."
      },
      {
        "Time_Start": 1300.74,
        "Time_End": 1305.78,
        "Text": " And there's often input validation schemes that will not allow your fuzzed input to get"
      },
      {
        "Time_Start": 1305.78,
        "Time_End": 1307.28,
        "Text": " very far."
      },
      {
        "Time_Start": 1307.28,
        "Time_End": 1311.46,
        "Text": " So we need to identify some examples of valid mock messages."
      },
      {
        "Time_Start": 1311.46,
        "Time_End": 1313.98,
        "Text": " And this is known as building a corpus."
      },
      {
        "Time_Start": 1313.98,
        "Time_End": 1320.6200000000001,
        "Text": " So a corpus of legit valid inputs that we can fuzz with."
      },
      {
        "Time_Start": 1320.6200000000001,
        "Time_End": 1322.22,
        "Text": " Just as a quick aside here."
      },
      {
        "Time_Start": 1322.22,
        "Time_End": 1327.46,
        "Text": " When you are fuzzing on macOS, there's a few things to take into consideration."
      },
      {
        "Time_Start": 1327.46,
        "Time_End": 1334.38,
        "Text": " This took me a while to figure all these out and get kind of my fuzzing setup all situated."
      },
      {
        "Time_Start": 1334.38,
        "Time_End": 1338.1,
        "Text": " I recommend setting up a macOS virtual machine."
      },
      {
        "Time_Start": 1338.1000000000001,
        "Time_End": 1343.9800000000002,
        "Text": " Because that enables you to pretty easily disable system integrity protection, SIP."
      },
      {
        "Time_Start": 1343.9800000000002,
        "Time_End": 1349.2600000000002,
        "Text": " You're gonna need to do that whenever you start debugging certain processes on macOS"
      },
      {
        "Time_Start": 1349.2600000000002,
        "Time_End": 1353.8600000000001,
        "Text": " and really getting kind of down and dirty with the system."
      },
      {
        "Time_Start": 1353.8600000000001,
        "Time_End": 1360.2600000000002,
        "Text": " I also recommend disabling report crash so that you can have your fuzzer detect and log"
      },
      {
        "Time_Start": 1360.2600000000002,
        "Time_End": 1364.2600000000002,
        "Text": " crashes instead of the native report crash handler."
      },
      {
        "Time_Start": 1364.2600000000002,
        "Time_End": 1365.2600000000002,
        "Text": " Disabling sleep."
      },
      {
        "Time_Start": 1365.26,
        "Time_End": 1370.74,
        "Text": " You don't want your device going to bed while you're in the middle of a fuzzing session."
      },
      {
        "Time_Start": 1370.74,
        "Time_End": 1375.54,
        "Text": " And there's some really good information provided in this DEF CON talk, which I've linked here."
      },
      {
        "Time_Start": 1375.54,
        "Time_End": 1379.5,
        "Text": " And I'll show the slides after."
      },
      {
        "Time_Start": 1379.5,
        "Time_End": 1381.56,
        "Text": " Okay."
      },
      {
        "Time_Start": 1381.56,
        "Time_End": 1387.06,
        "Text": " So we want to generate this corpus of valid inputs."
      },
      {
        "Time_Start": 1387.06,
        "Time_End": 1392.54,
        "Text": " So that we know what a valid message looks like and we can mutate that when we're fuzzing."
      },
      {
        "Time_Start": 1392.54,
        "Time_End": 1397.78,
        "Text": " The first thing that we want to do is find a mock service of interest."
      },
      {
        "Time_Start": 1397.78,
        "Time_End": 1401.8999999999999,
        "Text": " In our case, this is gonna be those sandbox processes that we know we can communicate"
      },
      {
        "Time_Start": 1401.8999999999999,
        "Time_End": 1403.86,
        "Text": " with."
      },
      {
        "Time_Start": 1403.86,
        "Time_End": 1407.3,
        "Text": " The service I've focused most on is Core Audio D."
      },
      {
        "Time_Start": 1407.3,
        "Time_End": 1410.02,
        "Text": " Com Apple Audio Core Audio D here."
      },
      {
        "Time_Start": 1410.02,
        "Time_End": 1414.74,
        "Text": " And I focus on it because it handles all interactions with audio hardware."
      },
      {
        "Time_Start": 1414.74,
        "Time_End": 1416.98,
        "Text": " It's a very privileged process."
      },
      {
        "Time_Start": 1416.98,
        "Time_End": 1418.94,
        "Text": " And it is actually..."
      },
      {
        "Time_Start": 1418.94,
        "Time_End": 1422.08,
        "Text": " It processes mock messages from many processes."
      },
      {
        "Time_Start": 1422.08,
        "Time_End": 1424.52,
        "Text": " Many of which are sandboxed."
      },
      {
        "Time_Start": 1424.52,
        "Time_End": 1427.12,
        "Text": " So it's a good candidate for what we're looking for."
      },
      {
        "Time_Start": 1427.12,
        "Time_End": 1429.84,
        "Text": " Sandbox escapes."
      },
      {
        "Time_Start": 1429.84,
        "Time_End": 1430.84,
        "Text": " Once we find..."
      },
      {
        "Time_Start": 1430.84,
        "Time_End": 1436.1999999999998,
        "Text": " Next, we need to find the binary that actually implements that mock service."
      },
      {
        "Time_Start": 1436.1999999999998,
        "Time_End": 1443.0,
        "Text": " That Com Apple Audio Core Audio D. So this service is registered with LaunchD."
      },
      {
        "Time_Start": 1443.0,
        "Time_End": 1449.32,
        "Text": " LaunchD takes care of all of the different services on the Mac operating system."
      },
      {
        "Time_Start": 1449.32,
        "Time_End": 1452.0,
        "Text": " And spawns the necessary daemons."
      },
      {
        "Time_Start": 1452.0,
        "Time_End": 1456.72,
        "Text": " So LaunchD spawns this Core Audio D binary."
      },
      {
        "Time_Start": 1456.72,
        "Time_End": 1461.8,
        "Text": " And then the mock server itself, the code for that, is within the Core Audio framework."
      },
      {
        "Time_Start": 1461.8,
        "Time_End": 1465.84,
        "Text": " Which is a framework built into the Mac operating system."
      },
      {
        "Time_Start": 1465.84,
        "Time_End": 1466.84,
        "Text": " You can see this."
      },
      {
        "Time_Start": 1466.84,
        "Time_End": 1469.88,
        "Text": " We attach to the Core Audio daemon process here."
      },
      {
        "Time_Start": 1469.88,
        "Time_End": 1472.8,
        "Text": " And we list the modules that are loaded."
      },
      {
        "Time_Start": 1472.8,
        "Time_End": 1474.88,
        "Text": " And we see Core Audio D right here..."
      },
      {
        "Time_Start": 1474.88,
        "Time_End": 1477.84,
        "Text": " Core Audio framework right here."
      },
      {
        "Time_Start": 1477.84,
        "Time_End": 1480.76,
        "Text": " So as a reverse engineer, like myself, you might say..."
      },
      {
        "Time_Start": 1480.76,
        "Time_End": 1486.6799999999998,
        "Text": " Okay, let's pop that open in IDA and start taking a look at the Core Audio framework."
      },
      {
        "Time_Start": 1486.6799999999998,
        "Time_End": 1492.28,
        "Text": " But we try to stat it, and we see that there's no such file or directory."
      },
      {
        "Time_Start": 1492.28,
        "Time_End": 1495.28,
        "Text": " That's interesting, right?"
      },
      {
        "Time_Start": 1495.28,
        "Time_End": 1501.84,
        "Text": " That is because starting with Big Sur on Mac, most framework binaries are actually not sitting"
      },
      {
        "Time_Start": 1501.84,
        "Time_End": 1502.84,
        "Text": " on disk."
      },
      {
        "Time_Start": 1502.84,
        "Time_End": 1507.1,
        "Text": " They are stored in what's called the dilled shared cache."
      },
      {
        "Time_Start": 1507.1000000000001,
        "Time_End": 1511.9,
        "Text": " This is done mostly for optimization purposes, but it's really annoying when you're wanting"
      },
      {
        "Time_Start": 1511.9,
        "Time_End": 1514.7400000000002,
        "Text": " to do security research as well."
      },
      {
        "Time_Start": 1514.7400000000002,
        "Time_End": 1517.8000000000002,
        "Text": " Luckily, we can actually extract them."
      },
      {
        "Time_Start": 1517.8000000000002,
        "Time_End": 1522.22,
        "Text": " So there's a few different GitHub projects that you can take a look at."
      },
      {
        "Time_Start": 1522.22,
        "Time_End": 1525.5400000000002,
        "Text": " The one I used here is this dilled shared cache extractor."
      },
      {
        "Time_Start": 1525.5400000000002,
        "Time_End": 1531.22,
        "Text": " And those will allow you to actually recover the framework binaries that you care about."
      },
      {
        "Time_Start": 1531.22,
        "Time_End": 1533.5000000000002,
        "Text": " So that's pretty great."
      },
      {
        "Time_Start": 1533.5000000000002,
        "Time_End": 1535.1000000000001,
        "Text": " Now we have the binary in our hand."
      },
      {
        "Time_Start": 1535.1000000000001,
        "Time_End": 1536.7,
        "Text": " We can analyze it."
      },
      {
        "Time_Start": 1536.7,
        "Time_End": 1542.46,
        "Text": " But now we need to find the function that implements the mock receive functionality."
      },
      {
        "Time_Start": 1542.46,
        "Time_End": 1544.06,
        "Text": " You might be asking yourself..."
      },
      {
        "Time_Start": 1544.06,
        "Time_End": 1546.22,
        "Text": " Isn't this just the mock message function?"
      },
      {
        "Time_Start": 1546.22,
        "Time_End": 1550.2,
        "Text": " Because I said you use that to send and receive mock messages."
      },
      {
        "Time_Start": 1550.2,
        "Time_End": 1551.9,
        "Text": " And you are right."
      },
      {
        "Time_Start": 1551.9,
        "Time_End": 1555.6200000000001,
        "Text": " But when receiving, that's actually a non-blocking function."
      },
      {
        "Time_Start": 1555.6200000000001,
        "Time_End": 1560.02,
        "Text": " You don't want your process just busy waiting for a mock message to come in."
      },
      {
        "Time_Start": 1560.02,
        "Time_End": 1566.22,
        "Text": " So there's actually a trap to the kernel that will occur when a mock message comes in."
      },
      {
        "Time_Start": 1566.24,
        "Time_End": 1571.34,
        "Text": " So you can't just sit there and wait for a mock message to be called."
      },
      {
        "Time_Start": 1571.34,
        "Time_End": 1574.42,
        "Text": " You could do kernel debugging."
      },
      {
        "Time_Start": 1574.42,
        "Time_End": 1575.74,
        "Text": " Someone's actually done that."
      },
      {
        "Time_Start": 1575.74,
        "Time_End": 1578.14,
        "Text": " I'm linking the link right here."
      },
      {
        "Time_Start": 1578.14,
        "Time_End": 1582.58,
        "Text": " And they were able to dump the incoming mock messages."
      },
      {
        "Time_Start": 1582.58,
        "Time_End": 1587.34,
        "Text": " But the cons of that are that you see every single mock message sent on the system."
      },
      {
        "Time_Start": 1587.34,
        "Time_End": 1588.42,
        "Text": " It's really annoying."
      },
      {
        "Time_Start": 1588.42,
        "Time_End": 1592.44,
        "Text": " And it's difficult to isolate the target process that you care about."
      },
      {
        "Time_Start": 1592.44,
        "Time_End": 1595.18,
        "Text": " And you also need two machines to do that."
      },
      {
        "Time_Start": 1595.18,
        "Time_End": 1598.98,
        "Text": " Which you can do with a host and a virtual machine."
      },
      {
        "Time_Start": 1598.98,
        "Time_End": 1599.98,
        "Text": " But I thought..."
      },
      {
        "Time_Start": 1599.98,
        "Time_End": 1602.66,
        "Text": " Is there an easier way than doing kernel debugging?"
      },
      {
        "Time_Start": 1602.66,
        "Time_End": 1605.18,
        "Text": " And it turns out there is."
      },
      {
        "Time_Start": 1605.18,
        "Time_End": 1610.14,
        "Text": " Because pretty much every mock service on the macOS operating system uses what's called"
      },
      {
        "Time_Start": 1610.14,
        "Time_End": 1614.1000000000001,
        "Text": " the mock interface generator, or MIG."
      },
      {
        "Time_Start": 1614.1000000000001,
        "Time_End": 1619.66,
        "Text": " Apple provides this as an interface definition language compiler."
      },
      {
        "Time_Start": 1619.66,
        "Time_End": 1624.02,
        "Text": " It just abstracts much of the mock IPC layer away from developers."
      },
      {
        "Time_Start": 1624.02,
        "Time_End": 1631.9,
        "Text": " So they can not really have to deal with all the bits and bytes of the mock spec."
      },
      {
        "Time_Start": 1631.9,
        "Time_End": 1632.9,
        "Text": " So I thought..."
      },
      {
        "Time_Start": 1632.9,
        "Time_End": 1639.86,
        "Text": " What if we just search for MIG-generated routines and dump their incoming mock message?"
      },
      {
        "Time_Start": 1639.86,
        "Time_End": 1645.46,
        "Text": " So looking for these MIG subsystems is actually not too hard."
      },
      {
        "Time_Start": 1645.46,
        "Time_End": 1648.54,
        "Text": " There's a Hopper script out there, if you use Hopper."
      },
      {
        "Time_Start": 1648.54,
        "Time_End": 1652.86,
        "Text": " I went ahead and modified that for use with IDA Pro."
      },
      {
        "Time_Start": 1653.0200000000002,
        "Time_End": 1657.2600000000002,
        "Text": " You can also just look at the symbols and kind of grep for subsystem."
      },
      {
        "Time_Start": 1657.2600000000002,
        "Time_End": 1658.8200000000002,
        "Text": " And they're pretty easy to find."
      },
      {
        "Time_Start": 1658.8200000000002,
        "Time_End": 1660.9,
        "Text": " Just hanging out in the binaries."
      },
      {
        "Time_Start": 1660.9,
        "Time_End": 1667.1000000000001,
        "Text": " So here we're looking at the MIG server subsystem, which is in the core audio framework that"
      },
      {
        "Time_Start": 1667.1000000000001,
        "Time_End": 1671.66,
        "Text": " we care about."
      },
      {
        "Time_Start": 1671.66,
        "Time_End": 1676.4,
        "Text": " Then once we find that subsystem, we actually have to see how it's used."
      },
      {
        "Time_Start": 1676.4,
        "Time_End": 1680.18,
        "Text": " So if you look at this IDA function here real quick..."
      },
      {
        "Time_Start": 1680.18,
        "Time_End": 1683.38,
        "Text": " This is called MIG server server."
      },
      {
        "Time_Start": 1683.38,
        "Time_End": 1690.52,
        "Text": " It takes in a mock message header T here as its first argument, the RDI register."
      },
      {
        "Time_Start": 1690.52,
        "Time_End": 1695.26,
        "Text": " If we take a look at that, and if you can see it, it is getting an index to the message"
      },
      {
        "Time_Start": 1695.26,
        "Time_End": 1699.42,
        "Text": " ID field, which is passed in the mock message header."
      },
      {
        "Time_Start": 1699.42,
        "Time_End": 1703.6200000000001,
        "Text": " And then it's using that as a lookup in this subsystem."
      },
      {
        "Time_Start": 1703.6200000000001,
        "Time_End": 1706.46,
        "Text": " So it's essentially a function lookup table."
      },
      {
        "Time_Start": 1706.5,
        "Time_End": 1714.82,
        "Text": " It's parsing that ID, getting an offset, and then calling a virtual function right here."
      },
      {
        "Time_Start": 1714.82,
        "Time_End": 1720.02,
        "Text": " If we look at what those functions actually map to, we've renamed them here."
      },
      {
        "Time_Start": 1720.02,
        "Time_End": 1723.98,
        "Text": " These are all sort of RPC-like functions."
      },
      {
        "Time_Start": 1723.98,
        "Time_End": 1726.7,
        "Text": " And some of them have some pretty interesting names."
      },
      {
        "Time_Start": 1726.7,
        "Time_End": 1729.1000000000001,
        "Text": " Getting property data, setting property data."
      },
      {
        "Time_Start": 1729.1000000000001,
        "Time_End": 1734.18,
        "Text": " A lot of interesting functionality that is exposed once we figure out how this mock message"
      },
      {
        "Time_Start": 1734.18,
        "Time_End": 1737.5800000000002,
        "Text": " handler works."
      },
      {
        "Time_Start": 1737.5800000000002,
        "Time_End": 1743.02,
        "Text": " So once I figured all this out, I wrote a simple script to hook on to the message handler"
      },
      {
        "Time_Start": 1743.02,
        "Time_End": 1751.54,
        "Text": " that I had found using LLDB, and go ahead and just dump any messages that get sent there."
      },
      {
        "Time_Start": 1751.54,
        "Time_End": 1754.5800000000002,
        "Text": " So I'll show you just a little example of running this."
      },
      {
        "Time_Start": 1754.5800000000002,
        "Time_End": 1759.38,
        "Text": " The first thing, we're looking for that core audio D process, because we know that that"
      },
      {
        "Time_Start": 1759.38,
        "Time_End": 1764.1000000000001,
        "Text": " does the bulk of the core audio framework functionality."
      },
      {
        "Time_Start": 1764.1000000000001,
        "Time_End": 1771.8200000000002,
        "Text": " Get the PID for it, paste that in here, and then we paste the module that we care about,"
      },
      {
        "Time_Start": 1771.8200000000002,
        "Time_End": 1776.66,
        "Text": " and the function that we just saw that was doing that function lookup."
      },
      {
        "Time_Start": 1776.66,
        "Time_End": 1785.22,
        "Text": " And then we should start getting some messages that are sent and saved to our corpus."
      },
      {
        "Time_Start": 1785.22,
        "Time_End": 1787.68,
        "Text": " So there's a message that came in, a really big one."
      },
      {
        "Time_Start": 1787.68,
        "Time_End": 1792.94,
        "Text": " One thing that you might want to do is open some other applications."
      },
      {
        "Time_Start": 1792.94,
        "Time_End": 1797.7,
        "Text": " So here I'm opening Apple Music, and you can see when I do that, there's more messages"
      },
      {
        "Time_Start": 1797.7,
        "Time_End": 1804.18,
        "Text": " that come in, because different programs are sending different mock messages."
      },
      {
        "Time_Start": 1804.18,
        "Time_End": 1809.5,
        "Text": " So we want to get a good sample of different inputs for our corpus."
      },
      {
        "Time_Start": 1809.5,
        "Time_End": 1811.54,
        "Text": " Okay."
      },
      {
        "Time_Start": 1811.54,
        "Time_End": 1818.16,
        "Text": " So now that we've got that corpus, or that grouping of valid inputs that we can fuzz with,"
      },
      {
        "Time_Start": 1818.16,
        "Time_End": 1820.18,
        "Text": " we now need to create a fuzzing harness."
      },
      {
        "Time_Start": 1820.18,
        "Time_End": 1823.8600000000001,
        "Text": " So this is going to be the nuts and bolts of how we actually call the function that"
      },
      {
        "Time_Start": 1823.8600000000001,
        "Time_End": 1826.26,
        "Text": " we care about."
      },
      {
        "Time_Start": 1826.26,
        "Time_End": 1830.8600000000001,
        "Text": " And a fuzzing harness is really just code that allows you to send input through an attack"
      },
      {
        "Time_Start": 1830.8600000000001,
        "Time_End": 1835.68,
        "Text": " vector, or call a desired function."
      },
      {
        "Time_Start": 1835.68,
        "Time_End": 1840.54,
        "Text": " So in our case, this is our target function, the MIG server."
      },
      {
        "Time_Start": 1840.54,
        "Time_End": 1842.8600000000001,
        "Text": " To do this on Windows, this would be pretty easy."
      },
      {
        "Time_Start": 1842.8600000000001,
        "Time_End": 1847.94,
        "Text": " We would just use load library, load in the core audio framework, and then call get proc"
      },
      {
        "Time_Start": 1847.94,
        "Time_End": 1851.8200000000002,
        "Text": " address to the function that we care about here."
      },
      {
        "Time_Start": 1851.8200000000002,
        "Time_End": 1858.44,
        "Text": " On macOS, there's a couple similar APIs, the DLopen and the DLSim APIs that we can use"
      },
      {
        "Time_Start": 1858.44,
        "Time_End": 1860.8200000000002,
        "Text": " to get a function pointer."
      },
      {
        "Time_Start": 1860.8200000000002,
        "Time_End": 1865.8600000000001,
        "Text": " However, the problem I had is that my symbol wasn't actually exported by the core audio"
      },
      {
        "Time_Start": 1865.8600000000001,
        "Time_End": 1867.66,
        "Text": " framework."
      },
      {
        "Time_Start": 1867.66,
        "Time_End": 1874.5,
        "Text": " So I ended up writing a custom Mako symbol parser to get the function offset that I cared"
      },
      {
        "Time_Start": 1874.5,
        "Time_End": 1878.86,
        "Text": " about, and then call that with the help of a couple colleagues."
      },
      {
        "Time_Start": 1878.86,
        "Time_End": 1881.26,
        "Text": " So that's a talk for another time."
      },
      {
        "Time_Start": 1881.26,
        "Time_End": 1886.74,
        "Text": " But it's not always super easy to call these functions that shouldn't be exported."
      },
      {
        "Time_Start": 1886.74,
        "Time_End": 1887.74,
        "Text": " But it is possible."
      },
      {
        "Time_Start": 1887.74,
        "Time_End": 1891.06,
        "Text": " You can get around it."
      },
      {
        "Time_Start": 1891.06,
        "Time_End": 1894.76,
        "Text": " So here's us running our fuzzing harness."
      },
      {
        "Time_Start": 1894.76,
        "Time_End": 1900.42,
        "Text": " We are passing in the core audio framework to our harness here, and the function that"
      },
      {
        "Time_Start": 1900.42,
        "Time_End": 1901.42,
        "Text": " we care about."
      },
      {
        "Time_Start": 1901.42,
        "Time_End": 1905.6200000000001,
        "Text": " It's going to perform the symbol lookup and then get the function pointer and call that"
      },
      {
        "Time_Start": 1905.6200000000001,
        "Time_End": 1906.6200000000001,
        "Text": " function."
      },
      {
        "Time_Start": 1906.6200000000001,
        "Time_End": 1913.1000000000001,
        "Text": " And then here is the specific input that we are fuzzing with from our corpus."
      },
      {
        "Time_Start": 1913.1000000000001,
        "Time_End": 1915.26,
        "Text": " Here's the function, our attack vector."
      },
      {
        "Time_Start": 1915.26,
        "Time_End": 1918.6200000000001,
        "Text": " Here's what our mock message looks like being sent."
      },
      {
        "Time_Start": 1918.6200000000001,
        "Time_End": 1923.1000000000001,
        "Text": " And then we actually get a returned mock message from the service."
      },
      {
        "Time_Start": 1923.1000000000001,
        "Time_End": 1927.2,
        "Text": " So we can see that our harness did, in fact, call our function that we care about with"
      },
      {
        "Time_Start": 1927.2,
        "Time_End": 1930.0800000000002,
        "Text": " our corpus input."
      },
      {
        "Time_Start": 1930.08,
        "Time_End": 1931.4399999999998,
        "Text": " So that's pretty cool."
      },
      {
        "Time_Start": 1931.4399999999998,
        "Time_End": 1934.6799999999998,
        "Text": " We wrote a harness that can call the function we care about."
      },
      {
        "Time_Start": 1934.6799999999998,
        "Time_End": 1940.1999999999998,
        "Text": " But that's really only one execution, and we just sent a valid mock message."
      },
      {
        "Time_Start": 1940.1999999999998,
        "Time_End": 1942.56,
        "Text": " That's not going to get a crash to happen."
      },
      {
        "Time_Start": 1942.56,
        "Time_End": 1944.84,
        "Text": " So we need a fuzzer for that part."
      },
      {
        "Time_Start": 1944.84,
        "Time_End": 1950.6,
        "Text": " A fuzzer is going to be a program that generates inputs to be sent to a system and monitors"
      },
      {
        "Time_Start": 1950.6,
        "Time_End": 1954.1799999999998,
        "Text": " for crashes that might occur."
      },
      {
        "Time_Start": 1954.18,
        "Time_End": 1960.6200000000001,
        "Text": " So the idea here with a fuzzer, we have our corpus, which we've generated, of valid inputs."
      },
      {
        "Time_Start": 1960.6200000000001,
        "Time_End": 1963.2,
        "Text": " We're going to pass this to the fuzzer."
      },
      {
        "Time_Start": 1963.2,
        "Time_End": 1968.26,
        "Text": " The fuzzer is then going to mutate one of the corpus inputs, and it's going to use our"
      },
      {
        "Time_Start": 1968.26,
        "Time_End": 1973.54,
        "Text": " fuzzing harness that we wrote to call the message handler."
      },
      {
        "Time_Start": 1973.54,
        "Time_End": 1978.14,
        "Text": " Now then, the fuzzer is going to say, did that input produce a crash?"
      },
      {
        "Time_Start": 1978.14,
        "Time_End": 1980.14,
        "Text": " If it did, that's awesome."
      },
      {
        "Time_Start": 1980.14,
        "Time_End": 1981.14,
        "Text": " Let's save that input."
      },
      {
        "Time_Start": 1981.14,
        "Time_End": 1982.54,
        "Text": " That's a really good input."
      },
      {
        "Time_Start": 1982.54,
        "Time_End": 1986.46,
        "Text": " If it's not a crash, let's continue to the next one."
      },
      {
        "Time_Start": 1986.46,
        "Time_End": 1990.1399999999999,
        "Text": " So pretty simple state diagram here."
      },
      {
        "Time_Start": 1990.1399999999999,
        "Time_End": 1996.7,
        "Text": " But let's talk about a toy example here of why that might not work super well."
      },
      {
        "Time_Start": 1996.7,
        "Time_End": 1998.42,
        "Text": " So we have this process string function."
      },
      {
        "Time_Start": 1998.42,
        "Time_End": 2001.1399999999999,
        "Text": " We're taking an input string."
      },
      {
        "Time_Start": 2001.1399999999999,
        "Time_End": 2003.3,
        "Text": " There's a couple conditional checks here."
      },
      {
        "Time_Start": 2003.3,
        "Time_End": 2008.52,
        "Text": " The first is, is the input string greater than 3 in length?"
      },
      {
        "Time_Start": 2008.52,
        "Time_End": 2010.22,
        "Text": " Is it greater than 6 in length?"
      },
      {
        "Time_Start": 2010.22,
        "Time_End": 2011.7,
        "Text": " Does it start with an S?"
      },
      {
        "Time_Start": 2011.8600000000001,
        "Time_End": 2014.5,
        "Text": " And then, does it contain the string secret?"
      },
      {
        "Time_Start": 2014.5,
        "Time_End": 2017.88,
        "Text": " If it does, no pointer dereference and crash."
      },
      {
        "Time_Start": 2017.88,
        "Time_End": 2022.7,
        "Text": " So this would actually be really difficult for the fuzzing setup that we just saw to"
      },
      {
        "Time_Start": 2022.7,
        "Time_End": 2024.46,
        "Text": " identify."
      },
      {
        "Time_Start": 2024.46,
        "Time_End": 2032.3,
        "Text": " It's pretty uncommon to be able to brute force, especially longer strings in this way."
      },
      {
        "Time_Start": 2032.3,
        "Time_End": 2035.94,
        "Text": " And so we need feedback that we're actually getting somewhere in the code."
      },
      {
        "Time_Start": 2035.94,
        "Time_End": 2041.06,
        "Text": " We want to know that, hey, we sent a string of 8, and we got to the second block."
      },
      {
        "Time_Start": 2041.4199999999998,
        "Time_End": 2045.78,
        "Text": " But when we send a string of 2, we don't even get past the first one."
      },
      {
        "Time_Start": 2045.78,
        "Time_End": 2051.54,
        "Text": " And so this is kind of illustrating the concept of code coverage."
      },
      {
        "Time_Start": 2051.54,
        "Time_End": 2058.02,
        "Text": " And code coverage is really just a trace of a program's execution flow to identify new"
      },
      {
        "Time_Start": 2058.02,
        "Time_End": 2060.06,
        "Text": " code paths."
      },
      {
        "Time_Start": 2060.06,
        "Time_End": 2064.86,
        "Text": " And we really care about reaching a new code path, because it means our input did something"
      },
      {
        "Time_Start": 2064.86,
        "Time_End": 2068.62,
        "Text": " better than the last input."
      },
      {
        "Time_Start": 2068.62,
        "Time_End": 2074.38,
        "Text": " So let's take a look at our fuzzing setup and see how it works with code coverage included."
      },
      {
        "Time_Start": 2074.38,
        "Time_End": 2076.06,
        "Text": " We still have our corpus of inputs."
      },
      {
        "Time_Start": 2076.06,
        "Time_End": 2077.2999999999997,
        "Text": " We feed it to our fuzzer."
      },
      {
        "Time_Start": 2077.2999999999997,
        "Time_End": 2080.3399999999997,
        "Text": " It mutates, passes through the fuzzing harness."
      },
      {
        "Time_Start": 2080.3399999999997,
        "Time_End": 2086.42,
        "Text": " Then, however, there's three kind of states that can occur here after our message handler"
      },
      {
        "Time_Start": 2086.42,
        "Time_End": 2087.58,
        "Text": " is called."
      },
      {
        "Time_Start": 2087.58,
        "Time_End": 2090.62,
        "Text": " We can have a crash, which we definitely care about that input."
      },
      {
        "Time_Start": 2090.62,
        "Time_End": 2092.7,
        "Text": " Let's save it."
      },
      {
        "Time_Start": 2092.7,
        "Time_End": 2097.8599999999997,
        "Text": " But then we can say, okay, we went along a code path that we've seen before."
      },
      {
        "Time_Start": 2098.1,
        "Time_End": 2100.1800000000003,
        "Text": " Or we went along a new code path."
      },
      {
        "Time_Start": 2100.1800000000003,
        "Time_End": 2103.86,
        "Text": " And if we went along a new code path, that's a great input."
      },
      {
        "Time_Start": 2103.86,
        "Time_End": 2108.78,
        "Text": " Let's add it to our corpus and continue to mutate on that again."
      },
      {
        "Time_Start": 2108.78,
        "Time_End": 2116.78,
        "Text": " So this is kind of the state-of-the-art approach for fuzzing these days, is instrumentation"
      },
      {
        "Time_Start": 2116.78,
        "Time_End": 2122.02,
        "Text": " to get code coverage to figure out if your inputs are actually good."
      },
      {
        "Time_Start": 2122.02,
        "Time_End": 2126.3,
        "Text": " And then if it's not, sort of trimming it and keeping the ones that are good and further"
      },
      {
        "Time_Start": 2126.3,
        "Time_End": 2129.7000000000003,
        "Text": " mutating them."
      },
      {
        "Time_Start": 2129.7000000000003,
        "Time_End": 2134.38,
        "Text": " So how do we actually determine code coverage is a question that might come up."
      },
      {
        "Time_Start": 2134.38,
        "Time_End": 2142.6200000000003,
        "Text": " This is really simple if you have source code and you're fuzzing with AFL++, for example."
      },
      {
        "Time_Start": 2142.6200000000003,
        "Time_End": 2148.6200000000003,
        "Text": " You can use AFL++ instrumentation, compile that into the binary that you're trying to"
      },
      {
        "Time_Start": 2148.6200000000003,
        "Time_End": 2155.02,
        "Text": " fuzz, and it will keep track of exactly where the fuzzer is getting to with your inputs."
      },
      {
        "Time_Start": 2155.34,
        "Time_End": 2159.3,
        "Text": " However, when you're dealing with black box binaries where you don't have source code,"
      },
      {
        "Time_Start": 2159.3,
        "Time_End": 2163.1,
        "Text": " like we're dealing with here, this gets a lot more tricky."
      },
      {
        "Time_Start": 2163.1,
        "Time_End": 2168.34,
        "Text": " But it's still very possible due to programs like Frida, which is a dynamic instrumentation"
      },
      {
        "Time_Start": 2168.34,
        "Time_End": 2169.34,
        "Text": " framework."
      },
      {
        "Time_Start": 2169.34,
        "Time_End": 2170.86,
        "Text": " It's awesome."
      },
      {
        "Time_Start": 2170.86,
        "Time_End": 2175.82,
        "Text": " Another one written by one of my colleagues is TinyInst, which I've used quite a bit for"
      },
      {
        "Time_Start": 2175.82,
        "Time_End": 2176.82,
        "Text": " this research as well."
      },
      {
        "Time_Start": 2176.82,
        "Time_End": 2180.3,
        "Text": " It does a really good job on macOS."
      },
      {
        "Time_Start": 2180.3,
        "Time_End": 2184.22,
        "Text": " And then for actually interpreting that code coverage, you can use Lighthouse."
      },
      {
        "Time_Start": 2184.42,
        "Time_End": 2187.3,
        "Text": " Lighthouse is for IDA Pro or Binary Ninja."
      },
      {
        "Time_Start": 2187.3,
        "Time_End": 2191.42,
        "Text": " And this diagram on the right here shows you a little bit about what that Lighthouse output"
      },
      {
        "Time_Start": 2191.42,
        "Time_End": 2192.46,
        "Text": " looks like."
      },
      {
        "Time_Start": 2192.46,
        "Time_End": 2196.82,
        "Text": " The green blocks are basic blocks that we are getting to."
      },
      {
        "Time_Start": 2196.82,
        "Time_End": 2201.38,
        "Text": " And everything in white here are basic blocks that haven't been explored yet."
      },
      {
        "Time_Start": 2201.38,
        "Time_End": 2208.1000000000004,
        "Text": " So this can tell us a ton about how our fuzzer is doing and how our inputs are doing."
      },
      {
        "Time_Start": 2208.1000000000004,
        "Time_End": 2212.5400000000004,
        "Text": " If we are never getting to a specific area of the code, we might want to investigate"
      },
      {
        "Time_Start": 2212.54,
        "Time_End": 2215.62,
        "Text": " that and look at why."
      },
      {
        "Time_Start": 2215.62,
        "Time_End": 2217.54,
        "Text": " Okay."
      },
      {
        "Time_Start": 2217.54,
        "Time_End": 2221.18,
        "Text": " So let's talk about actually fuzzing now."
      },
      {
        "Time_Start": 2221.18,
        "Time_End": 2226.2599999999998,
        "Text": " The fuzzer that I have mostly been using for this research is called Jackalope Fuzzer."
      },
      {
        "Time_Start": 2226.2599999999998,
        "Time_End": 2227.66,
        "Text": " There's lots of really good ones out there."
      },
      {
        "Time_Start": 2227.66,
        "Time_End": 2229.66,
        "Text": " I'm sure most of you have heard of AFL++."
      },
      {
        "Time_Start": 2229.66,
        "Time_End": 2232.86,
        "Text": " It's a great one."
      },
      {
        "Time_Start": 2232.86,
        "Time_End": 2233.86,
        "Text": " LibFuzzer."
      },
      {
        "Time_Start": 2233.86,
        "Time_End": 2235.54,
        "Text": " A lot of good fuzzers out there."
      },
      {
        "Time_Start": 2235.54,
        "Time_End": 2240.42,
        "Text": " This one works really well on the macOS operating system."
      },
      {
        "Time_Start": 2240.42,
        "Time_End": 2246.58,
        "Text": " I recommend enabling memory sanitization if you can."
      },
      {
        "Time_Start": 2246.58,
        "Time_End": 2249.42,
        "Text": " So if you're on Linux, you can use ASAN."
      },
      {
        "Time_Start": 2249.42,
        "Time_End": 2256.16,
        "Text": " Basically what this will do is place restricted pages around all memory allocations."
      },
      {
        "Time_Start": 2256.16,
        "Time_End": 2262.38,
        "Text": " And so you will know very quickly if there's a buffer overread or maybe a one-byte overflow"
      },
      {
        "Time_Start": 2262.38,
        "Time_End": 2265.46,
        "Text": " that would be difficult to identify otherwise."
      },
      {
        "Time_Start": 2265.46,
        "Time_End": 2270.86,
        "Text": " And it will tell you exactly where that happened in the crash backtrace."
      },
      {
        "Time_Start": 2270.86,
        "Time_End": 2277.7400000000002,
        "Text": " Apple has a similar library that you can use called libgmalloc, which will allocate these"
      },
      {
        "Time_Start": 2277.7400000000002,
        "Time_End": 2280.5,
        "Text": " restricted pages."
      },
      {
        "Time_Start": 2280.5,
        "Time_End": 2286.58,
        "Text": " I used a tinyinst for dynamic instrumentation to dump coverage from the process that I was"
      },
      {
        "Time_Start": 2286.58,
        "Time_End": 2287.58,
        "Text": " fuzzing."
      },
      {
        "Time_Start": 2287.58,
        "Time_End": 2292.82,
        "Text": " And then I used Lighthouse to interpret that code coverage."
      },
      {
        "Time_Start": 2292.82,
        "Time_End": 2296.38,
        "Text": " And here's just a little output of running my fuzzer."
      },
      {
        "Time_Start": 2296.38,
        "Time_End": 2299.46,
        "Text": " I know this is a lot of text."
      },
      {
        "Time_Start": 2299.46,
        "Time_End": 2302.6600000000003,
        "Text": " But just to show you a little bit about some of the components here."
      },
      {
        "Time_Start": 2302.6600000000003,
        "Time_End": 2305.5,
        "Text": " This first piece is guardmalloc."
      },
      {
        "Time_Start": 2305.5,
        "Time_End": 2311.0,
        "Text": " So that is the memory sanitization library that we injected."
      },
      {
        "Time_Start": 2311.0,
        "Time_End": 2313.84,
        "Text": " Allocations are being placed on 16-byte boundaries."
      },
      {
        "Time_Start": 2313.84,
        "Time_End": 2319.5,
        "Text": " So we'll be able to tell more easily if there's a memory corruption issue that occurs."
      },
      {
        "Time_Start": 2319.5,
        "Time_End": 2321.46,
        "Text": " There's an exception being thrown here."
      },
      {
        "Time_Start": 2321.46,
        "Time_End": 2323.98,
        "Text": " This one is actually just a C++ exception."
      },
      {
        "Time_Start": 2323.98,
        "Time_End": 2326.3,
        "Text": " We don't care too much about that."
      },
      {
        "Time_Start": 2326.3,
        "Time_End": 2329.18,
        "Text": " But it's gonna tell us whenever we have a crash."
      },
      {
        "Time_Start": 2329.18,
        "Time_End": 2332.66,
        "Text": " And there's also instrumentation that's occurring from tinyinst."
      },
      {
        "Time_Start": 2332.66,
        "Time_End": 2339.26,
        "Text": " So it's saying, okay, before that crash, we were at this specific instruction set."
      },
      {
        "Time_Start": 2339.26,
        "Time_End": 2342.3,
        "Text": " This was the code right after that."
      },
      {
        "Time_Start": 2342.3,
        "Time_End": 2344.14,
        "Text": " Okay."
      },
      {
        "Time_Start": 2344.14,
        "Time_End": 2350.76,
        "Text": " So once we actually start fuzzing, we usually very quickly want to improve how our fuzzing"
      },
      {
        "Time_Start": 2350.76,
        "Time_End": 2352.82,
        "Text": " is doing."
      },
      {
        "Time_Start": 2352.82,
        "Time_End": 2356.1200000000003,
        "Text": " Because we realize we're not getting to portions of the code that we want to."
      },
      {
        "Time_Start": 2356.1200000000003,
        "Time_End": 2360.44,
        "Text": " We're not producing crashes or other reasons."
      },
      {
        "Time_Start": 2360.44,
        "Time_End": 2364.88,
        "Text": " So one thing that we can do to help improve our fuzzing is to regularly check that code"
      },
      {
        "Time_Start": 2364.88,
        "Time_End": 2366.6400000000003,
        "Text": " coverage."
      },
      {
        "Time_Start": 2366.6400000000003,
        "Time_End": 2371.6000000000004,
        "Text": " We can learn a lot about how our fuzzer is doing by looking at the code paths it does"
      },
      {
        "Time_Start": 2371.6000000000004,
        "Time_End": 2373.82,
        "Text": " and doesn't take."
      },
      {
        "Time_Start": 2373.82,
        "Time_End": 2379.48,
        "Text": " Our goal should be to cover as much of the binary as possible with code coverage."
      },
      {
        "Time_Start": 2379.48,
        "Time_End": 2382.9,
        "Text": " So here's a little bit of an example from my fuzzing."
      },
      {
        "Time_Start": 2382.9,
        "Time_End": 2385.04,
        "Text": " This is a mock message handler."
      },
      {
        "Time_Start": 2385.04,
        "Time_End": 2387.94,
        "Text": " And you can see it's always going left here."
      },
      {
        "Time_Start": 2387.94,
        "Time_End": 2393.28,
        "Text": " And it's always throwing this error that there's no system initialized."
      },
      {
        "Time_Start": 2393.28,
        "Time_End": 2396.96,
        "Text": " And it's not getting to a bunch of juicy code on the right here."
      },
      {
        "Time_Start": 2396.96,
        "Time_End": 2400.56,
        "Text": " So therefore, the fuzzing is not super meaningful."
      },
      {
        "Time_Start": 2400.56,
        "Time_End": 2402.66,
        "Text": " Because we're not getting to the bulk of the code."
      },
      {
        "Time_Start": 2402.66,
        "Time_End": 2407.76,
        "Text": " And we're just hitting an exception handler almost every time."
      },
      {
        "Time_Start": 2407.76,
        "Time_End": 2413.1600000000003,
        "Text": " So let me illustrate this a little bit more and talk to you why we need to think about"
      },
      {
        "Time_Start": 2413.1600000000003,
        "Time_End": 2417.36,
        "Text": " initialization of the process that we're fuzzing a little bit more."
      },
      {
        "Time_Start": 2417.36,
        "Time_End": 2421.5600000000004,
        "Text": " So in our case, we have our fuzzer and fuzzing harness."
      },
      {
        "Time_Start": 2421.5600000000004,
        "Time_End": 2424.86,
        "Text": " We are calling a function within the core audio library."
      },
      {
        "Time_Start": 2424.86,
        "Time_End": 2426.84,
        "Text": " We already talked about that."
      },
      {
        "Time_Start": 2426.84,
        "Time_End": 2433.2400000000002,
        "Text": " And we're just right off the bat calling this process mock message function with our input."
      },
      {
        "Time_Start": 2433.2400000000002,
        "Time_End": 2438.32,
        "Text": " But the core audio daemon process, the native process, it actually does a bunch of things"
      },
      {
        "Time_Start": 2438.32,
        "Time_End": 2441.84,
        "Text": " before it ever processes a mock message."
      },
      {
        "Time_Start": 2441.84,
        "Time_End": 2444.1600000000003,
        "Text": " It might initialize global variables."
      },
      {
        "Time_Start": 2444.1600000000003,
        "Time_End": 2448.32,
        "Text": " It might set up hardware, do some system checks."
      },
      {
        "Time_Start": 2448.32,
        "Time_End": 2450.1600000000003,
        "Text": " I don't know everything it does."
      },
      {
        "Time_Start": 2450.1600000000003,
        "Time_End": 2453.36,
        "Text": " But it certainly just doesn't start receiving mock messages."
      },
      {
        "Time_Start": 2453.36,
        "Time_End": 2458.96,
        "Text": " And it's actually not expecting to receive any mock messages right off the bat like we're"
      },
      {
        "Time_Start": 2458.96,
        "Time_End": 2461.9,
        "Text": " sending them."
      },
      {
        "Time_Start": 2461.9,
        "Time_End": 2466.38,
        "Text": " So I noticed that my fuzzer wasn't getting very deep into the code."
      },
      {
        "Time_Start": 2466.38,
        "Time_End": 2471.86,
        "Text": " And that was because, like we mentioned, the core audio daemon process was performing initialization"
      },
      {
        "Time_Start": 2471.86,
        "Time_End": 2475.34,
        "Text": " and setup for the core audio framework."
      },
      {
        "Time_Start": 2475.34,
        "Time_End": 2479.5,
        "Text": " It normally calls all these functions, which you can see here."
      },
      {
        "Time_Start": 2479.5,
        "Time_End": 2485.62,
        "Text": " You can determine this by using dynamic instrumentation, like Frida or Tinyinst, and running it on"
      },
      {
        "Time_Start": 2485.62,
        "Time_End": 2488.86,
        "Text": " a process you know performs proper initialization."
      },
      {
        "Time_Start": 2488.86,
        "Time_End": 2491.26,
        "Text": " So in my case, I ran it on core audio daemon."
      },
      {
        "Time_Start": 2491.6200000000003,
        "Time_End": 2500.46,
        "Text": " I said, wow, look at all these functions getting lit up before it ever receives a mock message."
      },
      {
        "Time_Start": 2500.46,
        "Time_End": 2506.9,
        "Text": " So we want our fuzzer to be in the same process space as this initialized state."
      },
      {
        "Time_Start": 2506.9,
        "Time_End": 2512.1000000000004,
        "Text": " The core audio daemon did a bunch of work to set up the core audio framework to a state"
      },
      {
        "Time_Start": 2512.1000000000004,
        "Time_End": 2513.98,
        "Text": " where it can receive messages."
      },
      {
        "Time_Start": 2513.98,
        "Time_End": 2517.1800000000003,
        "Text": " And we want to be able to fuzz in that same state."
      },
      {
        "Time_Start": 2517.1800000000003,
        "Time_End": 2520.0200000000004,
        "Text": " Otherwise we're not going to get very far."
      },
      {
        "Time_Start": 2520.02,
        "Time_End": 2524.02,
        "Text": " So there's a couple approaches we can take here."
      },
      {
        "Time_Start": 2524.02,
        "Time_End": 2529.82,
        "Text": " The first one would be to figure out the exact initialization functions that need to be called,"
      },
      {
        "Time_Start": 2529.82,
        "Time_End": 2535.74,
        "Text": " and then call them within our fuzzing harness that we wrote before we start fuzzing."
      },
      {
        "Time_Start": 2535.74,
        "Time_End": 2539.58,
        "Text": " This can be great when there's very simple initialization needed."
      },
      {
        "Time_Start": 2539.58,
        "Time_End": 2544.34,
        "Text": " For example, if you're parsing like an image parser, there's probably not a whole lot of"
      },
      {
        "Time_Start": 2544.34,
        "Time_End": 2545.66,
        "Text": " setup that needs to be done."
      },
      {
        "Time_Start": 2545.66,
        "Time_End": 2547.82,
        "Text": " You just feed it an image."
      },
      {
        "Time_Start": 2547.82,
        "Time_End": 2552.7000000000003,
        "Text": " You might need to set a couple of global variables."
      },
      {
        "Time_Start": 2552.7000000000003,
        "Time_End": 2557.7000000000003,
        "Text": " But in our case with core audio daemon, it was performing very complex initialization,"
      },
      {
        "Time_Start": 2557.7000000000003,
        "Time_End": 2560.46,
        "Text": " and I didn't have any source code."
      },
      {
        "Time_Start": 2560.46,
        "Time_End": 2566.54,
        "Text": " So in this case, what you can do is modify a process you know performs proper initialization,"
      },
      {
        "Time_Start": 2566.54,
        "Time_End": 2571.98,
        "Text": " and then have it spawn your fuzzer once it gets everything set up properly."
      },
      {
        "Time_Start": 2571.98,
        "Time_End": 2574.5,
        "Text": " You can do this by hooking a function."
      },
      {
        "Time_Start": 2574.5,
        "Time_End": 2576.9,
        "Text": " You can binary patch if you want to."
      },
      {
        "Time_Start": 2576.98,
        "Time_End": 2583.5,
        "Text": " You can use something like LD preload, or DILD insert libraries, or detours on Windows."
      },
      {
        "Time_Start": 2583.5,
        "Time_End": 2588.38,
        "Text": " Or you can instrument the binary using Frida or TinyInst once again."
      },
      {
        "Time_Start": 2588.38,
        "Time_End": 2592.78,
        "Text": " You're seeing that I really enjoy dynamic instrumentation here."
      },
      {
        "Time_Start": 2592.78,
        "Time_End": 2598.06,
        "Text": " Okay, so..."
      },
      {
        "Time_Start": 2598.06,
        "Time_End": 2604.2200000000003,
        "Text": " And we're gonna go ahead and use that second approach here, using Frida to inject our fuzzer"
      },
      {
        "Time_Start": 2604.5400000000004,
        "Time_End": 2606.1800000000003,
        "Text": " into the space that we care about."
      },
      {
        "Time_Start": 2606.1800000000003,
        "Time_End": 2611.0600000000004,
        "Text": " But we do need to figure out the proper place to instrument our code."
      },
      {
        "Time_Start": 2611.0600000000004,
        "Time_End": 2618.86,
        "Text": " So that core audio daemon process loops continuously after it performs that initialization routine."
      },
      {
        "Time_Start": 2618.86,
        "Time_End": 2624.0200000000004,
        "Text": " And I noticed by looking at it in IDA that once it kind of set everything up here, it"
      },
      {
        "Time_Start": 2624.0200000000004,
        "Time_End": 2631.1400000000003,
        "Text": " called this CF run loop in mode function, and then it just continuously looped around"
      },
      {
        "Time_Start": 2631.1400000000003,
        "Time_End": 2633.1200000000003,
        "Text": " this basic block."
      },
      {
        "Time_Start": 2633.12,
        "Time_End": 2639.48,
        "Text": " So I thought, okay, what if once we get here, I just have Frida attached to it, change that"
      },
      {
        "Time_Start": 2639.48,
        "Time_End": 2647.12,
        "Text": " function so that it calls our fuzzing harness instead of just looping and waiting?"
      },
      {
        "Time_Start": 2647.12,
        "Time_End": 2648.56,
        "Text": " So that's exactly what I did."
      },
      {
        "Time_Start": 2648.56,
        "Time_End": 2651.92,
        "Text": " I wrote a really simple Frida script."
      },
      {
        "Time_Start": 2651.92,
        "Time_End": 2658.6,
        "Text": " What this is doing, this is my fuzzing harness that I put together, exported as a dilib."
      },
      {
        "Time_Start": 2658.6,
        "Time_End": 2663.8399999999997,
        "Text": " We're just loading that module in Frida, and then we're getting the fuzz function from"
      },
      {
        "Time_Start": 2663.8399999999997,
        "Time_End": 2666.0,
        "Text": " that dilib."
      },
      {
        "Time_Start": 2666.0,
        "Time_End": 2669.68,
        "Text": " And then we're using the Frida interceptor to find that function that we just talked"
      },
      {
        "Time_Start": 2669.68,
        "Time_End": 2672.6,
        "Text": " about, CF run loop run in mode."
      },
      {
        "Time_Start": 2672.6,
        "Time_End": 2678.56,
        "Text": " And then instead of calling that function, we are just calling our fuzz function instead."
      },
      {
        "Time_Start": 2678.56,
        "Time_End": 2682.88,
        "Text": " So we'll get an alert that says, hey, that function was called, starting our fuzzer,"
      },
      {
        "Time_Start": 2682.88,
        "Time_End": 2685.8399999999997,
        "Text": " and then we just call the fuzz function."
      },
      {
        "Time_Start": 2685.8399999999997,
        "Time_End": 2688.14,
        "Text": " And you can see a screenshot here."
      },
      {
        "Time_Start": 2688.14,
        "Time_End": 2697.2599999999998,
        "Text": " This PID is the core audio daemon process, and we have that function called after initialization."
      },
      {
        "Time_Start": 2697.2599999999998,
        "Time_End": 2699.58,
        "Text": " And then the fuzzer was started."
      },
      {
        "Time_Start": 2699.58,
        "Time_End": 2705.54,
        "Text": " I hooked on to the core audio daemon process with LLDB just to show that our fuzz function"
      },
      {
        "Time_Start": 2705.54,
        "Time_End": 2709.1,
        "Text": " did actually get called here."
      },
      {
        "Time_Start": 2709.1,
        "Time_End": 2710.1,
        "Text": " So that's pretty cool."
      },
      {
        "Time_Start": 2710.1,
        "Time_End": 2717.2999999999997,
        "Text": " We can call a function in the already initialized process that we care about."
      },
      {
        "Time_Start": 2717.46,
        "Time_End": 2720.0600000000004,
        "Text": " But we're going to need to do more than that."
      },
      {
        "Time_Start": 2720.0600000000004,
        "Time_End": 2722.82,
        "Text": " As we just talked about, we need to manage our corpus."
      },
      {
        "Time_Start": 2722.82,
        "Time_End": 2726.98,
        "Text": " We need to mutate our inputs and generate new inputs."
      },
      {
        "Time_Start": 2726.98,
        "Time_End": 2730.98,
        "Text": " We need to get code coverage, and we need to identify crashes."
      },
      {
        "Time_Start": 2730.98,
        "Time_End": 2737.1800000000003,
        "Text": " So we've got to inject more than just a simple harness function call."
      },
      {
        "Time_Start": 2737.1800000000003,
        "Time_End": 2739.26,
        "Text": " So this is not a trivial task."
      },
      {
        "Time_Start": 2739.26,
        "Time_End": 2744.1800000000003,
        "Text": " As I'm finding out, this is something I'm still working on and is in progress."
      },
      {
        "Time_Start": 2744.2999999999997,
        "Time_End": 2748.74,
        "Text": " But one thing I want to recommend is LibAFL."
      },
      {
        "Time_Start": 2748.74,
        "Time_End": 2750.46,
        "Text": " It's a really great project."
      },
      {
        "Time_Start": 2750.46,
        "Time_End": 2758.3799999999997,
        "Text": " It's maintained by the maintainers of AFL++, the kind of state-of-the-art fuzzer out there"
      },
      {
        "Time_Start": 2758.3799999999997,
        "Time_End": 2760.98,
        "Text": " in the open source community."
      },
      {
        "Time_Start": 2760.98,
        "Time_End": 2768.1,
        "Text": " And it's a library that allows you to slot custom components of fuzzers together using"
      },
      {
        "Time_Start": 2768.1,
        "Time_End": 2773.06,
        "Text": " those same state-of-the-art approaches as AFL++."
      },
      {
        "Time_Start": 2773.06,
        "Time_End": 2778.5,
        "Text": " So what this really does is it helps us inject fuzzers in interesting places."
      },
      {
        "Time_Start": 2778.5,
        "Time_End": 2784.58,
        "Text": " Things you couldn't normally fuzz are a lot easier to do when you can create a custom"
      },
      {
        "Time_Start": 2784.58,
        "Time_End": 2788.02,
        "Text": " library and inject them with something like Frida."
      },
      {
        "Time_Start": 2788.02,
        "Time_End": 2794.7799999999997,
        "Text": " So now, instead of our core AudioD process doing its setup and then just waiting for"
      },
      {
        "Time_Start": 2794.7799999999997,
        "Time_End": 2802.22,
        "Text": " mock messages, we instead have it spawn LibAFL and our fuzzer and just start looping forever,"
      },
      {
        "Time_Start": 2802.2200000000003,
        "Time_End": 2807.78,
        "Text": " getting code coverage, and hopefully causing lots of crashes."
      },
      {
        "Time_Start": 2807.78,
        "Time_End": 2810.5400000000004,
        "Text": " Okay."
      },
      {
        "Time_Start": 2810.5400000000004,
        "Time_End": 2816.1000000000004,
        "Text": " So we talked about fuzzing and how we can improve the fuzzing process."
      },
      {
        "Time_Start": 2816.1000000000004,
        "Time_End": 2819.6200000000003,
        "Text": " The last thing I want to talk about here is how do we actually identify crashes that are"
      },
      {
        "Time_Start": 2819.6200000000003,
        "Time_End": 2823.6200000000003,
        "Text": " relevant and ones that we should care about?"
      },
      {
        "Time_Start": 2823.6200000000003,
        "Time_End": 2829.5400000000004,
        "Text": " There's some heuristics that we can think about that are really helpful."
      },
      {
        "Time_Start": 2830.2599999999998,
        "Time_End": 2836.3,
        "Text": " If there's a crash on write or on execution, an illegal instruction exception that gets"
      },
      {
        "Time_Start": 2836.3,
        "Time_End": 2841.82,
        "Text": " thrown, a heap corruption, or if there's a stack trace where a back trace contains free"
      },
      {
        "Time_Start": 2841.82,
        "Time_End": 2845.7799999999997,
        "Text": " or malloc, those are things we really care about."
      },
      {
        "Time_Start": 2845.7799999999997,
        "Time_End": 2849.66,
        "Text": " And as I'm triaging crashes, those are things I'm going to go back to because they might"
      },
      {
        "Time_Start": 2849.66,
        "Time_End": 2851.7,
        "Text": " be exploitable."
      },
      {
        "Time_Start": 2851.7,
        "Time_End": 2856.94,
        "Text": " Things that are likely not exploitable are a crash on a read, although you could leak"
      },
      {
        "Time_Start": 2857.02,
        "Time_End": 2865.2200000000003,
        "Text": " memory addresses through this, a handled exception, a null pointer dereference, or a stack recursion."
      },
      {
        "Time_Start": 2865.2200000000003,
        "Time_End": 2867.66,
        "Text": " So those are some basic heuristics you can use."
      },
      {
        "Time_Start": 2867.66,
        "Time_End": 2873.98,
        "Text": " There are a couple of tools that can help you actually sift through crash dumps and"
      },
      {
        "Time_Start": 2873.98,
        "Time_End": 2878.66,
        "Text": " figure out which ones you might want to look at from an exploitation point of view."
      },
      {
        "Time_Start": 2878.66,
        "Time_End": 2885.1,
        "Text": " One is Apple's Crash Wrangler, and the other is, I believe this is written in Node."
      },
      {
        "Time_Start": 2885.14,
        "Time_End": 2888.1,
        "Text": " It's a bit easier to use, and a really great tool."
      },
      {
        "Time_Start": 2888.1,
        "Time_End": 2890.3399999999997,
        "Text": " It's called Crashmon."
      },
      {
        "Time_Start": 2890.3399999999997,
        "Time_End": 2894.54,
        "Text": " Provided the links for both of those here."
      },
      {
        "Time_Start": 2894.54,
        "Time_End": 2898.3399999999997,
        "Text": " One important thing also I want to mention is crash reproducibility."
      },
      {
        "Time_Start": 2898.3399999999997,
        "Time_End": 2904.3399999999997,
        "Text": " So as you're sifting through crashes and you find something that looks interesting, you"
      },
      {
        "Time_Start": 2904.3399999999997,
        "Time_End": 2909.14,
        "Text": " should always make sure that you can run that input back through your harness and reproduce"
      },
      {
        "Time_Start": 2909.2599999999998,
        "Time_End": 2911.3399999999997,
        "Text": " the same crash."
      },
      {
        "Time_Start": 2911.3399999999997,
        "Time_End": 2916.9,
        "Text": " Because an exploit that is not reproducible is not really relevant."
      },
      {
        "Time_Start": 2916.9,
        "Time_End": 2919.06,
        "Text": " Okay."
      },
      {
        "Time_Start": 2919.06,
        "Time_End": 2921.8199999999997,
        "Text": " So let's take a step back and look at what we've covered."
      },
      {
        "Time_Start": 2921.8199999999997,
        "Time_End": 2925.18,
        "Text": " I know that was a lot of material."
      },
      {
        "Time_Start": 2925.18,
        "Time_End": 2931.06,
        "Text": " Gave a quick crash course on what fuzzing is and mock IPC mechanisms."
      },
      {
        "Time_Start": 2931.06,
        "Time_End": 2935.8199999999997,
        "Text": " We did a walkthrough of the fuzzing process as I like to go through it."
      },
      {
        "Time_Start": 2935.82,
        "Time_End": 2941.34,
        "Text": " Writing attack vectors, generating a corpus of fuzzing inputs, writing a custom fuzzing"
      },
      {
        "Time_Start": 2941.34,
        "Time_End": 2946.38,
        "Text": " harness, fuzzing and producing crashes, and triaging those crashes."
      },
      {
        "Time_Start": 2946.38,
        "Time_End": 2950.86,
        "Text": " I talked about a couple of common pitfalls and things to consider, and what I really"
      },
      {
        "Time_Start": 2950.86,
        "Time_End": 2957.82,
        "Text": " hope I did is inspired you to do your own vulnerability research, leveraging fuzzing."
      },
      {
        "Time_Start": 2957.82,
        "Time_End": 2962.78,
        "Text": " Three personal fuzzing tips that I've learned through this research project."
      },
      {
        "Time_Start": 2962.78,
        "Time_End": 2964.38,
        "Text": " The first one I mentioned already."
      },
      {
        "Time_Start": 2964.38,
        "Time_End": 2968.9,
        "Text": " If you can, try to get your fuzzer as close to the target function that you want to call"
      },
      {
        "Time_Start": 2968.9,
        "Time_End": 2970.5,
        "Text": " as possible."
      },
      {
        "Time_Start": 2970.5,
        "Time_End": 2972.5800000000004,
        "Text": " This just makes it run way faster."
      },
      {
        "Time_Start": 2972.5800000000004,
        "Time_End": 2981.44,
        "Text": " It makes things easier to triage, and it'll just make your life a lot easier."
      },
      {
        "Time_Start": 2981.44,
        "Time_End": 2986.34,
        "Text": " Another interesting take I have is I think that the harder something is to fuzz, the"
      },
      {
        "Time_Start": 2986.34,
        "Time_End": 2990.1000000000004,
        "Text": " more likely there's actually going to be vulnerabilities there."
      },
      {
        "Time_Start": 2990.62,
        "Time_End": 2994.42,
        "Text": " If you're trying to set up a fuzzer, you're having a bunch of difficulties, which you"
      },
      {
        "Time_Start": 2994.42,
        "Time_End": 2999.54,
        "Text": " will, because it's never easy to fuzz something for some reason."
      },
      {
        "Time_Start": 2999.54,
        "Time_End": 3003.98,
        "Text": " Don't give up from that, because it likely means there's something there, because someone"
      },
      {
        "Time_Start": 3003.98,
        "Time_End": 3007.86,
        "Text": " likely hasn't put in that effort to fuzz it yet."
      },
      {
        "Time_Start": 3007.86,
        "Time_End": 3013.46,
        "Text": " And then finally, definitely leverage code coverage to inform what fuzzing modifications"
      },
      {
        "Time_Start": 3013.46,
        "Time_End": 3014.46,
        "Text": " you can do."
      },
      {
        "Time_Start": 3014.46,
        "Time_End": 3017.74,
        "Text": " Like I mentioned, you can see exactly where you're getting in the code."
      },
      {
        "Time_Start": 3017.7400000000002,
        "Time_End": 3022.98,
        "Text": " You can see which branch conditions aren't being taken, and where you should dedicate"
      },
      {
        "Time_Start": 3022.98,
        "Time_End": 3027.1400000000003,
        "Text": " time to try to get past."
      },
      {
        "Time_Start": 3027.1400000000003,
        "Time_End": 3028.1400000000003,
        "Text": " Thank you so much."
      },
      {
        "Time_Start": 3028.1400000000003,
        "Time_End": 3031.5000000000005,
        "Text": " I've listed my Twitter here and my personal blog."
      },
      {
        "Time_Start": 3031.5000000000005,
        "Time_End": 3044.1800000000003,
        "Text": " Feel free to reach out, and I'm also happy to take questions now."
      },
      {
        "Time_Start": 3044.18,
        "Time_End": 3051.22,
        "Text": " Thank you very much for this entertaining and interesting talk and presentation, and"
      },
      {
        "Time_Start": 3051.22,
        "Time_End": 3055.3399999999997,
        "Text": " yeah, are there any questions in the audience?"
      },
      {
        "Time_Start": 3055.3399999999997,
        "Time_End": 3057.74,
        "Text": " Thank you very much for your presentation."
      },
      {
        "Time_Start": 3057.74,
        "Time_End": 3063.7,
        "Text": " The question I had is that, well, from what I understood, you start with the IPCs as a"
      },
      {
        "Time_Start": 3063.7,
        "Time_End": 3070.7,
        "Text": " nice way to find potential pre-registration or sandbox escapes, but after a moment you"
      },
      {
        "Time_Start": 3070.7000000000003,
        "Time_End": 3075.3,
        "Text": " just hook onto starting an initialization function."
      },
      {
        "Time_Start": 3075.3,
        "Time_End": 3084.5400000000004,
        "Text": " And so I don't understand how then from an IPC, well, from a MAC handler, you can, well,"
      },
      {
        "Time_Start": 3084.5400000000004,
        "Time_End": 3088.86,
        "Text": " do the previous, because you are hooking into an initialization function."
      },
      {
        "Time_Start": 3088.86,
        "Time_End": 3092.34,
        "Text": " So I don't see the bridge between the two."
      },
      {
        "Time_Start": 3092.34,
        "Time_End": 3093.34,
        "Text": " Yeah."
      },
      {
        "Time_Start": 3093.34,
        "Time_End": 3096.38,
        "Text": " Yeah, that's a great question."
      },
      {
        "Time_Start": 3096.38,
        "Time_End": 3102.58,
        "Text": " So what I was explaining is, yes, when you create your end exploit, you will need to"
      },
      {
        "Time_Start": 3102.58,
        "Time_End": 3104.1400000000003,
        "Text": " call that mock message function."
      },
      {
        "Time_Start": 3104.1400000000003,
        "Time_End": 3107.1,
        "Text": " You will need to send a mock message across the wire."
      },
      {
        "Time_Start": 3107.1,
        "Time_End": 3109.5,
        "Text": " It's going to need to be processed by the kernel."
      },
      {
        "Time_Start": 3109.5,
        "Time_End": 3112.7000000000003,
        "Text": " It'll then end up in your target function."
      },
      {
        "Time_Start": 3112.7000000000003,
        "Time_End": 3116.98,
        "Text": " So for fuzzing purposes, we cut out the middleman."
      },
      {
        "Time_Start": 3116.98,
        "Time_End": 3121.46,
        "Text": " We cut out the kernel, which is delivering the message, and we go directly to where the"
      },
      {
        "Time_Start": 3121.46,
        "Time_End": 3123.38,
        "Text": " message is being processed."
      },
      {
        "Time_Start": 3123.38,
        "Time_End": 3127.46,
        "Text": " That way we can produce a crash, and you're absolutely right that sometimes it is more"
      },
      {
        "Time_Start": 3127.46,
        "Time_End": 3133.34,
        "Text": " difficult once you have a crash to get back to, okay, now I need to go back to Safari"
      },
      {
        "Time_Start": 3133.34,
        "Time_End": 3139.34,
        "Text": " or whatever process and send a valid mock message to the process we're targeting."
      },
      {
        "Time_Start": 3139.34,
        "Time_End": 3144.92,
        "Text": " Sometimes it's difficult, but yes, when you're fuzzing, you want to get as close as you can"
      },
      {
        "Time_Start": 3144.92,
        "Time_End": 3148.7000000000003,
        "Text": " to that target function, and then you need to backtrack often when you're creating that"
      },
      {
        "Time_Start": 3148.7000000000003,
        "Time_End": 3149.7000000000003,
        "Text": " exploit."
      },
      {
        "Time_Start": 3149.7000000000003,
        "Time_End": 3150.7000000000003,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3150.7000000000003,
        "Time_End": 3151.7000000000003,
        "Text": " Of course."
      },
      {
        "Time_Start": 3151.7000000000003,
        "Time_End": 3152.7000000000003,
        "Text": " Good question."
      },
      {
        "Time_Start": 3152.7000000000003,
        "Time_End": 3158.3,
        "Text": " I have a follow-up question for that one."
      },
      {
        "Time_Start": 3158.3,
        "Time_End": 3164.42,
        "Text": " How difficult would it actually be to, if you have the full chain, including the kernel,"
      },
      {
        "Time_Start": 3164.42,
        "Time_End": 3171.3,
        "Text": " to filter in the kernel these mock messages to prevent such a kind of attack?"
      },
      {
        "Time_Start": 3171.3,
        "Time_End": 3175.94,
        "Text": " Sorry, so you're saying have some sort of filter in the kernel?"
      },
      {
        "Time_Start": 3175.94,
        "Time_End": 3180.26,
        "Text": " I'm not very fluent in macOS, but if that's possible, yeah."
      },
      {
        "Time_Start": 3180.26,
        "Time_End": 3181.82,
        "Text": " Yeah, that's a good question."
      },
      {
        "Time_Start": 3181.94,
        "Time_End": 3183.42,
        "Text": " I mean, you know the signatures."
      },
      {
        "Time_Start": 3183.42,
        "Time_End": 3185.2200000000003,
        "Text": " It's defined, kind of."
      },
      {
        "Time_Start": 3185.2200000000003,
        "Time_End": 3186.2200000000003,
        "Text": " Yeah."
      },
      {
        "Time_Start": 3186.2200000000003,
        "Time_End": 3187.6200000000003,
        "Text": " That's a great question."
      },
      {
        "Time_Start": 3187.6200000000003,
        "Time_End": 3189.06,
        "Text": " I'm not sure."
      },
      {
        "Time_Start": 3189.06,
        "Time_End": 3191.94,
        "Text": " That's not something that I've personally looked at."
      },
      {
        "Time_Start": 3191.94,
        "Time_End": 3198.82,
        "Text": " I definitely think there's detection opportunities for inspecting mock messages coming through."
      },
      {
        "Time_Start": 3198.82,
        "Time_End": 3202.42,
        "Text": " I definitely agree with that."
      },
      {
        "Time_Start": 3202.42,
        "Time_End": 3208.42,
        "Text": " It does get difficult, though, because there are a lot of legitimate reasons to send mock"
      },
      {
        "Time_Start": 3208.42,
        "Time_End": 3212.94,
        "Text": " messages, as we looked at, and you can just pop open a system and see thousands of them"
      },
      {
        "Time_Start": 3212.94,
        "Time_End": 3215.86,
        "Text": " being sent per second."
      },
      {
        "Time_Start": 3215.86,
        "Time_End": 3221.34,
        "Text": " So it is difficult to detect, because there's a lot of legitimate traffic."
      },
      {
        "Time_Start": 3221.34,
        "Time_End": 3227.34,
        "Text": " But I think certain heuristics, really long messages being sent, maybe could be used to"
      },
      {
        "Time_Start": 3227.34,
        "Time_End": 3231.54,
        "Text": " identify buffer overflows if one exists."
      },
      {
        "Time_Start": 3231.54,
        "Time_End": 3237.5,
        "Text": " And follow-up question, did you, on purpose, decide against snapshot fuzzing?"
      },
      {
        "Time_Start": 3237.5,
        "Time_End": 3238.5,
        "Text": " It's a great question as well."
      },
      {
        "Time_Start": 3238.5,
        "Time_End": 3242.14,
        "Text": " Yeah, I didn't mention snapshot fuzzing."
      },
      {
        "Time_Start": 3242.14,
        "Time_End": 3248.62,
        "Text": " Didn't quite have time, but snapshot fuzzing is a really cool, kind of pretty new, state-of-the-art"
      },
      {
        "Time_Start": 3248.62,
        "Time_End": 3256.14,
        "Text": " approach where you take snapshots and you revert your state, sort of each fuzzing cycle,"
      },
      {
        "Time_Start": 3256.14,
        "Time_End": 3258.14,
        "Text": " to a known state."
      },
      {
        "Time_Start": 3258.14,
        "Time_End": 3263.3,
        "Text": " This is really great for network protocol fuzzing, because you can take a look at incoming"
      },
      {
        "Time_Start": 3263.3,
        "Time_End": 3268.42,
        "Text": " messages, and then if you get additional code coverage, you can go back to that state"
      },
      {
        "Time_Start": 3268.42,
        "Time_End": 3271.6600000000003,
        "Text": " and continue fuzzing from there."
      },
      {
        "Time_Start": 3271.6600000000003,
        "Time_End": 3277.42,
        "Text": " Snapshot fuzzing on macOS is a bit of a pain in the ass, which is the reason I didn't go"
      },
      {
        "Time_Start": 3277.42,
        "Time_End": 3278.42,
        "Text": " through with it."
      },
      {
        "Time_Start": 3278.42,
        "Time_End": 3287.94,
        "Text": " I do know there is a project, I forget right now where it's coming from, but it was with"
      },
      {
        "Time_Start": 3288.2200000000003,
        "Time_End": 3297.34,
        "Text": " using the VMware Snapshot API on VMware to actually perform snapshot fuzzing for macOS."
      },
      {
        "Time_Start": 3297.34,
        "Time_End": 3302.08,
        "Text": " That's been a project I've been meaning to look more into, and it looks very cool."
      },
      {
        "Time_Start": 3302.08,
        "Time_End": 3307.86,
        "Text": " You also can use Nix, which is the main snapshot fuzzer."
      },
      {
        "Time_Start": 3307.86,
        "Time_End": 3314.5,
        "Text": " You do need to set up Hackintosh on KVM, as far as I'm aware, which I have not gone through"
      },
      {
        "Time_Start": 3314.5,
        "Time_End": 3319.38,
        "Text": " the trouble in doing, but you certainly could use that approach as well."
      },
      {
        "Time_Start": 3319.38,
        "Time_End": 3331.46,
        "Text": " Yeah, good questions."
      },
      {
        "Time_Start": 3331.46,
        "Time_End": 3337.26,
        "Text": " Do you know of approaches to automate the increase in coverage, maybe symbolic execution"
      },
      {
        "Time_Start": 3337.26,
        "Time_End": 3338.5,
        "Text": " or something?"
      },
      {
        "Time_Start": 3338.5,
        "Time_End": 3342.54,
        "Text": " Yeah, another great question."
      },
      {
        "Time_Start": 3342.54,
        "Time_End": 3345.54,
        "Text": " Symbolic execution is definitely something that I would like to use further along in"
      },
      {
        "Time_Start": 3345.54,
        "Time_End": 3346.98,
        "Text": " the research."
      },
      {
        "Time_Start": 3346.98,
        "Time_End": 3354.14,
        "Text": " That's taking a look at the source code, if you have it, or the binary and looking at"
      },
      {
        "Time_Start": 3354.14,
        "Time_End": 3360.62,
        "Text": " the branch conditions and seeing what inputs might get us to a certain spot in the function."
      },
      {
        "Time_Start": 3360.62,
        "Time_End": 3365.46,
        "Text": " Absolutely, to answer your question, that's something that I want to continue looking"
      },
      {
        "Time_Start": 3365.46,
        "Time_End": 3366.46,
        "Text": " into."
      },
      {
        "Time_Start": 3366.46,
        "Time_End": 3368.86,
        "Text": " Additionally, I don't know."
      },
      {
        "Time_Start": 3368.86,
        "Time_End": 3374.46,
        "Text": " I think there's going to be interesting applications of artificial intelligence in the future."
      },
      {
        "Time_Start": 3374.46,
        "Time_End": 3379.58,
        "Text": " A little more difficult with binary analysis, but honestly, the AIs do a pretty decent job"
      },
      {
        "Time_Start": 3379.58,
        "Time_End": 3381.54,
        "Text": " with assembly."
      },
      {
        "Time_Start": 3381.54,
        "Time_End": 3386.7400000000002,
        "Text": " So I think, yeah, symbolic execution and AI in the future is going to really help with"
      },
      {
        "Time_Start": 3386.7400000000002,
        "Time_End": 3388.26,
        "Text": " honing in fuzzers."
      },
      {
        "Time_Start": 3388.26,
        "Time_End": 3398.3,
        "Text": " Actually, I believe Google has a project they've incorporated into OSS Fuzz, where they're"
      },
      {
        "Time_Start": 3398.3,
        "Time_End": 3406.5800000000004,
        "Text": " using AI to generate automatic fuzzing harnesses for members of OSS Fuzz, which is pretty cool."
      },
      {
        "Time_Start": 3406.5800000000004,
        "Time_End": 3410.46,
        "Text": " So I definitely think we're starting to see a little bit of that already, but I think"
      },
      {
        "Time_Start": 3410.46,
        "Time_End": 3412.86,
        "Text": " we have a long ways to go still."
      },
      {
        "Time_Start": 3412.86,
        "Time_End": 3414.86,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3414.86,
        "Time_End": 3416.86,
        "Text": " Of course."
      },
      {
        "Time_Start": 3416.86,
        "Time_End": 3420.7000000000003,
        "Text": " Any other question?"
      },
      {
        "Time_Start": 3420.7000000000003,
        "Time_End": 3424.7400000000002,
        "Text": " Maybe I have one, because I didn't know libafl existed."
      },
      {
        "Time_Start": 3424.7400000000002,
        "Time_End": 3429.5000000000005,
        "Text": " I also built a fuzzer with Frida in the past doing in-process fuzzing."
      },
      {
        "Time_Start": 3429.5000000000005,
        "Time_End": 3435.94,
        "Text": " Does libafl do coverage for you, or do you still do that in Frida when you build your"
      },
      {
        "Time_Start": 3435.94,
        "Time_End": 3436.94,
        "Text": " fuzzer?"
      },
      {
        "Time_Start": 3436.94,
        "Time_End": 3439.1400000000003,
        "Text": " It does do coverage, yeah, which is really cool."
      },
      {
        "Time_Start": 3439.1400000000003,
        "Time_End": 3440.1400000000003,
        "Text": " Cool."
      },
      {
        "Time_Start": 3440.1400000000003,
        "Time_End": 3441.1400000000003,
        "Text": " Yeah."
      },
      {
        "Time_Start": 3441.1400000000003,
        "Time_End": 3442.1400000000003,
        "Text": " I will look into that."
      },
      {
        "Time_Start": 3442.1400000000003,
        "Time_End": 3443.1400000000003,
        "Text": " It's a cool project."
      },
      {
        "Time_Start": 3443.1400000000003,
        "Time_End": 3447.9,
        "Text": " I'm still learning it as well, but I think it's got a lot of applications."
      },
      {
        "Time_Start": 3447.9,
        "Time_End": 3454.46,
        "Text": " They also have a lot of example fuzzers, so you can look and find one that might be useful"
      },
      {
        "Time_Start": 3455.18,
        "Time_End": 3457.18,
        "Text": " for your unique circumstance."
      },
      {
        "Time_Start": 3457.18,
        "Time_End": 3458.18,
        "Text": " Awesome."
      },
      {
        "Time_Start": 3458.18,
        "Time_End": 3459.18,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3459.18,
        "Time_End": 3461.18,
        "Text": " Yeah, of course."
      },
      {
        "Time_Start": 3461.18,
        "Time_End": 3462.18,
        "Text": " Okay."
      },
      {
        "Time_Start": 3462.18,
        "Time_End": 3469.06,
        "Text": " If there are no questions left, give Dylan another round of applause."
      },
      {
        "Time_Start": 3469.06,
        "Time_End": 3470.06,
        "Text": " Thank you again."
      },
      {
        "Time_Start": 3470.06,
        "Time_End": 3471.06,
        "Text": " Thank you all so much."
      },
      {
        "Time_Start": 3471.06,
        "Time_End": 3472.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3472.06,
        "Time_End": 3473.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3473.06,
        "Time_End": 3474.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3474.06,
        "Time_End": 3475.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3475.06,
        "Time_End": 3476.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3476.06,
        "Time_End": 3477.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3477.06,
        "Time_End": 3478.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3478.06,
        "Time_End": 3479.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3479.06,
        "Time_End": 3480.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3480.06,
        "Time_End": 3481.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3481.06,
        "Time_End": 3482.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3482.06,
        "Time_End": 3483.06,
        "Text": " Thank you."
      },
      {
        "Time_Start": 3483.06,
        "Time_End": 3484.06,
        "Text": " Thank you."
      }
    ]
  }
}