{
  "webpage_url": "https://www.youtube.com/watch?v=2s6l0IkK52E",
  "title": "TROOPERS24: Analyzing and Executing ADCS Attack Paths with BloodHound",
  "description": "Talk by Andy Robbins, Jonas B\u00fclow Knudsen - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/kzymd8/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 4133,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240902"
}

This text was transcribed using whisper model: large-v2

 It's 5.53, I think we have maybe a little less than an hour to get through our content,  but I understand that we are keeping you from more beer.  So we will make progress.  So this presentation has a lot of links, it has a lot of small text, it has a lot of references.  So I recommend taking a picture of this so that you don't have to wait for the deck to  be available by the conference organizers.  This link will take you directly to the deck, so if you would like to follow along now,  you can, or if you just want to check it out later on your own time, you can as well.  So we'll give just a couple more seconds to let people take a picture of that.  Perfect.  Okay.  So, this is who we are.  I think one thing I'm disappointed by is that there are no, there aren't more PowerShell  jokes in the presentations, but maybe PowerShell is falling a little bit out of favor.  But I'll introduce myself first.  My name is Andy Robbins.  My title is I'm principal product architect at Spector Ops.  I'm one of the co-creators of Bloodhound, along with Will Schroeder and Rohan Vazirkar.  That's my handle on Twitter is underscore Waldo with a zero.  My name is Jonas, and I work as a product architect at Spector Ops, so, yeah, I try  to help out Andy with introducing new attack paths into Bloodhound, and, yeah, trying to  make it easier for defenders as well to identify, yeah, risks in Active Directory and Azure.  Yeah.  Here's our agenda.  So, first, we're going to talk about ADCS attack path identification analysis and execution  using Bloodhound.  And along the way, we will explain how some of those attack primitives emerge and how  an attacker can execute them.  And then I'll talk about visualizing and auditing the ADCS LDAP hierarchy and the PKI hierarchy  and going beyond what the tool does for you, but kind of relying on some of the basic functionality  the tool does as far as visualizing group memberships and things like this to go deeper  into auditing than what the tool does for you out of the box.  And finally, Jonas will share with you some practical remediation strategies and examples  based on how we are trying to help our customers mitigate and manage these risks in the real  world.  Okay.  Escalation one.  So before we get into escalation one, here's what I want to do.  It's 5.56, so I want everybody to stand up.  Because I feel like we all might be kind of like in a food coma or maybe club mate coma  or some other kind of coma.  So stretch a little bit.  Help your neighbor stretch.  Ask permission first.  Okay.  Is that better?  Is that good?  Okay.  All right.  Go ahead and sit down.  Yeah.  Great.  Thank you.  Okay.  So who knows what escalation one is?  Okay.  Okay.  So we've got some refreshers and some people to tell about this for the first time.  Our colleagues, Will Schroeder and Lee Chigola-Christensen, they put out a white paper several years ago  called certified preowned.  I think it's the best pun of all time.  But by a show of hands, who is familiar with that kind of seminal research and documentation?  Okay.  So we've got a good mix here.  So escalation one is an abuse primitive that allows a principle in Active Directory to  impersonate any other principle in Active Directory.  And without getting into talking about enrollment agent restrictions, there is no protection  against this.  So this is just as powerful as, like, DC sync.  It's just as powerful as being, like, domain admin.  Escalation one works like this.  So we have Alice and Bob.  We have a cert template.  And enterprise CA, which could also be called an enrollment service.  And a domain controller.  So Alice has the ability to do escalation one.  The way that she would do this is she asks the enterprise CA to issue a certificate back  that is valid for authentication, where a particular field in the certificate called  subject alternative name will be populated by the user principle name of some other user.  So maybe Bob is a domain admin.  And so we can say my SAN is Bob at Contoso.local.  The security reference monitor on the host that hosts the CA service will check several  different security descriptors to see whether Alice can do this.  And then if the user Alice can do that, the CA will issue back this certificate valid  for authentication back to Alice.  Critically, this certificate that comes back, it needs to have an EKU that is valid for  NT authentication.  There are several of those that are valid.  One example is client authentication.  Then with that certificate, Alice will then present that to the domain controller and  say, I want a TGT as Bob.  And this certificate serves as my credential, as my proof that I am allowed to authenticate  in the domain as Bob.  Yeah.  So at that point, then the domain controller will return a TGT, which then can be used  to get TGSs, and Alice effectively has become Bob and is impersonating Bob in the domain.  This is an extraordinarily reliable and effective and common privilege escalation primitive  in every Active Directory environment, like 98% of them probably.  But finding it by hand can be tricky.  It can be very labor-intensive.  It can be confusing.  It can be error-prone.  You could wind up leaving findings on the table just because the number of configurations  and the number of security descriptors that you have to analyze in order to determine  who can do escalation one.  It's a lot.  Anybody who's done that by hand knows how difficult it is to actually identify these  things manually.  If only there was a piece of software that could do that for us.  So we have a video demo here where we are using Bloodhound to find a path.  And so we are starting from the Garcia in escalation one user, and we want to become  domain admins.  So we path find from Garcia to domain admins.  This attack path, you can see it starts at Garcia.  It goes via this edge called ADCS escalation one.  And that edge is directed at the domain head.  Why do you think it's directed at the domain head?  It's the same reason why DC sync is directed at the domain head.  It's because every principle descends down from this object.  So if we control the domain head, and we're doing like Dijkstra's algorithm or A star,  same kind of depth first search, traversing this node, we are guaranteed to traverse to  every other principle under that domain.  Not only that, but we can also traverse across domain trust edges as well, and we'll talk  more about that later.  So that edge is basically telling us Garcia can do escalation one against the domain and  become whatever principle they want to become.  Now, if you're on the red team side, you are then going to need to understand what is the  template that I'm going to enroll into, what is the CA that I'm going to target.  So just knowing that Garcia can do escalation one is not enough as a red team operator.  It's also not enough for a defender.  So we have this new feature in Bloodhound called composition.  So there's a lot that goes into creating this edge.  If you want to know exactly how that works, look at our presentation from ZeefCon two  weeks ago, where we go into the internals of the data model and how the data model is  used to create these post-processed edges like this.  So it's done all the calculation for the user to determine that Garcia can do escalation  one.  To find out how to see what has gone into the creation of that edge, we can click on  this composition accordion item.  And that will unfurl everything that has gone into creating that edge.  So we click on composition, and then we'll rearrange things here a little bit to make  it a little more legible.  And this is our answer.  So Garcia is a member of this group, group one, that has the enroll ace against two different  cert templates.  The user also has enroll rights against the enterprise CA to which these templates have  been published.  So the user needs enroll rights on both the template and the CA.  Just one is not enough.  This CA is the enterprise CA for a root CA for the domain, which is a root CA for the  domain.  The CA is also trusted for NT authentication against the domain.  So all of that combined, plus certain properties about these templates, certain properties  about this object, and for other things, certain properties about the host hosting the CA service,  which Jonas will talk about, have all gone into answering the question, how does Garcia  have the ability to do escalation one?  There's your answer right there.  So first, we will demonstrate that we are not domain admin by trying to enumerate the  C dollar share on the domain controller.  We get access is denied.  Then we will use CertiPy to enroll in that particular certificate, and we're specifying  the researcher at escalation one as our SAN, and that researcher is a domain admin user.  And then we will use CertiPy again to retrieve the NTLM hash for that user, and at that point,  the NTLM hash is just as good as a clear text password.  There's a lot of nodding heads.  If you're not sure exactly why that is, I'd be happy to explain it, but I'll do that after  the talk is over.  But the NTLM hash is just as good as the clear text password.  Okay.  Yeah.  So that was escalation one.  Now we're going to talk about escalation three.  And escalation three is the abuse of enrollment agent permissions.  So we can have Alice and Bob here.  We now have two different certificate templates.  We have an enrollment agent certificate template and the user template.  And they're both published on the Enterprise CA.  Now Alice wants to become an enrollment agent, and she does that by requesting this certificate  of the enrollment agent certificate template.  Assuming that Alice has the enrollment rights to do so, she will receive this certificate  here.  What's special about an enrollment agent certificate is that it has this EQU called certificate  request agent.  And that is essentially what makes you an enrollment agent.  What an enrollment agent can do is to enroll on behalf of other principals.  So next thing Alice will do is to request a certificate on behalf of Bob in the user  template.  And she will present her enrollment agent certificate in order to prove that she is  an enrollment agent.  And then she gets a certificate as Bob, just as before we saw with escalation one.  And from there we can again get a Kerberos ticket as Bob, but we have now impersonated  Bob in a different way.  So what is an enrollment agent?  It is a principal that has this certificate here with this enrollment agent EQU.  And what they can do is to enroll on behalf of other principals.  There are some restrictions for the templates that you enroll in.  You can enroll in all templates of schema version one.  For schema version two or higher, then it's required that the template specify the certificate  request agent EQU in the certificate template.  And this is what it looks like if you check Active Directory for that requirement.  There's a few more details to it.  And you can read about those in the link provided here.  So in Budhound what we do is we create this new edge here from the enrollment agent certificate  templates towards the targeted templates that allows for enrollment agents to enroll on  behalf of other principals.  So that makes it easier for us to identify when there's an abuse case.  I also have a small demonstration similar to Andy's here where we're also going to search  for an attack path.  This time from this victim user to domain admins.  And we can see domain users has this escalation three edge towards the domain.  Again we're going to check the composition graph to see the details.  And here we can see that domain users has enrollment rights on these two certificate  where one of them has this enroll on behalf of the other one.  Next we're going to abuse this attack path here.  So we're going to copy the Windows abuse information that Budhound provides into a text editor  that we'll then copy to our attacker machine.  Before we copy it to the attacker machine we need to specify the nodes of this environment  here so we get the CA name for the enterprise CA.  We also need the DNS host name for the CA.  And then we need to specify the certificate template that allows for enrollment agent.  Then there's a bunch of text we can just delete here.  And we're going to use the CA name again in the second enrollment where we enroll as the  target user.  We then also need to specify this target user here.  So we're going to look up what are the members of domain admins.  And in domain admins we see that the researcher here is a member.  At last we also need to specify the target account when we are requesting a Kerberos  ticket as the researcher.  So now we are on the attacker machine and we are logged in as the victim and we cannot  access C$ on the domain controller.  Next we are going to request this enrollment agent certificate.  And this time we are using Certify.  Certify outputs the certificate here and we need to store that to disk.  So we save the key as a key file.  And we are going to use the name specified here in the abuse steps.  And then we save the certificate.  And then we can use the built-in Windows tool called CertUtil to create a PFX version of  the certificate.  That allows us to enroll on behalf of our target user.  And in this case here it's the researcher.  And we get that certificate.  And then we need to save that to disk as well.  And we are going to save the certificate here.  This could also be done on another machine if we wanted to.  We just need the PFX file and then we can use Ruby to request a Kerberos ticket and  we have specified it to be injected into memory.  So we run K list to verify that we now have a ticket as the researcher.  And we can access C$ on the domain controller.  So that's how you can use Sprouthound to identify escalation 3 and abuse it.  Let's see if I can move on to the next slide here.  There we go.  Nice.  So I think, so yeah, I think we can give Jonas a hand for that.  Great explanation.  Thank you.  Great explanation.  Great demo.  Yeah.  It's a really tricky one.  I think explaining it like that concisely and effectively is a lot harder than it looks.  So escalation 5.  Escalation 5 may be one of the lesser-known named numbered escalation primitives from  the ADCS white paper.  And you wouldn't, like I would forgive you for not really having dived into escalation  5 very much because the description for it from the white paper is pretty concise.  It basically says there are secureable objects out there that are involved in ADCS authentication.  Control of them might be bad.  And that's kind of where we then picked up and continued that research on.  So escalation 5 comes down to it being kind of what I said, is LDAP object manipulation.  So escalation 5 abuses how the system works, how ADCS and Active Directory are interconnected,  and how the objects that are placed into the directory in certain places are then replicated  elsewhere in the domain and then also elsewhere in the forest.  Escalation 5 is extraordinarily complex.  And there are many, many, many different variations of it.  There are at least 40, like 40 to 50 different variations of escalation 5.  Yeah.  So because of that complexity, it's very hard to find.  It's very hard to identify not just as a red teamer but also as a defender.  That, as an attacker, makes escalation 5 a very, very attractive backdoor.  Because the permissions that can be put into place in very surgical ways can just fly under the radar.  And as a bonus, escalation 5 uniquely enables escalation from domain admin to enterprise admin  because of a certain behavior with the configuration naming context and how it replicates in the forest.  And I'll explain more about that when we get there.  There are basically two-ish families of escalation 5.  One is where ADCS has already been deployed.  And there are permissions on certain objects that already exist.  And maybe we can execute an attack path that gets us all the way to a certain principle that has certain permissions that then enable escalation 5.  So that's the first flavor.  The second flavor is where ADCS doesn't exist at all.  They've never deployed it.  But even though the software isn't running in the enterprise,  because of how Active Directory respects the LDAP hierarchy that ADCS interfaces with,  and because that hierarchy exists by default,  certain privileges mean that we can do basically a full bootstrap of ADCS ourselves as the attacker.  Also, the full ADCS bootstrap method also works if ADCS is already deployed.  So it can be really hard to wrap your head around escalation 5.  And I think this analogy might be kind of helpful.  Escalation 1 emerges out of the combination of the mechanics of the system,  the security descriptors on different objects,  and the configurations on different objects.  And as you saw with the composition graph that we were expanding out,  it's at least five different objects that are involved in the emergence of escalation 1.  So you can think of those as like different puzzle pieces,  and they all fit together to create escalation 1.  And with escalation 1, we are saying those configurations are already in place,  and escalation 1 is possible right now.  But what if one of those configurations is removed?  Then escalation 1 evaporates.  So what if the CA is not issued by a root CA?  It evaporates because it won't be trusted by the domain.  What if the CA is not trusted for NT authentication?  Same thing, and escalation 1 evaporates.  Where escalation 5 comes in is we can replace a missing configuration with an existing privilege.  And that will slot in perfectly, and from that, escalation 5 emerges.  And this is true not just for one configuration or two configurations.  It's true for all of them.  So no matter what the combination of missing configurations are,  if we can make up for them with privileges, then escalation 5 emerges.  This is part of the data model that we use in Bloodhound  to calculate automatically the emergence of these different named escalation primitives.  And so as you can see, we have a user who's a member of a group.  They have enroll rights on the enterprise CA,  which is trusted for NT authentication  because it's listed in the CA certificates property on the NT authstore object.  What if that configuration goes away?  Then the attacker is out of luck.  Obviously not.  What can happen is there may be a configuration in place  where the principal somehow has the ability to repopulate the CA certs property  on the NT authstore object.  So how many different ways are there to have that privilege?  There's like five or six at least that I can think of off the top of my head,  just depending on what the ace access mask is.  But what matters is that we can.  We can write to that property.  One way that we might be able to do that is the group that the user belongs to  may have generic all on that object.  And so that then slots in as the missing puzzle piece.  And now we have escalation five.  So let me go back one step.  This object, has anybody ever actually looked at this object?  Like an MMC or ADSI edit?  Like just a couple of hands.  So it's a pretty obscure object, I might think.  And I think what happens a lot of times when we're talking about these  like really obscure objects is you may be tempted to entertain the thought  in the back of your mind, which is this would never happen in real life.  No one's ever going to put a generic all privilege on some random object  in Active Directory.  But if you do professional services for customers who have, you know,  fucked up their environments, you've seen it all.  And you know that this stuff can happen.  Not only because maybe an admin does it, but I think actually more likely  is because some third-party vendor, their installer, wants to give itself  special privileges.  Or maybe Exchange wants to give itself special privileges.  Now the heads are nodding.  And if you don't believe me, here's an example from real life.  So this is a real customer environment where this group has generic all  on the public key services container within the configuration naming context.  That ace has been inherited down to the cert templates container,  enrollment services container, the NT auth store object,  and the certification authorities container.  So let's say that we're a red teamer.  We're using Bloodhound.  I want to find a path domain admin.  Path not found.  Well, that sucks.  So maybe I give up.  Maybe I start writing the report.  You know, that's what I would do if I was Chris.  Just like, I'm done.  I'm out.  But what if there is a path to that particular user who has control of those  different objects?  Well, why didn't the path show up before?  Well, it's because we haven't implemented Escalation 5 in the product yet.  And there are good reasons for that, but that's why the path doesn't show up  because we don't have the edge in the database.  That group has generic all on these objects like I mentioned.  There are only two objects listed here that are necessary to have full control of  or write access to in order to fully bootstrap ADCS in a way that makes it  abusable.  Can somebody tell me from this row which two objects are necessary to modify?  What's that?  The enrollment services container?  Okay.  What other one?  That's one.  What's two?  Yeah.  Yeah.  It's not very legible.  Yeah.  So it turns out that the two objects that we need to modify is this one,  certification authorities, and this one, ntoff certificates.  With write access or with create child access to this container and with  generic write, write DACL, owner, write owner, generic all, et cetera,  on this object you can escalate to domain admin,  you can escalate to enterprise admin.  To Olaf's point, there are definitely scenarios where full control over the  enrollment services container can also lead to escalation five,  but full control over the ntoff store and the root CA store or container  is a guaranteed way that you can, yeah, escalate.  Yeah.  In this situation, ADCS doesn't exist yet.  So under this enrollment services container, there's nothing.  There's just nothing there.  Andrea, I think I saw you in the room.  There you are.  So Andrea made this great blog post here regarding the cert publishers group,  which if you look at the permissions that that group has, it has a lot,  and that can have an impact.  And so Andrea's blog post here goes into some practical enumeration  and abuse guidelines, I would say.  So thank you.  Thank you for this blog post.  And so what we're going to do is we're going to say that ADCS  doesn't exist at all.  And this group here has generic all over those two different objects,  and we're going to turn that into domain admin.  Now, you're going to recognize a lot of these commands because I just copy  and pasted them from your blog, so thank you again.  So basically what we're doing here is we are creating a CA.  What is a CA?  It is a self-signed certificate.  We are also creating a certificate revocation list, a CRL file,  and then after we create these particular files,  we're going to transfer them over to the Windows box,  which is serving as like our attacker system.  And, yeah, I thank you so much for putting these commands out there.  Now, again, like in the other demos, we proved that we're not already  domain admin, so nothing up this sleeve, nothing up that sleeve.  And we do that by trying to enumerate remotely the C dollar share  on the domain controller, which fails.  So we get access denied.  Aye, aye, aye.  We have 30 minutes left?  Okay.  Okay, so we'll copy those files over.  We will prove that we're not domain admin,  and you'll see that we get access is denied.  Now this next command, we're going to use the built-in certutil binary  to do DS publish for the CRT into the root CA container.  And so what exactly is that doing?  So it is taking the CRT, which will be in, like, you know,  like the format that we were seeing before.  It will convert it into an ASN 1 formatted certificate.  It will then take that string, and it will try to add it to a new object  on that new object's CA certificate property,  and that new object will be a certification authority class object  under the certification authority's container.  So there's a lot of actions that this command is actually doing.  The end result is that we have a new object with this distinguished name here,  and I'm not going to spoil things,  but, like, keep in mind that that object is placed there.  I just screwed that up again.  Yeah, and maybe notice that the command returned access denied, which is a lie.  Well, actually, I don't think it is because I think what it's actually doing  is it's trying to also write to the AIA container,  which our user doesn't have full control of, but we also don't need it.  So certificate added to the directory services store.  Then we are adding the...  Sorry, this is going really fast.  So this other command that we did was adding the ASN 1 formatted certificate  to the ntoffstore object, and so you can see the results of that command here.  And so that populates the list that otherwise was empty before.  Then we're going to unprotect the PFX  because the tooling doesn't support prompting for a credential.  And then what do we have now?  We have the private key for the root CA for the domain,  and we have the ability to issue certificates.  We don't need a certificate template.  We don't need all of the other pieces that come into play  when finding out if a template is susceptible to escalation 1.  We don't need any of that because we are the CA.  We can issue whatever certificates we want.  And so that's exactly what Oliver LUAC's tool...  I don't think Oliver is here.  Yeah, I don't see anybody saying they're Oliver, but yeah.  Thank you to Oliver for creating and maintaining Certify.  So the Certify forge command is...  We're going to get a PFX on disk now,  which is going to be valid for authenticating as that user in Active Directory.  And now we're going to allow the domain controller to reach this system on port 80,  and then we're going to start up an HTTP server serving the CRL.  Because as I learned from your blog post,  the first time the domain controller tries to validate the CA,  it reaches out and it tries to find a certificate replication list,  and if that ain't there, it's going to fail.  So you saved me days of pulling my hair out, so thank you again.  So our fake ADCS service Python web server is running.  We have the command ready to go to actually get the NT hash for the researcher user.  So let's hit play again, and let's see what happens.  So it failed.  Who can tell me why?  Who said that?  Yeah, so the problem has to do with replication.  The problem is when you place a new Certification Authority object  in the Certification Authority's container,  that is then pushed out via group policy to every client in the domain  and every domain controller,  and it's added as a new trusted root Certification Authority.  But we did all of this kind of quickly,  so that process of group policy running on the domain controller hasn't happened yet.  So the DC doesn't trust the CA, even though the CA is in that container.  So we just have to wait.  Domain controllers by default update group policy for themselves every five minutes.  I believe that's right.  I see Michael nodding, that's all the proof I need.  So up to five minutes later, if we try it again, it'll succeed.  And so now we have the NTLM hash of the domain admin.  So we turned generic all against two different objects into domain admin  but also enterprise admin.  Let's wait for the end for a question, but remember what your question is.  Okay.  I wrote a blog post about this regarding escalating from domain admin to enterprise admin  with this abuse primitive, so you can read that there.  The TLDR is if you have – yeah, that text is not great.  So if you have a bidirectional trust or if you have a forest and then child domain trust,  you have replication that happens in certain directions with certain objects within that environment.  The configuration naming context in each domain is actually writable by each domain.  If you look at the security descriptor of this, it will actually not list out the domain admins.  So it will say, like, enterprise admins has full control, but domain admins is not listed.  So if you get on a domain controller and you try to modify this object  or the objects in the configuration naming context, you'll get access denied  unless you do it on a forest root domain controller.  But the security descriptor on this object does have an ace for the well-known SID for system.  And if you're a domain admin on a child domain, domain controller,  you can run commands as the system user.  If you do that, you can modify the objects in that container.  So, for example, we may modify an existing template.  These templates are replicated around the forest, and when they're updated,  like, say, for example, someone in the forest root modifies a certificate template,  that change is replicated down to each child domain.  But the opposite is also true.  So the child domains, they have writable versions of these objects,  so we can modify this object and all the other ones,  and that will then replicate up to what I would call the canonical version of that object.  And then we can become enterprise admin.  So it's just yet another, like, proof that the domain trust boundary is not a trust boundary, I guess.  That, like, the forest trust boundary kind of is.  Not really. Like, depends.  But it's just, like, breaking that trust boundary is not new.  It's just this is yet another method of doing that.  It's another way to prove that that statement is true.  Escalation 5 is very complicated.  This is one of our internal diagrams for enumerating all of the different permissions  against all the different objects, how they can be granted explicitly,  or through group membership, or nested group membership.  So it's very, very complicated.  This is not even all of it, because it doesn't involve, like, the Escalation 13.  So we're working on it.  We're going to try to have it out there as soon as we can.  Yeah.  Thank you, Andy.  So Escalation 13 is an interesting case  where it was one of our Bloodhound Enterprise customers actually reached out  asking whether or not that, like, this implementation of ADCs in Bloodhound  will cover this specific Escalation case.  And I immediately thought that, yeah, sure thing.  We will cover everything.  But then it was something that I've never heard about before.  Escalation 13 is the abuse of OID group links.  So we have Alice again.  Alice is determined to become Enterprise Admin this time here.  So Alice is not Enterprise Admin, just to make it very clear.  But Alice has enrollment rights on this custom certificate template  that we have created called Enterprise Admin's Template.  So she can ask for a certificate of this template here,  and she will receive the certificate.  And what's special about this certificate here  is that it has this issuance policy field set to this Enterprise Admin's policy.  So you can see there's a new node type in the upper left corner,  and there's an issuance policy.  What this issuance policy has is a link, an OID group link,  to Enterprise Admins.  So when Alice authenticate using this certificate,  she gets a Kerberos ticket with a membership of Enterprise Admins.  So despite not being in the group, she can act as a member of the group.  It is a cool functionality that Microsoft made to enforce  that you authenticate using a smart card  in order to act as an Enterprise Admin, for example.  So in Bloodhound, what we do is that we create this edge here  called ADCS escalation 13.  That goes from the principles that have enrollment rights  on certificate templates that allows for this impersonation of a given group.  And if you click on the composition graph,  then you will see that there will be a certificate template  that has this outbound edge called extended by policy,  which leads to this issuance policy object  that will then have an OID group link edge  that points to the group you can obtain membership in.  Now, in this screenshot here, it's Enterprise Key Admins that I'm using.  There's a reason behind I used Enterprise Admins and this group here.  There's a requirement that the group must be a universal group,  and by default, Enterprise Key Admins and Enterprise Admins  are universal groups.  There's also a requirement that the group must be empty,  and yeah, of course, an admin has to set it up.  All the details of the escalation is written out in this blog post  that you can find in the link in the footer.  So, back to Andy.  Yeah, so how much time do we have left?  How much time do we want to be in here?  You said 15 minutes?  20 minutes.  20 minutes.  Holy cow.  Okay.  All right, so this next section,  Visualizing and Auditing the ADCS LDAP Hierarchy.  So for various reasons, there can be a need to more easily understand  the relationships between these different objects  starting from ADCS Escalation 13, Escalation 1.  I want to be able to dig into the relationships  between these different objects  without having to just see the very surface-level,  final post-processed edges.  So we have that capability in the software as well.  Also, the software that we're talking about today is free and open source.  So nothing that we're talking about here is exclusive to our commercial product.  Everything here is free and open source.  Okay, so why does the product...  How does the product provide value with doing these things?  One is it can help drive an intuitive understanding.  I think most of us understand visuals very well.  You don't have to keep track of as many things in your head,  and connecting the dots is very simple.  So it can make it dramatically simpler  to understand and keep track of the relationships  between these different objects.  It can also greatly simplify the auditing process,  where if you pull up ADUC,  and you hit Advanced Features,  and you right-click on something, and you hit Properties,  and you hit Security tab, and you hit Advanced,  you're presented with the list of DACLs in canonical order,  but which ones have precedence over others,  if there's a Deny Ace?  Which ones mean something?  Who has looked at that GUI  and seen where the access mask column is blank,  where it just doesn't say what the access mask is?  I'm the only one.  Thank you.  So we suffer together on effectively auditing permissions  against securable objects in Windows and Active Directory.  And then if you're on the red team side, if you're a defender,  if your job is to create a report for somebody  to then action and do things with,  then one of our intents with the free software  is to help you make better reports.  So this query here is basically just saying,  and this is a repeat of what you're going to show later,  but basically this is just saying,  tell me any principle that has any ADCS escalation,  numbered escalation primitive, in any domain,  and then return to me the output.  The visual shows on the left the users,  on the right the domains,  and the named escalation primitives that connect the two.  So that query takes less than a millisecond,  and if you were going to try to do all of these calculations by hand,  it would take you days, weeks, and yeah.  So if we click on one of these edges where it says ADCS escalation 4,  then on the right-hand side we have a entity panel about that edge  that gives us information about what that edge actually means.  If we click on composition, we can see exactly what the issue is.  So the user Davis has write DACL  against this certificate template called domain controller authentication,  and then everything else helps to have escalation 4 emerge  out of that plus everything else.  What does write DACL mean?  So if you click on any edge,  but in this instance we're clicking on write DACL,  you'll have a plain English statement about what precisely that means.  Why does that matter?  So hopefully that can make things a little easier to understand.  You don't have to go look at the Microsoft documentation or whatever.  Also on each of those there are references.  So DACL abuse now is kind of like old tradecraft,  so there are a lot of references.  Just in case you want to dig deeper into that abuse primitive.  There are pre-built queries in the product.  So if you click on Cypher and then click on the folder over there,  that will bring up the pre-built searches, which is a scrollable list.  We have 15 minutes left? Thank you.  This is a scrollable list, and so one of these is  enrollment rights on published ESC1 certificate templates.  So that does the calculation for you of which principles  have the intersection of enrollment rights on the template  and a CA that the template is published to,  because remember you need both.  Click on that and you'll see the results.  Super easy, and you can start to identify  domain controllers can do ESC1, who cares?  Enterprise domain controllers, who cares, right?  But then Jones, I don't know who that is.  Maybe that's valid, maybe it's not.  It's an audit opportunity.  It's an opportunity to prevent an attack from happening in the first place.  And I was going to say something, but I'm not going to say it.  An ounce of prevention is worth a ton of cure, let's say.  So why focus on detecting the attack after it has happened  when you can just eliminate the possibility of it happening at all?  So here is a real example from a real customer environment  where we have clicked on the PKI hierarchy view.  And so we can see the relationships from the domain head  to the root CAs, then to the enterprise CAs  that are issued and signed by the root CAs.  And that can also be a nested relationship.  It's like three-tier PKI that can unfurl the NT auth store,  the enterprise CAs, and then also the hosts that are associated  with the enterprise CA based on the DNS hostname attribute here.  So that's like 99.9% that this host is the host that's actually running  the ADCS service associated with that enrollment service object.  From there, you can start to click on these one by one  to audit the permissions on those.  Here's another view. This is a different organization.  So more domains.  It doesn't matter how many domains' worth of information is in the database.  It will happily visualize them like this for you.  You can also visualize the public key services container.  At this point, you're going to have to start zooming into things  to understand what you're looking at.  If we zoom in and we look at one of the objects here,  so we have public key services, and then we have like  certification authorities, AIA, enrollment services, cert templates.  At the top there, at the very top, we have the policies container.  And then right below it, we have the NT auth certificates object.  When you click on that, on the right-hand side,  we have the entity panel, which will tell you relevant information  that are just like the static properties from the object.  The DN, the FQDN of the domain, the SID of the domain.  And then also, right here, we have an item here  that says inbound object control.  And that means the number of principles  that have some kind of abusable privilege over this object.  Some kind of privilege that can turn it into Escalation 5, for example.  If we click on that accordion item, it will unfurl out,  and we'll be able to see how exactly those different principles  have that permission against that object.  So these edges represent the ace on the security descriptor  for the NT auth object.  But then if it's a group that has that privilege,  there are members of that group, there are members of that group,  members of that group, etc.  So it will unfurl out for you all of the principles  that have that kind of abusable privilege.  This is something that's been in Bloodhound since 2016,  so this is probably nothing new to a lot of people.  But in case you haven't seen this, this is the difference  between the pain that we share and no one else  versus actually being able to effectively audit these things.  In Bloodhound, the little crown glyph  means that it is automatically tagged as a Tier 0 asset,  so it's domain admin, domain controller, etc.  But what if it's missing that glyph?  So that could be a principle that has no business  having full control of the NT auth store object.  Or maybe it does, and the permissions on this object  might be wildly out of control  because it's not protected the same way the domain admin is.  Here's another example.  So enrollment rights publish on certificate templates,  on ESC1 templates, so we can reduce the scope of that.  We can also look at who are the CA administrators and CA managers.  These should all be Tier 0 users.  Oftentimes they are not.  So I want to make sure we get to your section quickly.  Everything you see in the GUI is driven by an API.  The API documentation you can find by going to the top right,  hit the cogwheel, hit API Explorer.  This is all self-documented Swagger API documentation.  If you search for CA, you'll find relevant endpoints.  The thing here on the right, if it's red,  it means that it's in Bloodhound CE.  If it's purple, it means that it's in BHE.  Most of the endpoints are in both.  Then you can expand one of those out,  and you can see exactly how to make a request to that API,  and you can see an example of what the output looks like as well.  So what does that mean?  That means that with the free software,  you don't have to be clicking around and hunting for things that are interesting.  You can automate this if you would like.  So you can automate that if you're internal,  or if you are a consultant,  you can automate this for your customers as well.  Because as we all know, Active Directory is not static, it's dynamic.  Things are changing all the time.  Admins are installing software, making configuration changes, all that.  So, yeah.  Yeah, so the last section, let's try to fix some stuff.  But first, we need to identify the things that we want to fix,  and Andy highlighted a bunch of things that you can do  in order to audit an environment.  Here's like a GT query that finds all the non-tier 0 principles  that has an ADCS escalation edge.  So as Andy said, we don't really care about enterprise admins  being able to impersonate users.  They can do that in so many ways,  but we do care about the principles that are not supposed to be enterprise admins.  So this query will help you identify that.  There's a second query I want to share with you guys.  As Andy mentioned, we don't have full support for escalation 5 yet in the product.  Same for escalation 7.  But we do collect the underlying permissions,  like, for example, generic all on the ADCS objects in Active Directory.  This query will check for these kind of permissions.  And, yeah, it's not a guarantee that it can't be abused  to compromise the environment,  but all these permissions, like control over ADCS objects,  is definitely something that you shouldn't grant to non-tier 0 principles.  There's no reason that they should have this kind of control.  So I want to focus on escalation 1 remediation  because escalation 1 is the most common thing that we see in our customers in environments.  And just to recap, escalation 1 is where the certificate template has this  enrollee supply subject flag, which allows you to impersonate anyone.  So if you can, then you can simply solve it  by limiting the enrollment rights on the certificate templates  to only be tier 0 principles.  Then it's completely fine to have this impersonation possibility.  You could also mitigate the problem by removing EQs  that allows for domain authentication  because then the attacker can only impersonate for maybe other things,  such as, like, signing things, which still could be a huge problem,  but at least they cannot authenticate and log in to the environment.  Unfortunately, these remediation strategies are not always possible.  There's a common scenario that we hear about quite a lot  where you have, like, a help desk or maybe IT support  that creates smart cards for other people in the organization.  But there's a solution to that problem,  and that is enrollment agents, as we talked about in escalation 3.  The cool thing about enrollment agents  is that you can set up these restrictions on the enterprise CA,  and you can define very granularly  what principles enrollment agents are allowed to impersonate.  Cool.  You might not know exactly what principles they are allowed to impersonate,  but you can also create deny rules,  so you can basically just say that IT support is allowed to impersonate anyone  except for tier 0 accounts,  and that way you have remediated attack paths to those accounts.  You can also specify the certificate templates  they are allowed to do this impersonation in.  So definitely recommend these enrollment agents restrictions.  Unfortunately, I don't think Microsoft has written a guide to set it up,  so we'll have to look for third parties that have written guidelines  for setting these kind of enrollment agents up.  Ubiqroo has written a pretty good guide, and there's a link to it here.  So when I was creating these slides here,  I was looking for these vendor guides for setting up enrollment agents,  and I found this Ubiqroo guide that was really good.  I also found this one where the text states that  when you're creating the enrollment agent certificate template,  then you should grant permissions to the principles  that will set up smart cards enrollment rights.  But then in this screenshot,  they're granting authenticated users enrollment rights on the template.  And in this guide, they don't set up any enrollment agents restrictions.  So that basically just creates an escalation-free scenario  for authenticated users.  Be very careful when you're reading vendor guides  because it's not always that they have thought about the consequences  of what they are recommending.  Cool. That summarizes everything.  Thanks.  Yeah, thank you.  Thank you.  I think I saw one question in the back earlier that I asked for the end,  but maybe we already answered your question, or maybe not.  Do you want to ask your question?  Thanks for your super interesting talk.  Very nice to hear.  When you showed the example of adding a custom CA to a domain  that does not yet have any CA configured,  you then did a PKI init authentication with this newly created user certificate  and got back the NT hash.  For this PKI init to complete,  the domain controller needs a domain controller certificate.  And when you set up a new CA,  you usually run in an error from a domain controller saying,  I need a domain controller certificate first.  Your client may not validate this because you want to extract the NT password hash.  But how comes that this just completed here?  I don't know. Do you know?  In order to get it working apart,  the fact that the CA has to be published and pushed via group policy,  there is another requirement that for PKI init to work,  the domain controller needs to have a domain controller and Kerberos certificate.  I don't remember exactly which one of the two,  but this is when you have a CA, this is by default installed.  But sometimes you can run in a situation where some domain controller don't have it.  And I run in this situation and just reach to another domain controller who had it and it was fine.  So that can happen.  Okay. That was a really good question.  I don't know, but it sounds like Andrea knows.  Yeah.  Any other questions?  In escalation 5 scenario,  when you issue certificate for the domain admin,  by the certification authority that is not yet trusted,  because you had to open the port on the domain controller using the domain admin.  No, no, no. So I opened the port on the attacker system.  Because the DC, it needs to check the CRL for the CA when it is validating it for the very first time.  So on the attacker machine, if you will, that's where I opened the port.  It could be anywhere. It could be hosted anywhere.  And so when the DC is checking the CRL, it makes a HTTP request to that host.  And so that's where the port was opened.  So opening port 80 on Windows, I don't know if you need admin rights.  Like, no. Okay. Yeah.  Did that answer your question?  Yeah, yeah. I just missed that part.  Oh.  I saw it was done on the actually.  The video I edited, it was like super fast.  So yeah, not your fault.  Anything else?  A question over here.  I have a question about exclusion file.  Because it's very complicated and it's still self-working.  Does any communication thread discussion about the exclusion file attack summary?  Because they have a lot of different combinations, right?  Yeah.  Does any test or discussion about this?  Or is there already a document?  Like what our solution is?  Or like what our idea is for solving it?  Oh, I mean, because they are different combined.  Permission combined.  Yeah.  So there's any summarized documentation.  No, there's not.  Because, like, remember the puzzle piece analogy?  Yes.  So if you take the number of requirements for escalation one,  it probably numbers like 12 or 13.  So then the number of combinations is going to be some, not the factorial of 12,  but like some factor of the combination that, like,  where those puzzle pieces can fit together.  So the number of combinations that we have so far is 40 to 50 combinations.  Where it just depends on maybe I have, like, generic right on this object,  and then maybe I have enroll rights through this other path.  Or maybe I have generic all on the services container,  but that only inherits down to a certain class of object,  and then I have another way to make up for it somewhere else.  So there's at least 40 to 50 different combinations.  But, yeah.  I think, like, that we can break it down into, like, categories.  But the reason why it gets to, like, a lot of scenarios is that, like,  let's say you almost have an escalation 13 attack path,  but the certificate template is not published,  but you have the right to publish certificate templates.  That's one case.  But then there's also, like, the same case for escalation 1,  and there's the same case for escalation 3.  And the attacker steps are all different each time  because there are different requirements.  So the enabling permission will still be, like,  control over the enterprise CA in order to publish a certificate template.  So in that way we can put everything into that category.  But then there's also the combination of that thing is missing,  but then the enterprise CA is not trusted for NG authentication.  So we add that as another one, and then, like, it just, yeah, it adds up.  Yeah.  But we have some ideas for implementing it into the product.  Unfortunately, we haven't gotten to a full, like, agreement  on, like, exactly how we should do it.  So it's, like, we want to implement it in a way  that it's both useful for defenders and attackers.  Yeah.  And also that we don't have to rebuild it later on  when we realize we missed some crucial element  and have to re-architect it.  So the documentation we have for explaining escalation 5  is mostly just internal.  It's not, like, trade secret or anything like that.  It's just, like, it's not in a format that's, like, great for public access.  But eventually we will put something out  to help organize the different classes of escalation 5 like that.  Yeah.  I hope that answers your question.  Okay.  Oh, here's a question over here.  So regarding creating your own CA,  so in a pentest or a retina engagement,  how to can unmount all these changes?  Because I left the enterprise unsecure.  Yeah.  Yeah, that's a great question.  Like, you don't want to leave the network  in a degraded security posture after the assessment is over.  You don't want to make your customer less secure as a result of the work.  So in my testing, the specific actions that I took here  can be undone pretty simply.  So when you remove the certification authority object  from the certification authority container,  when group policy runs on the domain controller the next time,  it will actually then go and it will remove that CA  from the trosep root CA store on every domain endpoint.  And then if you want to remove the change that you made  to the ntauth store object, it's like what you should do  is you should make a copy of what that value is first.  Then modify it.  And then put it back into the state that it was before.  So that particular version of escalation 5  is pretty easy to clean up.  The other ones are probably pretty similar.  But that's also I think partly the onus is on us  to share that information as well  when we actually do finally publish this.  Because I think I agree with what I think you're saying,  which is you shouldn't make your clients less secure during this work.  Yeah.  Thank you.  Okay. Guys, thank you.  If there are no more questions,  the reward for staying around so long  is hopefully a short line at the buffet and at the bar.  So yeah.  Let's go have dinner, guys.  I hope you had a great day.  Have a great evening.  Please stick with us.  See you guys tomorrow.