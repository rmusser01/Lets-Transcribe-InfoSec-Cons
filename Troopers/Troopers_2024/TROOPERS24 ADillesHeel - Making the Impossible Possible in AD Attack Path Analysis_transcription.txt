{
  "webpage_url": "https://www.youtube.com/watch?v=bQcTgVo3fYA",
  "title": "TROOPERS24: ADillesHeel - Making the Impossible Possible in AD Attack Path Analysis",
  "description": "Talk by SHANG-DE JIANG, Che Yu Lin, Cheng-Lin Yang - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/uepkle/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 3234,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240902"
}

This text was transcribed using whisper model: large-v2

 Thank you very much.  Hello, everyone. Sorry for the glitch of the projector.  So thank you for our trooper for having us over here,  especially talking about our research to a room of  cybersecurity experts.  So we are all from a cybersecurity company called  SIGGRAPH from Taiwan, so we are trying to apply the  modern so-called AI or I prefer the machine learning  techniques to tackle the complex cybersecurity problems.  So here are today's authors. The first one will be John.  So he's the deputy director of the security research at  SIGGRAPH and he's the founder of the Taiwanese local  hacking group called UCCU and he's also very patient  about sharing his technique and his research at various  of the technical conferences such as the Black Hat and  Code Blue Japan, Hikon Taiwan and also Hacking the Boss.  The second author will be my colleague, Jerry. So he's  the senior staff of the data science at SIGGRAPH and  he's also in a very complex graph-related data and  also he's very patient about probabilistic. So anything  regarding to the probabilistic, he loves it. So  Bayesian-based machine learning techniques, he's one of his  favorite. And finally, it's about me. So I'm the director  of the data science at SIGGRAPH and I'm also an amateur  CTF player, so once I got some free time, I will join  some games. And I'm also very patient about to share  my research finding at various of the places such as  also the Black Hat, FIRST CTI and SINGCON and S3SAR.  So because we already have some time, I will  just make it very quick. So here's today's agenda.  So first I will give you a very short introduction about  the current issue of the attack path analysis and also  the difficulties of the situation of the  attack path and also our contribution. And then  Jerry and John will give you the method we propose  and also with some real-world cases. And finally, I will  give you some conclusion and also the takeaways.  Okay, so during my talk, I enjoyed the interaction,  so let's start with some very, very simple quizzes.  So as you can see on the screen, it's a very simple  quiz. It's a very, very simple quiz. He's not a user  one, regular user, so he's obviously members of the  domain user groups, right? And he also got some  permissions to the domain policy. So now you as an  AD expert, you should be fix this quite easily.  So which permission should be removed? A, anyone?  A, no? Okay, I got one from Michael.  C and D. Okay, so a lot of people  think that it should be D. I also  agree with the answer which is D. So for those who have  the D answer, please, can you also solve this  in seconds? Yeah, it's pretty hard, right?  So this is the actual problem that we are facing right now because  AD is very, very complex, especially for very large corporations, right?  And hackers also know that. So I just  Googled around about the last five years what  the ransomware group that want to tackle about  AD, they just want to attack the AD and once you  own the entire domain, they can dispatch the ransomware as well.  So in order to fix that, I quoted from the  report from the Business Wire, so about 25%  of the enterprise, they would really  like to increase their budget regarding to the AD, so they invest  a lot of money on it. They buy the solutions, they hire the right people  to do that. But here are the  ugly truths. So because we are a Taiwanese company,  so we got a very close partner with the DevCorp who is also  a very good rating company and they are sophisticated  in security research in different types of attacks.  So here is the statistics they give us. So during their  rating exercise, there will be hundreds of their rating exercise  across different sizes of the enterprise.  70% of the AD, they can be successful or be compromised  during their rating exercise, 72%. Meaning that  even you spend a lot of money and you buy the solution and hire the right people,  they can still take your AD. The most  terrifying thing is that they can also update the statistics for us.  So on the average, during their exercise, it only takes them  11 and a half days. So it's less than two weeks they will take over your AD  and it's done. Can you imagine? Because sometimes  the contract can be like one month or two months. It only takes them  two weeks to finish their work and they also got a lot of pay, right?  And in the worst case, even at a very large corporation,  it only takes them three days to finish their job. So this is  how horrible about misconfiguration in the AD  and also how to effectively mining the real  attack paths from the complex AD environment.  So what's really going on? Because even though you have the right people  in your team, but our resource is limited.  Once you got a really complex environment like this one,  it's really hard for you to prioritise all the possible attacks, right?  So it's essential for us to get  a real visualised tool and also a prioritised tool  to make sure everything is doing right.  Fortunately, right now we got some real good open source tools.  So for the visualisation, we got At The Lounge and we got Forest Jewelry  and also famous Blahung and for the priority tools,  we also got the Pincastle, the Bluhung and also the Ponghong.  So all these tools can help you to do that.  So if that's true, why we are here?  So let me quote from the John Lambert, he said,  the defender thinks in list, so that's why we got all these priority tools  to help you to prioritise all the attack paths.  They think in the graphs, so as long as this is true,  hackers wins. So this is the real problem that we are facing  right now and this also brings up  today's issue that we want to tackle  during this talk. So first is that the scale of the  no matter the ACL or the relationship is so big, how can you  effectively calculate the entire  attack paths or find a remediation including  in a real large graph? And the second thing is that  because it's too hard, it's too large, how can you effectively  prioritise in all these problems? So that's why we are urging that  we need a new system, a new algorithm to fix the problem like this.  So the issue of the current analysis tool, I have to say  thank you for this really brilliant tools and  I love it, but they still have problems. So for example, for the  attack path discovery, among these tools, they are using a very traditional  algorithm. So for example, they are using a Dijkstra algorithm  to find a shortest path and they use an A-star algorithm, which is  a kind of heuristic based algorithm, so you have to write  up your own rules and trying to ask the program to do that.  So they got so much limited.  Even though they are able to produce some result, it's not even close  to a real whole picture and that's the problem that we want  to fix. So you might think, okay,  but they already give me a very cool visualisation,  why should I need a bird eye view of the entire AD system?  Here's an example. So in this example, it's really clear  for you guys, right? I got the two source S1 and S2  and I got a target D and there are  edges need to be removed and so hypothetically I can  remove these two paths to do that, right?  It's all based on the shortest path algorithm to do that, but  it's easy for you to miss a one  because this one is just one hop longer than the shortest path.  So you might wonder, okay, that's fine, I can do this  iteratively, I can do it ten times until  all the possible attack paths  are removed, right? But did you ever think  about how complex a real AD environment  can be? So here's a real statistic  from one of our Fortune 500 customers' data.  It's just a branch of their AD set up. So  they have approximately 25,000  AD objects and also for the edges they have around  150,000 edges like the ACL  permission and all that stuff. The potential source of this branch  they got a 24 source, so that means that they have  a 24 open facing service or vulnerable target  that we identified and the potential target they got  they got a 53.  Another interaction, so how many  possible attack paths do you think in this?  Okay, so we got billions, good. Any others?  Tens of billions, anyone?  Okay, so the truth is that you got  4,200 trillions of paths and you  got 4,200 trillions of AD objects.  So you might wonder how can that even possible?  Yeah, it's actually impossible to calculate them all, so we  actually do the maths. We actually do the maths, so we do the  random sampling and trying to know, trying the best fit of the  closest distribution, so it can be even larger than that.  So that's the scale of the problem that we are facing right now.  In the following section I will hand over to John and he will give you the current  of our current facing and later the jury  will give you the system design.  Hi, I'm John and I will  explain the issue we encounter when doing our analysis.  Before I start introducing the problem  just to mention there are several ways to mitigate the  solving the problem by the shorty path and  scan again by rapidity. Or you can manage  the ACL and use a manager structure like the AD3  tier model. Last year there was a talk called  Hidden Pathways in True Plans, which is a discussion  about the ACL manager plan. If you are interested in using a manager  structure to solve the ACL problem, maybe you can reference this  talk. But in our field we want to solve  the attack path problem in as few attacks as possible  because we don't want to do the repeatedly scan and remove the path  and scan again.  When we analyze, we often encounter the three common problems.  These three problems  depend on each other and must be solved one by one.  The first problem is a giant possible path.  We use  a project called Backblot. Everyone knows Blahunt  and maybe you use a Backblot project  because this Backblot project will create a chaos  active directory attack environment.  To easily  illustrate how complicated the attack path is,  we only match  the attack path length of just three. But even in  such attack path length, you see the  attack graph is already too unreadable for humans.  So we want to increase the  attack path for our Neo4j still running on today.  We want to show how  currently an attack path is impossible to process  today, but we use our algorithm  to cluster the attack paths. We calculate all the attack paths  and then cluster within  a cluster. You can see  such a chaos environment like Backblot  where you can analyze the critical attack paths.  Each circle represents a cluster  and that means the node inside the cluster can control  each other. So if you like,  we have multiple nodes that can retreat to DNS admin,  but we want to see the detail in this part.  Zoom in a little bit to see  how exactly  which node can control the DNS admin or how many  groups can control this account and to the DNS admin.  So why we say it's a giant possible path?  Because in the algorithm math, if you want to  emulate all attack paths to this nation,  it's an NP-hard problem and Jerry will explain  some of the algorithm later.  If we have all attack paths, the second problem  is because a calligraphy is already unreadable for humans.  So we want to remove the attack paths, but how should we do?  We need to determine which  edge or node should be removed for most effective.  So we need to ensure the target attack path  and the target node are fully removed from the graph.  So like this one attack graph,  we should remove this three edge, right?  Actually we need to fold the graph, why? Because maybe we have  Oh, sorry.  Maybe we have this  three edge should be removed, but also this one  or this two.  So it depends on the IT or IT manager,  they want to remove which permission.  So we want to find which edge should be removed first.  And the third problem is sometimes  some edge we don't want to remove.  For example, we have a GP link or  actually this edge we now remove in the first consideration  because this kind of edge are naturally  generated after system setting.  Like this one, we have user  and user are member of helpdesk.  In algorithm you remove one edge and also  equal in this edge, so you can remove one of them.  But actually in the IT perspective  we don't want to remove the GP link,  we might want to remove the generic permission for  helpdesk can modify the GPO.  So the third problem is  edge preservation.  We believe if we can solve both three problems,  we believe we can address the issue in the attack path analysis  by simplifying the complex graph and the provider combination  for human can understand.  So Jerry will introduce our proposed method.  I will hand it over to Jerry.  Hi, I will cover the following system design part and algorithm behind.  Basically our system can be divided into four different parts.  First is the graph representation of the  AD network. Then with the graph representation we will do  permission group analysis which tries to find  what we call a control causal graph and the ultimate goal of this graph  is that one can automatically identify the attack graph  from it. Here the attack graph is a subgraph  of the original graph that contains some vulnerabilities to attack.  The last step of our system is  using the attack graph to find remediation plans  or in other words the set of edge removals to  block all possible attack paths. I will go into the details  of each part. First an AD network  represents a graph which has two elements.  First is node and another is edge. Here a node  actually corresponds to an assay of an AD network which has  a unique identifier along with some additional information such as type  name or tier. And the edge is a permission between two nodes.  So next with the graph representation here we will do  the permission group analysis which tries to find the control causal graph  which is shown on the right hand side of the figure. Here the  control causal graph is defined to be a set of equivalent nodes.  And here the equivalence of two nodes means they have exactly the same set of  controllable nodes. And the control causal graph is just a  representation of the causal and the control relations in between.  I will go into the details quickly.  So here is what we define as control.  First is from the edge perspective.  We actually categorize edges into two types. First is  what we call a control edge such as a generic all and another type  of edge is access such as member of or primary group.  And the properties of these two types of edges are as follows.  First both edges are transitive. From the  top two of the figure one can see that  that's the yellow. The yellow means the access edge  and red means the control edge. So from the top two figures  as you can see one can access two and two can access three. This implies  one has the ability to access three. And so is the case for  the control edge. Now the third property of this  definition is that control is a more powerful permission than access.  So in the third figure if no one can  control two and two has the ability to access three this implies  one can access three. And the last and most important  is that access along with control implies direct control.  So in the last figure if one can access two  and two can control over three then this implies one has the ability to  control over three.  About the node side we assume that every node has the ability to control over itself.  So based on this definition one can actually enumerate all  controllable set of nodes for each node.  Then using it to identify the control cost graph shown on  the top right.  So with the control cost graph we can actually use it  to identify the attack graph. Here we define attack  as the privilege escalation. And in terms of control it means  if there's a node which may be of tier two and it can control over  another node maybe tier one or tier zero then that's an attack.  And so from the control cost graph one can easily identify  such attacks. For example the first class is that if there's  cluster on the left hand side on the top of it  if it has a mix of two nodes of  different tier then there's an attack. Another case is  like there's a control relation between clusters from low tier  node, from a cluster with no tier node to a cluster with high tier node  then there's also an attack. So from the control cost graph  one can actually identify all possible sources and targets  that may form an attack. So one can use it to  identify the attack graph.  So now the last part is that once we found the attack graph we need to  fix it. So here's our system.  We actually designed it to be a relative and interactive process  which roughly works as follows. First we'll do a  recommendation to an expert. Say maybe some edge should be caught  then after the expert reviewing it he or she may need  to decide whether adapting the recommendation plan that is remove  such edge or set it as an uncountable constraint.  So in either case the  graph will be modified and so we'll need to feed  the modified graph into our system and redo analysis and provide another  edge recommendation to the expert. So such process will loop over  until all the solvable attack paths are blocked.  So I'll go  into details. First our recommendation is based on the  min-car algorithm so I'll give a brief introduction to it.  So a min-car problem aims to find the minimal set  of edge removals for blocking all paths from source to target.  As shown on the figure the red node means the source  and the purple node means the target. So after applying the min-car algorithm  it may find a minimal set of edge removals  with two edges which are those with  Caesar on the side.  As previously  John mentioned sometimes there could be permissions that are  not allowed to be caught so that's why we call it a constraint  which may be determined by the expert or some natural design.  So in such case to apply min-car  with constraint one can actually set the cost of removing such  edge to infinity which kind of informs the algorithm  to not choosing such edge.  However there's one situation that even we set  the cost of removing such an edge to infinity the min-car would also  fail. That is if there's a direct path from source to target  that are composed of uncoupled edges. As shown on the figure  there's a path with blue edge linked from  red node to the purple node. So in this case min-car cannot  work. So here we study the constraint min-car problem  which is as follows. We want to find a minimal set of edge removals  that block all codable source to target paths.  So here to clarify  the idea I manually enumerate all possible paths  from the previous example. So actually there are 13 of the  attack paths and among which 12 of them are  what we call a codable which means those paths contains at least  one codable edge which are colored with black. And only  one path that is uncodable which is shown on the red block.  So the constraint min-car problem wants to find  minimal set of edge removals for blocking all paths  in the black block while ignoring the one in the red block.  So here's  how we solve the problem. The core idea is that we try  to do some isomorphic transformation to the graph to map into  another view and solve it in this view then map it back  into the origin.  So here the isomorphic means  the transformation preserves the path structure which means if there's  one path from source to target in the original graph there's also one in the  transform graph. And how we do it, actually there are two  operations involved. First is we do the null branch and  rewire edges. Which abstractly speaking  is try to separate the paths that are using codable edges  and uncodable edges separately. So  the example shown on the slide, a dark red null has an incoming  edge that is an uncodable edge  and also has an incoming edge that is codable. So we branch  this null into two and rewire the codable edges for one  and uncodable edges to another.  Then the next step is that we try to  transform the consecutive uncodable edges into a direct  link. So for example, there's a path  segment that's routing from red null to dark red null  and to the purple null using uncodable edges.  So we transform it into a direct edge from red to  purple null which actually corresponds to the path of  the original graph shown in the block.  So with this modification one can actually  remove all the source to target  edges without affecting all the others due to the isomorphic  property. So now with this transform and modify  graph one can actually apply MinCon on it and find a solution  and then map it back into the original graph.  Now the last part of our  algorithm is the prioritized recommendation. Since  the constraint MinCon finds the overall solution  at once, the expert need to decide executing  the remediation one by one. So here we need to design a priority scoring  for experts. So here we  design the scoring to be kind of source oriented.  So for each edge in the  constraint MinCon solution, we score it by  the summation of the necessity of such edge to different  sources weighted by the risk score of such source.  So here the  first and the R of S turn reflect the risk of exposing  attack paths to different sources. So here we design it to be the  count of the source facing different risky indicators such as  corrosion, planned text password, or password attempts.  And about the necessity turn, since  it should reflect how important an edge involved in  forming the attack paths from source S. So here we design it to be  the fraction of all MinCons from S  that contain such edge. To be more clear about the idea  we can see the top figure on the left hand side.  Here, in this case, there's one  single source S and two targets. And with applying MinCon, one can  actually find two equally good solutions. One with  black scissors and another with orange scissors.  So now let's see the three different  edges. So the rightmost edge, it  is actually required by both of the two MinCon plans. So the  necessity score will then be one. As for the other  two edges, it is required only by one of the two MinCons. So  here the necessity score will then be 0.5.  So combining these two, one can actually compute  the priority score of different edges.  So that's basically the algorithmic part. So I'll hand over  to John for the CAT study.  Okay. And I will show the CAT study.  I will show in the same environment the  difference between the human analysis and the  algorithmic result generated by the algorithm.  We compare the different results. Human do the analysis first and  compare what's the difference between the effort they see the  algorithm generate result.  And this CAT study are best for real customers.  But all the information is being identified. So that's not a real name.  If you see a similar name in  your customer, that's another same customer.  CAT study 1 is a lengthy attack.  Just like this title, we usually  will encounter a long attack.  Quick background on this CAT study 1. It involves financial  organization. Even in a financial organization, the AD environment is still chaos.  And this AI has over 60,000 AD  object. And our analyze found there's 140,000  AD edge or some different  edge. And we found there's 450  attack paths can reach tier 0 in just one step.  And in the right-hand side, we can  this is our algorithm diagram.  And there's a legend and the color  and means different. Like the gray one is  OU container. And the red one means source,  like a user or computer. Why we choose  as a different object? Because we think a user and a computer can  initial attack. But the OU container cannot initial attack.  So we use a different legend. And the purple one  is a tier 0 access. And there's  a cluster. You can see there's some  circle cluster has I symbol, which  indicate the path not identified by the analyze. So let's  zoom in a little bit.  So you can see in this CAS, the cluster not  identified by the analyze are mostly focused on the left side.  So why is this path not analyzed by  the human? Because the attack path was too long.  Within each cluster, the object of the minimum  control, another object, may be the attack path of the  length of the 2, 3, or even 4. So like this has  2, this has 3, attack path is 5.  And maybe this is 1. So even in this  attack path, the attack path length  is already too long. So the human is  challenging for human analyze. So let me deep dive  about one of the example.  So there's a user has member of the group called  unlock group. This unlock group can multiple change  the password of the different user account.  And most of user account are the admin, which  is member of the admin OU. And the admin OU can control  the OU call users, which they have  account used for the web AD service account.  Yeah, they use the web to manage their  active directory. I don't know why, but they customer their own solution to  do this. And actually there's  account called Jungle. Unlock group also can control Jungle.  And Jungle can  modify the OU's policy. And OU's policy can apply to  the EU and apply to the contents of user and  finally also impact the web AD account.  So why this attack is not identified by the  analyze? Because they usually  we usually focus on the single  diagram. And the transition  tool provide the shortest path method. So because we want  to easy to screenshot for our customer. So the tool  hey, shortest path. Okay, I screenshot. But actually there's  another attack path not can emulate by the  shortest path algorithm.  So the algorithm use the shortest path algorithm. So they overlook some  attack path. And because the attack path is too long  so we think, oh, this enough  can easy understand by our customer. So we choose the shortest path to  make the screenshot more easy to understand. But also  in the same time we miss some attack path, important attack  path should be removed. So next time maybe we remove the attack  this kind of attack path, but we need to discover the new attack  path in the next game.  So if you are analyzing the attack path  you should carefully to handling the lengthy attack path.  And the second case study is a hierarchical permission inheritance.  These are different customer  and this customer is a transportation company with a large size.  And this company has a 38 AD object.  And there's a more, the SEO setting is more  complicated than previous one. And this  diagram, we can identify which path was overlooked by the analyzer.  Let's zoom in a little bit. You can see  the most identified attack path is  focused on the left side  corner on this diagram.  And in this case study the unidentified attack path  by analyzer including a multiple permission, like the  group include another group as a member.  And the GPO can provide, someone can modify the GPO  and the GPO apply to a multiple layer OU.  Like this kind of scenario is very hard to analyze  in the graph. So I will deep dive  about this kind of scenario.  We have four nodes as  a source we want to, we see, oh, these four nodes  can impact the imported computer.  But actually in the analysis, they are not  just see the graph. In this kind of scenario  actually they need to consider different conditions  in the node. When analyzing attack paths  they are not just focused on the edge, but also the  node property, like the GPO in force, OU has  settings such as its block inheritance or SEO protect.  So you need to consider the multiple conditions.  So this is a complicated, can lead to analyze overlooked certain paths.  So let's have a 10 second, maybe we can take a look  about which red node can really impact to the  imported computer.  So because the analyzer need to  check, oh, this one has in force, so this probably can  impact the imported computer, but this has  its block inheritance is true. So they need to consider, well,  does this impact to this imported computer?  So actually the only GPO one  SRV and GN can impact this imported computer.  So this is challenging for the analyzer, because  they need to consider, they check the graph and they need to check  node one by one. So it's challenging for them.  So back to this diagram, so because our  analyzer overlook one node setting  and they need the multiple cluster  not identify when they generate report to  our client.  So the cast study 3 is  prioritizing attack path for mitigation. So same  customer with cast study 2, we generate  all four attack paths to material.  Actually there is a loop between the nodes,  but because our  line style is straight, so you may not be able to see the difference.  Just like  we explain our system design, our algorithm provide a recommendation  for the different perspective, like the initial attack potential,  like you have, this account has  as a previous thing or plan test in the past work.  And also provide information about  how many user can sue this edge to the  material access. If there is 1,000 user can use  this edge to the material access, we should remove  this edge first. So in this  cast study, our analyzer based on the initial risk  select 6 node, because the first they select  this node to the customer and ask them, they want to  remove. So we use our algorithm  select the same 6 node and  our algorithm tell us, you should remove this  highlighted edge and this 6 node will cannot get into the material  access. So I will introduce  about the recommendation set about  this highlighted edge.  This one, the CA-ops is a node we want to  keep permission, because it is a customer  service account, they use this service account to manage  the certificate template setting.  And the regional user is a node we want to remove  from the graph. So our recommendation set  say, oh, you can remove this  edge, so remove this 3 and this 4, also  GP01 can change your CA-ops permission, so this one should be  removed. It seems like it is easy and it makes sense,  but in math it is not make sense, because if you want to  ask the regional user to find the graph, actually  you can remove this 2 set, but in IT perspective  this 2 edge should not be removed.  And the second recommendation set is  event log reader. They have the event log reader can control  the multiple, has the ACL setting for multiple  computer. And the multiple computer is a member of the domain  computer. And domain computer can enroll the 4 certificate  template. And this 4 certificate template has ADCS  ESC1 from the BAT enable. So we want to  remove the enroll edge for this kind of 3  certificate template. And in the same time, there is  a GPO deny user can modify the  group policy called IE11 policy. And IE11  policy apply to the 4 domain. Because this is a  misconfiguration and our algorithm tell us you should  remove this one and not GP link or  member. So this recommendation set  is made just like analyze perspective  and this look like it is easy.  This recommendation set is easy, but the difficult part is  if you want to consider all the node  remove condition together for the  because you are just removing one node from graph is easy, but  you need to complete plan for  the mitigation, it's not just one edge, maybe 6 or  10 or maybe 100. So it's difficult for the  analyst. And the interesting part is  the user can just remove the path and rescan four times  before they obtain the same result as the algorithm.  So it's for human challenge because they are checking  the graph one by one and remove and scan  again, so for them it take a lot of  time. So user algorithm can save the analyst time.  Okay, and Georgie will do the  presentation.  Okay, guys, so I hope you enjoy our  research and if you don't, I just hope you don't  miss in the very complex algorithms and all those  things, but we want to bring some tech ways for you, so at  least you can have something to report back to your  company, so make sure you can get some money from your  company.  The perspective between the data science team and the  security research team is quite different. So for  security experts, they focus on misconfiguration, they  focus on how to remediate the possible attack paths, so  that's one thing. For the data science team, it's quite  different. For us, it's all about graph, so it's kind of  the same thing, but for the data science team, it's  actually quite different, because they produce quite  awesome results, right, so it's awesome. So I would  encourage you guys, if you are an AD expert, talk to your  data science team. If you are a data science team, talk to  your security analyst and make sure you don't fight  together, okay. It happens.  The second thing I want to share with you is to have an  entire broad view of your AD environment. So John already  gave you three different types of the cases. In the real  world cases, on the real good enterprise, they have  hundreds of IT guys and admins and all those things, and  they still make mistakes. So that alone, you know, very  small or medium corporations, that's the big problem.  The third thing I would like to share with you to end it  up with this talk is that please review your AD with a  complete view as soon as possible, and here are some  statistics I would like to share at the end of this talk.  By applying all these statistics collected from our  customer, by applying our solution.  So the first thing is that the actual number of tier 0 AD  times is on average 5.8 times more than the admin they  believe. That's crazy.  So I can give you a very quick story. So one of our  customers is a top tier semiconductor  manufacturer, and they produce, well, some are smiling,  yeah, yeah, I couldn't reveal the name,  yeah, but some, yeah, I'm from Taiwan, so well,  yeah, it never sounds, yeah, it never sounds like this, right?  So they are extremely rich, they buy all the solutions,  so, and they ask for us, you know, to do the, to perform  the, to help them to examine their AD. So before the  examination, they told us, George, come on, we are good to,  you know, good to test, and here's the list of our tier 0  account. It's just in one A4 pages, so it's like  10 accounts, and after we performed our algorithm  on their site, and we found there are more than 500  accounts that can control the entire domain. That's  disaster. So even there, you know, I see, so they are very surprised,  say, okay, I spent millions of, you know,  Taiwanese dollars to do the IT management, still  human can make error, especially for a very complex  AD environment, so that's why I will urge you to have a complete  view of your AD environment, to make sure there are no  cluster has been let off. So speaking of the clusters,  here are another statistic, also from our customers.  So on the average, from all the customers, hundreds of customers,  we perform the solution, and the exact same method  we just proposed. We uncover, on average,  12 clusters that is uncovered by the security  experts. So even though they already pay money to  hire another company to perform the AD solutions  to extend and help them to, you know, remediate all the possible  link, still we are able to find 12 uncovered  clusters, and please remember here, cluster means  a group of accounts, so it means it's more than 12  clusters, and we are able to find 12 uncovered clusters,  but only one account has not been found. So that's a lot,  right? And also, on the average, we  found that for each domain there are about  326 accounts that are not  missed or unfound by the security experts.  So that's why, once again, we emphasise the  importance of the AD solution, and so if you like  our talk today, you can, you know, implement  the exact same method, and we hope it can  help you to find all those clusters or accounts.  And I know you guys are hungry, so we are just one slide away,  okay? So lastly, take away is that  we are calling for the joint research, so we are not here to  just talk about AD, because AD is hard, and we already  demonstrated how complex it can be, but  it's hard, but it's also very fun in the perspective of the  research part, right? So we are calling if  you guys are interested in the similar research that we  just performed, we will be around these two days,  so just talk to us, and we are very happy to talk to you, and also  explore this research and bring this research to next level.  We'll be thrilled to do that. So thank you very much today, and  you guys can have your lunch now. Thank you.  APPLAUSE  Thank you guys for the really interesting  talk. Are there any questions?  Hi, yeah, so I studied at the Faculty of  Mathematics and Physics, so I really appreciate the graph theory  in the talk and stuff, but as a security  analyst, when using Bloodhound, do you maybe have a plug-in which  would apply the clustering and the min-cut algorithm  so that I can visualize it during the analysis,  maybe? Thanks.  Okay, thank you. So because we already revealed all the details about  our algorithm, and we are intended, but I cannot give you  exact data, but we are intended to share all these findings  in the white papers, so it will give you a very clear set of how  we actually do it. So for example, the one you mentioned, how we actually perform the  clustering, how we apply the min-cut on a constrained  environment, that's all so-called secret sources  we are trying to publish. But you know, as a company, we got a lot of  red-hat thing, you know, you have to handle, but we aim to do that.  Yeah, thank you.  Any other questions?  Thanks, so kind of related  question, since you are using graph theory, can you actually  prove it, that the graph transformation is without loss?  I think that will be one of the secret sources. Second  part, do you think the two-dimensional is the right way to  visualise it, or maybe higher feature vectors? Is there some  research on your side?  Thank you very much.  That's a very brilliant question, and we also think about it. So for the  first question, I will leave it to Jerry, he will try to answer that one, and I'm  going to answer the second one. So yes, we do want to expand this  from the two-dimensional to a higher dimensional, maybe three-dimensional  as well, and actually we are already working on it.  Hopefully we can have another next year, maybe if we got lucky  enough or privileged enough to be invited by Trooper again, we will show our  latest research result, but yes, we are going to do  that. And for the first one, I will hand over to Jerry.  Well,  to ensure that we won't miss any attack,  so we follow a rigorous definition about what's  an attack. So in our scenario,  we define attack as a control flow from  node that is of low tier, maybe tier 2, to another  node that maybe tier 0, tier 1. And from the  bird's eye view, we can actually see the whole graph.  So I think based on the whole  graph and the definition, we can actually identify all possible  source and target pair that may form  an attack.  Any more questions?  Okay, well it's time  for lunch. Thank you.