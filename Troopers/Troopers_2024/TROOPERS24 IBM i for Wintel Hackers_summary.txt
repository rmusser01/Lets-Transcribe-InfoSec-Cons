**IBM i for Wintel Hackers**
- **IBM i**: Brand new name for AS400, an IBM product from the 1980s.
- **Wintel**: Refers to Intel-based Windows-like systems, but also covers Linux and Unix.

**Introduction**
- Presentation focuses on **penetration testing** IBM i systems.
- **Silent Signal**: Co-founded by speakers, specializing in IBM i platform since 2022.

**IBM i Overview**
- **Mid-range or mini-computer platform**: Provides high reliability and backwards compatibility.
- **Critical system**: Used in financial institutions, telecommunications, and retail sectors.
- **Affordable to small and medium businesses**: Over time, these businesses grew, making IBM i prevalent in large corporations.
- **Revolutionary features**: Object-oriented operating system, single-level storage, integrated database.

**Attack Surfaces**
- **Security levels**: IBM i can run on different security levels, with level 40 providing meaningful modern security.
- **User domain**: Exploits will focus on user space and above the machine interface (byte code interpreter).
- **Authorities**: Equivalent to access control entries, defining who can perform actions on objects.
- **Libraries**: Object containers or namespaces similar to directories, with a single-level structure.
- **Library list**: Default lookup order for object references without a specified library.

**Privilege Escalation Techniques**
- **Adopted authority**: Similar to set UID on Unix-like systems, allowing programs to inherit owner's privileges.
- **Research methodology**: Using integrated database to filter executable programs with owner privileges.
- **Crufax package vulnerability**: Exploiting unqualified library calls and profile swapping to gain elevated privileges.

**Command Injection**
- **Service programs**: Objects exposing reusable code, similar to shared libraries and Windows services.
- **Privilege escalation via service programs**: Exploiting service programs with adopted authority and trivial exploitable bugs.
- **Java code injection**: Discovering vulnerable code sections and exploiting them for command execution.

**Additional Privilege Escalation Methods**
- **Exploiting system procedures**: Using procedures to create files, directories, and gain unauthorized access.
- **SQL injection**: Blurred lines between database and OS components make SQL injection a potential vector for remote code execution.
- **Dynamic tools**: Effective in finding vulnerabilities at all layers of the software stack.

**Remote Code Execution**
- **DDM (DRDA) architecture**: Unauthenticated remote code execution vulnerability discovered through dumbfuzzing.
- **DRDA protocol**: Standard protocol for interconnecting databases and applications, allowing command execution after authentication.
- **Fuzzer**: Modified to ignore sign-on packets and focus on DRDA packets, leading to successful exploitation.

**Defense Strategies**
- **Lack of interaction between IBM i and other IT components**: IBM i administrators and security teams need to collaborate and exchange knowledge.
- **Common configuration issues**: Default passwords, weak passwords, misuse of limited privilege on user profiles.
- **Exit programs**: Automatically executed programs hooked to system events, similar to antiviruses and EDRs, can be effective if properly implemented.
- **Custom defenses**: Proposed canaries on IBM i and configuration hardening to reduce attack surface and enhance security.

**Conclusion**
- **Lack of telemetry**: Difficulty in determining the presence and methods of attackers on IBM i systems.
- **Need for stronger integrations**: Facilitating the exchange of knowledge and improving security measures.
- **Final demonstration**: Chaining remote command execution and local privilege escalation to create a new user.