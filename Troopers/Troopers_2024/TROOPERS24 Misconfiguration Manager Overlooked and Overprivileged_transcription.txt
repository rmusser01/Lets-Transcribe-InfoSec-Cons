{
  "webpage_url": "https://www.youtube.com/watch?v=GhT6nPes1h0",
  "title": "TROOPERS24: Misconfiguration Manager: Overlooked and Overprivileged",
  "description": "Talk by Duane Michael and Chris Thompson - June 27th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/nvp3zs/\n\nMore impressions:\n  / wearetroopers  \n  / ernw_itsec  \nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 3697,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240909"
}

This text was transcribed using whisper model: large-v2

 Hello, thank you.  So yeah, we're going to talk about SCCM, we were actually about to ask that question,  so he got a little bit ahead of us.  So we have a QR code up here with the slide deck, so if anyone wants to download that,  follow along, it's hosted on the GitHub repository that we're going to talk about, so feel free  to do that.  If you don't grab it this time, it's also at the end.  So my name is Dwayne Michael, I'm a managing consultant at Specter Ops on the Adversary  Simulation team, I have contributed, wrote some code for Sharp SCCM, my handle is subatomic  on all the different things.  At Specter Ops, I do pentests, red teams, also teach some of our courses like red team  operations.  I'm Chris Thompson, I'm a principal consultant at Specter Ops on the Adversary Simulation  team.  I wrote Sharp SCCM about three years ago when we first started this research, and I also  wanted to introduce our coworker Garrett Foster, who is a co-author of the Misconfiguration  Manager project with us, couldn't be here today.  If you've heard of SCCM Hunter, any of the red teamers in the room, that was Garrett's  tool.  So we were going to ask a couple questions, I wanted to see who in the room is a defender?  Okay, about a third, maybe some people didn't raise their hands.  How about attackers?  Okay, probably about 50-50.  And both, who's both?  There we go.  All right, I think that's everybody.  Cool.  So who's heard of SCCM?  Pretty much everybody.  Okay, cool.  It seemed like maybe a quarter of folks were using it, or at least knew that they were  using it.  Who's not sure if they have SCCM at their organization?  All right, cool, we'll help you out.  For those who do use SCCM, who has a remote site database or SMS provider, or knows if  they do?  Okay.  One, this talk is definitely for you.  Who's got a network access account?  Anybody?  Client push installation?  Red teamers in the house, who has compromised an Active Directory domain or forest through  SCCM?  All right, five, six hands.  Cool.  We're going to teach you a couple more ways to do that.  All right, so we'll start off with going over the agenda.  We're going to cover a lot in this talk.  It's probably best to approach this talk as kind of a sampling of what is possible and  what's out there, because there's just too much.  We could talk about this for probably days and still not cover all the techniques.  So we're going to start off with an introduction to what SCCM is, what it can be used for,  how we can abuse it as attackers, why it might be interesting for us, and why it might  be interesting to pay attention to these things as a defender or an admin.  So we'll expose you to some of the most common SCCM attack paths.  We'll talk about things like some of the war stories or some of the stories from the field  that we've seen on real world engagements in real enterprises.  We'll do a couple of demos.  So we'll demo what it looks like to dump network access accounts.  We'll do a hierarchy takeover demo, and then we'll also demo an audit script that we have  that you can use to audit these misconfigurations in your environment.  And then finally, we'll introduce the actual misconfiguration manager project, which some  of you may have or may have not yet seen.  What this presentation does not cover is we don't have walkthroughs for everything.  We'll talk about, we'll show you all the techniques that we've documented and written about, but  like I said, we just can't cover everything here.  We're not going to cover specific defensive walkthroughs in this talk, but we do have  those available online.  And like I said, this is a sampling, so we're not going to give a comprehensive treatment  of everything.  So we do have much more detail in the repo that we'll talk about.  All right.  So it seems like most people here are at least familiar with what SCCM is, but for those  that are not, we'll just kind of set the baseline and talk about what it is.  So SCCM, currently known as Microsoft Configuration Manager, it's an endpoint management platform.  It's used to manage all of the things in your Windows enterprise.  So you can do things like deploy applications, manage software updates, install operating  systems, and manage things like compliance settings as well.  So pretty much anything that you need to do on the endpoint, you can do through SCCM.  Again, we're calling it SCCM, but it's currently called Microsoft Configuration Manager.  So the old acronym or the old name was System Center Configuration Manager, so they're interchangeable.  The subreddit is still named SCCM, so we'll change it when they do.  It's official until then.  All right.  So as an attacker, why should you care about SCCM?  So I would say the vast majority, this is not a scientific number, but I'll say 99%  of Active Directory environments are using SCCM.  So if you're a pentester or a red teamer and you're in those environments, you're probably  already operating around SCCM in some way.  So you'll probably encounter it.  SCCM can be used, so it's not tied to Active Directory directly.  So you can use a single SCCM instance to manage multiple sites or multiple forests.  So you can kind of ignore that entire AD hierarchy that you're used to in SCCM.  So this could be useful if you're operating in an environment where maybe you have to  move from one forest to another.  Maybe there are no trusts between them, but they're using the same SCCM site.  You can hop between those forests because they might have certain things configured,  which we'll talk about.  And it's commonly misconfigured.  So that's what we're here to talk about.  There's a lot of insecure defaults, and it's old.  It's 30 years old.  So over the years, there has been a lot of advice from the community, from admins that  have written about how to do things that are usually just the easiest way to do something  rather than the most secure.  So as a defender or an admin, why should you care?  Well, just building onto what I just said, all those are reasons that you should care,  of course.  But again, you're probably using SCCM if you're working in an enterprise that has Active Directory.  And then these misconfigurations that we're going to talk about can introduce some pretty  serious vulnerabilities that, like I said, they can lead to domain compromise, forest  compromise, remote forest compromise.  So it's definitely a good idea to start looking at this stuff.  All right.  So credit to Karsten for this diagram.  So SCCM hasn't been super popular in the offensive world.  But over the years, there have been a couple nuggets here and there.  So SCCM is 30 years old, like I said.  First released back in 1994.  There have been a lot of releases and name changes over the next couple decades.  And then around up here in 2012, Dave Kennedy and one of his colleagues did a talk at DEFCON  just talking about using SCCM to compromise the rest of an environment.  So basically, if you could compromise SCCM, you can probably compromise other stuff.  And that was really the first indication that people were looking at it offensively.  And then over the next couple years, you can see there were a couple other blog posts.  Some of these were more defensive focus using SCCM for incident response, things like that.  And then one of our colleagues, Matt Nelson, and some of our other colleagues at Specter  Ops started looking into it back around 2015, 2016.  And after that, it kind of went dormant.  And back in 2021, Chris and I were on a red team operation.  And we had the use case of trying to find where certain privileged users were logged  on and we were like, that should be possible with SCCM.  And that kind of sparked Sharp SCCM and everything that we're going to talk about today.  And so then in 22 and 23 and 24, there's been a lot of blog posts from both our colleagues  at Specter Ops, but also in the community as well.  It's getting a lot of traction out there in the offensive community, which is really awesome  to see.  All right, so before we dive into the attacks that are possible due to the misconfigurations  in SCCM, I want to just kind of get everybody familiar with some of the terminology.  It can be somewhat confusing.  A lot of things are named very similarly.  So a hierarchy in SCCM is the instance, it's the full installation, it's the security boundary,  kind of like a forest and Active Directory is supposed to be the security boundary.  A site is an environment that provides services to a scope of client devices and clients and  devices are two words for the same thing.  It's systems that are joined to configuration manager to receive updates, policies, download  software packages, things like that.  And in our offensive use case, it's kind of like having a C2 agent on every machine.  The primary site, there can be multiple environments, is a site that the clients are joined to.  That is where they receive policy from, that's where they download software from.  And the primary sites are administered using software called the configuration manager  console.  If you're an admin, that's the software that you use.  That's pretty much the one stop shop.  Primary site server is kind of like the controlling system for every primary site, has a site  server, all of the messages pass through this system between the different roles that  servers have in SCCM and it's also just referred to as the site server.  So the site server is the controller and the site systems are the other servers that host  roles in SCCM.  So kind of confusing, but if we say the site server, we're referring to primary site server.  And the site database server is where the database is hosted, so that's where all of  the client configuration data is housed, policies, where software is located on other  machines, things like that.  And also where administrative roles and assignments are stored.  So that's where things like administrative users are defined.  So there can be multiple tiers in a hierarchy, the highest tier being a central administration  site.  This is optional, you don't have to use one of these unless you have more than 150,000  devices on the network.  Microsoft recommends just using a primary site if you have less devices than this.  But you can have a central administration site and then multiple primary sites.  A lot of organizations will do this to have client devices update their software for different  time zones so that it's when people are offline for the day, things like that.  So we see it pretty frequently.  And each primary site and the central administration site have their own site database.  Secondary sites, sometimes we see them, they contain a partial copy of the database and  they're usually at a remote office location or somewhere that has terrible bandwidth,  so that the primary site server can push software out there once and then client devices in  that location can pull that software down over a more reliable connection.  This is what that type of hierarchy might look like with central administration site.  At the top, two primary sites.  Our client devices are going to be joined to those primary sites, but the client devices  may or may not receive policy and software from a secondary site.  The takeaway here is just these environments can be pretty complex to manage.  You might see a lot of these elements if you're a consultant who is looking at these environments  at different organizations.  So a couple site system roles that we're going to talk about.  So these are the other servers.  So we've got the primary site server, that's the main controller for SCCM, and these roles  can be installed on that machine or they can be installed on a remote machine.  So the SMS provider is basically an interface for that configuration manager console software,  so the admin logs into config manager console, config manager console software contacts an  SMS provider over WMI or HTTPS, and then the SMS provider is what interacts with the site  database directly.  A management point is the client device's first point of contact, so clients are going  to report back to a management point periodically, they're going to send their inventory.  So yeah, they're going to retrieve policy from a management point and then a distribution  point is where the software is actually housed for them to download and install from.  So they'll contact a management point, say hey, checking in, management point will say  I have this task for you, download the software from the distribution point and install it  at this time.  This is a diagram of the communication protocols that exist between these systems, so we have  our clients here, they report up to a management point, say hey, can I have some policy, if  you have anything new for me, that is going to be controlled by the primary site server  and then they may download some software from the distribution point and admins are going  to interact with an SMS provider that may or may not be located on the primary site  server.  Not confusing at all.  Okay, so as you can tell, there's a lot of things, a lot of moving parts, and SCCM also  has a lot of accounts, which makes things even more confusing for admins.  So in these next couple slides, I'm going to talk about some different types of accounts  that are used commonly and often misconfigured that can lead to like a domain privilege escalation.  So, the first one is client push installation.  So client push installation is how that site server is actually installing the client on  a new computer or a new device in the SCCM site.  The other is the network access account, so this is the most commonly abused one that  we see.  And I'll get into more detail in the coming slides on these, so don't worry too much.  And then, here I say task sequence.  That's just because a task sequence is basically a sequence of execution steps that can be  run on clients, and so depending on how they're configured, there can be various different  accounts within task sequences.  So domain joint accounts are one that we see quite a bit, run as accounts, which as the  name implies, used to run as a different account, collection variables and things like that  can also store secrets.  Okay, so first we'll talk about client push installation.  So like I mentioned, this is how the SCCM server is actually installing the client software  on a computer to enroll it as a client.  So in order to do this, the server will have to copy some installation files over to the  device on the admin share, and then it will execute ccmsetup.exe, and then it will use  a configured client push installation account to execute that, and so as you can imagine,  that client push installation account has to be a local admin on the client, and since  we're doing this on every client or any new computer that joins the site, this account  is going to be local admin on every device.  So you see where this is going.  Okay, so as an admin, if you're in a large enterprise and there's a lot of computers  and devices joining your network, you probably don't want to manually handle that process  of joining computers or discovering that a new computer needs to become a client.  So SCCM also has this feature called automatic site-wide client push installation, and so  what happens here is the site server will discover these computers and automatically  reach out to try to install this client software, and so that's interesting.  That's a privileged account authenticating to a potential SCCM client.  So we can abuse this by spoofing a new SCCM device.  So if we can spoof a device record, which is the message that is sent to the site server  to say, hey, I'm a new device, I want to become a client, if we spoof that, then we can cause  that site server to connect back to us, and we now have that incoming authentication.  And so this will be NTLM authentication, so then we could then relay that to something  else and authenticate as that site server or as that client push installation account,  which again is local admin on every client in the environment.  One thing to add there, you could also potentially crack the password, and multiple client push  installation accounts may be configured by the administrator, and the site server will  try each one until they all fail, and then it will try its domain computer account.  And the client push installation is just one method of installation.  There are much more secure methods of installation, like group policy-based or software update-based,  but because it is the easiest to set up, we do see this fairly frequently.  All right.  The next account is the network access account.  So we asked this earlier.  Who is using a network access account in an environment now?  Okay.  There were hands earlier.  Who has abused a network access account in an environment?  Okay.  Now there are some hands.  All right.  So the network access account is kind of a flawed design.  It's a domain account that is configured on the SCCM server, and its sole purpose is  for when a SCCM client is not domain joined, again, remember, it's not tied to Active Directory.  So if a client is not domain joined, it can use this network access account to reach back  and authenticate to a distribution point to retrieve software updates.  That's basically its whole purpose.  So it's actually deprecated.  Microsoft does not recommend using it, except for a few specific use cases, which are documented  in our project.  So if you don't fall into one of those very niche use cases, we recommend not using a  network access account.  It requires very minimal privileges, though, if you are using one.  All you need to be able to do is read that network share on the distribution point.  So the network access account is, or I should say, overprivileged network access account  is the most common misconfiguration that we see.  Sometimes this is just an easy button to domain admin because of how commonly it is overprivileged  and misconfigured.  So when you're setting up an SCCM site and you're setting up all these accounts, it's  really easy to just enter the same domain admin or SCCM full administrator account for  all of these things.  And we see that quite often.  And so how do we get this network access account in the first place?  Well, it's sent out as a secret in a computer policy that gets sent out to all clients in  the SCCM site.  And so if we can do a local priv-esque on a client, we can retrieve this policy and  decrypt the secrets, the network access account credentials.  Or if we can spoof a computer account or add a computer account to the domain, we can request  the policy and deobfuscate these secrets.  And yes, I said deobfuscate, not decrypt.  So when these get sent to the client, they're encrypted via DPAPI.  And so they're encrypted with the system DPAPI key.  So if you can do a local priv-esque, you can simply grab that key and decrypt it and  you have creds.  If they're overprivileged, maybe you're easy button domain admin.  Before they get received by the client, they are obfuscated in the actual policy request.  And we can make that request and then just deobfuscate it, which we have a demo for and  we'll talk about a little bit later.  That technique was written about by our colleague Evan McBroom, simultaneously Adam Chester,  both independently.  But really cool, really cool research that makes it pretty easy if you have the ability  to add a domain computer account, which is a default.  All right, so like I mentioned, due to so many different accounts being in SCCM, it's  pretty common to just see the same account used for everything, like a single SCCM account  that is just God mode across the board.  So we've seen domain admins configured as network access accounts, the SCCM admin, the  client push installation also used as the network access account.  We've seen accounts where it's not admin on all workstations, but it's admin on all SCCM  servers.  We'll talk about that a little bit more later in the stories from the field.  But like I said, we find this all the time.  Almost every pentest or red team that we've done since we started looking into this, we  find this.  So it's out there.  I recommend fixing it if you are working in an environment like this, but if you're pentest  or a red team, definitely recommend fixing it for your clients.  And then finally, this last bullet, the creds may persist beyond account rotation.  So due to the way that the WMI or the SIM repository on Windows works, some of the objects  in that database don't actually get removed when they should.  So to query the NAA, we can just do a WMI query.  So if that account gets removed from the configuration because those credentials were  stored in the WMI database, they may persist even though it is no longer configured.  And so that is something else that we've seen, where maybe a DA account was used as an NAA  and then they fixed that, but then the DA account still persists in this database.  So then even though they fixed the SCCM configuration, that DA account is still on every SCCM client  in the environment.  Okay.  So I'm going to show a demo.  Super short.  It's just going to show both of the techniques that I talked about.  Dumping it locally using WMI and then making the request with the spoofed computer and  getting that deobfuscating the secrets and the policy.  So let's see if I can do this.  Okay.  So first you can see we're going to use sharp SCCM with the local secrets-m for method WMI  command.  So you could also change that last bit to disk, and it will do that, it will look for  those legacy creds that I was just talking about, the ones that are persisting after  rotation.  All right.  Here we go.  All right.  So that was it.  Super short.  So if you've used sharp DPAPI before, this may look familiar.  Full credit to Will Schroeder for the sharp DPAPI project.  I totally stole all this code for that.  But you can see we're just grabbing the DPAPI system LSA secret, using that to decrypt the  system master keys, and then finally we do a WMI query language or WQL query to grab  the blobs and then decrypt the blobs here.  So you can see that we have clear text credentials.  It would also look for other credentials as well, because they are also stored via WMI.  Just in this example, we only have the NAA configured.  And then in this next one, we'll use getting ahead of myself, okay, now we'll use the get  secrets command, and you can see we're specifying a computer account with its password.  So for this, we are spoofing a new device saying, hey, I'm a new computer, and I want  to request this computer policy.  And again, in this case, we de-obfuscate these secrets, and this is before they get stored  on the client, before they're DPAPI protected.  So you can do this without being an admin on the client.  You can also, I guess you don't even have to do this from a client.  You just have to have the ability to add a domain computer account, or control a domain  computer account.  There we go.  All right.  The next type of attack that we're going to talk about is taking over the hierarchy.  So as attackers, this is pretty obvious.  We want the ability to run commands on any system in the environment.  We may have privileges within Active Directory, but our objective is to compromise some specific  development group to access proprietary code or something like that.  So we need to execute commands on this person's workstation in order to accomplish that objective,  for example.  So SCCM supports a lot of different methods to do this.  You can run PowerShell.  You can run an application.  You can deploy a package.  There's a ton of different ways to execute code on machines.  There's also a feature called CMPivot that basically lets you read any information on  the device, registry keys, file contents, event logs, all kinds of info without ever  touching the system.  It all happens through SCCM, and it flies under the radar very well.  So Tom DeGrief and Kim Appelfenz kind of talked about this in 2019 in their Defending the  Castle talk.  They were like, hey, IT admins, at some point, people are going to catch on that there's  some pretty bad design flaws, or I guess design considerations that just over time  attacks evolved that made them security weaknesses.  So how do attackers actually take over a hierarchy?  You want to get the full administrator role in any site.  There is no security boundary between sites in the same hierarchy, and that's because  the database contents are replicated between every site.  If you have a central administration site in the environment and you add an administrator  to primary site one, that change will replicate to the central administration site and then  to primary site two, three, all of them.  You'll be admin everywhere.  Very quick NTLM relay primer.  This subject is huge, but basically it's a person in the middle attack.  So if you are on an attacker-controlled machine and you can get another system's domain  computer account to authenticate to you, or really any domain account to authenticate  to you over NTLM, you can relay that to another system and access that system with the incoming  account's privileges.  So you can do this to launch an agent with those privileges.  You can add a user account, make any change you want after having done this.  And there's a few bugs, sorry, there won't fix issues that you can use to do this.  One of them is Printer Bug by Lee Chagla-Christensen, our colleague, and then the other really popular  one is Petit Patam by Lionel Giles.  And these make it extremely easy to just say, hey, remote computer, I'm authenticating to  you with any domain user account, please connect to me, and then you can challenge  that system with authentication and it will automatically authenticate to you with its  domain computer account.  And the reason that is important is because the primary site server's domain computer  account requires local admin on every other site system role in the hierarchy, and is  a DBA on the site database.  So if we can coerce authentication from this account, and basically if we can breach the  system over SMB, we probably can because those won't fix issues, and then we can relay it  to any of those other system roles that are hosted remotely from that system to gain control  of SCCM.  And there's a ton of different ways to do this.  So a few examples, we can coerce NTLM from the primary site server over SMB and relay  that to the MS SQL service on a remote site database, grant ourselves a full administrator  role just by executing SQL statements.  We can do the same thing, coerce over SMB from the primary site server, relay to the  site database server over SMB.  That's a local admin, so we'll be able to execute code, we could start a service, whatever  we want.  Once we have command line access to that system, we can use something like SQL command native  tools in order to add ourselves to that role.  And the list goes on and on.  SMS providers also provide the ability to add administrative users, but there are tons  of different combinations of this attack.  So I want to quickly walk through one of them.  We just call it takeover one.  It was getting difficult to refer to all of these.  I think we found 23 different combinations of hierarchy takeover attacks.  So in this example, we have our attacker host in the middle.  We have our primary site server on the left, and we have our site database on the right.  The first step, we're going to start our relay server on our attacker host, and then we're  going to use something like PetitPetam or a spool sample that abuses the printer bug  to coerce NTLM authentication from the site server.  The site server is going to connect to the SMB service on our relay server on the attacker  host, and we're going to connect to the MS SQL service on the site database.  The site database is going to send us an NTLM challenge.  We're going to forward that challenge to the site server, and the site server is going  to use that challenge and create a challenge response for its domain computer account,  send it to us.  We're going to forward that challenge response to the SQL database, and then we're going  to execute SQL statements and grant ourselves the full administrator role.  This is two commands, and I'm going to show you a quick demo, maybe.  All right, so this is the configuration manager console, just demonstrating here that the  only two users with full administrator privileges are the lab admin.  Right now, we're going to use Garrett's SCCM Hunter project to generate the SQL statements.  First, we're going to check to see if we have admin privileges, and then we're going to  generate those SQL statements.  Right now, we're listing members of the SMS admins group who have that full administrator  role, and we can see that we have access denied as the low-prev user.  Now we're going to create the SQL statement in order to add the low-prev user.  It's really ugly, but basically what this is doing, it's creating a record in the role-based  RBAC admins table, and then it's adding three permissions that together equal full administrator.  We are starting our relay server.  We're going to forward incoming SMB NTLM authentication to the MSSQL service, and we're going to execute  that big, nasty statement.  We've started our relay server.  Now we're going to use PetitPetam to coerce NTLM authentication from the primary site  server's domain computer account.  If we come back over to our relay server, we see that the NTLM authentication was received.  It was forwarded to the site database and succeeded, and then we changed our database  to the primary site database and added ourselves.  If we refresh, we can see that low-prev is now a full administrator.  Real quick before we dive into some stories from the field, in order to prevent this attack,  you can implement NTLM relay protections on the different site system roles.  The SQL database supports extended protection for authentication.  SMB signing requirements can be enforced on the endpoints where you could relay SMB2 to  take over, and there's a few others that are all in the misconfiguration manager repo that  we'll intro towards the end of this talk.  For a couple slides, we're going to just tell some real-world stories, things that we have  seen and abused in real enterprises.  The first, again, we're back to the overprivileged network access accounts.  Each of these is a different occurrence, something different that we've seen.  We also reached out to the community and had some people share stories about things that  they have seen.  Again, it's everywhere.  The first one that we'll talk about is local admin on every client.  One of our colleagues, Garrett, he was on an assessment, and I think he was kind of  stuck somewhere and was doing SharePoint triage.  Everyone loves doing that.  For some reason, that customer had SCCM PXE boot media stored on SharePoint, and we were  able to, or Garrett was able to crack that open and grab the network access account secrets,  which happened to be local admin on every SCCM client in the environment.  And then, again, I already mentioned that we see the NAA configured with the client  push installation account, which is always local admin on every client.  We've seen domain admin accounts.  We've seen where it's not necessarily local admin on SCCM clients, but SCCM servers.  So that's nice.  And then, again, previous privileged NAAs recovered from the SIEM repository.  Those ones that were configured before the accounts were rotated.  And then this one I thought was pretty interesting, shared by RustLA, I'm sorry if I've been butchering  the handle, on Twitter.  They found two different, so you can have multiple NAAs configured, and they found that  two domain admin accounts for different domains were configured, so each domain had domain  admin creds for the other domain.  And I'm saying domain, but I actually think they were separate forests.  So totally separate SCCM environments, totally separate AD environments.  So again, lots of crazy stuff out there.  Now this one is something that we see quite a bit, especially with our Bloodhound Enterprise  customers.  It kind of just lingers in the domain, and we're just now finding them.  And it can be pretty bad.  So SCCM can have an account configured called a domain join account.  And as the name implies, this is used to join new computers to the domain.  So if you configured Pixieboot and you install, do like an operating system deployment, and  you want to join that new computer to the domain, you would use something like a domain  join account.  And so when a computer is joined to the domain, the account that did the joining has ownership  of that computer.  And so fast forward 10 years or something, and that computer is somehow a domain controller,  or maybe a new server was joined and using SCCM and was promoted to domain controller,  you might find that the domain join account has ownership of domain controllers or other  privileged assets in the environment.  So depending on how the task sequence is configured, this could be present on the clients.  Here this is actually not completely accurate.  It says present on all clients.  But this could be present on SCCM clients.  So the secrets might exist.  So it's definitely worth looking at if you run those sharp SCCM commands that I demoed  with the get secrets or local secrets commands, you might find these.  And it's definitely worth looking at if you do find a domain join account, look at what  it has ownership of.  And then if you are on the blue side, definitely figure out what your domain join account is  and use Bloodhound or something to look at what it's doing.  Look at what it has ownership of, because like I mentioned, we found several instances  where this account has ownership of the entire domain, hundreds of thousands of computers.  So it can be really bad.  So SCCM clients and domain controllers, you might think that they are different things,  and they're not necessarily different.  So it's a non-default setting, but when you set up your SCCM site, you can configure it  to enroll domain controllers as clients.  And this is problematic, as you can imagine, because if we control SCCM, we have code execution  over every client in the environment.  If this is configured, then we can control domain controllers by compromising SCCM.  When we first started looking into SCCM, or at least I thought that this was, I was  like, there's no way that people actually do that.  And it turns out, most environments do this.  So if you can, again, through the takeover one, which Chris just demonstrated, which  again, very common, you can use that to compromise the site.  And then once you've compromised the site, if the DC is a client, you have codecs on  the DC.  So again, pretty severe.  And we can execute on the client through various different methods.  So we can do an application deployment, or a script deployment, or a package deployment.  Script deployment is usually the easiest.  We just recently just added ourselves to the admin group on the DC, just as a proof of  concept to show that we could do it.  The possibilities are endless.  Real quick, just want to mention something that I forgot.  So the demo that we did of hierarchy takeover one just now, obviously I was like, not trying  to hide it, or have any type of OPSEC consciousness.  But I do want to recommend our colleague Nick Power's talk.  Once the videos come out, it's called Relay Your Heart Away Unbinding 4.4.5.  It'll teach you exactly how to do this attack over C2 for the red teamers.  Going to kind of cruise through these, because I want to make sure we have room for questions.  But this was the origin of takeover one.  It was a problem we were facing.  We found a connection string for a database in a network share, and that allowed us to  authenticate to just some random database on the network.  We crawled SQL links, and one of the links was DBA in the central administration site  database.  So we had database access, but we didn't really know how to turn that into administrative  privileges in SCCM.  So we cracked some DBA creds, logged directly into the database, and then figured out a  way to get ourselves into that group in a lab, and then executed that in prod, of course.  Another kind of funny story, we were on a client engagement, and we were observing kind  of what the SCCM environment looked like, and we had seen in the logs that the site  server, because automatic client push installation was enabled, had been trying to authenticate  to the CISO's laptop for two years, but the object didn't exist.  So we didn't actually execute this attack.  It was more of an audit style assessment, unfortunately.  But in theory, we could have created a DNS record for that object, pointed at our machine,  and capture a relay, that authentication, to take over whatever machines that that had  administrative privileges on.  Which one?  This guy?  Yeah.  All right.  Crisis averted.  OK.  So if you're like us, we felt pretty overwhelmed by everything that was happening, everything  that was being discovered.  And there's so many different attack techniques, and so many different ways to defend against  this stuff, that I couldn't keep up.  I don't think any of us could.  So we felt it was necessary to document everything in a single place for everyone.  And that is what misconfiguration manager is.  So this was inspired by a couple different people that I'd like to give a shout out to.  First of all, our colleagues, Will and Lee, with the certified pre-owned paper.  We knew that we had such a vast body of knowledge that we had to share, that we wanted to put  it into some kind of format that was digestible, and had a taxonomy like they did, with their  ESC1 and 2, et cetera.  But after talking with them, we learned that maybe a white paper wasn't the right way to  do this.  Instead, we created a living knowledge base that we're maintaining on GitHub, that we  hope that will continue to grow over the years.  And so misconfiguration manager contains an SCCM primer, basically the stuff that we  talked about here.  Also contains offensive techniques, defensive write-ups for how to prevent some of this  stuff.  We have detection, and we have one canary idea in there, but there's probably more out  there.  And like I said, it introduces a taxonomy, which we'll talk about on the coming slides.  We want to demystify all of this for you, because it is vast, it is complex, and there's  just so much.  And there's a lot more out there.  So we know that something like a white paper would have been a snapshot in time, whereas  this will let us to continue building.  And so we build it kind of in the style of MITRE ATT&CK, also inspired by Push Security's  SAS attacks matrix.  So if you're not familiar with that project, I recommend checking it out.  Kind of the same idea, but for SAS stuff.  And so this is just an example of what is in there now, broken out into a MITRE ATT&CK  style matrix.  So I'm not going to go through all of this, but these are some of the attacks that we  have documented already.  And then I mentioned that we created a taxonomy for this, because we wanted to organize this  stuff, and we know there's more.  So first we have the cred technique, so these are related to credential access, as the name  would imply.  There is currently five, but I think we have maybe one or two other ideas that we have  not written about yet.  We have elevate, which is used to do a privilege escalation named elevate instead of escalate,  just to not confuse people that are familiar with certified pre-owned.  ATT&CK is code execution on a client.  And then we have recon as well.  So recon kind of encompasses how to find the SCCM servers, but also how to use SCCM to  do recon.  And then maybe the most interesting one is takeover.  So these are all the takeover methods that rely on NTLM Relay.  I'm not going to read them all to you, but if you want to check out exactly how to execute  each of these, you can check out the repo, as well as if you're a defender, to mitigate  and detect some of these.  Detection ultimately boils down to if a computer is authenticating from a system that is not  that computer, then that's a pretty high-fidelity alert.  For the defensive techniques, we have prevent category, detect, and canary.  So each of the offensive techniques correlates to one or more of each of these, except for  canary, and vice versa.  So both ATT&CK techniques and defensive techniques kind of tie into one another in the repo.  I'm going to quickly show you kind of what it looks like, how it's organized on the left.  Each of the offensive techniques contains a description, what ATT&CK TTPs they tie back  to, the requirements.  Most of these are default in a lot of cases for coercion and relay.  Basically if you don't have NTLM Relay protection explicitly enabled, it's probably possible.  And then on the defensive, or sorry, the description of the impact, the defensive IDs that the  offensive technique relates to.  Sub-techniques, like I mentioned before, there's eight takeovers there, but there are 23 total  sub-techniques, depending on what system you coerce from.  Because the different types of systems have different privileges in the database or on  SMS providers in order to add ourselves to that full administrator group.  So all that's detailed there.  And then the actual execution instructions, and then some references to additional information  or the research where these things originated.  On the defensive side, prevention looks like this.  A summary of what to do and why, and the offensive IDs that they link to, and other defensive  IDs that are additional layers of defense that are related to this prevention measure,  as well as the references where these came from.  And we wrote an audit script in order to help organizations find these things.  We released misconfiguration managers, and admins were like, I don't want to read this  whole thing.  So we wrote this to kind of try and help identify some of these.  It's not going to catch every single thing, but it should help identify the low-hanging  fruit, particularly which takeovers are possible and which elevations are possible.  It requires read-only analyst privileges in SCCM, but it will be a lot more accurate  if you also run it with local administrator privileges on all of the site system roles  so that it can connect to them and read the registry to determine if relay to that system  is possible.  But let me demo this for you very, very quickly.  When we run it, it will connect to each system.  It will query for whether SMB signing is required or EPA.  It will look to see if automatic client push installation is enabled.  If we scroll back up, it will tell us takeover two and one are likely in this environment  as we go.  And it will also spit out kind of like a site hierarchy tree at the bottom here.  Once it's done running, it will do a final analysis and provide this tree view of the  hierarchy and, again, tell you what possible issues you have in the takeover and elevate  categories.  So we've talked a little bit to the folks at Microsoft, the configuration manager team,  a lot of IT admins who are interested in security, and they do seem to be taking this very seriously.  They have started work on enabling organizations to fix these things.  So for example, we weren't really sure if recommending extended protection for authentication  was going to have performance impact on the site database.  I think three or four weeks ago, they just announced that EPA is officially supported  to help organizations fix things like hierarchy takeover one.  So we really want to collaborate with everyone.  If you're interested in contributing to misconfiguration manager or want to just chat with us, we hang  out in the SCCM channel, the Bloodhound Gang Slack.  And that's it.  Thank you guys for joining us.  Thank you.  Any questions?  Hello, guys.  Thank you for your talk.  Are you seeing different SCCM server dedicated for each tiering part, like SCCM server for  T0 servers like domain controllers or IDConnect, and also SCCM for T1 and T2 machines?  That's a great question.  I have not actually seen anyone doing it, but we have been recommending that organizations  at least treat SCCM as Tier 0 or, like you said, use a Tier 1 SCCM for Tier 1 assets,  etc.  I have not actually seen it.  We haven't really seen it be implemented in that way.  But yeah, we do recommend that trying not to cross forest boundaries by placing accounts  for multiple forests into SCCM, because if you compromise the domain, you can likely  become SCCM administrator, and then you have access to the other domain or forest.  But we have yet to see that implemented in practice.  Anybody else?  We do have swag, so if you ask a question, we'll give you a T-shirt.  I was curious.  There's obviously a diverse selection of takeover and escalation primitives.  What do you see as the next thing to look into or interesting items for future research?  I'll defer to Chris for that one.  For me, it's Intune.  Another ubiquitous Microsoft product used for endpoint management.  They're really pushing for organizations to move their workstation workflows into Intune,  and I expect there are going to be a lot of similar challenges.  Hopefully more secure defaults, but also more attack surface.  Good question.  How much information from the overall hierarchy can you query from the ...  The client.  What type of recon can you do if you're just on a client?  You can query LDAP.  There's a few different site system roles that have their own attributes when the schema  is extended to support SCCM.  You can use SMB.  A lot of the site system roles will host shares that are named a certain thing.  That can be used to profile systems like that.  Some of them have HTTP services where different endpoints will return different status codes.  All of that, I would recommend looking into SCCM Hunter by our coworker, Garrett.  He's done a ton of research into that and has done a really good job trying to identify  those site systems remotely.  The one that has been really evasive for us is identifying the site database because clients  don't have any insight into that directly.  We can only see directly management points, distribution points, roles that clients talk  to, or things that are published or directly accessible.  The site database tends to be a tough one, so we usually just look for similarly named  systems or try and identify it in the client's documentation.  If you had a look at the HTTPS part of SCCM, because there was a time where you could integrate  it with AD certificate services, and the talk from yesterday didn't suggest that it's a  good idea or opens a lot of vulnerabilities.  Yes.  The network access account, if you're not using that, the workaround is to use enhanced  HTTP, which is basically a self-signed certificate.  You can think of it as poor man's HTTPS.  If you're using PKI, then that would be the ideal situation.  Again, I don't think we see it very much, but in the repo, we do recommend that people  do that.  PKI will prevent that spoofing attack, so you won't be able to register a fake client  because it's expecting that certificate.  But the other attacks, it wouldn't really have an effect on the hierarchy takeovers.  You said that the network access accounts are pushed to the clients and used by the  clients, then are there any other circumstances or any other account types which are pushed  to the client in clear text and then used by the client?  Yes.  All of those accounts that I talked about are sent to the client in the same manner,  stored in the same way.  They're all in the computer policy.  The only exception would be things like the task sequence accounts, which would depend  on the SCCM collection where that task sequence applies.  But if you are on a client in a specific collection and there's a task sequence applied to that  collection, then those accounts would exist in the same manner.  Have you had a look at the cloud management gateway and if it adds additional attack surface?  That's a great question.  It's one of my favorite questions.  I started looking at it because I was trying to see if maybe I could actually deploy my  own instance in the cloud and use it for C2 on a real engagement because I thought it  would be funny.  CMG was just incredibly complex, so I just stood up a management point in the cloud and  that seemed to work.  I haven't quite finished that research, but haven't dug into cloud management gateway  much beyond that.  Our coworker Garrett started looking into it, doing profiling for it specifically, and  identified some interesting files that exist on that system that can inform other attacks.  But beyond that, we haven't dug too much into it yet.  Okay.  Thanks, guys.  Thank you.  Okay.  Thanks, guys.  Thank you.  Thank you.