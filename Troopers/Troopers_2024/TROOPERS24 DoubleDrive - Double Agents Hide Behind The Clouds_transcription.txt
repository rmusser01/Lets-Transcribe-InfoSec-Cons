{
  "webpage_url": "https://www.youtube.com/watch?v=03RfncyIAq0",
  "title": "TROOPERS24: DoubleDrive - Double Agents Hide Behind The Clouds",
  "description": "Talk by Or Yair - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/xsjajg/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 3206,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240902"
}

This text was transcribed using whisper model: large-v2

 Thank you, everyone.  So okay.  As mentioned, my name is Roy and today I'm going to show you how I managed to turn Google  Drive and OneDrive into double agent ransomware.  So this is me.  I'm the security research team lead at SafeBridge.  I have more than six years of experience in security research.  My past research included some research in Linux, embedded systems and Android and for  more than three years now my main focus lies in research in the Windows operating system.  But let's see what we're going to talk about today.  So we're going to start with some general background about the state of ransomware today.  We'll then present the research goals that I defined when I started the research.  Following that, we'll deep dive into the technical details of how I managed to turn OneDrive  and Google Drive into being a ransomware, which I named DoubleDrive.  We'll then see also how DoubleDrive bypasses certain EDRs and which ones it bypasses and  finally we'll also compare how OneDrive and Google Drive functioned in this scenario.  So for those of you who are not familiar with the state of ransomware today, it is really  getting worse.  According to research made by Sophos, we can clearly see that payments for ransomware groups  in the year 2023 were much more expensive than 2022 and according to the same research  in both years 2022 and 2023, 66% of the organizations answered that they were attacked by ransomware.  The White House has even declared ransomware to be a national security threat and in the  same month that this happened, a world record was broken for most ransomware attacks in  a single month.  So I do want you to keep that in mind during the talk, however, we're not here to talk  about ransomware statistics, but rather on the specific DoubleDrive ransomware research.  So let's get to it.  So when I started the research, I wanted to create some sort of a fully undetectable by  design ransomware.  A ransomware that will have a fully, a true and fully legitimate flow for encrypting files.  My assumption was that if I'll be able to find such a flow, then I'll be able to bypass  most common ransomware detection methods.  So what if I told you that there is a way to encrypt files on your computer without  actually encrypting files on your computer?  And what if I told you that I can do that while at the same time I'm not even executing  code on your computer?  And what if not even a single malicious executable from my end needs to be present on your computer  while this happens?  In order to do that, I realized that I need to find myself a double agent program.  This program, on the one hand, will be considered legitimate for performing mass file operations  on Windows, and on the second hand, I will be able to influence its file operations without  leaving any traces that lead back to me.  Now after thinking about it for a while, I realized that very good candidates for such  double agents programs would be local agents of cloud storage services.  That is because these services usually create a local sync directory or a local drive, which  they continuously synchronize with the files from the cloud storage.  So by definition, they do mass file operation on the computer, and on the other hand, the  file operations that they do are triggered by changes in the cloud.  And in my research, I chose to focus on OneDrive and Google Drive, and this is how I met them,  so you're welcome to say hi, but let's get to know them a bit more, a bit closer.  So Google Drive is, of course, the most popular cloud storage service in the world.  It has billions of users, and just like we need, it does mass file operations, by definition,  as it creates the G drive on your Windows computer and continuously synchronizes files  from the cloud storage to it.  Now looking at OneDrive, OneDrive is Microsoft's recommended solution against ransomware, actually.  Also, it is installed by default on every Windows computer starting 2013, and just like  Google Drive, it does mass file operation, by definition, as it has the OneDrive sync  folder, which it continuously synchronizes with the files from the cloud.  We can also see in the Windows settings app that OneDrive is really being promoted as  some sort of an anti-ransomware tool, as we can see that in the ransomware data recovery  section in the settings, OneDrive is being referred, and in order to protect your PC  from ransomware, Microsoft recommends to store your important files on OneDrive, and this  way you will also have built-in ransomware detection and recovery, or at least this is  what they claim.  And just to clarify what we're really trying to do here, so instead of like any other normal  ransomware that usually first achieves initial access and then just starting to do a bunch  of malicious operations, with of course the most popular one for ransomware being opening  and encrypting a lot of files, what we're trying to do is that after we got initial  access to a computer, we want to somehow conquer OneDrive and Google Drive, so they will do  all the dirty work for us while it will be considered legitimate.  But at this point, I still had one problem, and that is that as far as I knew, OneDrive  and Google Drive were meant to synchronize only files inside the G drive and the OneDrive  sync folder that they create, and in order to really run a ransomware on local files  on the computer, I needed them to synchronize more local folders on the computer, and I  had no idea if it's possible.  Also I had no idea if it's possible to perform this without me touching these targeted files  and creating a relation between me and them, and I had no idea if it would be considered  a legitimate operation.  So I had to check.  Now looking at Google Drive, Google Drive has such a built-in feature, you can go into  Google Drive settings and add another folder to continuously synchronize another local  folder on your computer, which is completely unrelated to the G drive, but of course I  needed to do that programmatically, so I found that Google Drive has a settings database  in the local app data folder, meaning in the current user's folder, so it's also writable  with the current user's permissions, and by just adding a simple row to this database,  you can make Google Drive on the next time that it restarts to synchronize whichever  local directory that you want on the computer.  Now looking at OneDrive and how we can synchronize other local directories, Microsoft recommend  to use symbolic links that you create inside the OneDrive sync folder, and you point them  towards the target directories that you want to synchronize.  Now symbolic links unfortunately require special permissions, which only administrators  have by default, and so for this purpose they just use junctions, which work very similarly  to symbolic links, however they just do not require any special permissions, so they can  be created just with the current user's permissions, and they are also the most popular recommended  way online that people recommend to synchronize more local paths, so they are also considered  legitimate.  Now by synchronizing other local directories on the computer to the cloud storage services  from the target computer, we are basically creating a situation where Microsoft's and  Google's servers can create, modify, and delete files, local files, on our target computer,  and the ones to perform the actions would be the local agents, but without noticing  this sketch becomes very similar to something else that we all know that is called a C2  server and a malware, so now we identified the right candidates which we want to recruit  and we made them synchronize more local paths to the cloud storage, but we still need to  recruit these double agents, just like we can see here, but it wasn't really that easy,  but what does it really mean to recruit OneDrive and Google Drive to be our double agent transfer?  What do we need to actually achieve? In order to recruit them, we need to gain access to  the currently logged in account on the target computer, we need to get access to its cloud  storage. This way, if we can change files on the cloud storage, then we'll trigger the  same changes to happen on the target computer by Google Drive and OneDrive, so once we got  the initial access, the first option that we have to do is just log out and log into  a different OneDrive or Google Drive account, but this will be considered a bit noisy and  detectable to do right on the beginning of the attack before we even manage to encrypt  a single file, so instead what we can do is to somehow get access to the account which  is already logged in. We can do that either by stealing the credentials to it or the token,  now the credentials will probably not be saved as raw text on the computer itself, but the  token must be saved somewhere, so looking at Google Drive, Google Drive basically just  simply saves its token in the current user's credential set, so we can just call the cred  read API call in order to retrieve this token with the current user's permissions, most  surprisingly, none of the EDRs that I tested this against detected the cred read API call  and they do not consider it as malicious, so this was successfully achieved without  a detection, now looking at OneDrive, OneDrive is really eager to become a double agent,  OneDrive was just so informative that it just wrote its token in its logs, so basically  OneDrive's logs are called ODLs and they are stored in the current user directory in  the local app data directory, they are not saved as raw text but they can be easily parsed  using a script I found on GitHub and after successfully parsing the logs, you can see  that the token is just written inside in plain text and copying the token and adding the  prefix WLID 1.1 T equals to an authorisation header just allowed me to perform any API  request that I wanted against the currently logged in account on the computer, so what  does it mean? What does it mean that we can so easily steal Google Drives and OneDrives  token from the computer with just the current user permissions, basically any unprivileged  process on the computer can just have full access to your Google Drive and OneDrive account  if it's just running on your computer, so any executable that is running on your computer  by default you should assume that it can have this access. And now after we stole the token,  we already have a beginning to our double drive attack flow, looking at OneDrive it  starts with initial access just like any other normal ransomware but instead of starting  to encrypt files, what we do is just two very simple operations, we create junctions in  the OneDrive sink folder, point them to our target directories with the files that we  want to encrypt, the files are then synchronised to the cloud, we then just read logs and by  the time we read the logs, we find the token inside which we can already use to start encrypting  files on the cloud which will trigger the same changes on local machine. Now with OneDrive  it's pretty much the same as we already know, initial access and then just single row addition  to the settings database and a single API call to fetch the token and we are then in  the same situation. But this was not enough for me, as what I wanted to achieve is that  double drive will run on the target computer like some sort of a ghost. I wanted to run  it remotely. So in order to do that I had to exfiltrate the token from the target machine  but no worries because OneDrive and Google Drive are also excellent exfiltration tools.  All that I needed to do is to upload a file containing the token to the victim's OneDrive  or Google Drive account which means that I'm not communicating with any C2 server and  I'm not communicating even with a OneDrive or Google Drive account that belongs to me  as the attacker but I'm communicating with the victim's account which is a legitimate  operation. Now after uploading the file I'm just using the built-in sharing feature in  OneDrive and Google Drive to share the file with the token with temporary email address  that belongs to me, the attacker, I receive it and then I can use the token. One single  small downside about this flow with OneDrive was that I could only share a file with an  email address that is linked to a Microsoft account. So using the OneDrive flow an attacker  would have to first create a Microsoft account which is a bit less ideal but we'll get back  to that later as well. So we got the access that we were aiming for to the cloud storage  of the already logged in account on the victim computer. So by achieving this access we already  have an extremely innovative, never seen before, cloud-based ransomware attack flow that practically  acts like a ghost on the target computer because all file encryption is done by OneDrive or  Google Drive which are considered to be very legitimate processes. So let's recap this  whole attack flow at this point. So we start again with initial access like any other ransomware.  We then follow with two very simple operations which are the synchronization of other local  directories that we target for encryption. We then steal the token. By the time we stole  the token we do not need to perform any more operations on the OS because we got the token  we just need to exfiltrate it so we upload it to the victim's account, share it with  a temporary email address that belongs to the attacker and the attacker can start encrypting  the files. However, as part of this attack flow, the target files are being uploaded  to OneDrive and Google Drive and these services do have file recovery features which we still  need to deal with because we don't want the victim to be able to recover the files from  there. So let's take a look at Google Drive first. Google Drive has a trash folder and  the default option in the UI is to move a file to the trash folder, not to delete it.  In addition, each file has its 100 previous versions so if we encrypt files in Google  Drive the victim can potentially recover the previous versions from there so we want to  get rid of them. However, Google Drive also has an API for permanent deletion so with  a single HTTP request we can just delete files permanently without going through the trash  folder which will also delete their version history and then this is how we get rid of  the version history. So the only conclusion that an attacker can have based on this fact  is that after finishing to encrypt the files, the attacker also must delete the target files  that were encrypted and then create them back encrypted again in their original locations.  Now I know that it may look like the first stage can be just skipped so we can start  just deleting the files first and create their encrypted versions. However, if we do that  then the local agents on the computer that we are targeting will start by deleting the  files and when we delete files we don't actually delete the content itself of the files but  we just delete the pointer to it. So basically if we start with the deletion stage, the contents  of the files that we want to encrypt will still be left unpointed on the hard drive  and then some recovery tools will be able to recover them and we want to prevent that.  So we want to start by overriding the files and by this we can make sure that we are really  getting rid of the original content. Now looking at OneDrive, OneDrive has two primary file  recovery features which are file versioning and the recycle bin. We can also see that  these features are promoted as kind of security features against ransomware and the recycle  bin is pretty much self-explanatory but the file versioning features saves the 500 previous  versions of each file that was uploaded to OneDrive. In addition, there is no permanent  deletion so we cannot just delete a file to get rid of the version history and previous  versions are kept even if we delete the file to the recycle bin and then restore it. So  based on these facts, the only option that we have as attackers is to first encrypt the  files after we've done that, we delete the files, then we also need to empty the recycle  bin to get rid of the version history and then only create the encrypted files again.  However, I was not very optimistic about having success in emptying the recycle bin. That  is because as you saw, it is promoted as kind of a security feature against ransomware so  it wouldn't make sense that an attacker that had the option to delete files in the first  place will also have the option to just disable the security feature that is meant to help  victims to recover those files and just empty the recycle bin. But I still tried my luck.  So I started by just accessing the recycle bin from the OneDrive Windows app which just  opened the browser and then clicking to empty the recycle bin in the browser actually did  send a very different HTTP request than all other HTTP requests that I saw so far. It  was sent to a different domain, it used kind of a different path after the domain and instead  of using the authorization header, it used two other headers called cannery and app ID.  Now app ID stayed constant between all requests but cannery kept changing so I had to trace  back its origin. Now the cannery was given in the HTML page of the recycle bin and it  was given in that page only if the recycle bin's web page was accessed with a cookie  that is called WLSSC which probably identifies a Microsoft account session. So I was kind  of stuck because all I had was the token that I was able to steal from the logs and I really  didn't want to steal the WLSSC cookie from the browser's cookie files because this is  considered to be a highly detectable and malicious operation. So I gave it some thought  and then I realized that OneDrive has other UIs as well, other interfaces and as far as  I knew, mobile apps do not tend to use cookies as part of their API and in addition it would  be considered a very poor experience, for example, for the Android native app to open  a web view or a web browser to access the recycle bin. And so I downloaded the OneDrive  app and I saw that I can really empty the recycle bin natively from the app itself.  So this really increased my suspicion that there's probably some sort of a different  API that does not use cookies in the Android app. So I sniffed the HTTP request and I saw  that I was actually right. The HTTP request was very, very similar to the original one  but was just sent to a different domain. Now instead of using the canary header, it just  used the same authorization header with the same token that I was able to steal from OneDrive's  logs on Windows. So this means that practically any attacker that had the access to encrypt  and delete files in the first place can just also empty the recycle bin and prevent any  option for recovery even though the recycle bin is promoted in such a way that it's claimed  to be a security feature against ransomware. After seeing this, I decided to do some more  digging in the Android app and I also tried to share a file with a temporary email address  that is not linked to a Microsoft account. And surprisingly, this also just worked successfully  without any issues as opposed to how it was in Windows and in the browser. So this just  allowed me to improve the flow with OneDrive so the attacker will not need to create a  Microsoft account and this makes the attack flow more ideal and a bit stealthier. And  this is the HTTP request to do that with. So we added another stage to our double drive  attack flow which now also makes sure that the target victim cannot recover any of their  files using OneDrive's and Google Drive's file recovery features. So we had the entire  flow, but I still wanted to verify that there is nothing that can maybe somehow affect or  interfere with my double drive flow. So I went through OneDrive settings and I saw that  there is a setting to send an email notification when OneDrive detects that a lot of files  were deleted at once. So of course, I want to turn off this setting because I'm deleting  a lot of files at once. So I was not, again, very optimistic about having success with  doing this because you can assume that this looks like a security feature. This is meant  to alert victims that their files are being deleted. However, looking at the HTTP request  again, I was just able to send a very simple HTTP request with the same token from before  and change mass delete to false. And by that, I'm just asking OneDrive, please do not let  the victim know that I'm deleting a lot of files. But this was actually not the most  interesting thing about this JSON structure that is sent as part of this HTTP request.  Another very interesting field was called ransomware detection, which was set to true.  So yeah, if you remember in the beginning of the talk, I mentioned that Microsoft claimed  to have a built-in ransomware detection and recovery features built into OneDrive. And  in full disclosure, I ran DoubleDrive multiple times against multiple accounts and hundreds  of files, and I did not witness any some sort of ransomware detection, nor in any interface  or in email. But of course, as an attacker that runs a ransomware, I still want to change  a ransomware detection setting to false. So sending the same HTTP request, just change  ransomware detection to false, and it stayed this way. From Microsoft, after I reported  this, I was actually told that this is only the setting for the email notification about  the ransomware detection. But this still really doesn't make sense. Why would I have the option  to ask OneDrive to not let the victim know about a ransomware detection? And moreover,  as I already mentioned, I did not see any ransomware detection in any of the attempts  running DoubleDrive. This is just like, for instance, suggesting an API from an EDR on  a computer to offer all unprivileged process on the computer to turn off notifications  about malicious events. Now, speaking of EDRs, let's see how they performed against this  scenario. So none of the EDRs which I tested were able to stop and detect DoubleDrive,  not Defender for Endpoint, not Sentinel 1 XDR, not CrowdStrike Falcon, not Palo Alto  Cortex XDR, and not Cyber Reason. More specifically, talking about some of the features that were  bypassed as part of this attack flow. So one of them is called decoy files detection technique,  if you're not familiar with it. So it's basically a technique where EDRs place a bunch of decoy  files in highly targeted directories on the computer and then they wait to see if there  are any processes that access them and try to tamper with them in many ways. And if they  find such processes, then they consider them as malicious and they try to prevent their  operations. However, encrypting decoy files with OneDrive or Google Drive just raised  no detection even once the decoy files were encrypted because the EDRs whitelisted them  and they just blindly trusted them. They did not think that trusting them can lead to anything  like that. While some other EDRs were running that were also implementing the decoy files  approach, the behavior was kind of different because these EDRs just actively hide the  decoy files from OneDrive and Google Drive. So when they list the directory, the decoy  files are not there because they are trying to avoid false positives. So again, they just  blindly trusted them. They did not imagine that an attacker would be able to use and  leverage this trust. Another detection feature which was bypassed is looking for known ransomware  file extensions. For instance, like .encrypted or .WNY. So basically renaming files after  they were encrypted to such file extensions using OneDrive or Google Drive just did not  raise a single detection or any notification, not on the computer itself or in the management  console. And not even when I did this to decoy files. Another ransomware protection feature  that was bypassed is called the controlled folder access feature. So basically it's a  built-in feature in Windows which prevents any untrusted processes from modifying or  deleting any files that are located in one of the protected folders. The protected folders  is a list with some default directories in it from the beginning. And you can also change  it by default. It has the user libraries inside, like documents, downloads, not downloads,  folders. And so trying to modify files using OneDrive or Google Drive, files that are located  inside one of the protected folders just happened successfully without any issues as this folder  trusts Google Drive and OneDrive by default. So this is a working bypass for the controlled  folder access feature. Lastly, if we're talking about static signature-based detection, so  there is really no executable, ransomware executable to detect. The executables which  are most similar to a ransomware are basically OneDrive.exe and Google Drive FS.exe. And  now that we know how Double Drive works, we have a demonstration video in here in which  we'll see Double Drive in action leveraging OneDrive in order to bypass Palo Alto Cortex  XDR. The attempt will be to encrypt the documents folder of the target user. So let's take a  look. So we start with configuring Double Drive to use a temporary email and to target  the documents folder. We configure the executable, the executables. We can see that Palo Alto  Cortex XDR is up and running and configured to the most preventive settings and ransomware  protection. Now the executables will be ready. And we'll have an endpoint takeover executable  which performs two very simple actions, creation of junctions in the OneDrive sync folder and  reading logs. Then it uploads the file to the victim's account and exfiltrates the token  using the sharing features. So nothing malicious is happening in here. Two very simple operations.  And then we can see that OneDrive is starting to synchronize files. We can see that we have  files in the documents folder. And now the files are starting to be uploaded to the OneDrive  victim's account. And we can see that the one to upload the files was really OneDrive. Okay. Now  we can comfortably run Double Drive as we're no longer running on the target computer. We have  access to our target files. We can start encrypting our target files. Our encrypted now while we're  not longer running on the computer. OneDrive is the one to encrypt those files. Let's wait for the  encryption to be done. And let's see what happens then. So I'll give it a few more seconds. And now  the encryption is done. We delete all the target files from the OneDrive cloud storage. We then  empty the recycle bin. And then we create all the files again in their original locations with  encrypted content. We can see that the recycle bin is empty. No files inside. And if we'll go to the  encrypted files, then we can see that they're all encrypted. And looking at the version history, we  can see only one version, which is the encrypted version. So no option to revert to a previous  unencrypted version. Okay. Thank you. Okay. So we saw we now understand how Double Drive works. We saw  it in action. Let's compare how OneDrive and Google Drive functioned in this scenario. So talking  about synchronizing more local directories on the computer other than the default one. Looking at  Google Drive, in order to do that, we needed to change a proprietary settings database, which  belongs to Google Drive. We could not do that with links. And I would say that this is something that  can be potentially detected. You can have the sense that if a third party process that is not linked  in any way to Google Drive accesses and modifies settings database that belongs to Google Drive,  this is kind of malicious. So this is in practice was not detected. But it would make sense to  detect it. However, on the other hand, OneDrive, in order to do that, we needed to create links in the  OneDrive sync folder, which is the default legitimate way to do it. So even if you want to detect it, it  wouldn't look different than if a user really intended to do so. And so in this case, Google Drive was a  bit better. Talking about the stealing of the token. So then again, a similar situation where in order to  steal it from Google Drive, we needed to steal it from the current user's credential set, which was not  detected, but again, can potentially be detected as it would make sense to detect such an API call from an  untrusted process. And comparing to that, in order to steal it from OneDrive, all that we needed to do is just  read logs, which is again, a completely legitimate operation, which would of course make sense to go  undetected. By the way, Microsoft did fix this issue after I reported with printing the token into the  logs. And I'm talking about file recovery prevention. So Google Drive does not really try to do anything  against it. It actually offers the permanent deletion API. So this is regarding Google Drive. With Google  Drive, it was pretty easy. But in OneDrive, they do not offer any permanent deletion API. They  differentiate the API of the Recycle Bin, and they consider the Recycle Bin as kind of our security  feature. However, in practice, we see that it didn't really matter. Lastly, talking about ransomware  awareness in general, comparing these two products. So I would say that I felt like Google Drive doesn't  really try to protect against ransomware. It just acts and is promoted like a normal cloud storage service.  It doesn't try to say that it has any sophisticated security features. As opposed to it, OneDrive is  promoted as an anti-ransomware product that tries to help you protect yourself against ransomware. But  again, in practice, we saw that against this scenario, it doesn't really help in any sort of way. Now, I do  have some vendor responses in here. Let's start with the OneDrive attack flow. So I will start by saying  that MSRC did assist two of the reported cases regarding this flow as an important elevation of  privilege. However, no CV was granted and was just acknowledged in their website. This is their official  response. They did not respond regarding the bypass of Defender for endpoint. But just about the other  things, I won't read the full comment as you'll be able to watch it later in a published presentation.  Regarding all the other EDR vendors overall, I have no complaints. They were very cooperative. They all  developed new detection techniques in order to deal with such ransomware. So I really thank them. They were  very cooperative. Again, I want to read the official comments. You'll be able to read them yourselves later.  And lastly, unfortunately, from Sentinel One, I was responded that there do not appear to be any security  implications as a direct result of this behavior. These are the versions that you want to make sure you're updated  to in order to be safe from the DoubleDrive OneDrive attack flow. These are the versions where they inserted  new detection techniques and the OneDrive client version, which do not print the token into the logs. So I'll give  you another moment to take a picture. Okay, and now we have some vendor responses regarding Google Drive. So I  will say that I did not get all the responses from all the vendors yet. However, I can say that Palo Alto did  respond that they already developed a new detection technique against the DoubleDrive Google Drive  version. Microsoft, again, did not respond regarding the Defender for Endpoint product. They did respond  regarding the bypass of the control folder access feature again. They said that it's very creative, but they have  nothing to do with it. Regarding Sentinel One, I was again answered that there do not appear to be any direct  security implication. Well, that's okay. And now let's summarize everything that we learned here today. And I  think this is maybe the most important section of the talk. What can we learn from that? So the first and most  important thing, in my opinion, is that no process should be trusted by default by anything on the computer, even  if the process has the executable that was developed by Microsoft themselves, the vendor of the operating  system. If developers feel like they must trust a certain process, then they should at least understand and  think how the trust in this process might be leveraged by attackers and then set up the proper detections for that  and protection techniques. Second, we should really start preparing against the next generation of  ransomware. We all have this conventional thought that a ransomware is an executable that is being run, and then we  have a process, and this process encrypts a lot of files. But this is not necessarily true. Threat actors are  starting to be much more creative. We also have a recent example published by Kaspersky, actually, that shown a  ransomware that encrypts files using BeatLocker, for instance. So the next generation is already here. So we  should start thinking about such creative ways that ransomware attacks might happen and develop the proper  detection techniques. Lastly, we should also invest more in separating access between normal features and security  features, as like we saw, it doesn't make sense to enable an attacker that has the access to delete files in the first  place to also empty a recycle bin, which is a security feature, and it does not make sense to allow a ransomware to  disable a setting called ransomware detection. And with this takeaway, we are finished with the talk. We have our QR  code for the double drive repo in GitHub. And you can have my contact details. You're very welcome to contact me in  any way that you like. I promise that I'll try to be as responsive as I can. So don't be shy. And this is it.  Thank you for the great talk. So I think we have plenty of time for questions. Yeah. Dennis.  Hello, thanks for the great talk. I think I might have missed how you remote encrypted the files. Don't you have to link  the victims Google Drive or OneDrive temporarily to an attacker's endpoint? Or how did you do that? So you you create the  junctions like let's talk for instance about OneDrive. So once you created the junctions in your in the target computer that  you are attacking, so you're running on the target computer, you have your initial access, you're creating the junctions in  the OneDrive scene folder. The files are then uploaded to the cloud. Then from the attacker's computer, which is internet  access, you get the token to your temporary email, and you can send HTTP requests to OneDrive to OneDrive servers, which  practically acts as your C2 server. So you encrypt the files on the cloud. And then it triggers the same changes on the  target computer. So you have an attacker computer, a victim computer, and the C2 server is OneDrive's cloud service servers in  the middle.  Okay, but that means I can ask OneDrive to encrypt files.  You just modify the files. So you just send a different content, like you go like,  I sent this content from an attacker's endpoint. Yeah. Okay.  Any other questions?  Also, thank you for your great talk. You said Microsoft changed the behavior where to store the token. So not anymore in the  locks. Do you know where they store it now?  No, I haven't checked, but I did implement another way to extract the token. So you can basically just perform a full process  dump on OneDrive. So EDRs do not stop all process dumps, at least not the ones that I checked. They only stop process dump on  specific processes such as LSAs, for instance. So you can just perform a process dump. It will go undetected as well. And then you  just search for regex with WLID 1.1 T equals and you'll find the token. So this is implemented inside the DoubleDrive repo as  well. Thank you.  Yeah, also from my side, thank you for the great talk. And my question is, in the beginning, you had a slide with different  other cloud storage sync providers, like Dropbox. Did you look into them as well? Or is it ongoing research?  Um, no. So, like, I usually in my research, I tried to make a point, you know, not to develop a full tool, like as best as I can, so  attackers might use it, and I won't work it for many years until it will be perfected. So I think this makes the point. And it  also shows like a bit two different approaches between Google Drive and OneDrive. So no, I did not look at them. But I would  assume that like everything that the only thing that you need is just a way to synchronize local paths, more local paths on the  computer that that on which the cloud storage, cloud storage agent is running. So if you have that, you can implement it, you  just need to reverse engineer the like the web API, the REST API, or any other API that it uses. And then you can, you can run it  like it's a very small requirement.  Okay, thank you. And another question. I'm not that familiar with the agents of OneDrive and Google Drive. But would it be  possible to steal other persons like other user accounts, files from a system? So are they just running with the this one users  permissions?  Not I don't, I'm not sure that I understood the question. I do mean, if, if, for instance, like Dropbox was, was installed, if I  would able to steal the user of Dropbox, like,  yeah, I mean, let's say the Google Drive is used by by me on my computer, but there's another user account. Is the agent running with  just to access my files, or would it be possible to?  No, so this was actually would be considered a vulnerability, since it would be able to access another user. And this research did  not include vulnerabilities, but just EDR bypasses. And the, like showing the point of this, like innovative attack flow of  how it will go undetected. No, it would be considered a vulnerability. And you are able to only like create a process dump of  processes that run with your permissions in Google Drive and OneDrive run with the current users permissions. So no, you won't be  able to, you need to start with you, you would be able to encrypt files of the user that you've got access to on the computer.  Yes, thank you. Thank you for your talk. You were focusing on the OneDrive personal edition. Do you know if there's any significant  difference between OneDrive personal and the corporate SharePoint, Azure AD, whatever version?  Okay, so that's a very good question. And I have a very good answer. So basically, yeah, I focused on the OneDrive personal version. And I  did try to check if the API is similar between the OneDrive personal OneDrive for business. However, there were very different. And I  just, in order to implement it, I needed to like reverse the entire REST API again. And I did not have the time to do that. However, it  doesn't really matter. Why? Because Windows is installed by default with both OneDrive personal and OneDrive for business. And  what we're trying to do here is really not to target the cloud storage of OneDrive, but the local files on the computer would like  this attack is not interested in the files in the cloud. If you got the access already, it would be nice. But we're trying to target the  normal computer to do a local encryption with going undetected. So if OneDrive personal is also installed, even if you're not logged  into it, and you use OneDrive for business, then the attacker can still just log into his own OneDrive personal account and use the  personal account to encrypt the files.  More questions.  A lot of questions. That's good.  Yeah, thanks. Really interesting. You showed in the OneDrive example that you use the Android API or an API intended for the Android  client to complete the exploit. Has Microsoft commented on that? Because actually, you use the token created for PC.  I didn't hear you very well. Can you repeat the question?  You abuse the API that was intended for the Android client, and it worked because it took the same token format. Has Microsoft  commented on that, that you essentially exploited?  No, I did report it, but they did not respond.  Okay, thanks.  Hi, thank you for your talk. So my question would be, what would be the mitigation from a provider like Microsoft, Dropbox, Apple, to fix  this issue for all of the users? Because the mitigations you were showing, you already said, yeah, I already get the token somewhere  Okay, so I will say that I'm not sure if, and I also don't want to say that like, very confidently, but I'm not sure that it's  So I will say that I'm not sure if, and I also don't want to say that like, very confidently, but I'm not sure that it's the developer's job of OneDrive and Google Drive to protect against that, because looking at E-Windows, for instance, leaving cloud storage services aside,  you also have a lot of malicious things that you can do on Windows, for instance, creating process dump on LZAS and getting credentials that you should not be exposed to, but then EDRs prevent this operation.  So I guess it's both the job of the developers and EDRs. Now looking at OneDrive, for instance, as I mentioned, like creating links in the OneDrive sync folder, and having the operation legitimate,  both if you do it from like a process on the computer or from the UI, is kind of hard to develop a detection for, but if you look at Google Drive, then if you do not allow links, and you have a proprietary database for this, then it would be really weird for another process to perform operations on it, and then it makes the life of the defenders much easier.  In general, I would say that I think it's not the best idea to have a feature that continuously synchronizes some local files from your computer to the cloud and be dependent on that.  I guess that the best thing to do would be to not have such features and just have one directory, which is the only one that is being synced, and then if you want to store another file on the cloud, just copy-paste it.  Okay, thank you.  You're welcome.  Okay, if you have any other questions, I'll be here in the conference. Don't be shy, feel free to approach.  All right, and with those words, enjoy your meal.