{
  "webpage_url": "https://www.youtube.com/watch?v=iTS14FhRlVA",
  "title": "TROOPERS24: A Decade of Active Directory Attacks: What We've Learned & What's Next",
  "description": "Talk by Sean Metcalf - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/vxs8wy/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
  "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
  "duration": 3799,
  "channel": "TROOPERS IT Security Conference",
  "uploader": "TROOPERS IT Security Conference",
  "upload_date": "20240902"
}

This text was transcribed using whisper model: large-v2

 Thank you very much.  I actually was at Troopers in 2018 and 2019, so it's been a long time since I've been here.  I love Troopers.  I love the community around it.  It's fantastic.  I have a lot to cover.  When I put together the submission of this talk, I was like, this would be great.  I can do these things.  It's going to be fantastic.  And then I actually started getting into it and trying to do these things, so it's been  a lot of work pulling this together.  I am Sean Metcalf.  I'm a Microsoft Certified Master in Active Directory.  There's about 100 in the world.  I started, founded Trimark about eight years ago.  We do Active Directory and Enter ID security assessments for customers around the world.  I love that because I get to travel and work with customers and talk to them about their  challenges all over, across industries.  I've spoken at a number of different conferences, Black Hat four times, DEF CON five, plus the  keynoting in the Cloud Village, as well as Troopers, like I said, in 2018 and 2019.  So this is year number three, so I'm very excited to be back on the stage.  One of the things I love about Troopers is the fact that we have an Active Directory  security track, and now it's been expanded to Enter ID.  So how about a big round of applause for Troopers for recognizing how important this is?  And so I put together a keynote for Blue Team Con in 2021, and I was like, why should people  care who I am?  And I started putting together kind of what I call my brag sheet, and I'm not a big person  that talks about what I've done and try to be humble, but I think it's important for  all of us to put together our own personal brag sheet.  We have all done things, we've all accomplished things that are important, whether it's important  to us or important to the community.  If you have published code, if you've written a blog article, you are contributing to the  community, and thank you for that.  So I want to encourage everyone to continue to do that.  There's a number of things that I've done, some are in this presentation, some are not,  but they're here.  And the agenda, because I want to jump right into it, because there's a lot of things that  I want to cover in this talk.  But ultimately I'm going to talk about the Active Directory attack timeline.  I'm going to talk and break this down into what I call baby steps, which is 2000 to 2009.  The golden years, which is actually, as I see here, is incorrect as far as my timeline,  which I'll fix later.  But the golden years kind of cover 2010 into the 2015 time frame, and then we have some  other things around there as well.  I'm going to talk about the summary of attacks, structuring effective Active Directory defenses,  so hopefully these defenses are going to align with a lot of the attack techniques  that I talk about in the tools, and then wrap it up with some hybrid cloud integration components,  attack and defense, and then ultimately here are some things you can do to really protect  your EntroID environment.  So what was funny is I like using PowerPoint Designer, and with the text there of timeline,  it decided that a great timeline would be this speedometer thing here.  I figured since we're in Germany, and there's such great car companies here that make very  fast cars, that this works.  So maybe PowerPoint is smarter than me.  So we start with baby steps, in the year 2000 to 2009, because that's when Active Directory  came out.  But I actually want to point out that I'm going to start before that.  So I decided to roll back the clock behind Active Directory to, well, all the way back  to 1997, where Paul Ashton posted to the NT bug track this idea around pass the hash.  So when we talk about pass the hash, it's almost 30 years old, and it's still active,  which is kind of mind-blowing when you think about it.  And then a number of years later, 2001, CDC released their toolkit around SMB relay, so  some of the early relaying that occurred.  And then we have in 2007, the MBN-NEST spoof tool created by Robert Wesley McGrew, focusing  on LMNR and NetBIOS.  So when we talk about the sort of spoofing and capturing this information, that goes  back to 2007.  And then in 2008, Hernan Ochoa, and I apologize if I mispronounce any names, I'm going to  do my best, publishes the pass the hash toolkit, which later became known as WCE, or Windows  Credential Editor, which we have over here in 2010.  So this is what I call the wonder years.  This is where we are starting to understand and really getting a better concept of what  it means to attack Active Directory.  We have the WCE, and then Benjamin Delpy, I think everyone's familiar with Mimikatz,  was encouraged, influenced, inspired by WCE, he said it himself, in order to come up with  Mimikatz and kind of make this into his own thing and play around with it, because he  wanted to learn about how Windows worked, right?  And then in 2012, we have the exploiting Windows 2008 group policy preferences by Emilien  Gural, that article is no longer online, but thanks to Chris Campbell, he has a great post  on this where he referenced that, and also in 2012, we end up with Responder, which I'll  talk a little bit about in a minute.  Then we go to the next year in 2013, invoke Mimikatz, the PowerShell version of Mimikatz,  and then 2014, things just went crazy, right?  We have the, what I call the infamous golden ticket talk, where Benjamin Delpy and Skip  Duckwell said that this talk is abusing Microsoft, Kerberos, sorry, you guys don't get it, and  Microsoft's still trying to figure out how to get it, but that's okay, where they talked  about golden tickets, overpass the hash, pass the ticket.  Then a month after that, Skip wrote an article published about silver tickets, which expanded  a whole bunch of other capabilities.  In the same month, Kerberos is released by Tim Medina at DerbyCon, and just after that,  Will releases PowerView.  A lot of really interesting things happened along this timeline, so now I'm gonna dig  into this.  In 2010, we got the iPad, we got Square, we got Kickstarter, and we got Flipboard, but  we also get WCE, and so Hernan Ochoa put this together in order to figure out how to dump  in-memory credentials to logon sessions, sounds very familiar if you've used Mimikatz, right?  And then passing the hash, basically be able to capture those credentials and pass them  over to something else, create those new ones, but he identified that there's no need to  actually inject into LSAS.  You don't have to run the code within it, which is pretty interesting, and then locating  lists and decrypting these sessions and these credentials just by reading memory.  And so in 2011, we have our first Google Nexus phone, the Nintendo 3DS, we have our Kindle  tablet as well as the Nook, which is not around anymore, I thought it'd be kinda cool  to put up some tech that's not around anymore, as well as the Litro camera, not around anymore,  the Nest thermostat device, which is probably everywhere, and the Asus Transformer, which  I had, which I thought was a pretty cool tablet, and Mimikatz.  So what's interesting is I went back and I grabbed some screenshots that I had from years  ago, from the early days of Mimikatz, so who actually used LSA dump SAM RPC patch?  Okay, a few hands, thank you.  It evolved rapidly from that, didn't it?  Like this probably brings back a lot of old memories, right?  Having to do this and getting just an NTLM hash on it, no AES here or anything fancy  like that, no history, but there are a lot of things that Mimikatz actually influenced  and inspired and provided information.  Apparently a lot of what I've done was inspired, and I use Mimikatz extensively.  I even attempted to document Mimikatz, which was such a great and huge effort that I was  working on nights and weekends, and I finally said, I can't do this anymore, I'm done.  And Ben actually made a joke at my expense, which I'm perfectly fine with.  He's like, yeah, some people try to document Mimikatz, good luck.  And I'm like, yeah, I get it.  Because while he's updating things, I'm trying to document it, and I'm just reading the code  to figure out what's there.  But what's interesting about Mimikatz is it's not just the security professionals that  are using it, right?  We have APTs all around the world.  This is from the MITRE ATT&CK framework.  This is not complete.  This is just what's been published.  I think if we were to actually know all the different groups that had actually used Mimikatz,  this entire page would be covered with like 8-point font, right?  So then we get to 2012, we have the Nike Fuel Band, we've got the Tesla Model S, iPhone  5, the Wii U, some sort of Sony portable gaming system, and we have group policy preferences.  So this is very interesting, and I went back and tracked this and identified that when  Microsoft released group policy preferences, sometime after that they published the wonderful  encryption key for it.  And I think it was probably related to the EU at the time was really pushing on Microsoft  to ensure that there was third-party integration into Microsoft products.  The Samba project was getting fairly big at this point.  And so it was important for Microsoft to really show that they were like, yeah, we're not  just embracing and extending, but here's some documentation of how this all works.  The problem is that this was changing passwords on computers, this was updating passwords  across different things, groups.xml, services.xml, schedule tasks.xml.  And we have, well, you know what's interesting about this, this screenshot I've been using  for almost 10 years, and I just now noticed there's a comma there.  So we all make mistakes.  So these XML files, all we had to do was search SysVol, look in the policies folder, and see  if we found an XML file that was named one of these or similar, again, related to any  of these issues here.  But primarily these are the interesting ones.  And then using the function that I believe Chris Campbell wrote, getDecryptedCPassword,  we can actually decrypt what that is using that AES key.  And then we have Responder in the same year, which means that we can just connect onto  a network segment and just kind of wait and just collect NTLM hashes out of the sky effectively.  This tool has been expanded way beyond original intent and original capabilities.  But this is kind of walking through the history of how we got to where we are now.  And I thought it was important to kind of recognize how these things kind of fit together.  And as we get into like 2013, Candy Crush, I'm sure a lot of people lost some time on  Candy Crush instead of working on computer stuff, which is probably a good thing.  The Xbox One, VR, Pebble Smart Watch.  I had one of those.  I thought that was pretty cool.  But we also got Invoke Mimikatz.  And I think really for me, this was kind of a game changer when we're looking at security  of systems, because we went from Mimikatz itself to this executable that you could build  or download, right, to a PowerShell script.  And at the time, in 2013, what was being done with PowerShell?  Was there any really great security back then?  No, there wasn't.  And so by being able to leverage PowerShell, security professionals, attackers were able  to bypass a lot of the security controls and execution controls that were in place.  Not that there were a whole lot.  But at least Mimikatz was detected most of the time.  And so Joe Baylock figured out that he could just dynamically reflect this DLL and pull  this into it in order to leverage all the Mimikatz functionality.  What's really interesting about this is a lot of attackers actually just linked directly  to this GitHub link and ran the raw code directly from GitHub.  And there were a couple times where the PowerSploit folks actually changed the URLs or messed  with things in order to see how that would mess with things or mess people up, which  I thought was pretty funny.  In 2014, we got the BMW i8 and Slack.  So Slack, I guess, is about 10 years old now.  But we also got golden tickets.  So again, in this big talk, abusing Microsoft Kerberos, we learned about how we could take  this account that no one had heard of before, even really knew what it was, the KerbTDT,  and leverage this account and the password hash in order to persist in the environment.  So if you were able to get the password hash for this account, you either compromise that  domain for a period of time and you were able to pull the hash, or if you were able to compromise  a backup system or a backup of it, you could leverage this in order to impersonate, forge  your own TDTs, your Kerberos tickets, your proof of identity on the network.  And so the user didn't have to exist in the network, so you could just make stuff up.  Let's say you're a domain admin.  This was usable until the KerbTDT changed twice, a so-called double tap, and was typically  used for persistence.  And so I think this was really one of those tipping point things, as Malcolm Gladwell  talked about in his book, where at this point, it was a seismic shift in Active Directory  security.  It certainly was for me.  And a few months after this came out, CertEU said there's no easy way to detect golden  tickets.  And I agreed with them until I figured out, hold on, there's something a little bit different.  Published information in early 2015 on how to detect golden tickets.  But the thing was, this really changed how we looked at Active Directory security, and  I think people really sat up and went, hey, this is a problem.  Well, except for 80 admins who were still going, well, you'd have to get domain admin  first, and that's like impossible.  So there was a lot of learning and understanding that we had to do in order to really ensure  that both the operations side of the house and the security side was on the same page  and understood that this is a real issue.  We also got overpass the hash, aka pass the key, which is effectively taking the password  hash so they can get a Kerberos ticket instead of going through the normal process.  And the protected user group mitigates this.  So there's another good reason for protected users.  Jake Hildreth of the TriMark team did a talk at B-Sides Charm a few months ago and actually  talked about protected users.  He's releasing a tool later this year called PowerPug, which is basically how to walk through  deploying the protected user group.  So check that out later this year, I think it's October, that's supposed to come out.  And pass the ticket.  So we go from pass the hash to pass the ticket.  So now if we can capture a Kerberos ticket, which we can if we compromise a user, we can  get into that user memory space, grab the Kerberos ticket, and reuse that.  Or if we have admin rights on that system, we can then dump the Kerberos tickets on there  and act as any when we want to, just like we could with hashes.  So the silver ticket really also changed things quite a bit, especially in my mind, because  the KerbDT is a little more difficult to get to, it's a little more difficult than figuring  out what a password hash is for a service account, which tend to have passwords that  are 15 years old, for whatever reason.  And so if we are able to identify what this password hash is, then we can go ahead and  create a silver ticket, use that against the service account or even a computer account.  And so as I said, Skip published this article, which is really interesting about how silver  tickets work, and one of the reasons why he did this is because Tim Medin reached out  to him and said, hey, I think I figured something out.  This seems pretty cool.  And I think this was another bit of a shift.  Again, a second one within the same year where things that were practical, or sorry, things  that were hypothetical at the time, like compromising, cracking, identifying what a password was  for a service account with an old, you know, something that was 10 years old, that was  something that was a little more hypothetical.  How is an attacker really going to figure that out?  Nobody was changing service account passwords because they're like, no one's going to figure  it out.  You know, walk the keyboard, no one's going to know what that is.  But with Kerberos Sting and some of the other techniques similar to it, we actually showed  that there's a practical representation of why these things are important.  And so I actually went up to Tim at Nolicon a couple years later, and I thanked him.  I said, as a blue teamer, thank you for Kerberos Sting.  He's like, I've never heard that before.  And I said, well, really, one of the things that I like about this is now I can say, you  know, your service account that's five years old, that's 10 years old, you need to change  it because there is a technique in order to guess what that password is and basically  crack what that password is.  And I figured out some detection of it by basically creating a Kerberos Sting honeypot,  creating an account that isn't doing anything.  I created it.  It has a spin that doesn't do anything.  It relates to a computer that may or may not be real.  And any time that someone pulls down the service ticket in order to interact with that service,  I know that they are probably doing something they should be doing, should not be doing.  So this is what I call the wonder years, the 2010 and 2014, where things were getting  interesting.  And so what I did was I mapped out here what the tools were that came out during this period  of time, from WCE to Mimikatz, a responder, to PowerView, which gives us incredible recon  capability of the AD environment, as well as the ability to perform some exploitation.  Privilege escalation from group policy to pass the ticket over, pass the hash Kerberos,  and then persistence around golden tickets, silver tickets.  These are my categories.  They're fuzzy.  I know that there's some things that could shift left or right, depending on how the  environment's configured and what's going on.  But I only have 60 minutes for a talk, so we move on.  And so here's the thing.  I also wanted to kind of map out conceptually how this looks.  So from recon of PowerView to capture of credentials to then use of those credentials with Mimikatz,  or leveraging techniques like GPP password, like pass the hash, pass the ticket, and how  all those things move across, like Kerberos thing, into an area where either those capabilities  or those techniques get us into a situation where we are already DA, or get us into a  situation where we can leverage something like a silver ticket or a golden ticket to  then get to DA.  Ultimately, DA is not the end state, right?  But it's something that's very impactful, so that's why we mention it.  Then we get into what I call the golden years, 2015 and 2019.  Things really started going crazy in 2014, and then they really went crazy in 2015.  And Michael, I'm sure that this is not exactly correct when DS Internals was released, but  this is the first year that I found an article that referenced DS Internals from Michael's  blog site.  So we have DS Internals, we have Keckio, which I don't think it was actually 2015, but it  probably was.  PowerSploit, ImpactIt, PowerShell Empire, CrackMapExec, that's incredible to me.  Just think about the power that security tooling brought to the table just in 2015.  And of course, those capabilities matured and evolved, and one of my biggest challenges  with this presentation is figuring out, okay, what could they do back then?  And I didn't have the time to parse the GitHub code to figure all that out.  But the point is the same, is that 2015, there was a lot of capabilities that came  out.  2016, we get Bloodhound, which from PowerView to Bloodhound, another kind of seismic shift  from the recon perspective.  And then 2017, we have an article that explains how to go from DNS admin to domain admin.  In a lot of environments, DS admins were given away like candy.  Then you have Deathstar, you have NTLM RelayX, you have the Ace Up The Sleeve presentation  by Andy, who's here, and Will.  Huge impact explaining what these permissions are.  What do they mean?  What does writeDACL mean?  Nobody knew.  After this, they did, I think.  SharpHound.  And then we get in 2018.  So we have a Python version of the Bloodhound ingester.  We have Ghostpack, a C-sharp port of many of the popular PowerShell tools going back  to PowerSploit.  DC Shadow, Rubius, porting Kekio.  The printer bug.  Another kind of seismic shift in looking at how force and trust are configured.  Unconstrained delegation was everywhere.  And with the spooler service on domain controllers, that was a major issue at that time because  it was so problematic, but it was everywhere as well.  The LDAP domain dump tool released by Dirkjan.  PrivExchange released by Dirkjan.  And then Wagging the Dog, again, finishing out this period of time with another seismic  shift in how we look at security and how it comes together.  2015 brought us Apple TV, the Apple Watch, Amazon Echo, hoverboards, which is super exciting.  And then DS Internals.  Again, this is the article that I found, and it's interesting.  If you have not gone to the DS Internals site, DSinternals.com, please do that.  Just go through and read it.  I guarantee you're going to learn something, and I'm not saying that because Michael's  sitting up front.  You will absolutely learn something if you go and read these articles.  I always find something new by reading Michael's articles.  But it's an impressive set of PowerShell tools.  Capabilities offline editing that led to some research that I did and some talk that I did  based on what Michael had done, what he had talked about, what he had captured as part  of that.  Being able to access the DIT when it's offline, when that DC is paused, turned off, be able  to modify things.  One of the most amazing things to me on that is that Michael figured out that if you could  edit the DIT, you could actually update a group like domain admins.  But then flag it, don't replicate this.  Let me say that again.  So we can edit a group like domain admins on one domain controller in an environment  of, say, 50 domain controllers.  Say it's somewhere out, it's an offsite.  It's somewhere out there.  It's not in your data center.  And we can now say this domain admins group has five additional members or one.  But all of the other domain controllers will know that the domain admins group doesn't  include those accounts, not that one or those five.  And so all we have to do is authenticate to that one domain controller and we're a domain  admin.  We authenticate to any other domain controller and we're not.  That to me is crazy.  So thank you, Michael.  Because I thought that was pretty freaking awesome.  Password auditing.  80 shadow credentials attack, which was leveraged by a number of others.  DS internal has been referenced by a number of other tools.  A bunch of tools across the board.  And then Kecio.  Kecio really, as I understand it, Benjamin didn't want to muddy the waters with Mimikatz  and wanted to have something that was really about pure Kerberos.  And so he was using a third party Kerberos implementation in order to be able to really  work with Kerberos, create packets, things like that.  And messing around with some of the vulnerabilities at the time around what was originally a zero  day around the Microsoft Kerberos implementation on domain controllers.  Really getting a feeling for that and understanding how it worked.  So then you can actually do a raw TGT request, which provides additional capabilities, doing  renewals, S4U constrained delegation, and a whole bunch more.  And then we have the PowerShell, PowerSploit manifesto, which Matt Graber wrote.  Where he's like, look, PowerShell is a thing.  I think we should capture some tools together.  Put together these tools and talk about how they impact security and what this actually  means.  Recognizing PowerShell as a key component of security and really bypassing security.  And because of this, Microsoft realized maybe we should do something about PowerShell security.  So we got constrained language mode.  We got better auditing.  We got a lot of things.  Again, significant shift in how things were looked at from a security perspective.  And then ImpactIt.  I believe the first time that I got to use ImpactIt or really play around with it was  when I had a DIT file and I wanted to interact with it and extract some hashes and do some  other stuff.  So really cool tool.  And it's been expanded to a whole bunch of other capabilities.  So share enumeration, Kerberos activity, MSRPC, NTLM authentication, packet manipulation.  Just the works.  And it's been expanded and incorporated into a number of tools.  And we have PowerShell Empire.  So Will and Justin at B-Sides Las Vegas in 2015 released the Empire, which then they  kind of shut it down and someone else picked it up in order to continue the Empire techniques  and approach.  I know that the folks behind Empire and Bloodhound shifted more to C Sharp because of the improvements  of PowerShell and PowerShell security.  And then in 2015 at Black Hat, I talked about unconstrained delegation, which to my knowledge  is the first time that Kerberos delegation was really spotlighted.  This is a problem.  And I found it very interesting because I was working with it and so I became a Microsoft  certified master by going through the program at Microsoft a number of years ago.  I won't say how long ago, it was before this talk though.  And I'm like, what is unconstrained delegation really?  And so I started digging into it.  So using Mimikatz, using some other things, I realized that the TGT, that proof of identity  is actually placed in that service ticket when it's delivered to that server.  And the server just puts it in memory and keeps it there.  So you can have a situation where all your users, like on an exchange server, have all  their TGTs there if unconstrained delegation is enabled for it.  And delegation means impersonation and is a key component of how things like web servers  do updates on databases on behalf of the user.  And I talked about persistence with Admin SD holder and Admin SD prop and the fact that  you could go ahead and have the ability to modify domain admins without being a member  of domain admins.  And then things like CyberArk and other tools decided to use something like this to update  passwords.  So that works.  And then Golden Tickets, which originally, again, were released in 2014.  But they were limited to the domain that they were captured in, or at least were created  in based on the Kerb CT that was captured and used.  Unless you were able to compromise, say, a root domain and then you had the EA configuration  within that.  But I figured out and communicated, I remember I was at the barbershop getting a haircut  back when I cut my hair.  And I was waiting my turn and I messaged Benjamin Delpy on Twitter, messaging, and I was like,  hey, I think there's something around like SID history and something we could do around  that.  And maybe that could influence what's happening with Golden Tickets.  And he goes, no, no, no, I don't think so.  And then later he goes, yeah, I think you're onto something and he tweeted it out.  And we started working on this.  And so, therefore, extra SIDs was born.  And then Golden Tickets became this thing where compromise of one domain compromised  all of them.  Now, technically, if you compromised a domain, you could still compromise any of the domains  in the forest.  There's ways that you could set up a group policy, have it apply to a site, which would  apply to those other domain controllers in order to have some control in the environment.  There are ways around it.  So this made it super easy because at the time, Golden Tickets were running wild.  I know this because after I figured out the detection and worked with some groups, we  started detecting Golden Tickets in environments that weren't known to be compromised.  And then DC sank, another huge kind of shift to how we looked at security and how we handled  it.  Prior to this, most of the implementations and impact that we had was you had to get  onto a domain controller, either running code on it or you had to remote into it in  order to interact with it through Mimikatz or similar.  With Invoke Mimikatz, we were able to do that through PowerShell.  But with DC Sync, we could do this across the network.  And so, with Vincent and Benjamin working on this and incorporating it into Mimikatz,  we had, again, this big kind of seismic shift.  Plus, we started seeing that we could have some history behind these things.  Which to me is really interesting because if we have a user whose password is, I don't  know, troopers23!  And then it's troopers24!  We probably know what it's going to be next year.  And then also at Black Hat in 2015, I talked about how Silver Tickets could be used to  exploit the environment again if an attacker actually compromised the environment, dumped  all the hashes for everything, had copies of the dit, whatever.  But they were kicked out.  They lost their access.  They lost their permissions.  Well, they have 30 days until that password for that computer account changes.  That's more of a guideline.  And you can actually manipulate that as well.  So a smart attacker, a sophisticated attacker, could just get on a DC, change the registry  setting on it so that it never changes its password for the computer account.  And then you have, like, forever persistence.  Because then you can create a Silver Ticket for that computer account and then re-compromise  that environment.  Or just use the Silver Ticket to DC-sync, which I talked about at DerbyCon.  And then you can also DC-sync as a user, which is another big deal.  Because DC-sync, when it was released, the whole focus was as a domain admin.  You already have privileges.  So this was a bit of a shift from you have to be a DA so we can monitor that or administrator  or an enterprise admin.  Throughout this talk, I'm saying DA, but I really mean an app directory admin.  But now we can do that by having a couple of permissions for this user in the environment,  on the domain, and then be able to actually DC-sync it.  But then I also talked about how we could detect this.  And this detection, especially this dsgetncchanges request, is specific for DC-sync, but it also  works for DC-shadow.  And then DSRM, which is another thing where I was like, OK, what is a DSRM account, really?  Directory Services Restore Mode account.  George has written about it.  A number of people have written about it.  By digging in and using Mimikatz, I was able to truly identify and go, OK, this is absolutely  the RID 500 account.  This is the administrator account for a domain controller.  What does that mean?  How can we use that?  How can we influence it?  So one Sunday night, I was at home, and I was messaging, well, early in the evening,  I was messaging back and forth with Benjamin Delpy, and I was like, look, I think there's  something here.  DSRM account, originally you had to restart into a special DSRM mode on the domain controller.  But Microsoft's made some changes, and they enabled it so you could actually log on through  the actual user, the log on GUI for the server with that account.  And I'm like, well, what does that mean?  And so Ben and I are going back and forth, messaging back and forth on a Sunday evening.  It had to have been after midnight in Paris, because it was getting late on my side, 6,  7, 8 o'clock, and he got it just before me.  He's like, I was able to pass the hash, and I was like, oh, Ben, you're always first.  So that was pretty interesting.  Now, of course, it's a non-default configuration, so Microsoft has said, that's not a default  configuration, so that doesn't matter to us.  But in environments where this has been configured, you can actually pass the hash to the DSRM  account, especially if it's the corporate organization password that's used for the  DSRM account.  Because most of the time, when you promote that domain controller up, you use a DSRM  password, because you're like, ah, I just want to get it promoted.  I'm just going to use a password.  We'll change it later, right?  Yeah, totally.  We always change it later.  Then soon after this, we got Craft Mac Exec, which Bytebleater said at the bottom here,  heavy use of the impact library and the PowerSploit toolkit.  So basically pulling these things together.  And the whole point of this talk is to show how people have built on what others have  done and how we've kind of moved forward with security.  And the attacks have sharpened the defense.  And then as the defense got better, the attackers and the security professionals have shifted  to other areas.  Like Spectrops folks originally were looking at PowerShell, shifted over to C-sharp, because  there was a lot better detection in PowerShell.  And then group managed service accounts.  I love this article from Michael, attacking group managed service counts.  I only really found this a few years after this and started digging into it, because  I thought it was really cool.  Michael identified that the way that GMSAs work, which is obvious, is that you have to  have rights in order to be able to get the password for it, because that's how it works.  Microsoft had to figure out a way to make managed service counts actually workable in  real world scenarios, because apparently they didn't realize that corporations don't  just have a service count on one server, they tend to have that same account on several  in order to run applications.  So group managed service counts was the solution to this, where basically the domain controller  would generate a password, like you seeded it, and it would generate a password and update  it every 30 days, kind of like the computer account password.  And then the account that needs it, when that starts up, it would have to reach out and  request it, and then update and use that.  But there has to be a process through that.  So there's a property that enables the ability to be able to do that, and then we can look  to see who has those rights.  Michael pointed out that you could actually, if you had those rights, you could just go  ahead and pull it yourself.  And so that was kind of cool for me, because we've had customers that go, oh, well, we  use GMSAs as domain admins.  So it's okay, because they're GMSAs.  But they have a situation like this, where there's a ton of servers that have the ability  to pull the password for it, or a ton of accounts that that service account's not even running  on.  So this is a big deal.  So definitely check this out if you are offensive or defensive, because this is something that's  being used more and more now.  When Michael pointed this out, I don't think anyone was really using GMSAs, because the  DCs weren't running the required OS level.  They are now.  They absolutely are now.  So GMSAs have become more prevalent.  Much like Google Home, drones, AirPods, again, another Dyson weird hair accessory.  And Bloodhound.  Who doesn't love Bloodhound?  Raise your hand if you've used Bloodhound.  Okay, that's what I thought.  Okay, Andy, be happy, okay?  It's definitely very prevalent, being used.  So Will, Rohan, and Andy released Bloodhound at DEF CON 23.  What's funny is I grabbed this image off the Bloodhound Read the Docs, which is an  awesome site, an article.  I copied this, and I thought it was just an image.  And as I was going through my slides, I was like, wow, it's moving.  That's cool.  So thank you, Andy, for the visual representation and making my presentation better, because  people can look at it and go, hey, something's happening over there while Sean's talking.  The cool thing about Bloodhound is you haven't used it, which everyone looks like they have,  but it uses graph theory to map out those relationships in Active Directory to really  understand how things interconnect.  And Andy and team pointed out that they really leveraged research and published information  from others in order to get to this point where Bloodhound could be a tool.  And it was released as open source, so the community has really contributed to it, which  is awesome.  In 2017, with Fidget Spinners, another Tesla, and the Nintendo Switch, which I love, probably  my favorite thing about 2017, other than this article.  This article is fantastic.  I saw this.  It was after the article was released, actually, and I was like, okay, I need to shout this  from the mountaintop, because this is a big deal.  DNS admins, as I said earlier, was given out by candy to people, especially in environments  where DNS wasn't the Microsoft DNS, the Windows DNS, it was a third-party DNS, like Infoblox.  I'm not a fan.  But then they'd end up with like 100 DNS admins, and I'm like, well, what about this?  And they go, what do you mean?  That's not really a thing.  I was like, absolutely it is.  When you can run a DLL on a domain controller from anywhere on the network, just because  you're a DNS admin, that's a bad thing.  Microsoft didn't think so.  Apparently, they've made some tweaks and adjustments since then, which mitigates at least portions  of this.  I think most of it's been mitigated, but not 100%.  We also got Deathstar.  Who's familiar with Deathstar?  Yeah, a few people.  So basically, Bytebleeder decided that what he would do is show how to do an end-to-end  kind of auto-pwn for Active Directory, based on most environments of what he'd seen.  And the article shown here kind of maps out what it all does and how it works.  To me, Deathstar is one of those things that should just not exist.  No offense to Bytebleeder, but it just makes it too easy for anyone just to run this thing  and basically own an AD environment.  There's a certain point where the technology has gotten too easy to cause harm, and this  was one of those things that I think was a shift in that direction, in my opinion.  And then I talked about group policy delegation at the first Walmart SparkCon, a security  conference that they had opened up in Bentonville, Arkansas.  Which basically, I had noticed that a lot of organizations and companies that had really  bad delegation of group policy, permissions allowing modify and full control for user  accounts, especially on the domain and the domain controller structures and containers,  and that's a problem.  And because once you can modify the group policy, you can do anything.  Group policy is kind of like the regex for everything.  It's the registry editor for everything, and if you can run on a system, it can do just  about anything.  Install, run code, change security policy, everything.  So this is a pretty big deal, especially if you have user accounts that can modify your  policy.  Then we have NTLM RelayX.  So at this point, we saw another bit of a shift where we can now have a tool that will  allow us to relay, using NTLM, pretty much any protocol.  Any of the ones that matter and the things that work about it.  And I want to say, one of the things I really like about this article from Fox IT is that  they put in mitigations.  So if you're working on an offensive tool, you're putting something out there, please  at least look at the defensive side.  Now I see Dirk Jan laughing.  I know that these are difficult mitigations to do, which is probably why he's laughing.  Yeah, LDAP signing, no one does that.  Spin, target name validation, probably not.  SMB signing, not enough.  So I understand that, yeah, these things are more difficult.  They are getting better, somewhat.  I like to see them get a lot better.  And then we see the big shift, again, in how we look at these things.  Again, what does generic all mean versus generic write?  What about write DACL versus write owner?  So in the Black Hat presentation in 2017, Andy and Will got up on stage and really gave  everyone a breakdown of what these permissions mean.  What is an ACL?  What's an ACE?  What's a SACL?  You don't have to know.  You can just go read the white paper, and it explains exactly what it means.  But it covers all the different object types.  And probably one of the most impactful parts of the presentation are these slides here.  And a number of these have already been talked about or covered.  But really, the key thing and the key takeaway here is how to hide these techniques and approaches,  even from the domain admins.  Because you can configure the permissions in such a way that you can't see these as  your domain admin.  So the backdoor around EC Sync, the admin SD holder backdoor, providing the ability  for really anyone to be able to look at LAFs passwords across the environment from the  Microsoft Local Admin Password Solution.  And Exchange.  One of the great things about this talk was highlighting the problem with Exchange and  the permissions that it has.  And the fact that the permissions are just everywhere.  Going back years to, I believe it was 2007, when Exchange just basically said, you know  what?  We don't like the situation where the Exchange admins don't really have rights to AD, and  they have to talk to the AD admins.  So we're going to make our own parallel permission model within AD.  And now the Exchange admins can just do what they need to without talking to the AD admins.  Exchange had that much power in Microsoft, and still kind of does.  And then abusing GPOs, being able to have rights to modify it, but not make that permission  structure look obvious.  And then in 2018, we have another Dyson hair thing, seems to be popular over the years.  Another virtual reality thing, and another smaller version of an old console.  And at Black Hat this year, we have the DC Shadow attack.  Really, really cool research.  Because all we have to do is get AD admin rights, or have some permissions in the environment,  which are unusual, but could be possible.  Add a computer object, because anyone can do that by default.  And then use it as a rogue domain controller.  All we have got to do is update a record for it in the configuration partition, add some  spins to it that mirror what the DCs have.  And then we can actually say, hey, we're a DC, and influence replication in that environment.  And then we can clean it up very quickly.  So really interesting attack.  Based on my understanding is don't recommend that red teamers, pen testers do this, because  it can cause some problems with the DCs, especially with replication.  Michael's nodding.  So yeah, don't do that.  But if you see these rights, if you see the permissions for it, it's definitely something  that's interesting that should be fixed and cleaned up.  And then the printer bug.  Same year, at DerbyCon 2018, Lee Christensen, Will Schroeder, and Matt Nelson talked about  this technique.  There's a lot of things, really good content in the slide deck, but really what stood out  at me at this presentation was this involvement of unconstrained delegation with the print  notify technique.  And being able to leverage that to influence even across trusts.  Microsoft's like, yeah, it's a feature, not a bug.  But then also later on, they went, yeah, okay, maybe we should fix this trust thing and make  it so that you can't do that across trusts.  And then in 2019, we had another VR thing, another drone.  The Roku stream bar, which is a sound bar, and a Roku device, which is kind of cool.  And then an app-controlled and automatic-controlled coffee mug, for those that wanted to do that,  I guess.  Because you're not drinking your coffee fast enough, obviously.  And then, of course, the wagging the dog slide, which I'm going to step over here so I'm invisible  to the video, because there's a lot up here.  Really what Elad did, and I didn't understand this when he released it, I think for many  of us, even those that are pretty well-versed in Kerberos, there is so much to this article  that people are still digesting it today.  And really the key takeaway as I step back into the video world here, the key to this  that Elad came up with and identified, and collaborated with a number of folks in figuring  this out, was that if you had resource-based constrained delegation, there was a path to  actually then compromise a computer object, not just that object with the permissions  that you had, if you have full control or other interesting permissions on it, but then  to be able to get system on it.  And that was a really big deal and a shift, because at the time, once you had full control  of a computer object in that directory, it was pretty well understood that that didn't  really mean anything to that computer that was tied to it until this.  And this is again kind of that seismic shift.  And it looks like I have the wrong title on here, but that's okay.  So the tools that we have during this time period, actually it is the golden years, so  that's fine.  So the tools we have, DS internals, Kekio, PowerSploit, Impact, PowerShell, Empire, DCsync,  Bloodhound, Deathstar, NTLM RelayX, SharpHound, Ghostpack, Rubius.  Oh my goodness.  And if we're on offensive security, do we have any wonder why defenders were having  such a tough time 2015 to 2019?  And then from the privilege escalation perspective, if you're a DNS admin, you're a domain admin.  If you're an exchange admin, you're a domain admin.  You have unconstrained delegation and you have principal or service running on DCs,  which is pretty much most places, you're a domain admin.  And then if you have full control of a computer object, by the way, fun fact, if you are a  domain admin or just a regular admin or a user and you created a computer object in  Active Directory, you get owner rights to it, which means that you can change permissions  later on.  So if someone creates a computer object and then later on that computer object becomes  a domain controller, you have permissions on that domain controller, computer object.  And then you can do this fun resource-based constrained delegation thing to get system  on it, potentially, depending on the configuration.  So these are all really interesting but bad things.  And then we have DC Shadow as well.  And there were so many tools, I couldn't fit this on the same slide, so I had to break  out the tools into its own slides.  So we have Impact and PowerSploit that led to CrackMap Exec.  We have DS Internals and Bloodhound.  We have NTLM RelayX and Empire.  We have Kecio, which led to Rubius.  Lots of incredible capability here.  And then the conceptual flow, DNS admin to domain admin, printer bug to domain admin,  80 permissions to DC Shadow to domain admin, in some cases 80 permissions to domain admin.  Okay?  Honestly, a lot of situations.  And then resource-based constrained delegation, probably to 80 permissions.  Later on to domain admin.  And now we get into what I call the third age, which is really to present, but I said  2023, because at some point I have to stop the research and put this information in the  slides for a talk.  So we have Atalanch that was released in 2020.  And then 2021, things just got crazy again.  Certified preowned, the Black Hat talk by Will and Lee, certified the tool that came  out of that.  Kerberos Relay Attack, defined by James Foreshaw, certified the Python port to certify.  Is this my domain controller, which I actually found this talk while working on these slide  decks.  It's pretty cool if you haven't seen it.  Kerb Relay up in 2022, another game changer.  And then in 2023, CrackMapExec continues as NetExec.  So 2021, folding phones and OLED switch, nothing too interesting.  But we got the Remote Potato Zero tool, which is another NTLM Relay attack, but really focused  on RPC, which is a pretty interesting thing.  Apparently Microsoft did a partial patch, but there's still some interesting things  around that today.  But then we go to the other one, PetitPotem.  When I was looking at the GitHub on this, and I saw the hippos, and then I Googled for  PetitPotem, and it looked like, hey, there's actually this hippo character that's popular  in Paris, in France, but I didn't know that.  So now I learned something, and maybe many of you have this also.  But it's a proof of concept tool to coerce Windows hosts to authenticate to other machines  via MSEFS RPC.  And what's interesting about this is I love the shout outs.  I love it when people reference other work.  So previous work by Tifken, Lee Christensen, and Elad Shamir, and others from Specter Ops,  in order to figure this out.  And then we have Certified Pre-Owned, where again, kind of a seismic shift.  This presentation, the white paper, the information that came out of this from Will and Lee, really  shifted and changed how people look at things.  Certainly how attackers were looking, how red teamers and pentesters.  I talked to some red teamers and pentesters recently, and I said, what are the most popular  ways that you compromise Active Directory?  And they said, Azure AD Connect and ADCS.  I'm like, well, that makes sense.  And then a number of escalation scenarios, which I'm not gonna go over here, because  there's lots for you to look at.  And then Certified Tool, which goes through and looks at those things.  And one of the things I loved about the Certified Tool page, they actually self-embargoed and  didn't release the tool for about 45 days after publishing the information, giving people  the opportunity to fix things.  But also recognizing things don't get fixed unless there's sort of a proof of concept  of it.  And then Pidipotam relayed to ADCS, which is really the issue that we're dealing with today.  And then James Forshaw incorporating the resource-based constrained delegation, again, building on  something before to show that something that shouldn't be relayed can be relayed.  And then building on these concepts, Sagi, Eyal, and Yaran, I apologize if I'm mispronouncing  your names, identified a way to actually do this kind of person in the middle between  a client machine and a domain controller.  And what was interesting about this is they talk about how to do this with Azure AD Connect.  So I do recommend that you take a look at this talk and presentation.  And then we get into 2022, where we have the Stream Deck and an Arlo camera, because there  wasn't a whole lot of interesting tech in that year.  But we did have Kerbery layup.  And again, another kind of seismic shift where a number of tools and other capabilities were  put together in a way that builds upon what was done before.  So a new computer object in the environment because of the default permissions that are  there, getting the Kerberos tickets using S4U proxy, S4U to self, which, again, read  the article.  I'm not going to explain it here.  I don't have time.  And then ultimately getting system as that computer.  I'm not going to cover the mitigation, other to say that it's hard.  These are the things that really make it that help mitigate this, but these are some of  the hardest things to do in just about any environment.  So to wrap that up, we have a number of tools, more privilege escalation, and it just gets  more complicated for defenders.  Because in this third age, we're looking at the situation where we have these tools that  lead to either NTLM relay attacks, Kerberos relay attack, and then combining that with  ADCS in this entire page ultimately results in compromise of Active Directory.  So I put together some what I call effective Active Directory defenses.  There's a lot of these slides.  I'm not going to cover all of them up here because I would just bore you with them.  But I do want to highlight that you can effectively break recon by changing permissions in Active  Directory.  Test first, but you can ensure that anyone in your environment can't just read Bloodhound,  can't just run any of the recon tools in order to see who the admins are and figure out how  to target the environment.  You want to make sure that when you make these changes that you actually create a group that  allows auditors in order to be able to see into those groups, see into those environments.  I've seen Active Directory environments that have the admin SD holder modified so that  way authenticated users can't see who's in the main admins and other privilege groups.  That is pretty effective.  And then from a system defense, it comes down to disabling a bunch of protocols that shouldn't  be in use anymore.  SMNR, NetBIOS, WPAD, LM, NTLM, V1, it's more difficult.  SMBV1 can be more difficult.  But then also doing the things that we should be doing, we should have been doing for years.  Newer Windows operating systems will have some of these turned off and will have some  of these hardened, but we have a lot of old Windows operating systems out there still.  And when it comes to Active Directory admin security, we've got to make sure we have sensitive  and cannot be delegated.  Moving on to then protected users.  Protected users, protected users, protected users, it's really important.  We also have to make sure that our Active Directory admins are only logging on to our  admin systems at that tier zero level.  We need to make sure that our service account security is protected, that we're using long  complex passwords.  So things like Kerberoasting and password spraying doesn't work as effectively.  From a domain controllers, we need to make sure they're physically secure, but we have  to make sure that they are running current versions of Windows.  That is a big deal still, unfortunately.  We should not be running unsupported versions of Windows on our most important servers.  And then limit who can log on to them, who can connect to them.  And then I captured some of the effective NTLM relay defenses, again, starting with  auditing.  I put these first so that Dirk-Jan hopefully can go, yeah, that makes sense.  And others here who have done a lot of relaying, because we want to make sure that we do get  these things fixed.  I also have captured some information about hybrid cloud attacks, seamless single sign-on,  identified by Michael Grafner back in 2017, that, hey, you can attack these if you're  able to compromise that computer object that is used for it.  You can impersonate these users.  And because of this and many other reasons, we want to make sure that we protect our Azure  AD Connect server like it's a domain controller.  Same thing with ADFS.  Back in DEF CON 2017, I talked about the fact that federation certificates are effectively  like the curve TDT, like golden tickets, and could lead to something like a golden  SAML attack, that we have to make sure that when the attacker can extract that certificate  and use it, they can impersonate users to cloud services.  That we've got to make sure that we protect our ADFS servers and other federation systems  like their domain controllers.  Azure AD Connect permissions tend to be the permissions that are needed for DC sync.  We need to protect those.  Eric Yan has done some great talks about fun things to do with the Azure AD Connect sync  account on the cloud side.  So these are things that we need to make sure...  These are reasons why we need to make sure we protect these systems.  We need to protect and defend Azure AD Connect because of things like password authentication,  where clear text passwords are passing through it.  And Adam Chester identified that you could actually capture the clear text passwords  for the users that are using PTA if you can compromise the Azure AD Connect server where  that PTA agent is by injecting a DLL.  Adam also expanded to Okta and realized, hey, Okta is doing pretty much the same thing that  Microsoft is with Azure AD Connect.  There's the delegated access to sign in to Okta using AD credentials, and the Okta AD  agent, which is doing these...  It's basically proxying these authentication requests.  And so he has this incredible article, Okta for Red Teamers, that was put out in December  of 2023.  If you haven't already read this, read this article.  It's impressive.  A lot of environments are deploying Okta now, doing these hybrid cloud integration components,  and it's a really big deal because if you compromise a user account in AD, you can leverage  that to Okta, to SSO, to something else, and typically MFA is not required.  Or you can compromise the Okta service account in AD, which enables the ability to authenticate  to Okta as any user you want, and SSO to other systems.  This sounds a lot like some of the other stuff that's happened with Azure AD Connect.  And then Adam was like, well, what if I just...  If I compromise that, I could just spin up my own Okta agent itself and then use that  to do whatever I want.  So like I said, pretty cool.  And Okta has not had their best security, let's say, reputation out there, but all of  the cloud environments have been attacked.  So real quick, I want to talk about some of the key things around securing Enter ID administration.  There's over 100...  There's 100 Enter ID roles, and 26 of these, Microsoft says, that are privileged, including  global admin and global reader, which are not the same thing.  So again, I'll publish these slides later, but Trimark has gone through, I've identified  what we call level zero, which are like the tier zero roles, so I'm gonna step over here.  So global administrator, hybrid identity administrator, partner tier two support, thank you to Andy  for this.  Privilege authentication administrator, privilege role administrator, these are the big ones.  Make sure you protect these.  Level one, there's a bunch of these, I'm not gonna go through them, I'm almost out of time.  But really, this chart that Andy did is better than what Microsoft has even today.  And the other thing to look at are the application permissions.  And I do know that this first one, directory read-write-all, has been discussed at length  that maybe it doesn't actually have high level rights, but Microsoft still flags it,  so I still flag it.  So these are level zero permissions at the tenant level that really need to be scrutinized.  And from a cloud admin perspective, we need to make sure that we're using admin systems,  enforcing FIDO2 for these level zero, level one roles, and leveraging conditional access  policies to enforce MFA for admins from all locations.  So in conclusion, as I end right on time, Active Directory has become more challenging  because of all these issues, because of the building blocks that have happened over the years.  I've mentioned all the attacks and problems with this, but there's also defensive techniques  that have evolved with that as well.  We have better techniques, we have better technology, we have better tools that are  free or low cost in order to improve the security of Active Directory.  We also have to do a better job looking at these hybrid components as we go to the cloud,  as we expand things there.  And making sure that we understand these things will enable more breach resilience and ensure  the better security of our environments and our security posture.  So thank you very much for your time.  This has been mine.  So thank you very much.  I think we should definitely take the time, at least a couple of minutes for Q&A as you  all have the opportunity to ask Sean questions.  So if you want to raise a question or anything, show me.  I will come around with a microphone.  Is there also development going on on the defensive side from recovering an attack?  So after a domain controller gets compromised?  Yeah, that's complicated.  My feeling is it's really hard to recover from that.  I will say that there are companies that work with incident response companies that actually  do a recovery and rebuild Active Directory and domain controllers in days.  There are problems with that, right?  Because even if you rebuild those domain controllers, that's good.  There's things like DPAPI that exist that really make this whole thing complicated.  There are some things that an attacker can go back to even after a full rebuild, although  realistically the level of knowledge and technology and resources behind that is a high bar.  So recovery has gotten better.  We've seen environments that have been compromised and they've been rebuilt and back online within  weeks now versus what it was before.  I worked some very large breaches that took months to recover and go through it, and even  after that the attacker some time got back in.  But the good thing is that we've learned from the attacks, we've learned from the techniques,  and we've been able to build a better recovery plan for it.  So it's getting better.  It's still not where it needs to be, but it's much better.  Thank you.  Oh, Michael.  No tough questions.  Don't worry, Sean.  Yeah, so a friend of mine told me that it was really impossible to keep Active Directory  secure to keep up with all the new research, with all the stuff, and that he just gave  up.  He migrated to EntroID, and even though it has its weaknesses, it is much easier to keep  EntroID secure than Active Directory.  What is your opinion to that?  Should we give up?  Should we give up?  So a few years ago, or five years ago, I was of the opinion that Active Directory will  go away.  I am no longer of that opinion.  Active Directory is going to be with us.  We're going to probably be at Troopers 34 and still talking about it.  There's too much manufacturing.  There's too much use cases where Active Directory has to exist.  I think that because of Active Directory's incredible customization, customizability,  configuration options that are virtually infinite, there's so much that can be done with it that  makes it more difficult to manage and administer, especially with large environments, the older  environments.  Those are when we typically see it.  I have seen environments that have Active Directory that are really well secured.  It can be done.  The right tools are required.  One environment used Palo Alto firewalls in order to do RPC filtering.  So even from the workstation zone, you couldn't actually talk to the main controllers at an  admin level.  Things like that are necessary, and I think part of the problem with Active Directory  security is even today, we're still managing it the same way we were 10, 15, 20 years ago.  That's got to change.  It's awful to have multiple smart cards, key cards, whatever, to log into different systems,  to log into different accounts, but that's what's necessary, and most environments aren't  doing that.  At Trimark, we did a survey of all of our assessments for Active Directory that we did  in 2023.  Seventy-five percent of them had at least one critical.  That's a problem, but these criticals weren't complicated things.  These were things that should be fixed, like an account that's Kerberoastable on domain  admins.  We're still dealing with the stupid stuff, the stupid stuff we need to solve, and then  we can get to the other things.  I think it is possible to secure Active Directory.  It takes a little work.  It takes a little knowledge, but I believe it can be done, and I believe that Entra ID  is better, but we're making the same mistakes in Entra.  We're putting user accounts in admin roles.  It just doesn't make sense to me, so thank you for the question, and thank you all.  Thank you.  Thank you.