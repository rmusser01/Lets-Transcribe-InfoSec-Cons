{
  "metadata": {
    "webpage_url": "https://www.youtube.com/watch?v=F92L4ibglgQ",
    "title": "TROOPERS24: Say Hello to your new cache flow!",
    "description": "Talk by Geoffrey Bertoli, R\u00e9mi Jullian, Th\u00e9o Gordyjan (@___t0___) - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/a8zf7h/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
    "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
    "duration": 2731,
    "channel": "TROOPERS IT Security Conference",
    "uploader": "TROOPERS IT Security Conference",
    "upload_date": "20240902"
  },
  "segments": {
    "metadata": {
      "webpage_url": "https://www.youtube.com/watch?v=F92L4ibglgQ",
      "title": "TROOPERS24: Say Hello to your new cache flow!",
      "description": "Talk by Geoffrey Bertoli, R\u00e9mi Jullian, Th\u00e9o Gordyjan (@___t0___) - June 26th, 2024 at TROOPERS24 IT security conference in Heidelberg, Germany hosted by @ERNW_ITSec\n\n#TROOPERS24 #ITsecurity \nhttps://troopers.de/troopers24/talks/a8zf7h/\n\nMore impressions:\nhttps://twitter.com/WEareTROOPERS\nhttps://twitter.com/ERNW_ITSec\nhttps://infosec.exchange/@WEareTROOPERS\nhttps://infosec.exchange/@ERNW https://ernw.de",
      "channel_url": "https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ",
      "duration": 2731,
      "channel": "TROOPERS IT Security Conference",
      "uploader": "TROOPERS IT Security Conference",
      "upload_date": "20240902"
    },
    "segments": [
      {
        "Time_Start": 0.0,
        "Time_End": 15.84,
        "Text": "This text was transcribed using whisper model: large-v2\n\n So, thank you very much for coming to our talk."
      },
      {
        "Time_Start": 15.84,
        "Time_End": 21.86,
        "Text": " So we will be talking, as I said, about cache information when you are using Windows Hello"
      },
      {
        "Time_Start": 21.86,
        "Time_End": 24.16,
        "Text": " for Business and Tri-ID."
      },
      {
        "Time_Start": 24.16,
        "Time_End": 26.0,
        "Text": " So first of all, who are we?"
      },
      {
        "Time_Start": 26.0,
        "Time_End": 29.98,
        "Text": " So we are three security researchers from SYNACTIV."
      },
      {
        "Time_Start": 29.98,
        "Time_End": 39.4,
        "Text": " So Theo and I are from the Penetration Test Team, and Remy is from the Reverse Engineering"
      },
      {
        "Time_Start": 39.4,
        "Time_End": 40.4,
        "Text": " Team."
      },
      {
        "Time_Start": 40.4,
        "Time_End": 43.68,
        "Text": " So just a quick word about SYNACTIV, I won't be talking too long about that."
      },
      {
        "Time_Start": 43.68,
        "Time_End": 46.92,
        "Text": " So we are an offensive security company based in France."
      },
      {
        "Time_Start": 46.92,
        "Time_End": 52.8,
        "Text": " We are almost 200 security experts focusing on penetration tests, red teaming, reverse"
      },
      {
        "Time_Start": 52.800000000000004,
        "Time_End": 57.68000000000001,
        "Text": " engineering, vulnerability research, development, incident response, everything that a security"
      },
      {
        "Time_Start": 57.68000000000001,
        "Time_End": 58.68000000000001,
        "Text": " company can do."
      },
      {
        "Time_Start": 58.68000000000001,
        "Time_End": 65.52000000000001,
        "Text": " And we also have a conference in Paris, Execon, so if you do nothing in October."
      },
      {
        "Time_Start": 65.52000000000001,
        "Time_End": 72.60000000000001,
        "Text": " Just a quick agenda, so we'll be just focusing on how we came up with this research, have"
      },
      {
        "Time_Start": 72.60000000000001,
        "Time_End": 78.08000000000001,
        "Text": " a lot of definition about Windows Hello for Business and Tri-ID."
      },
      {
        "Time_Start": 78.08,
        "Time_End": 83.72,
        "Text": " We will be talking about the cache data format, what is possible to do for offline authentication,"
      },
      {
        "Time_Start": 83.72,
        "Time_End": 91.44,
        "Text": " a quick demo of our tool sets, and a word on DPAPI because it's quite important on the"
      },
      {
        "Time_Start": 91.44,
        "Time_End": 93.42,
        "Text": " new cache information."
      },
      {
        "Time_Start": 93.42,
        "Time_End": 98.16,
        "Text": " So to start, all this research started during a penetration test."
      },
      {
        "Time_Start": 98.16,
        "Time_End": 100.96,
        "Text": " We had to perform an audit on a workstation."
      },
      {
        "Time_Start": 100.96,
        "Time_End": 105.32,
        "Text": " The client wanted to know what's possible to do if we stole a laptop from us."
      },
      {
        "Time_Start": 105.32000000000001,
        "Time_End": 115.36000000000001,
        "Text": " So the workstation was encrypted, BitLocker and TPM, but no pin code was required to boot."
      },
      {
        "Time_Start": 115.36000000000001,
        "Time_End": 124.62,
        "Text": " So we just sniffed the BitLocker key through the bus, decrypted the disk, and we saw that"
      },
      {
        "Time_Start": 124.62,
        "Time_End": 130.92000000000002,
        "Text": " the computer was in a fully Tri-ID environment with Windows Hello for Business and there"
      },
      {
        "Time_Start": 130.92000000000002,
        "Time_End": 133.92000000000002,
        "Text": " was no MSCache store on the computer."
      },
      {
        "Time_Start": 133.92000000000002,
        "Time_End": 143.64000000000001,
        "Text": " So we know that it was possible to access to the domain even when we weren't connected"
      },
      {
        "Time_Start": 143.64000000000001,
        "Time_End": 148.28000000000003,
        "Text": " to the internet, so we know that there is some cache data somewhere."
      },
      {
        "Time_Start": 148.28000000000003,
        "Time_End": 151.60000000000002,
        "Text": " So we decided to have a look at it."
      },
      {
        "Time_Start": 151.60000000000002,
        "Time_End": 154.20000000000002,
        "Text": " So just a few definitions."
      },
      {
        "Time_Start": 154.20000000000002,
        "Time_End": 156.04000000000002,
        "Text": " What is Windows Hello for Business?"
      },
      {
        "Time_Start": 156.04000000000002,
        "Time_End": 158.52,
        "Text": " It's different from Windows Hello."
      },
      {
        "Time_Start": 158.52,
        "Time_End": 161.60000000000002,
        "Text": " Windows Hello is just a way to authenticate on your computer."
      },
      {
        "Time_Start": 161.6,
        "Time_End": 167.42,
        "Text": " It's pretty straightforward, using a pin or biometric gesture or everything to log"
      },
      {
        "Time_Start": 167.42,
        "Time_End": 170.12,
        "Text": " in on your computer, on your personal computer."
      },
      {
        "Time_Start": 170.12,
        "Time_End": 175.24,
        "Text": " And it's basically just a password when you are using Windows Hello."
      },
      {
        "Time_Start": 175.24,
        "Time_End": 183.16,
        "Text": " It's just an easier way to connect to your laptop and not to remember a password."
      },
      {
        "Time_Start": 183.16,
        "Time_End": 189.56,
        "Text": " So you can use a special thing, faces, fingerprints, pin, you can use a physical security key."
      },
      {
        "Time_Start": 189.56,
        "Time_End": 196.52,
        "Text": " And basically, when you are using this, you can retrieve the password of the user, since"
      },
      {
        "Time_Start": 196.52,
        "Time_End": 202.48,
        "Text": " if you are using only Windows Hello, the SAM hive is no longer used, but due to DPAPI,"
      },
      {
        "Time_Start": 202.48,
        "Time_End": 207.16,
        "Text": " you will have to have the password of the user somewhere."
      },
      {
        "Time_Start": 207.16,
        "Time_End": 214.16,
        "Text": " In fact, you only have to have the SHA-1 of the password, but Microsoft stored the Cleartext"
      },
      {
        "Time_Start": 214.16,
        "Time_End": 215.64000000000001,
        "Text": " password somewhere."
      },
      {
        "Time_Start": 215.64000000000001,
        "Time_End": 222.84,
        "Text": " So this research was already done by Thijs de Net, and that's a lot of crypto implied."
      },
      {
        "Time_Start": 222.84,
        "Time_End": 227.72000000000003,
        "Text": " I won't be going too much into detail here, because we are going to do the same for Windows"
      },
      {
        "Time_Start": 227.72000000000003,
        "Time_End": 228.72000000000003,
        "Text": " Hello for Business."
      },
      {
        "Time_Start": 228.72000000000003,
        "Time_End": 231.32000000000002,
        "Text": " So if you want to have a look, just go there."
      },
      {
        "Time_Start": 231.32000000000002,
        "Time_End": 236.36,
        "Text": " What you have to remember, if you have a pin, you can, at the end, decrypt the password"
      },
      {
        "Time_Start": 236.36,
        "Time_End": 237.48000000000002,
        "Text": " of the users."
      },
      {
        "Time_Start": 237.48000000000002,
        "Time_End": 243.24,
        "Text": " So we found this research, and we said, OK, when Windows Hello for Business, can we have"
      },
      {
        "Time_Start": 243.24,
        "Time_End": 245.60000000000002,
        "Text": " access to the Cleartext password somewhere?"
      },
      {
        "Time_Start": 245.6,
        "Time_End": 252.16,
        "Text": " That was really nice to be sure, but Windows Hello for Business is not the same as Windows"
      },
      {
        "Time_Start": 252.16,
        "Time_End": 253.16,
        "Text": " Hello."
      },
      {
        "Time_Start": 253.16,
        "Time_End": 258.84,
        "Text": " It's not password-based, it's some kind of asymmetrical authentication."
      },
      {
        "Time_Start": 258.84,
        "Time_End": 266.56,
        "Text": " So the pin that you use will be used as the public and private key."
      },
      {
        "Time_Start": 266.56,
        "Time_End": 272.68,
        "Text": " So when you are joining a domain, you have to reboot the computer, and then you will"
      },
      {
        "Time_Start": 272.76,
        "Time_End": 276.16,
        "Text": " be able to join Windows Hello for Business."
      },
      {
        "Time_Start": 276.16,
        "Time_End": 281.2,
        "Text": " You create a pin, and the pin basically creates you a private key and a public key, and the"
      },
      {
        "Time_Start": 281.2,
        "Time_End": 285.08,
        "Text": " pin is an entropy to protect the private key."
      },
      {
        "Time_Start": 285.08,
        "Time_End": 291.44,
        "Text": " So it won't be possible to retrieve the password that way, but we found that if you are using"
      },
      {
        "Time_Start": 291.44,
        "Time_End": 296.04,
        "Text": " a TPM, the pin is used to access the private key, and the private key is stored on the"
      },
      {
        "Time_Start": 296.04,
        "Time_End": 297.04,
        "Text": " TPM."
      },
      {
        "Time_Start": 297.04,
        "Time_End": 302.84000000000003,
        "Text": " But if you're not using a TPM, the same process applies, but everything is lined on the local"
      },
      {
        "Time_Start": 302.84000000000003,
        "Time_End": 304.08000000000004,
        "Text": " drive."
      },
      {
        "Time_Start": 304.08000000000004,
        "Time_End": 309.40000000000003,
        "Text": " So it could be interesting, because we know that every workstation now uses a TPM, but"
      },
      {
        "Time_Start": 309.40000000000003,
        "Time_End": 317.62,
        "Text": " we know that a lot of servers, a lot of virtual computers, do not use TPMs."
      },
      {
        "Time_Start": 317.62,
        "Time_End": 324.74,
        "Text": " So it could be interesting for at least a few years, again, before everything is virtualized."
      },
      {
        "Time_Start": 324.74,
        "Time_End": 326.64000000000004,
        "Text": " So we decided to have a look."
      },
      {
        "Time_Start": 327.64,
        "Time_End": 333.28,
        "Text": " Just to remember, how does it work when you have an authentication with Windows Hello"
      },
      {
        "Time_Start": 333.28,
        "Time_End": 335.91999999999996,
        "Text": " for Business and you have access online."
      },
      {
        "Time_Start": 335.91999999999996,
        "Time_End": 344.2,
        "Text": " So Winlogon just asks you for the credentials, so you're using your pin, your faces, everything."
      },
      {
        "Time_Start": 344.2,
        "Time_End": 349.0,
        "Text": " You just send it to the Cloud App Provider, and the Cloud App Provider just requests a"
      },
      {
        "Time_Start": 349.0,
        "Time_End": 355.8,
        "Text": " nonce to Entry ID, and this nonce is signed with the private key that was used by Windows"
      },
      {
        "Time_Start": 355.8,
        "Time_End": 357.16,
        "Text": " Hello for Business."
      },
      {
        "Time_Start": 357.16,
        "Time_End": 362.92,
        "Text": " So once you sign the nonce, you send it back to Entry ID, Entry ID validates that you have"
      },
      {
        "Time_Start": 362.92,
        "Time_End": 364.16,
        "Text": " access to the private key."
      },
      {
        "Time_Start": 364.16,
        "Time_End": 369.96000000000004,
        "Text": " If you have access to the private key, it means that you have the pin, they say, okay,"
      },
      {
        "Time_Start": 369.96000000000004,
        "Time_End": 375.8,
        "Text": " validate it, and it sends you a PRT, which is equivalent to your access to the Entry"
      },
      {
        "Time_Start": 375.8,
        "Time_End": 377.48,
        "Text": " ID tenant."
      },
      {
        "Time_Start": 377.48,
        "Time_End": 384.0,
        "Text": " With the PRT, you decrypt the session key, you import the session key in the TPM, your"
      },
      {
        "Time_Start": 384.04,
        "Time_End": 387.04,
        "Text": " authentication is successful."
      },
      {
        "Time_Start": 387.04,
        "Time_End": 390.96,
        "Text": " There was a lot of definition, I think most of you are pretty familiar with it, but I"
      },
      {
        "Time_Start": 390.96,
        "Time_End": 393.96,
        "Text": " will go a little bit with them."
      },
      {
        "Time_Start": 393.96,
        "Time_End": 398.76,
        "Text": " What's interesting is that if you have access to the PRT, you basically have access to the"
      },
      {
        "Time_Start": 398.76,
        "Time_End": 401.52,
        "Text": " Entry ID of the users."
      },
      {
        "Time_Start": 401.52,
        "Time_End": 406.96,
        "Text": " It can be seen at the TGT on Microsoft Active Directory."
      },
      {
        "Time_Start": 406.96,
        "Time_End": 412.36,
        "Text": " What you have to understand is if you have access to the PRT, you will be able to do"
      },
      {
        "Time_Start": 412.40000000000003,
        "Time_End": 417.88,
        "Text": " as much as everything you can with it, since it's valid for 14 days."
      },
      {
        "Time_Start": 417.88,
        "Time_End": 422.96000000000004,
        "Text": " DJ here did a lot of research on that, and you can use that."
      },
      {
        "Time_Start": 422.96000000000004,
        "Time_End": 427.12,
        "Text": " So it's pretty nice to have access to the PRT."
      },
      {
        "Time_Start": 427.12,
        "Time_End": 432.88,
        "Text": " Another part of the process is the Cloud Authentication Provider, the Cloud Authentication Provider."
      },
      {
        "Time_Start": 432.88,
        "Time_End": 441.28000000000003,
        "Text": " It's basically just the provider that is using LSAS to authenticate you to the Entry ID."
      },
      {
        "Time_Start": 441.28000000000003,
        "Time_End": 444.64000000000004,
        "Text": " It's basically all the functions that are in CloudAPI.dll."
      },
      {
        "Time_Start": 444.64000000000004,
        "Time_End": 452.96000000000004,
        "Text": " It's live in lsas.exe process memory, and it uses an authenticated you to the Entry ID."
      },
      {
        "Time_Start": 452.96000000000004,
        "Time_End": 458.6,
        "Text": " So it implements the SAKE package function table structures, as every credential provider,"
      },
      {
        "Time_Start": 458.6,
        "Time_End": 465.08000000000004,
        "Text": " and the function responsible for the authentication is LSAAPLogonUserX2."
      },
      {
        "Time_Start": 465.08000000000004,
        "Time_End": 470.28000000000003,
        "Text": " It's not documented by Microsoft, as a lot of things are done by Microsoft, but you can"
      },
      {
        "Time_Start": 470.28000000000003,
        "Time_End": 477.16,
        "Text": " find a lot of documentation in LSA with ProWikis, since it's just a credential provider."
      },
      {
        "Time_Start": 477.16,
        "Time_End": 483.56000000000006,
        "Text": " Yeah, sorry, I was just looking at the clock."
      },
      {
        "Time_Start": 483.56000000000006,
        "Time_End": 487.20000000000005,
        "Text": " So what if Entry ID cannot be reached?"
      },
      {
        "Time_Start": 487.20000000000005,
        "Time_End": 492.64000000000004,
        "Text": " Then the user is still able to perform local authentication, and it's based on the cache file."
      },
      {
        "Time_Start": 492.64000000000004,
        "Time_End": 499.88000000000005,
        "Text": " So when you are using the LSAAPLogonUserX2, it's executed with the cache interactive"
      },
      {
        "Time_Start": 499.88,
        "Time_End": 502.04,
        "Text": " instead of the remote interactive."
      },
      {
        "Time_Start": 502.04,
        "Time_End": 509.24,
        "Text": " So we know that there is a cache information, and as you can see, the server is supposed"
      },
      {
        "Time_Start": 509.24,
        "Time_End": 515.12,
        "Text": " to send you the PRT, but you don't have access to the server, so the cache information must"
      },
      {
        "Time_Start": 515.12,
        "Time_End": 516.24,
        "Text": " contain your PRT."
      },
      {
        "Time_Start": 516.24,
        "Time_End": 520.52,
        "Text": " So it could be really interesting for us."
      },
      {
        "Time_Start": 520.52,
        "Time_End": 521.88,
        "Text": " Thank you, Geoffrey."
      },
      {
        "Time_Start": 521.88,
        "Time_End": 524.92,
        "Text": " So now let's talk about the cached data file."
      },
      {
        "Time_Start": 524.92,
        "Time_End": 533.4799999999999,
        "Text": " So we'll talk about where it's located on the file system, what is the internal format."
      },
      {
        "Time_Start": 533.4799999999999,
        "Time_End": 538.5999999999999,
        "Text": " So the cached data file is located under the system32 directory, so you will have a bunch"
      },
      {
        "Time_Start": 538.5999999999999,
        "Time_End": 540.4,
        "Text": " of different folders."
      },
      {
        "Time_Start": 540.4,
        "Time_End": 546.0799999999999,
        "Text": " Then you will have a cloud.apcache and azure.id directory, and then you will have a unique"
      },
      {
        "Time_Start": 546.0799999999999,
        "Time_End": 547.0799999999999,
        "Text": " h."
      },
      {
        "Time_Start": 547.08,
        "Time_End": 555.24,
        "Text": " So this h will change for each entry user who has already logged on on the computer,"
      },
      {
        "Time_Start": 555.24,
        "Time_End": 559.4200000000001,
        "Text": " and then you will find a cache folder, and finally the cached data file."
      },
      {
        "Time_Start": 559.4200000000001,
        "Time_End": 567.8000000000001,
        "Text": " So it's the file that we are interested in, and the file that we are going to talk about."
      },
      {
        "Time_Start": 567.8000000000001,
        "Time_End": 577.3800000000001,
        "Text": " So its admin privileges are needed to read it, because it contains encrypted secrets,"
      },
      {
        "Time_Start": 577.3800000000001,
        "Time_End": 583.6800000000001,
        "Text": " as well as, as we can see, we can use this file to do brute-force attacks."
      },
      {
        "Time_Start": 583.6800000000001,
        "Time_End": 588.8000000000001,
        "Text": " So as I just told you, there is one cache folder per entry user."
      },
      {
        "Time_Start": 588.8000000000001,
        "Time_End": 594.5200000000001,
        "Text": " In order to match a cache folder with an entry user, we can use a registry."
      },
      {
        "Time_Start": 594.52,
        "Time_End": 602.76,
        "Text": " So under the h.qml hive, we can find a logon cache folder, then we'll have a GUID, and"
      },
      {
        "Time_Start": 602.76,
        "Time_End": 609.36,
        "Text": " then a name trace ID entry, and basically within this entry, we'll find here each h"
      },
      {
        "Time_Start": 609.36,
        "Time_End": 614.92,
        "Text": " for each unique user, and then we'll have different entries, like for each user, we"
      },
      {
        "Time_Start": 614.92,
        "Time_End": 620.96,
        "Text": " can find the SID of the user, its sun name, its display name, and so on."
      },
      {
        "Time_Start": 620.96,
        "Time_End": 624.76,
        "Text": " So that's all for the file location."
      },
      {
        "Time_Start": 624.76,
        "Time_End": 628.0,
        "Text": " So why is it an interesting file?"
      },
      {
        "Time_Start": 628.0,
        "Time_End": 633.0,
        "Text": " Because we can use this file to retrieve the password and the PIN."
      },
      {
        "Time_Start": 633.0,
        "Time_End": 639.12,
        "Text": " So this will involve doing a brute-force attack."
      },
      {
        "Time_Start": 639.12,
        "Time_End": 643.88,
        "Text": " So if we would like to brute-force the password, there is no limitation."
      },
      {
        "Time_Start": 643.88,
        "Time_End": 649.36,
        "Text": " However, if we want to brute-force the PIN, if there is a TPM on the computer, we will"
      },
      {
        "Time_Start": 649.36,
        "Time_End": 652.48,
        "Text": " be limited by the TPM."
      },
      {
        "Time_Start": 652.48,
        "Time_End": 660.36,
        "Text": " And if we manage to get the PIN or the password, we can use it to obtain the PRT as well as"
      },
      {
        "Time_Start": 660.36,
        "Time_End": 662.72,
        "Text": " the user GPAPI query key."
      },
      {
        "Time_Start": 662.72,
        "Time_End": 667.92,
        "Text": " So it's pretty interesting."
      },
      {
        "Time_Start": 667.92,
        "Time_End": 673.08,
        "Text": " So now let's talk a little bit about the previous work that has been made related to the cached"
      },
      {
        "Time_Start": 673.08,
        "Time_End": 674.24,
        "Text": " data file."
      },
      {
        "Time_Start": 674.24,
        "Time_End": 678.76,
        "Text": " So there is one PowerShell script, prtutil.ps."
      },
      {
        "Time_Start": 678.76,
        "Time_End": 683.8,
        "Text": " So this script has been released on the AAD internal repository, and basically it allows"
      },
      {
        "Time_Start": 683.8,
        "Time_End": 690.12,
        "Text": " to decrypt a PRT file when a password is used."
      },
      {
        "Time_Start": 690.12,
        "Time_End": 698.64,
        "Text": " However, it does not allow to decrypt PRT if a PIN was used for the authentication."
      },
      {
        "Time_Start": 698.64,
        "Time_End": 704.52,
        "Text": " Also on the GPAPILabNG repository, there is a script which was released."
      },
      {
        "Time_Start": 704.52,
        "Time_End": 708.04,
        "Text": " It's called ngc-cryptodeck.py."
      },
      {
        "Time_Start": 708.04,
        "Time_End": 713.04,
        "Text": " And this script allows to perform some Windows Hello NGC PIN decryption."
      },
      {
        "Time_Start": 713.04,
        "Time_End": 715.8399999999999,
        "Text": " So as we will see later, there is a private key involved."
      },
      {
        "Time_Start": 715.8399999999999,
        "Time_End": 720.0799999999999,
        "Text": " And when we use the PIN, we need to decrypt the private key."
      },
      {
        "Time_Start": 720.0799999999999,
        "Time_End": 728.52,
        "Text": " So within this script, there is a lot of stuff that we used for our research."
      },
      {
        "Time_Start": 728.52,
        "Time_End": 731.0799999999999,
        "Text": " So what was our contribution?"
      },
      {
        "Time_Start": 731.08,
        "Time_End": 739.76,
        "Text": " So we worked mainly on the cached PRT file decryption when a PIN was used."
      },
      {
        "Time_Start": 739.76,
        "Time_End": 747.88,
        "Text": " So we released a Python script which can be used to brute force the PIN or the password."
      },
      {
        "Time_Start": 747.88,
        "Time_End": 759.4000000000001,
        "Text": " And we also worked for increasing the comprehension of the cached data file format."
      },
      {
        "Time_Start": 759.4,
        "Time_End": 763.68,
        "Text": " So in order to do that, we had to do some reverse engineering."
      },
      {
        "Time_Start": 763.68,
        "Time_End": 766.9599999999999,
        "Text": " So we had to target CloudAPI.dll."
      },
      {
        "Time_Start": 766.9599999999999,
        "Time_End": 775.4399999999999,
        "Text": " So we looked at the authentication process as well as all the interaction with the cached file."
      },
      {
        "Time_Start": 775.4399999999999,
        "Time_End": 781.64,
        "Text": " So to do that, we had to do some static analysis as well as some dynamic analysis."
      },
      {
        "Time_Start": 781.64,
        "Time_End": 785.92,
        "Text": " So for the static analysis, we used IDA on the X-Ray decompiler."
      },
      {
        "Time_Start": 785.9200000000001,
        "Time_End": 790.72,
        "Text": " So it's quite usual for reverse engineers."
      },
      {
        "Time_Start": 790.72,
        "Time_End": 796.32,
        "Text": " Something pretty nice is that the PDB file was available for CloudAPI.dll."
      },
      {
        "Time_Start": 796.32,
        "Time_End": 800.9200000000001,
        "Text": " So for those who are not really familiar with PDB file, it's simply some debugging files"
      },
      {
        "Time_Start": 800.9200000000001,
        "Time_End": 805.8800000000001,
        "Text": " that will include some, for instance, the name of the functions as well as the name"
      },
      {
        "Time_Start": 805.8800000000001,
        "Time_End": 810.2400000000001,
        "Text": " of the global variables."
      },
      {
        "Time_Start": 810.2400000000001,
        "Time_End": 815.2400000000001,
        "Text": " Actually it's quite common for Microsoft to release a PDB file for the built-in DLL."
      },
      {
        "Time_Start": 815.84,
        "Time_End": 819.76,
        "Text": " When we want to do some reverse engineering, having the name of the function as well as"
      },
      {
        "Time_Start": 819.76,
        "Time_End": 823.88,
        "Text": " the name of the global variables, it's pretty nice."
      },
      {
        "Time_Start": 823.88,
        "Time_End": 826.36,
        "Text": " In addition, we also did some dynamic analysis."
      },
      {
        "Time_Start": 826.36,
        "Time_End": 830.16,
        "Text": " So to do that, we created a TTD trace."
      },
      {
        "Time_Start": 830.16,
        "Time_End": 833.0,
        "Text": " So TTD means Time Travel Debugging."
      },
      {
        "Time_Start": 833.0,
        "Time_End": 837.8,
        "Text": " So we created a trace for the LSASS process using WinDbg."
      },
      {
        "Time_Start": 837.8,
        "Time_End": 842.64,
        "Text": " And it's really cool because the same trace can be shared among different users."
      },
      {
        "Time_Start": 842.64,
        "Time_End": 850.08,
        "Text": " So for instance, my colleague Tiol created the trace and he sent it to me for analysis."
      },
      {
        "Time_Start": 850.08,
        "Time_End": 855.76,
        "Text": " And even if I didn't add the proper Entry ID environment, I was still able to work on"
      },
      {
        "Time_Start": 855.76,
        "Time_End": 856.76,
        "Text": " this trace."
      },
      {
        "Time_Start": 856.76,
        "Time_End": 864.08,
        "Text": " And also, each DLL which is inside the trace can be easily extracted for static analysis."
      },
      {
        "Time_Start": 864.08,
        "Time_End": 868.64,
        "Text": " So it's pretty cool."
      },
      {
        "Time_Start": 868.64,
        "Time_End": 874.68,
        "Text": " So now let's talk about the cached data file format that we managed to understand."
      },
      {
        "Time_Start": 874.68,
        "Time_End": 877.28,
        "Text": " So actually it's quite a simple file format."
      },
      {
        "Time_Start": 877.28,
        "Time_End": 879.68,
        "Text": " So it starts with a header."
      },
      {
        "Time_Start": 879.68,
        "Time_End": 882.0,
        "Text": " We'll find inside the version number."
      },
      {
        "Time_Start": 882.0,
        "Time_End": 884.96,
        "Text": " We'll have a GUID as well."
      },
      {
        "Time_Start": 884.96,
        "Time_End": 890.4,
        "Text": " We'll have an integrity checksum for the rest of the file."
      },
      {
        "Time_Start": 890.4,
        "Time_End": 894.76,
        "Text": " And we'll have an integer which defines the number of nodes."
      },
      {
        "Time_Start": 894.76,
        "Time_End": 898.48,
        "Text": " And then we'll have an array of cached node header."
      },
      {
        "Time_Start": 899.32,
        "Time_End": 902.2,
        "Text": " So basically, a cached node header will be used to describe a node."
      },
      {
        "Time_Start": 902.2,
        "Time_End": 904.12,
        "Text": " So it will define the type of the node."
      },
      {
        "Time_Start": 904.12,
        "Time_End": 909.12,
        "Text": " For instance, is it a node related to pin authentication or is it a node related to"
      },
      {
        "Time_Start": 909.12,
        "Time_End": 911.24,
        "Text": " password authentication?"
      },
      {
        "Time_Start": 911.24,
        "Time_End": 916.48,
        "Text": " And then we'll have the size of the crypto blob as well as the size of the encrypted blob."
      },
      {
        "Time_Start": 916.48,
        "Time_End": 921.52,
        "Text": " So the crypto blob is the blob in green on the schema."
      },
      {
        "Time_Start": 921.52,
        "Time_End": 927.44,
        "Text": " So basically the crypto blob is used to check for the user credentials."
      },
      {
        "Time_Start": 927.44,
        "Time_End": 932.1600000000001,
        "Text": " And the encrypted blob is the blob which contains the encrypted DPAPI equate key as"
      },
      {
        "Time_Start": 932.1600000000001,
        "Time_End": 934.08,
        "Text": " well as the PRT file."
      },
      {
        "Time_Start": 934.08,
        "Time_End": 942.5200000000001,
        "Text": " So both the DPAPI equate key and the PRT are encrypted in the same encryption operation."
      },
      {
        "Time_Start": 942.5200000000001,
        "Time_End": 948.0,
        "Text": " So let's say, for example, that you can log with pin and password."
      },
      {
        "Time_Start": 948.0,
        "Time_End": 953.4000000000001,
        "Text": " Then you will have two nodes in your cached data file."
      },
      {
        "Time_Start": 953.4399999999999,
        "Time_End": 958.76,
        "Text": " So we only analyze pin and password based authentication, but we know that you can use"
      },
      {
        "Time_Start": 958.76,
        "Time_End": 962.9599999999999,
        "Text": " other means such as a smart card, for instance."
      },
      {
        "Time_Start": 965.4399999999999,
        "Time_End": 971.1999999999999,
        "Text": " Okay, so a few words about where the parsing of the file occurs."
      },
      {
        "Time_Start": 971.1999999999999,
        "Time_End": 977.76,
        "Text": " So the function deserializeCloudAPcache is the one who is doing the parsing of the file."
      },
      {
        "Time_Start": 977.76,
        "Time_End": 981.0,
        "Text": " So it will populate a structure of type CloudAPcache."
      },
      {
        "Time_Start": 981.0,
        "Time_End": 985.64,
        "Text": " And within this structure, we'll find a pointer to an error structure."
      },
      {
        "Time_Start": 985.64,
        "Time_End": 990.28,
        "Text": " And the type of this error structure is a tagged cached node identifier."
      },
      {
        "Time_Start": 990.28,
        "Time_End": 994.88,
        "Text": " So it will contain as a node type, as I just told you, there are different types."
      },
      {
        "Time_Start": 994.88,
        "Time_End": 1001.76,
        "Text": " So one is for password based authentication and pin 3 and 5 is for a fin-based authentication."
      },
      {
        "Time_Start": 1001.76,
        "Time_End": 1007.92,
        "Text": " And then we'll have two pointers, one to the crypto blob and one to the encrypted blob."
      },
      {
        "Time_Start": 1007.9200000000001,
        "Time_End": 1013.6400000000001,
        "Text": " So the format of the crypto blob will change according to the type of the node."
      },
      {
        "Time_Start": 1013.6400000000001,
        "Time_End": 1017.6400000000001,
        "Text": " Let's take a look at what the crypto blob looks like when we use a pin-based authentication."
      },
      {
        "Time_Start": 1017.6400000000001,
        "Time_End": 1022.96,
        "Text": " So as Wilteo explained to you in a few slides, when you use pin-based authentication, it"
      },
      {
        "Time_Start": 1022.96,
        "Time_End": 1025.3200000000002,
        "Text": " involves asymmetric cryptography."
      },
      {
        "Time_Start": 1025.3200000000002,
        "Time_End": 1029.72,
        "Text": " So you have a private key that needs to be decrypted by using the pin."
      },
      {
        "Time_Start": 1029.72,
        "Time_End": 1033.88,
        "Text": " So what you will find in the cached data file is the public key, which is associated with"
      },
      {
        "Time_Start": 1033.88,
        "Time_End": 1034.88,
        "Text": " this private key."
      },
      {
        "Time_Start": 1034.88,
        "Time_End": 1037.7600000000002,
        "Text": " So the public key will be stored in a decrypt RSA key blob."
      },
      {
        "Time_Start": 1037.7600000000002,
        "Time_End": 1043.24,
        "Text": " So this is a publicly documented structure by Microsoft."
      },
      {
        "Time_Start": 1043.24,
        "Time_End": 1046.6000000000001,
        "Text": " And then you will find different secrets."
      },
      {
        "Time_Start": 1046.6000000000001,
        "Time_End": 1055.24,
        "Text": " So you will find an AUS key, which is encrypted using the RSA private key."
      },
      {
        "Time_Start": 1055.24,
        "Time_End": 1060.72,
        "Text": " Then you will find a second AUS key, but this one is encrypted with AUS."
      },
      {
        "Time_Start": 1060.72,
        "Time_End": 1065.44,
        "Text": " And basically, once this key is decrypted, it can be used to decrypt this one."
      },
      {
        "Time_Start": 1065.44,
        "Time_End": 1071.08,
        "Text": " And this one can be used to decrypt, finally, the PRT file, as well as the DPAPI query key."
      },
      {
        "Time_Start": 1071.08,
        "Time_End": 1076.68,
        "Text": " So we will talk a bit about that in a few slides."
      },
      {
        "Time_Start": 1076.68,
        "Time_End": 1083.0,
        "Text": " So as I just told you, the format of the crypto blob changes according to the authentication"
      },
      {
        "Time_Start": 1083.0,
        "Time_End": 1084.0,
        "Text": " means."
      },
      {
        "Time_Start": 1084.0,
        "Time_End": 1087.56,
        "Text": " So this is what it looks like when you use a password-based authentication."
      },
      {
        "Time_Start": 1087.56,
        "Time_End": 1094.6399999999999,
        "Text": " So it's simply a blob of 0x30 bytes, and it's the result of an AES encryption using"
      },
      {
        "Time_Start": 1094.6399999999999,
        "Time_End": 1105.8,
        "Text": " as an input the derivation of the password using pbkeydf2, and using as a key the derivation"
      },
      {
        "Time_Start": 1105.8,
        "Time_End": 1108.8799999999999,
        "Text": " of the query key also using pbkeydf2."
      },
      {
        "Time_Start": 1108.8799999999999,
        "Time_End": 1112.8799999999999,
        "Text": " And it uses a null IV for the encryption operation."
      },
      {
        "Time_Start": 1112.88,
        "Time_End": 1119.44,
        "Text": " So if you manage to compute the crypto blob, this means that you managed to retrieve the"
      },
      {
        "Time_Start": 1119.44,
        "Time_End": 1120.64,
        "Text": " input password."
      },
      {
        "Time_Start": 1120.64,
        "Time_End": 1128.48,
        "Text": " That's why you can do some brute force to retrieve the input password."
      },
      {
        "Time_Start": 1128.48,
        "Time_End": 1131.16,
        "Text": " A few words about the DPAPI query key."
      },
      {
        "Time_Start": 1131.16,
        "Time_End": 1134.6000000000001,
        "Text": " So it's stored in a structure named a credential key."
      },
      {
        "Time_Start": 1134.6000000000001,
        "Time_End": 1141.7600000000002,
        "Text": " It's a blob of 0x60 bytes, so it contains a GUID, as well as the key, which is stored"
      },
      {
        "Time_Start": 1141.76,
        "Time_End": 1144.56,
        "Text": " in a 0x40 byte buffer."
      },
      {
        "Time_Start": 1144.56,
        "Time_End": 1153.16,
        "Text": " And this DPAPI query key will be used to derive another key, like the latest master key."
      },
      {
        "Time_Start": 1153.16,
        "Time_End": 1160.2,
        "Text": " And to do that, we'll use the HMAKE function, and as an input, we will use the SHA1 of the"
      },
      {
        "Time_Start": 1160.2,
        "Time_End": 1163.62,
        "Text": " query key, and we'll also use the user's ID."
      },
      {
        "Time_Start": 1163.62,
        "Time_End": 1167.4,
        "Text": " So as I just told you, it's stored encrypted in the cached data file."
      },
      {
        "Time_Start": 1167.4,
        "Time_End": 1173.8400000000001,
        "Text": " Something interesting to note is that when it's in memory, it's encrypted by the LSA"
      },
      {
        "Time_Start": 1173.8400000000001,
        "Time_End": 1175.68,
        "Text": " protect memory callback."
      },
      {
        "Time_Start": 1175.68,
        "Time_End": 1184.76,
        "Text": " And so in memory, it's encrypted using a symmetric cryptography, and the keys are generated by"
      },
      {
        "Time_Start": 1184.76,
        "Time_End": 1187.24,
        "Text": " the LSA initialized protect memory function."
      },
      {
        "Time_Start": 1187.24,
        "Time_End": 1193.0400000000002,
        "Text": " So basically, in memory, the key will be stored encrypted, and if you reboot, you won't have"
      },
      {
        "Time_Start": 1193.0400000000002,
        "Time_End": 1197.3200000000002,
        "Text": " the same key in memory."
      },
      {
        "Time_Start": 1197.32,
        "Time_End": 1203.08,
        "Text": " So now I will let my colleague talk to you about the cached data file usage for offline"
      },
      {
        "Time_Start": 1203.08,
        "Time_End": 1204.08,
        "Text": " authentication."
      },
      {
        "Time_Start": 1204.08,
        "Time_End": 1205.08,
        "Text": " Okay."
      },
      {
        "Time_Start": 1205.08,
        "Time_End": 1213.84,
        "Text": " So now let's dig into the process involved for offline authentication."
      },
      {
        "Time_Start": 1213.84,
        "Time_End": 1217.76,
        "Text": " We'll start by explaining how it works when using a password."
      },
      {
        "Time_Start": 1217.76,
        "Time_End": 1223.48,
        "Text": " So Microsoft wants to get rid of it, as it is the less secure method indeed."
      },
      {
        "Time_Start": 1223.48,
        "Time_End": 1229.56,
        "Text": " When the password is used, the PRT is encrypted with an ES key derived from the password,"
      },
      {
        "Time_Start": 1229.56,
        "Time_End": 1235.56,
        "Text": " and as Remy already said, by analyzing the function derived key from secret function"
      },
      {
        "Time_Start": 1235.56,
        "Time_End": 1241.08,
        "Text": " from the Cloud API DLL, it just takes the password as an argument to create a key, and"
      },
      {
        "Time_Start": 1241.08,
        "Time_End": 1250.32,
        "Text": " this key is created using pvktf2.hmac, without assault, and it's iterating over it 10,000"
      },
      {
        "Time_Start": 1250.32,
        "Time_End": 1254.76,
        "Text": " times as for dpAPI encryption."
      },
      {
        "Time_Start": 1254.76,
        "Time_End": 1265.36,
        "Text": " The resulting key is used in an AES-CBC decryption, on the cached data encrypted blob."
      },
      {
        "Time_Start": 1265.36,
        "Time_End": 1269.8799999999999,
        "Text": " So now we'll dig into pin-based authentication, and before that, we need to understand what"
      },
      {
        "Time_Start": 1269.8799999999999,
        "Time_End": 1276.24,
        "Text": " is NGC."
      },
      {
        "Time_Start": 1276.24,
        "Time_End": 1289.92,
        "Text": " NGC or next-gen cryptography, or dpAPI NG, are the same terms for the same thing."
      },
      {
        "Time_Start": 1289.92,
        "Time_End": 1296.76,
        "Text": " It provides a set of APIs that can be used to easily encrypt and decrypt content to authorization"
      },
      {
        "Time_Start": 1296.76,
        "Time_End": 1298.08,
        "Text": " principles."
      },
      {
        "Time_Start": 1298.08,
        "Time_End": 1305.24,
        "Text": " It works with providers, protectors, and items, and about the provider, it's a component responsible"
      },
      {
        "Time_Start": 1305.24,
        "Time_End": 1310.76,
        "Text": " for managing cryptographic operations and interacting with the NGC framework."
      },
      {
        "Time_Start": 1310.76,
        "Time_End": 1313.2,
        "Text": " You have two different types of providers."
      },
      {
        "Time_Start": 1313.2,
        "Time_End": 1319.96,
        "Text": " You have the key storage provider, which will be of interest for us for the following slides,"
      },
      {
        "Time_Start": 1319.96,
        "Time_End": 1322.8,
        "Text": " and the cryptographic service provider."
      },
      {
        "Time_Start": 1322.8,
        "Time_End": 1327.6,
        "Text": " And about the protector, it's just the method or technique used to encrypt and protect sensitive"
      },
      {
        "Time_Start": 1327.6,
        "Time_End": 1330.32,
        "Text": " data."
      },
      {
        "Time_Start": 1330.32,
        "Time_End": 1335.34,
        "Text": " So the NGC folder is located here."
      },
      {
        "Time_Start": 1335.34,
        "Time_End": 1337.9199999999998,
        "Text": " You need system privileges to access it."
      },
      {
        "Time_Start": 1337.9199999999998,
        "Time_End": 1344.8799999999999,
        "Text": " And we see that there are some metadata inside to retrieve, and we can retrieve it because"
      },
      {
        "Time_Start": 1344.8799999999999,
        "Time_End": 1345.8799999999999,
        "Text": " it's not encrypted."
      },
      {
        "Time_Start": 1345.8799999999999,
        "Time_End": 1350.36,
        "Text": " There is just one file encrypted inside this folder."
      },
      {
        "Time_Start": 1350.36,
        "Time_End": 1356.56,
        "Text": " So here you have an example of the tree command if you use it on the NGC folder."
      },
      {
        "Time_Start": 1356.56,
        "Time_End": 1363.8,
        "Text": " So we have a GUID, and a protector, and some .dat files."
      },
      {
        "Time_Start": 1363.8,
        "Time_End": 1369.8,
        "Text": " So inside the NGC folder, you'll find the NGC GUID folder, which contains some .dat"
      },
      {
        "Time_Start": 1369.8,
        "Time_End": 1370.8,
        "Text": " file."
      },
      {
        "Time_Start": 1370.8,
        "Time_End": 1376.08,
        "Text": " And for example, inside the 1.dat file, you'll find the user SID."
      },
      {
        "Time_Start": 1376.08,
        "Time_End": 1379.8799999999999,
        "Text": " And in 7.dat, you will find the main provider."
      },
      {
        "Time_Start": 1379.88,
        "Time_End": 1389.2,
        "Text": " So here is the output of a script using DPAPILabNG, and it just parses all the different .dat"
      },
      {
        "Time_Start": 1389.2,
        "Time_End": 1396.2800000000002,
        "Text": " files to retrieve this GUID, the user SID, and other stuff."
      },
      {
        "Time_Start": 1396.2800000000002,
        "Time_End": 1400.3600000000001,
        "Text": " About the provider, so here we'll talk about the key storage provider."
      },
      {
        "Time_Start": 1400.3600000000001,
        "Time_End": 1405.1200000000001,
        "Text": " And you'll find, if you use the TPM, the Microsoft Platform Crypto Provider."
      },
      {
        "Time_Start": 1405.1200000000001,
        "Time_End": 1408.7600000000002,
        "Text": " So here the protector is stored in the TPM chip."
      },
      {
        "Time_Start": 1408.76,
        "Time_End": 1413.6,
        "Text": " And without any TPM, you will find the Microsoft Software Key Storage Provider."
      },
      {
        "Time_Start": 1413.6,
        "Time_End": 1416.32,
        "Text": " And here, the protector is stored locally."
      },
      {
        "Time_Start": 1416.32,
        "Time_End": 1419.84,
        "Text": " That's why we will try to brute force some things here."
      },
      {
        "Time_Start": 1419.84,
        "Time_End": 1425.76,
        "Text": " You can find also other providers, like SmartCard Key Storage Provider, but we didn't dig into"
      },
      {
        "Time_Start": 1425.76,
        "Time_End": 1426.76,
        "Text": " this provider."
      },
      {
        "Time_Start": 1426.76,
        "Time_End": 1433.36,
        "Text": " Again, it's the output of some script from the DPAPILabNG repository."
      },
      {
        "Time_Start": 1433.3600000000001,
        "Time_End": 1440.72,
        "Text": " And as you can see here, we have a TPM, and here we don't have any TPM."
      },
      {
        "Time_Start": 1440.72,
        "Time_End": 1448.2,
        "Text": " About the protectors, we will be interested in the 15.dat encrypted data."
      },
      {
        "Time_Start": 1448.2,
        "Time_End": 1455.3200000000002,
        "Text": " And you can find also other stuff inside, like the name of the protector, the key GUID"
      },
      {
        "Time_Start": 1455.3200000000002,
        "Time_End": 1456.7600000000002,
        "Text": " of the protector."
      },
      {
        "Time_Start": 1456.7600000000002,
        "Time_End": 1462.5600000000002,
        "Text": " This key GUID will be missing if it's stored on the TPM."
      },
      {
        "Time_Start": 1462.56,
        "Time_End": 1469.44,
        "Text": " And finally, all the different items, and you'll find the name of the item and the provider"
      },
      {
        "Time_Start": 1469.44,
        "Time_End": 1472.32,
        "Text": " name."
      },
      {
        "Time_Start": 1472.32,
        "Time_End": 1477.96,
        "Text": " So for now, we know that Watch is NGC, and we see how the PIN interacts with it."
      },
      {
        "Time_Start": 1477.96,
        "Time_End": 1482.32,
        "Text": " I'm sorry the boring part is not finished yet, as we will have to talk about cryptography"
      },
      {
        "Time_Start": 1482.32,
        "Time_End": 1483.32,
        "Text": " again."
      },
      {
        "Time_Start": 1483.32,
        "Time_End": 1491.12,
        "Text": " But remember that our goal here is to decrypt the cache data file by finding the PIN."
      },
      {
        "Time_Start": 1491.1200000000001,
        "Time_End": 1496.0800000000002,
        "Text": " So without any TPM, it's a quite complex process."
      },
      {
        "Time_Start": 1496.0800000000002,
        "Time_End": 1502.24,
        "Text": " It first starts with a first RSA private key, which needs to be constructed from an encrypted"
      },
      {
        "Time_Start": 1502.24,
        "Time_End": 1507.5600000000002,
        "Text": " blob, and this blob is called a bcrypt RSA private key blob."
      },
      {
        "Time_Start": 1507.5600000000002,
        "Time_End": 1514.92,
        "Text": " And thanks to this first RSA private key, we'll be able to decrypt the 15.dat file to"
      },
      {
        "Time_Start": 1514.92,
        "Time_End": 1517.2,
        "Text": " obtain a decrypt PIN."
      },
      {
        "Time_Start": 1517.2,
        "Time_End": 1527.72,
        "Text": " And this decrypt PIN will be used to construct a second RSA private key from another cryptobob."
      },
      {
        "Time_Start": 1527.72,
        "Time_End": 1534.6000000000001,
        "Text": " All the different cryptobobs are stored inside this folder, and again, even if there is some"
      },
      {
        "Time_Start": 1534.6000000000001,
        "Time_End": 1538.68,
        "Text": " encrypted data inside, we'll be able to find clear text metadata inside it."
      },
      {
        "Time_Start": 1538.68,
        "Time_End": 1545.56,
        "Text": " So as you can see here, we can find the GUID at the beginning."
      },
      {
        "Time_Start": 1545.56,
        "Time_End": 1553.8,
        "Text": " So the first blob linked with NGC is encrypted using DPAPI mechanism after multiple steps,"
      },
      {
        "Time_Start": 1553.8,
        "Time_End": 1559.8,
        "Text": " which involves the system master keys, the GUID of the protector, system and security"
      },
      {
        "Time_Start": 1559.8,
        "Time_End": 1564.76,
        "Text": " hives, the PIN, and some static entropy strings."
      },
      {
        "Time_Start": 1564.76,
        "Time_End": 1573.2,
        "Text": " And after being able to decrypt this bcrypt RSA private key blob, we will be able to construct"
      },
      {
        "Time_Start": 1573.2,
        "Time_End": 1579.52,
        "Text": " the first RSA private key, because inside it contains the modulus, the exponent, prime"
      },
      {
        "Time_Start": 1579.52,
        "Time_End": 1580.52,
        "Text": " 1 and 2."
      },
      {
        "Time_Start": 1580.52,
        "Time_End": 1585.24,
        "Text": " If you are interested in this process, again, on the blog of TJonet, you will find all the"
      },
      {
        "Time_Start": 1585.24,
        "Time_End": 1592.96,
        "Text": " information about the static entropy strings, et cetera, et cetera."
      },
      {
        "Time_Start": 1592.96,
        "Time_End": 1599.6000000000001,
        "Text": " Then thanks to this first private key, we are able to decrypt the 15.dat file, which"
      },
      {
        "Time_Start": 1599.6000000000001,
        "Time_End": 1607.1200000000001,
        "Text": " contains three different PINs of 32 bits, and the decrypt PIN, which will be interested"
      },
      {
        "Time_Start": 1607.1200000000001,
        "Time_End": 1611.8000000000002,
        "Text": " for us, is the second one."
      },
      {
        "Time_Start": 1611.8000000000002,
        "Time_End": 1621.8000000000002,
        "Text": " And we'll use the exact same method to decrypt, to obtain a second RSA private key by using"
      },
      {
        "Time_Start": 1621.8000000000002,
        "Time_End": 1627.4,
        "Text": " a first crypto blob key, using the name of the item for Windows Zero for Business, which"
      },
      {
        "Time_Start": 1627.4,
        "Time_End": 1628.92,
        "Text": " is this one."
      },
      {
        "Time_Start": 1628.92,
        "Time_End": 1635.0800000000002,
        "Text": " And we will be replacing the PIN with the decrypt PIN."
      },
      {
        "Time_Start": 1635.0800000000002,
        "Time_End": 1643.6000000000001,
        "Text": " So if we try to sum up all the things that I said just before, we want to decrypt a first"
      },
      {
        "Time_Start": 1643.6000000000001,
        "Time_End": 1645.3200000000002,
        "Text": " crypto blob here."
      },
      {
        "Time_Start": 1645.3200000000002,
        "Time_End": 1651.0800000000002,
        "Text": " To decrypt this crypto blob, we'll need the PIN, the system and security hives, the DPAPI"
      },
      {
        "Time_Start": 1651.0800000000002,
        "Time_End": 1658.6000000000001,
        "Text": " master key, and thanks to this blob, we will be able to construct a first RSA private key."
      },
      {
        "Time_Start": 1658.6000000000001,
        "Time_End": 1663.3600000000001,
        "Text": " Thanks to this first RSA private key, we'll be able to obtain the decrypt PIN."
      },
      {
        "Time_Start": 1663.3600000000001,
        "Time_End": 1670.6000000000001,
        "Text": " And again, for the same process, we'll be using the decrypt PIN and another crypto blob"
      },
      {
        "Time_Start": 1670.6000000000001,
        "Time_End": 1676.72,
        "Text": " to obtain all the information you need to construct a second RSA private key."
      },
      {
        "Time_Start": 1676.72,
        "Time_End": 1683.92,
        "Text": " Okay, thank you, Theo."
      },
      {
        "Time_Start": 1683.92,
        "Time_End": 1689.04,
        "Text": " So now that we have the second private key, let's try to see how it's used for decrypting"
      },
      {
        "Time_Start": 1689.04,
        "Time_End": 1694.68,
        "Text": " the PRT file as well as the DPAPI code key when using a PIN."
      },
      {
        "Time_Start": 1694.68,
        "Time_End": 1702.0800000000002,
        "Text": " So we will use this second RSA private key, and we will see that it's used to encrypt"
      },
      {
        "Time_Start": 1702.0800000000002,
        "Time_End": 1705.3200000000002,
        "Text": " an iOS key using RSA."
      },
      {
        "Time_Start": 1705.3200000000002,
        "Time_End": 1711.48,
        "Text": " So basically, the result of the RSA encryption is an encrypted iOS key, so it's stored as"
      },
      {
        "Time_Start": 1711.48,
        "Time_End": 1713.72,
        "Text": " a blob of 0x100 bytes."
      },
      {
        "Time_Start": 1713.72,
        "Time_End": 1714.72,
        "Text": " Why?"
      },
      {
        "Time_Start": 1714.72,
        "Time_End": 1723.3600000000001,
        "Text": " Because this is simply the size of a big integer of 2048 bits, which is the result of the RSA"
      },
      {
        "Time_Start": 1723.3600000000001,
        "Time_End": 1729.96,
        "Text": " encryption using PKCS1.5 padding, because simply when you want to do an encrypt operation"
      },
      {
        "Time_Start": 1729.96,
        "Time_End": 1739.24,
        "Text": " with RSA, you need to pad the input with some stuff so that it matches the size of the key."
      },
      {
        "Time_Start": 1740.0,
        "Time_End": 1743.52,
        "Text": " Well, let's go back to our cache data file again."
      },
      {
        "Time_Start": 1743.52,
        "Time_End": 1746.16,
        "Text": " So this is the crypto blob when using a PIN."
      },
      {
        "Time_Start": 1746.16,
        "Time_End": 1751.8,
        "Text": " We saw earlier that here we have the public key which matches the RSA private key, and"
      },
      {
        "Time_Start": 1751.8,
        "Time_End": 1756.08,
        "Text": " this is the second RSA private key that Theo told us just before."
      },
      {
        "Time_Start": 1756.08,
        "Time_End": 1759.48,
        "Text": " So first, we will do an RSA decrypt operation."
      },
      {
        "Time_Start": 1759.48,
        "Time_End": 1765.16,
        "Text": " We will take an encrypted iOS key, which is encrypted using RSA, we will decrypt it, and"
      },
      {
        "Time_Start": 1765.16,
        "Time_End": 1770.3200000000002,
        "Text": " we will get a first iOS key."
      },
      {
        "Time_Start": 1770.3200000000002,
        "Time_End": 1774.2,
        "Text": " Then we will use this iOS key to decrypt a second iOS key."
      },
      {
        "Time_Start": 1774.2,
        "Time_End": 1779.8400000000001,
        "Text": " So to do that, we'll do an iOS CBC decrypt, and we will use a custom IV, which is stored"
      },
      {
        "Time_Start": 1779.8400000000001,
        "Time_End": 1787.28,
        "Text": " in the cache data file, and the input of this operation is an encrypted iOS key, and it's"
      },
      {
        "Time_Start": 1787.28,
        "Time_End": 1790.2,
        "Text": " also stored in the cache data file."
      },
      {
        "Time_Start": 1790.2,
        "Time_End": 1792.1200000000001,
        "Text": " So this is this operation."
      },
      {
        "Time_Start": 1792.1200000000001,
        "Time_End": 1795.68,
        "Text": " So here we have the iOS key, which is decrypted."
      },
      {
        "Time_Start": 1795.68,
        "Time_End": 1800.64,
        "Text": " It was this one before, so now it's decrypted here, so we use it as a key for the iOS decrypt"
      },
      {
        "Time_Start": 1800.64,
        "Time_End": 1801.64,
        "Text": " operation."
      },
      {
        "Time_Start": 1801.64,
        "Time_End": 1805.44,
        "Text": " Here we have the input, which is an encrypted iOS key."
      },
      {
        "Time_Start": 1805.44,
        "Time_End": 1809.8400000000001,
        "Text": " For this iOS decrypt operation, we'll use an IV, which is also stored in the cache data"
      },
      {
        "Time_Start": 1809.8400000000001,
        "Time_End": 1816.42,
        "Text": " file, and we will get a second iOS key, which is now decrypted."
      },
      {
        "Time_Start": 1816.42,
        "Time_End": 1819.72,
        "Text": " So it's almost finished."
      },
      {
        "Time_Start": 1819.72,
        "Time_End": 1826.56,
        "Text": " Now we have this final iOS key, and we can use it to decrypt the PRT file, as well as"
      },
      {
        "Time_Start": 1826.56,
        "Time_End": 1832.56,
        "Text": " the DPA PR equate key, using also an iOS CBC operation decrypt with another custom IV,"
      },
      {
        "Time_Start": 1832.56,
        "Time_End": 1835.24,
        "Text": " which is in the cache data file."
      },
      {
        "Time_Start": 1835.24,
        "Time_End": 1837.82,
        "Text": " So there it is."
      },
      {
        "Time_Start": 1837.82,
        "Time_End": 1839.88,
        "Text": " We have our final iOS key."
      },
      {
        "Time_Start": 1839.88,
        "Time_End": 1842.84,
        "Text": " We use it in an iOS CBC decrypt operation."
      },
      {
        "Time_Start": 1842.84,
        "Time_End": 1846.1200000000001,
        "Text": " We'll use another custom IV, which is stored in the cache data file."
      },
      {
        "Time_Start": 1846.44,
        "Time_End": 1851.68,
        "Text": " We'll give as an input to the decrypt operation the encrypted API PR equate key, as well as"
      },
      {
        "Time_Start": 1851.68,
        "Time_End": 1857.0400000000002,
        "Text": " the encrypted PRT blob, and finally we can get the DPA PR equate key, as well as the"
      },
      {
        "Time_Start": 1857.0400000000002,
        "Time_End": 1859.8400000000001,
        "Text": " PRT file."
      },
      {
        "Time_Start": 1859.8400000000001,
        "Time_End": 1867.72,
        "Text": " So this was the part related to PRT and DPA PR equate key decryption using a PIN when"
      },
      {
        "Time_Start": 1867.72,
        "Time_End": 1869.92,
        "Text": " there is no TPM."
      },
      {
        "Time_Start": 1869.92,
        "Time_End": 1876.88,
        "Text": " So now let's briefly talk about when there is a TPM."
      },
      {
        "Time_Start": 1876.88,
        "Time_End": 1881.72,
        "Text": " So using a TPM, the format of the cache data cryptoblob actually is the same."
      },
      {
        "Time_Start": 1881.72,
        "Time_End": 1889.0800000000002,
        "Text": " The main difference will reside in the RSA private key, the one that Theo told you about."
      },
      {
        "Time_Start": 1889.0800000000002,
        "Time_End": 1895.64,
        "Text": " So this time, with a TPM, the private key will be stored directly on the TPM, and the"
      },
      {
        "Time_Start": 1895.64,
        "Time_End": 1897.6200000000001,
        "Text": " PIN will be used to access it."
      },
      {
        "Time_Start": 1897.6200000000001,
        "Time_End": 1899.98,
        "Text": " So brute force will be really hard."
      },
      {
        "Time_Start": 1899.98,
        "Time_End": 1903.6200000000001,
        "Text": " It will be limited because of the TPM."
      },
      {
        "Time_Start": 1903.6200000000001,
        "Time_End": 1913.46,
        "Text": " So nowadays, there are two main implementations of TPM, TPM 1.2, and with TPM 1.2, the connection"
      },
      {
        "Time_Start": 1913.46,
        "Time_End": 1919.6200000000001,
        "Text": " is implemented by the manufacturer, so all chips are not equal regarding the mechanism"
      },
      {
        "Time_Start": 1919.6200000000001,
        "Time_End": 1921.1000000000001,
        "Text": " in place."
      },
      {
        "Time_Start": 1921.1000000000001,
        "Time_End": 1929.0600000000002,
        "Text": " But if there is a TPM 2.0, Windows is able to configure it to lock after 32 authorization"
      },
      {
        "Time_Start": 1929.0600000000002,
        "Time_End": 1935.16,
        "Text": " failures, and it will forget one authorization failure after 10 minutes."
      },
      {
        "Time_Start": 1935.16,
        "Time_End": 1945.42,
        "Text": " So if you have a TPM, it will be way harder to brute force the PIN, and then to get the"
      },
      {
        "Time_Start": 1945.42,
        "Time_End": 1951.0600000000002,
        "Text": " DPA PR equate key, as well as the PRT file."
      },
      {
        "Time_Start": 1951.06,
        "Time_End": 1952.62,
        "Text": " Last word about the TPM."
      },
      {
        "Time_Start": 1952.62,
        "Time_End": 1956.78,
        "Text": " So on the Windows system, you can use the get-tpm snippet."
      },
      {
        "Time_Start": 1956.78,
        "Time_End": 1963.6599999999999,
        "Text": " It will tell you if there is a TPM, if it's enabled, which manufacturer is it, and so"
      },
      {
        "Time_Start": 1963.6599999999999,
        "Time_End": 1965.22,
        "Text": " on, is it activated."
      },
      {
        "Time_Start": 1965.22,
        "Time_End": 1970.6599999999999,
        "Text": " You can also use the TPM tool with the get-device information, which will give you the version"
      },
      {
        "Time_Start": 1970.6599999999999,
        "Time_End": 1973.62,
        "Text": " of the TPM."
      },
      {
        "Time_Start": 1973.62,
        "Time_End": 1980.1799999999998,
        "Text": " So now let's have a quick demo of the toolset that we released in order to decrypt the PRT"
      },
      {
        "Time_Start": 1980.18,
        "Time_End": 1982.18,
        "Text": " as well as the DPA PR equate key."
      },
      {
        "Time_Start": 2000.18,
        "Time_End": 2007.6200000000001,
        "Text": " So I just created a quick batch script to extract all the information needed."
      },
      {
        "Time_Start": 2007.6200000000001,
        "Time_End": 2016.42,
        "Text": " So as you can see here, we extract the cache data file here, then all the NGC folders,"
      },
      {
        "Time_Start": 2016.42,
        "Time_End": 2024.22,
        "Text": " the different system and security hives, the crypto keys folder, and also the master keys."
      },
      {
        "Time_Start": 2024.22,
        "Time_End": 2034.3400000000001,
        "Text": " I run this script as a system to be able to extract the content of the NGC folder."
      },
      {
        "Time_Start": 2034.3400000000001,
        "Time_End": 2038.46,
        "Text": " And then you can see that all the data are here."
      },
      {
        "Time_Start": 2038.46,
        "Time_End": 2053.1400000000003,
        "Text": " So I will just extract all the data on my host."
      },
      {
        "Time_Start": 2053.1400000000003,
        "Time_End": 2059.0,
        "Text": " And then I just copy the folder here."
      },
      {
        "Time_Start": 2059.0,
        "Time_End": 2069.44,
        "Text": " So here it's done."
      },
      {
        "Time_Start": 2069.44,
        "Time_End": 2083.72,
        "Text": " So I just start by dumping the cache data format file."
      },
      {
        "Time_Start": 2083.72,
        "Time_End": 2087.84,
        "Text": " I think I have one folder."
      },
      {
        "Time_Start": 2087.84,
        "Time_End": 2098.44,
        "Text": " I forgot to unzip the folder, excuse me."
      },
      {
        "Time_Start": 2098.44,
        "Time_End": 2110.84,
        "Text": " In progress."
      },
      {
        "Time_Start": 2110.84,
        "Time_End": 2123.84,
        "Text": " Again."
      },
      {
        "Time_Start": 2123.84,
        "Time_End": 2146.06,
        "Text": " So here, as you can see, demo effect."
      },
      {
        "Time_Start": 2146.06,
        "Time_End": 2152.6400000000003,
        "Text": " We have two different nodes, the one for the password here and the one for the pin here."
      },
      {
        "Time_Start": 2152.64,
        "Time_End": 2158.52,
        "Text": " So we know that there is no TPM, so we'll be able to brute force the password and the"
      },
      {
        "Time_Start": 2158.52,
        "Time_End": 2159.52,
        "Text": " pin."
      },
      {
        "Time_Start": 2159.52,
        "Time_End": 2163.7999999999997,
        "Text": " So we just start by brute forcing the password."
      },
      {
        "Time_Start": 2163.7999999999997,
        "Time_End": 2176.8399999999997,
        "Text": " I think it will be okay now."
      },
      {
        "Time_Start": 2176.84,
        "Time_End": 2186.56,
        "Text": " So I just specified to the script that I want to brute force the password, the cache data"
      },
      {
        "Time_Start": 2186.56,
        "Time_End": 2191.0,
        "Text": " file, and then a dictionary containing the passwords."
      },
      {
        "Time_Start": 2191.0,
        "Time_End": 2197.04,
        "Text": " And here, you can see that here we were able to brute force the password."
      },
      {
        "Time_Start": 2197.04,
        "Time_End": 2201.6400000000003,
        "Text": " So we are able to decrypt the PRT and all its information."
      },
      {
        "Time_Start": 2201.64,
        "Time_End": 2207.8399999999997,
        "Text": " And we are also able to obtain the derived trick."
      },
      {
        "Time_Start": 2207.8399999999997,
        "Time_End": 2217.72,
        "Text": " And now, for the pin, it's a bit more complicated."
      },
      {
        "Time_Start": 2217.72,
        "Time_End": 2223.96,
        "Text": " We have to specify all these arguments, the cache data file, a dictionary which contains"
      },
      {
        "Time_Start": 2223.96,
        "Time_End": 2230.44,
        "Text": " all the pins, the NGC folder, the master keys, the system and security hives, and"
      },
      {
        "Time_Start": 2230.44,
        "Time_End": 2236.92,
        "Text": " the crypto keys."
      },
      {
        "Time_Start": 2236.92,
        "Time_End": 2246.16,
        "Text": " It starts by printing all the different information about the NGC folder, the different providers,"
      },
      {
        "Time_Start": 2246.16,
        "Time_End": 2247.2400000000002,
        "Text": " and the items."
      },
      {
        "Time_Start": 2247.2400000000002,
        "Time_End": 2253.08,
        "Text": " So as we can see here, this item is related to Windows Zero for Business, and it tries"
      },
      {
        "Time_Start": 2253.2,
        "Time_End": 2259.88,
        "Text": " all the different pins here, and then we can see that we were able to find a good pin,"
      },
      {
        "Time_Start": 2259.88,
        "Time_End": 2285.96,
        "Text": " and we find the PRT here, and finally, the crack."
      },
      {
        "Time_Start": 2285.96,
        "Time_End": 2300.16,
        "Text": " The script is available on our GitHub, and of course, PRs are welcome."
      },
      {
        "Time_Start": 2300.16,
        "Time_End": 2304.4,
        "Text": " Just a little word to finish regarding dpAPI."
      },
      {
        "Time_Start": 2304.4,
        "Time_End": 2309.2400000000002,
        "Text": " First of all, we were just trying to gain access to the PRT because that's what we wanted"
      },
      {
        "Time_Start": 2309.2400000000002,
        "Time_End": 2312.52,
        "Text": " to do, and access EntroiD."
      },
      {
        "Time_Start": 2313.24,
        "Time_End": 2321.0,
        "Text": " Nevertheless, by understanding the format of the cache data file, we found the dpAPI"
      },
      {
        "Time_Start": 2321.0,
        "Time_End": 2322.0,
        "Text": " crate key."
      },
      {
        "Time_Start": 2322.0,
        "Time_End": 2323.7599999999998,
        "Text": " So what is it?"
      },
      {
        "Time_Start": 2323.7599999999998,
        "Time_End": 2330.72,
        "Text": " Just a quick word, I won't give you a lecture about dpAPI, but dpAPI is just an API of Windows"
      },
      {
        "Time_Start": 2330.72,
        "Time_End": 2338.6,
        "Text": " in order to protect data, and protect it by encrypting it."
      },
      {
        "Time_Start": 2338.6,
        "Time_End": 2343.92,
        "Text": " The main example that we often use is the Google Chrome password database."
      },
      {
        "Time_Start": 2343.92,
        "Time_End": 2345.92,
        "Text": " So it relies on the master key."
      },
      {
        "Time_Start": 2345.92,
        "Time_End": 2351.64,
        "Text": " The master key is not a key per se, it's just a strong secret, and this strong secret is"
      },
      {
        "Time_Start": 2351.64,
        "Time_End": 2356.12,
        "Text": " then used to generate a session key, which is the real key used for the encryption."
      },
      {
        "Time_Start": 2356.12,
        "Time_End": 2366.16,
        "Text": " So the master key was derived from the password users, so for local users, it was derived"
      },
      {
        "Time_Start": 2366.16,
        "Time_End": 2368.2,
        "Text": " from the SHA-1 of the password."
      },
      {
        "Time_Start": 2368.2000000000003,
        "Time_End": 2372.76,
        "Text": " That's why when we talk about Windows Hello, not the Windows Hello for Business, we saw"
      },
      {
        "Time_Start": 2372.76,
        "Time_End": 2375.4,
        "Text": " that we needed the password of the user."
      },
      {
        "Time_Start": 2375.4,
        "Time_End": 2379.7200000000003,
        "Text": " In fact, we only needed the SHA-1 of the users, but who knows."
      },
      {
        "Time_Start": 2379.7200000000003,
        "Time_End": 2386.44,
        "Text": " Regarding the domain users, it's just derived from the MTH of the users, and for the system"
      },
      {
        "Time_Start": 2386.44,
        "Time_End": 2392.4,
        "Text": " environments, they have their own master keys, it's lying on the registries, it's often used"
      },
      {
        "Time_Start": 2392.4,
        "Time_End": 2397.76,
        "Text": " for SSID, and it's used for what we saw earlier."
      },
      {
        "Time_Start": 2397.76,
        "Time_End": 2405.4,
        "Text": " So what is this DPAPI cred key, because we never saw it in there."
      },
      {
        "Time_Start": 2405.4,
        "Time_End": 2409.0800000000004,
        "Text": " Actually, Microsoft wanted to get rid of passwords."
      },
      {
        "Time_Start": 2409.0800000000004,
        "Time_End": 2415.0,
        "Text": " They implemented Windows Hello for Business in order to have asymmetrical authentication."
      },
      {
        "Time_Start": 2415.0,
        "Time_End": 2421.6400000000003,
        "Text": " So the DPI master key, the DPI cred key, does not rely on passwords, it's just something"
      },
      {
        "Time_Start": 2421.6400000000003,
        "Time_End": 2426.84,
        "Text": " that is stored on your cache data file, and can be decrypted with the PIN."
      },
      {
        "Time_Start": 2426.92,
        "Time_End": 2433.36,
        "Text": " So no, the master key is derived from the cred key by using an HMAC SHA-1 of the cred"
      },
      {
        "Time_Start": 2433.36,
        "Time_End": 2435.88,
        "Text": " key and the user SID."
      },
      {
        "Time_Start": 2435.88,
        "Time_End": 2445.1600000000003,
        "Text": " So I think there is a lot to do now with this cred key, and it could be interesting to know"
      },
      {
        "Time_Start": 2445.1600000000003,
        "Time_End": 2447.7200000000003,
        "Text": " where that could lead us."
      },
      {
        "Time_Start": 2447.7200000000003,
        "Time_End": 2453.2400000000002,
        "Text": " We would like to thank our colleague, Lexa, we've done a pull request on the tool in order"
      },
      {
        "Time_Start": 2453.36,
        "Time_End": 2457.84,
        "Text": " to integrate this new master key type."
      },
      {
        "Time_Start": 2457.84,
        "Time_End": 2464.28,
        "Text": " So in conclusion, what is possible to do with a cache data file?"
      },
      {
        "Time_Start": 2464.28,
        "Time_End": 2473.5200000000004,
        "Text": " So if the users already used the password on this computer on a full Entry ID environment"
      },
      {
        "Time_Start": 2473.5200000000004,
        "Time_End": 2479.48,
        "Text": " within the last 14 days, you will be able to brute force the cache data."
      },
      {
        "Time_Start": 2479.48,
        "Time_End": 2486.48,
        "Text": " Of course, it's a PBKTF2 10,000 round with the IIS, and we still need to implement it"
      },
      {
        "Time_Start": 2486.48,
        "Time_End": 2490.2400000000002,
        "Text": " in John the Reaper, but it's a work in progress."
      },
      {
        "Time_Start": 2490.2400000000002,
        "Time_End": 2494.28,
        "Text": " So you will be able to do an offline brute force."
      },
      {
        "Time_Start": 2494.28,
        "Time_End": 2501.52,
        "Text": " And after that, you could use the PRT to access the Entry ID, with lots of tools to do that."
      },
      {
        "Time_Start": 2501.52,
        "Time_End": 2503.28,
        "Text": " Broad Recon is one of them."
      },
      {
        "Time_Start": 2503.32,
        "Time_End": 2510.0400000000004,
        "Text": " And if you are using a PIN, if your TPM is enabled, sorry to talk to you about it, but"
      },
      {
        "Time_Start": 2510.0400000000004,
        "Time_End": 2514.0800000000004,
        "Text": " for now on, we don't see anything that you can do."
      },
      {
        "Time_Start": 2514.0800000000004,
        "Time_End": 2515.7200000000003,
        "Text": " We hope someday."
      },
      {
        "Time_Start": 2515.7200000000003,
        "Time_End": 2523.8,
        "Text": " But if TPM is not enabled for, I don't know, computers that are not TPM, of course, virtual"
      },
      {
        "Time_Start": 2523.8,
        "Time_End": 2529.7200000000003,
        "Text": " computers, you will be able to retry the PRT, you will be able to retry the DPIPA cred key."
      },
      {
        "Time_Start": 2529.7200000000003,
        "Time_End": 2533.5200000000004,
        "Text": " And then after that, the same thing applies, since you have the PRT file."
      },
      {
        "Time_Start": 2533.5200000000004,
        "Time_End": 2538.4,
        "Text": " So in conclusion, we still have more research to do to understand how it works when you"
      },
      {
        "Time_Start": 2538.4,
        "Time_End": 2541.5600000000004,
        "Text": " are using other mean of authentication."
      },
      {
        "Time_Start": 2541.5600000000004,
        "Time_End": 2546.76,
        "Text": " For instance, smart card, if there is another node in the cache data file, do we need to"
      },
      {
        "Time_Start": 2546.76,
        "Time_End": 2550.76,
        "Text": " do some crypto crazy like that again?"
      },
      {
        "Time_Start": 2550.76,
        "Time_End": 2556.0400000000004,
        "Text": " We know that the cache data is really a goldmine, there is a lot of information in there."
      },
      {
        "Time_Start": 2556.04,
        "Time_End": 2561.72,
        "Text": " You will find stuff such as DPIPI, PRT and everything that you want."
      },
      {
        "Time_Start": 2561.72,
        "Time_End": 2568.56,
        "Text": " The bad news here is that TMP enhance drastically the security for credential and asymmetrical"
      },
      {
        "Time_Start": 2568.56,
        "Time_End": 2577.44,
        "Text": " authentication with the TPM will certainly lead to the end of cache data being a goldmine"
      },
      {
        "Time_Start": 2577.44,
        "Time_End": 2581.52,
        "Text": " for penetration tests."
      },
      {
        "Time_Start": 2581.52,
        "Time_End": 2586.4,
        "Text": " We would like to thank a lot of people, because a lot of work has been done on everything"
      },
      {
        "Time_Start": 2586.4,
        "Time_End": 2587.4,
        "Text": " like that."
      },
      {
        "Time_Start": 2587.4,
        "Time_End": 2592.08,
        "Text": " So there is a few in the room here, we had a lot of reference for our talk."
      },
      {
        "Time_Start": 2592.08,
        "Time_End": 2596.04,
        "Text": " I will let you have a look at our article on the blog post of Synactive if you want"
      },
      {
        "Time_Start": 2596.04,
        "Time_End": 2597.04,
        "Text": " to."
      },
      {
        "Time_Start": 2597.04,
        "Time_End": 2601.88,
        "Text": " And we've been a bit quick, but if you have any questions, please."
      },
      {
        "Time_Start": 2612.52,
        "Time_End": 2619.64,
        "Text": " Thanks, first of all, congrats to the mind-blowing research, like, great."
      },
      {
        "Time_Start": 2619.64,
        "Time_End": 2625.08,
        "Text": " I always wanted to meet the person at Microsoft who designed DPAPI and all that crazy shit"
      },
      {
        "Time_Start": 2625.08,
        "Time_End": 2627.44,
        "Text": " which you reverse-engineered."
      },
      {
        "Time_Start": 2627.44,
        "Time_End": 2635.84,
        "Text": " But now back to my question regarding the DPAPI CRET key, have you played a little bit"
      },
      {
        "Time_Start": 2635.84,
        "Time_End": 2636.84,
        "Text": " more with it?"
      },
      {
        "Time_Start": 2637.2000000000003,
        "Time_End": 2645.48,
        "Text": " I did some experiments of my own with it, and I came to a conclusion that it is device-bound,"
      },
      {
        "Time_Start": 2645.48,
        "Time_End": 2652.96,
        "Text": " so each device gets its own CRET key, and it also depends on time."
      },
      {
        "Time_Start": 2652.96,
        "Time_End": 2657.96,
        "Text": " So if you ask EntroID in a month or in two months, you get a different CRET key on the"
      },
      {
        "Time_Start": 2657.96,
        "Time_End": 2659.76,
        "Text": " same computer."
      },
      {
        "Time_Start": 2659.76,
        "Time_End": 2667.84,
        "Text": " And there is a key in EntroID, in an attribute which used to be a searchable device key attribute,"
      },
      {
        "Time_Start": 2667.84,
        "Time_End": 2672.5200000000004,
        "Text": " but Microsoft moved this data to a different EntroID attribute."
      },
      {
        "Time_Start": 2672.5200000000004,
        "Time_End": 2677.6800000000003,
        "Text": " But it used to be there, readable by all users, no longer the case."
      },
      {
        "Time_Start": 2677.6800000000003,
        "Time_End": 2683.28,
        "Text": " But my question actually is, have you figured out how Microsoft derives the CRET key from"
      },
      {
        "Time_Start": 2683.28,
        "Time_End": 2685.76,
        "Text": " the data stored in EntroID?"
      },
      {
        "Time_Start": 2685.76,
        "Time_End": 2688.6400000000003,
        "Text": " Yeah, thanks."
      },
      {
        "Time_Start": 2688.64,
        "Time_End": 2691.56,
        "Text": " So actually, no, I'm sorry."
      },
      {
        "Time_Start": 2691.56,
        "Time_End": 2697.7999999999997,
        "Text": " It was really just the burner thing, because we were looking at the PRT and we found the"
      },
      {
        "Time_Start": 2697.7999999999997,
        "Time_End": 2703.3199999999997,
        "Text": " CRET key here, so we're just trying to understand a little bit what it's used for and why is"
      },
      {
        "Time_Start": 2703.3199999999997,
        "Time_End": 2704.48,
        "Text": " it here."
      },
      {
        "Time_Start": 2704.48,
        "Time_End": 2709.68,
        "Text": " So no, we didn't have a look further, but yeah, that could be really interesting research"
      },
      {
        "Time_Start": 2709.68,
        "Time_End": 2710.68,
        "Text": " to do, yeah."
      },
      {
        "Time_Start": 2710.68,
        "Time_End": 2711.68,
        "Text": " Thank you."
      },
      {
        "Time_Start": 2711.68,
        "Time_End": 2716.68,
        "Text": " Thank you very much."
      },
      {
        "Time_Start": 2718.64,
        "Time_End": 2721.68,
        "Text": " Thank you."
      }
    ]
  }
}