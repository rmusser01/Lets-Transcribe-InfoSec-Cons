**Introduction**
- Dr. Nestor Sinema is a principal identity security researcher at Microsoft's Threat Intelligence Center.
- The talk will focus on token-based authentication attacks and their underlying concepts.
- The discussion will be product-agnostic, with demos using the Microsoft Cloud Stack due to the speaker's background.

**Authentication Basics**
- Client-server interaction: the client requests access to a resource, and the server responds with a message indicating whether access is authorized.
- Authentication schemes: the client provides credentials (e.g., username and password) to the server, which then grants or denies access.
- Session cookies: after initial authentication, they are often used to maintain the session without repeatedly requesting credentials.

**Key Concepts**
- **User**: consumes services.
- **Service Provider**: provides services.
- **Identity Provider (IDP)**: provides identity and access management.

**Past and Present Authentication**
- **Silo Model**: users authenticate separately for each service, leading to multiple usernames and passwords. Service providers implement their own IDPs, potentially compromising password security.
- **Federated Model**: users authenticate with a separate IDP (e.g., Microsoft, Google), then use tokens to access services. This decouples identity from service providers, improving security.
- Trust is essential: users trust the IDP, and service providers trust the IDP to authenticate users securely.
- Tokens are central: they identify the user without sending passwords to the service provider.

**Technical Details**
- **Kerberos Authentication Flow**: users provide proof of identity to the IDP (domain controller) and receive a ticket-granting ticket. They then request a service ticket from the IDP and use it to access the service.
- **SAML (Security Assertion Markup Language)**: a token format, not a protocol. The user authenticates with the IDP and receives a SAML token, which they use to access the service provider. SAML includes attribute statements (user properties) and authentication statements (authentication method).
- **OAuth**: a more recent protocol using JSON Web Signatures (JWS) or JSON Web Tokens (JWT). The user provides credentials to the IDP, receives an access token and refresh token, and uses them to access the service.
- **Enter ID Hybrid Authentication Flow**: a conceptual flow where the user authenticates with an IDP (e.g., ADFS, Okta, Ping), receives a SAML or JWT token, and uses it to obtain an access token and refresh token from the service provider.

**Token-Based Authentication Attacks**
- Bearer tokens: anyone possessing the token can use it without providing additional proof of identity.
- Protection is key: bearer tokens must be safeguarded during storage and transport to prevent misuse.
- Attack graph: the speaker presents a graph showing the progression from stealing secrets to forging and using tokens.
- MITRE ATT&CK techniques: the attacks map to specific techniques, including unsecured private keys (T1552.004) and forged web credentials (T1556.002).

**Stealing Tokens vs. Secrets**
- Stealing tokens: requires access to user computers or devices, servers running IDPs, or cloud-based environments. Detection relies on logs from user endpoints and service providers.
- Stealing secrets: involves compromising IDP secrets, such as service secrets or certificates. Detection can only occur on the IDP side.
- Secrets are harder to steal but offer broader access.

**Demos**
- Stealing and using tokens: the speaker demonstrates how to steal and use access tokens, refresh tokens, and Kerberos tickets.
- Forging tokens: the speaker shows how to forge Kerberos tickets and SAML tokens using stolen secrets.

**Detecting and Preventing Attacks**
- Detection sources: IDP for secret theft, user endpoints for token theft, and service provider for token usage.
- Log correlation: correlating logs from IDP (logon events) and service provider (usage logs) can identify unauthorized token usage.
- Cloud-only identity: sign-in logs and audit logs are essential for detecting unauthorized access.
- Custom applications: IP address comparison and ID token verification can detect stolen tokens.
- Third-party apps: sign-in logs and unified audit logs help detect unauthorized access.
- Microsoft's response: recycled keys and improved security measures following a breach involving stolen keys.

**Prevention Strategies**
- Harden components storing secrets, use custom certificates, and store private keys in HSMs.
- Adopt a zero-trust approach for user endpoints to prevent token theft.
- Verify IP addresses and user agents in web application logs to detect stolen tokens.

**Summary**
- Token theft provides temporary access as a specific user, while secret theft enables broader and more persistent access.
- Detecting and preventing attacks requires collaboration between admins and developers, with a focus on log analysis and system hardening.