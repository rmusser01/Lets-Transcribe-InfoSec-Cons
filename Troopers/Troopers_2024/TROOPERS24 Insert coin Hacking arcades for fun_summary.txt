**Introduction**
- Speaker is from Cordoba, Argentina, and works in application security and insurance.
- Has a passion for sneakers and clothing design.
- Talk will cover a system they discovered in an arcade in Brazil.

**System Discovery**
- Conducted a Google search for the company name on the arcade car.
- Found a PHP application running on Drupal with an old, vulnerable version of PHP.
- Used a subdomain scanner to discover a more interesting subdomain related to checking salary and charging money to the arcade car.
- This subdomain had a middleware that prevented exploitation.
- Discovered the name of the Argentinian company providing the system and found that they had over 2,000 installations worldwide.

**API Exploration**
- Found documentation for API version 2, which required an API key and secret.
- Removing the version number from the path allowed access without any authentication.
- All endpoints in API version 1 could be accessed without authentication, and data could be retrieved or modified.

**IDOS and Authorization**
- There was no validation for user IDs, allowing access to any arcade car or customer information.
- Customer data included address, phone number, email, and last movement.
- Wrote a script to find arcade cars and customers with money in their accounts.

**Mobile Application**
- Searched for the mobile application in the app store but couldn't find it.
- Downloaded the APK file and decompiled it to access the code.
- Found API keys, secrets, booking URLs, and account codes.
- Discovered that all applications had the same structure, and by consuming the API directly, could access data without a token or account code.
- Found an interesting endpoint for crediting money to an arcade car, which required a token.
- Could generate tokens using the API key and secret.
- There was an endpoint for online recharges, which could be automated by setting the "deliver" parameter to true.

**Email Account Takeover**
- Found an endpoint for updating customer emails without any validation or token.
- Demonstrated how to change a customer's email and then request a password reset to gain access to their account.

**Risk Conditions**
- There was a secure code for the lab, but it was not properly validated.
- Wrote a Python script to send random posts and was able to generate rewards and tickets.
- Could also generate money bonuses, but didn't attempt this due to legal concerns.

**Booking Portal**
- There was a booking portal with exposed data, including logs, store data, pictures, and APN ports.
- Used a Python script to find interesting files, such as invoices from Argentina with customer data.
- The booking portal also allowed access to all reservations without any authentication.
- Negative tips could be set, and customer data could be accessed and modified.

**Service Discovery**
- Used Shodan to discover additional services and data.
- Found exposed user names, passwords, emails, application keys, and secrets in random videos.
- Discovered network maps and API endpoints, including customer data and monitor access.
- Exposed admin consoles and login pages provided access to sensitive information and allowed password changes.

**NFC Cards**
- Brazilian arcade cards used default credentials and could be easily emulated using a Flipper Zero.
- The cards only contained a single number, which could be changed to emulate other cards.
- The Android application allowed access to all cards and did not validate PIN codes.
- Account takeover was possible by attaching random cards to the phone.

**Conclusions**
- Simple vulnerabilities were still prevalent in 2024, and zero-day exploits were not necessary to compromise large companies.
- Security culture and education are important to prevent and fix these types of vulnerabilities.
- Reported the vulnerabilities to the company multiple times with no response.
- Encouraged the audience to report vulnerabilities responsibly and not to be "an asshole."