**Introduction**
- Presented by Julien Terriac
- Focuses on **attacking and defending Kubernetes clusters** with **KubeHound**, an **attack graph model**

**Kubernetes Basics**
- **Kubernetes**: an open-source platform for managing and deploying containerized applications, offering scaling capabilities and high availability
- **Container**: the smallest unit in Kubernetes, providing a sandboxed environment for applications (not for security)
- **Pod**: a deployment unit containing one or more containers, designed to run on the Kubernetes platform
- **Node**: the closest to a real machine, allowing parameterization of CPU, memory, etc.; a group of nodes forms a **cluster**

**Offensive Work on Kubernetes**
- **Container Escape**: breaking boundaries to access restricted information, often due to misconfiguration
- **Kubernetes Identity**: every process in a cluster is attached to an identity (service account) with associated roles and permissions
- **Volumes**: facilitate communication between containers and nodes, acting as a potential bridge

**Problem in Space**
- Context is crucial: two container escapes with different access levels may have varying criticality
- Manual processing of vulnerabilities is time-consuming and lacks context
- Defenders think in lists, attackers think in graphsâ€”a shift in perspective is needed

**Goal of KubeHound**
- Shift from a list approach to a **graph approach** to provide valuable security posture KPIs
- Measure security posture over time and identify exploitable internet-facing resources

**Demo of KubeHound**
- Live demo of KubeHound on a laptop, deploying a vulnerable cluster and ingesting it into KubeHound
- Demonstrates the ability to retrieve KPIs and visualize critical paths using a custom domain-specific language (DSL)

**Graph Theory**
- Graph: a complex representation of the desired output, consisting of vertices (nodes) and edges (connections)
- Kubernetes entities, critical assets, attacks, and paths are mapped to graph components
- KubeHound ensures no links between objects are missed, providing a comprehensive view of potential attack paths

**Architecture of KubeHound**
- Collector, ingester, builder, and visualization components work together to process and analyze Kubernetes data
- Airbag issues are addressed, and scalability is improved with a distributed collector and centralized ingestion

**Research and Development Process**
- Research involved gathering and organizing existing knowledge about Kubernetes security and attacks
- Sketching, design, and implementation in a graph database (Neo4j) followed, with a focus on practical application
- Unit and system tests are used to ensure the tool's reliability and performance, addressing potential regressions

**Key Takeaways and Future Plans**
- Automatic graph technology is the future of offensive security, providing a comprehensive view of vulnerabilities
- Plans include customization options, weighting edges, providing meaningful KPIs, UI improvements, and CI/CD integration
- The team is recruiting, seeking to fill a role vacated by a staff engineer who left for Oracle